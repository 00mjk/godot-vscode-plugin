{
  "classes": {
    "@GDScript": {
      "name": "@GDScript",
      "category": "Core",
      "brief_description": "Built-in GDScript functions.",
      "description": "This contains the list of built-in gdscript functions. Mostly math functions and other utilities. Everything else is expanded by objects.",
      "methods": [
        {
          "name": "Color8",
          "description": "Make a color from red, green, blue and alpha. Arguments can range from 0 to 255.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r8",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "g8",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b8",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "a8",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ColorN",
          "description": "",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "alpha",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "Remove sign (works for integer and float).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "acos",
          "description": "Arc-cosine.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "asin",
          "description": "Arc-sine.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert",
          "description": "Assert that the condition is true. If the condition is false, generates an error.",
          "return_type": "Nil",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "condition",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "atan",
          "description": "Arc-tangent.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "atan2",
          "description": "Arc-tangent that takes a 2D vector as argument, returns the full -pi to +pi range.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bytes2var",
          "description": "Decode a byte array back to a value.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ceil",
          "description": "Ceiling (rounds up to nearest integer).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clamp",
          "description": "Clamp both values to a range.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "convert",
          "description": "Convert from a type to another in the best way possible. The \"type\" parameter uses the enum TYPE_* in [@Global Scope].",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cos",
          "description": "Standard cosine function.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cosh",
          "description": "Hyperbolic cosine.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "db2linear",
          "description": "Convert from decibels to linear energy (audio).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "decimals",
          "description": "Return the amount of decimals in the floating point value.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dectime",
          "description": "Decreases time by a specified amount.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "deg2rad",
          "description": "Convert from degrees to radians.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "deg",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dict2inst",
          "description": "Convert a previously converted instances to dictionary back into an instance. Useful for deserializing.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dict",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ease",
          "description": "Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "exp",
          "description": "Exponential logarithm.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "floor",
          "description": "Floor (rounds down to nearest integer).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fmod",
          "description": "Module (remainder of x/y).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fposmod",
          "description": "Module (remainder of x/y) that wraps equally in positive and negative.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "funcref",
          "description": "Return a reference to the specified function.",
          "return_type": "FuncRef",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "funcname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hash",
          "description": "Hash the variable passed and return an integer.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var:Variant",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inst2dict",
          "description": "Convert a script class instance to a dictionary (useful for serializing).",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "inst",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_from_id",
          "description": "Get an object by its ID.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_inf",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_nan",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "lerp",
          "description": "Linear interpolates between two values by a normalized value.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "linear2db",
          "description": "Convert from linear energy to decibels (audio).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "nrg",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load",
          "description": "Load a resource from the filesystem, pass a valid path as argument.",
          "return_type": "Resource",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "log",
          "description": "Natural logarithm.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "max",
          "description": "Return the maximum of two values.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "b",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "min",
          "description": "Return the minimum of two values.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "b",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "nearest_po2",
          "description": "Return the nearest larger power of 2 for an integer.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pow",
          "description": "Power function, x elevate to y.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "preload",
          "description": "Preload a resource from the filesystem. The resource is loaded during script parsing.",
          "return_type": "Resource",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print",
          "description": "Print one or more arguments to strings in the best way possible to a console line.",
          "return_type": "Nil",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "...",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print_stack",
          "description": "Print a stack track at code location, only works when running with debugger turned on.",
          "return_type": "Nil",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "printerr",
          "description": "Print one or more arguments to strings in the best way possible to standard error line.",
          "return_type": "Nil",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "...",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "printraw",
          "description": "Print one or more arguments to strings in the best way possible to console. No newline is added at the end.",
          "return_type": "Nil",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "...",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "prints",
          "description": "Print one or more arguments to the console with a space between each argument.",
          "return_type": "Nil",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "...",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "printt",
          "description": "Print one or more arguments to the console with a tab between each argument.",
          "return_type": "Nil",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "...",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rad2deg",
          "description": "Convert from radians to degrees.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rad",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rand_range",
          "description": "Random range, any floating point value between 'from' and 'to'",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rand_seed",
          "description": "Random from seed, pass a seed and an array with both number and new seed is returned.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "seed",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "randf",
          "description": "Random value (0 to 1 float).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "randi",
          "description": "Random 32 bits value (integer). To obtain a value\tfrom 0 to N, you can use remainder, like (for random from 0 to 19): randi() % 20.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "randomize",
          "description": "Reset the seed of the random number generator with a new, different one.",
          "return_type": "Nil",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "range",
          "description": "Return an array with the given range. Range can be 1 argument N (0 to N-1), two arguments (initial, final-1) or three arguments (initial, final-1, increment).",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "...",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "round",
          "description": "Round to nearest integer.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seed",
          "description": "Set seed for the random number generator.",
          "return_type": "Nil",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "seed",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sign",
          "description": "Return sign (-1 or +1).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sin",
          "description": "Standard sine function.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sinh",
          "description": "Hyperbolic sine.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sqrt",
          "description": "Square root.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stepify",
          "description": "Snap float value to a given step.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "str",
          "description": "Convert one or more arguments to strings in the best way possible.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "...",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "str2var",
          "description": "Convert a formatted string that was returned by [method var2str] to the original value.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tan",
          "description": "Standard tangent function.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tanh",
          "description": "Hyperbolic tangent.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "type_exists",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "typeof",
          "description": "Return the internal type of the given Variant object, using the TYPE_* enum in [@Global Scope].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "var2bytes",
          "description": "Encode a variable value to a byte array.",
          "return_type": "RawArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "var2str",
          "description": "Convert a value to a formatted string that can later be parsed using [method str2var].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "weakref",
          "description": "Return a weak reference to an object.",
          "return_type": "WeakRef",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "yield",
          "description": "Stop the function execution and return the current state. Call [method GDFunctionState.resume] on the state to resume execution. This invalidates the state.\n\t\t\t\tReturns anything that was passed to the resume function call. If passed an object and a signal, the execution is resumed when the object's signal is emmited.",
          "return_type": "GDFunctionState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PI",
          "value": "3.141593",
          "description": "Constant that represents how many times the diameter of a circumference fits around its perimeter."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "@Global Scope": {
      "name": "@Global Scope",
      "category": "Core",
      "brief_description": "Global scope constants and variables.",
      "description": "Global scope constants and variables. This is all that resides in the globals, constants regarding error codes, scancodes, property hints, etc. It's not much.\n\t\tSingletons are also documented here, since they can be accessed from anywhere.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "MARGIN_LEFT",
          "value": "0",
          "description": "Left margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "MARGIN_TOP",
          "value": "1",
          "description": "Top margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "MARGIN_RIGHT",
          "value": "2",
          "description": "Right margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "MARGIN_BOTTOM",
          "value": "3",
          "description": "Bottom margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "VERTICAL",
          "value": "1",
          "description": "General vertical alignment, used usually for [Separator], [ScrollBar], [Slider], etc."
        },
        {
          "name": "HORIZONTAL",
          "value": "0",
          "description": "General horizontal alignment, used usually for [Separator], [ScrollBar], [Slider], etc."
        },
        {
          "name": "HALIGN_LEFT",
          "value": "0",
          "description": "Horizontal left alignment, usually for text-derived classes."
        },
        {
          "name": "HALIGN_CENTER",
          "value": "1",
          "description": "Horizontal center alignment, usually for text-derived classes."
        },
        {
          "name": "HALIGN_RIGHT",
          "value": "2",
          "description": "Horizontal right alignment, usually for text-derived classes."
        },
        {
          "name": "VALIGN_TOP",
          "value": "0",
          "description": "Vertical top alignment, usually for text-derived classes."
        },
        {
          "name": "VALIGN_CENTER",
          "value": "1",
          "description": "Vertical center alignment, usually for text-derived classes."
        },
        {
          "name": "VALIGN_BOTTOM",
          "value": "2",
          "description": "Vertical bottom alignment, usually for text-derived classes."
        },
        {
          "name": "SPKEY",
          "value": "16777216",
          "description": "Scancodes with this bit applied are non printable."
        },
        {
          "name": "KEY_ESCAPE",
          "value": "16777217",
          "description": "Escape Key"
        },
        {
          "name": "KEY_TAB",
          "value": "16777218",
          "description": "Tab Key"
        },
        {
          "name": "KEY_BACKTAB",
          "value": "16777219",
          "description": "Shift-Tab Key"
        },
        {
          "name": "KEY_BACKSPACE",
          "value": "16777220",
          "description": "Backspace Key"
        },
        {
          "name": "KEY_RETURN",
          "value": "16777221",
          "description": "Return Key (On Main Keyboard)"
        },
        {
          "name": "KEY_ENTER",
          "value": "16777222",
          "description": "Enter Key (On Numpad)"
        },
        {
          "name": "KEY_INSERT",
          "value": "16777223",
          "description": "Insert Key"
        },
        {
          "name": "KEY_DELETE",
          "value": "16777224",
          "description": "Delete Key"
        },
        {
          "name": "KEY_PAUSE",
          "value": "16777225",
          "description": "Pause Key"
        },
        {
          "name": "KEY_PRINT",
          "value": "16777226",
          "description": "Printscreen Key"
        },
        {
          "name": "KEY_SYSREQ",
          "value": "16777227",
          "description": ""
        },
        {
          "name": "KEY_CLEAR",
          "value": "16777228",
          "description": ""
        },
        {
          "name": "KEY_HOME",
          "value": "16777229",
          "description": "Home Key"
        },
        {
          "name": "KEY_END",
          "value": "16777230",
          "description": "End Key"
        },
        {
          "name": "KEY_LEFT",
          "value": "16777231",
          "description": "Left Arrow Key"
        },
        {
          "name": "KEY_UP",
          "value": "16777232",
          "description": "Up Arrow Key"
        },
        {
          "name": "KEY_RIGHT",
          "value": "16777233",
          "description": "Right Arrow Key"
        },
        {
          "name": "KEY_DOWN",
          "value": "16777234",
          "description": "Down Arrow Key"
        },
        {
          "name": "KEY_PAGEUP",
          "value": "16777235",
          "description": "Pageup Key"
        },
        {
          "name": "KEY_PAGEDOWN",
          "value": "16777236",
          "description": "Pagedown Key"
        },
        {
          "name": "KEY_SHIFT",
          "value": "16777237",
          "description": "Shift Key"
        },
        {
          "name": "KEY_CONTROL",
          "value": "16777238",
          "description": "Control Key"
        },
        {
          "name": "KEY_META",
          "value": "16777239",
          "description": ""
        },
        {
          "name": "KEY_ALT",
          "value": "16777240",
          "description": "Alt Key"
        },
        {
          "name": "KEY_CAPSLOCK",
          "value": "16777241",
          "description": "Capslock Key"
        },
        {
          "name": "KEY_NUMLOCK",
          "value": "16777242",
          "description": "Numlock Key"
        },
        {
          "name": "KEY_SCROLLLOCK",
          "value": "16777243",
          "description": "Scrolllock Key"
        },
        {
          "name": "KEY_F1",
          "value": "16777244",
          "description": "F1 Key"
        },
        {
          "name": "KEY_F2",
          "value": "16777245",
          "description": "F2 Key"
        },
        {
          "name": "KEY_F3",
          "value": "16777246",
          "description": "F3 Key"
        },
        {
          "name": "KEY_F4",
          "value": "16777247",
          "description": "F4 Key"
        },
        {
          "name": "KEY_F5",
          "value": "16777248",
          "description": "F5 Key"
        },
        {
          "name": "KEY_F6",
          "value": "16777249",
          "description": "F6 Key"
        },
        {
          "name": "KEY_F7",
          "value": "16777250",
          "description": "F7 Key"
        },
        {
          "name": "KEY_F8",
          "value": "16777251",
          "description": "F8 Key"
        },
        {
          "name": "KEY_F9",
          "value": "16777252",
          "description": "F9 Key"
        },
        {
          "name": "KEY_F10",
          "value": "16777253",
          "description": "F10 Key"
        },
        {
          "name": "KEY_F11",
          "value": "16777254",
          "description": "F11 Key"
        },
        {
          "name": "KEY_F12",
          "value": "16777255",
          "description": "F12 Key"
        },
        {
          "name": "KEY_F13",
          "value": "16777256",
          "description": "F13 Key"
        },
        {
          "name": "KEY_F14",
          "value": "16777257",
          "description": "F14 Key"
        },
        {
          "name": "KEY_F15",
          "value": "16777258",
          "description": "F15 Key"
        },
        {
          "name": "KEY_F16",
          "value": "16777259",
          "description": "F16 Key"
        },
        {
          "name": "KEY_KP_ENTER",
          "value": "16777344",
          "description": "Enter Key on Numpad"
        },
        {
          "name": "KEY_KP_MULTIPLY",
          "value": "16777345",
          "description": "Multiply Key on Numpad"
        },
        {
          "name": "KEY_KP_DIVIDE",
          "value": "16777346",
          "description": "Divide Key on Numpad"
        },
        {
          "name": "KEY_KP_SUBTRACT",
          "value": "16777347",
          "description": "Subtract Key on Numpad"
        },
        {
          "name": "KEY_KP_PERIOD",
          "value": "16777348",
          "description": "Period Key on Numpad"
        },
        {
          "name": "KEY_KP_ADD",
          "value": "16777349",
          "description": "Add Key on Numpad"
        },
        {
          "name": "KEY_KP_0",
          "value": "16777350",
          "description": "Number 0 on Numpad"
        },
        {
          "name": "KEY_KP_1",
          "value": "16777351",
          "description": "Number 1 on Numpad"
        },
        {
          "name": "KEY_KP_2",
          "value": "16777352",
          "description": "Number 2 on Numpad"
        },
        {
          "name": "KEY_KP_3",
          "value": "16777353",
          "description": "Number 3 on Numpad"
        },
        {
          "name": "KEY_KP_4",
          "value": "16777354",
          "description": "Number 4 on Numpad"
        },
        {
          "name": "KEY_KP_5",
          "value": "16777355",
          "description": "Number 5 on Numpad"
        },
        {
          "name": "KEY_KP_6",
          "value": "16777356",
          "description": "Number 6 on Numpad"
        },
        {
          "name": "KEY_KP_7",
          "value": "16777357",
          "description": "Number 7 on Numpad"
        },
        {
          "name": "KEY_KP_8",
          "value": "16777358",
          "description": "Number 8 on Numpad"
        },
        {
          "name": "KEY_KP_9",
          "value": "16777359",
          "description": "Number 9 on Numpad"
        },
        {
          "name": "KEY_SUPER_L",
          "value": "16777260",
          "description": "Super Left key (windows key)"
        },
        {
          "name": "KEY_SUPER_R",
          "value": "16777261",
          "description": "Super Left key (windows key)"
        },
        {
          "name": "KEY_MENU",
          "value": "16777262",
          "description": "Context menu key"
        },
        {
          "name": "KEY_HYPER_L",
          "value": "16777263",
          "description": ""
        },
        {
          "name": "KEY_HYPER_R",
          "value": "16777264",
          "description": ""
        },
        {
          "name": "KEY_HELP",
          "value": "16777265",
          "description": "Help key"
        },
        {
          "name": "KEY_DIRECTION_L",
          "value": "16777266",
          "description": ""
        },
        {
          "name": "KEY_DIRECTION_R",
          "value": "16777267",
          "description": ""
        },
        {
          "name": "KEY_BACK",
          "value": "16777280",
          "description": "Back key"
        },
        {
          "name": "KEY_FORWARD",
          "value": "16777281",
          "description": "Forward key"
        },
        {
          "name": "KEY_STOP",
          "value": "16777282",
          "description": "Stop key"
        },
        {
          "name": "KEY_REFRESH",
          "value": "16777283",
          "description": "Refresh key"
        },
        {
          "name": "KEY_VOLUMEDOWN",
          "value": "16777284",
          "description": "Volume down key"
        },
        {
          "name": "KEY_VOLUMEMUTE",
          "value": "16777285",
          "description": "Mute volume key"
        },
        {
          "name": "KEY_VOLUMEUP",
          "value": "16777286",
          "description": "Volume up key"
        },
        {
          "name": "KEY_BASSBOOST",
          "value": "16777287",
          "description": ""
        },
        {
          "name": "KEY_BASSUP",
          "value": "16777288",
          "description": ""
        },
        {
          "name": "KEY_BASSDOWN",
          "value": "16777289",
          "description": ""
        },
        {
          "name": "KEY_TREBLEUP",
          "value": "16777290",
          "description": ""
        },
        {
          "name": "KEY_TREBLEDOWN",
          "value": "16777291",
          "description": ""
        },
        {
          "name": "KEY_MEDIAPLAY",
          "value": "16777292",
          "description": "Media play key"
        },
        {
          "name": "KEY_MEDIASTOP",
          "value": "16777293",
          "description": "Media stop key"
        },
        {
          "name": "KEY_MEDIAPREVIOUS",
          "value": "16777294",
          "description": "Previous song key"
        },
        {
          "name": "KEY_MEDIANEXT",
          "value": "16777295",
          "description": "Next song key"
        },
        {
          "name": "KEY_MEDIARECORD",
          "value": "16777296",
          "description": "Media record key"
        },
        {
          "name": "KEY_HOMEPAGE",
          "value": "16777297",
          "description": "Home page key"
        },
        {
          "name": "KEY_FAVORITES",
          "value": "16777298",
          "description": "Favorites key"
        },
        {
          "name": "KEY_SEARCH",
          "value": "16777299",
          "description": "Search key"
        },
        {
          "name": "KEY_STANDBY",
          "value": "16777300",
          "description": ""
        },
        {
          "name": "KEY_OPENURL",
          "value": "16777301",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHMAIL",
          "value": "16777302",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHMEDIA",
          "value": "16777303",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH0",
          "value": "16777304",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH1",
          "value": "16777305",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH2",
          "value": "16777306",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH3",
          "value": "16777307",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH4",
          "value": "16777308",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH5",
          "value": "16777309",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH6",
          "value": "16777310",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH7",
          "value": "16777311",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH8",
          "value": "16777312",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH9",
          "value": "16777313",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHA",
          "value": "16777314",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHB",
          "value": "16777315",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHC",
          "value": "16777316",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHD",
          "value": "16777317",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHE",
          "value": "16777318",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHF",
          "value": "16777319",
          "description": ""
        },
        {
          "name": "KEY_UNKNOWN",
          "value": "33554431",
          "description": ""
        },
        {
          "name": "KEY_SPACE",
          "value": "32",
          "description": "Space Key"
        },
        {
          "name": "KEY_EXCLAM",
          "value": "33",
          "description": "! key"
        },
        {
          "name": "KEY_QUOTEDBL",
          "value": "34",
          "description": "\" key"
        },
        {
          "name": "KEY_NUMBERSIGN",
          "value": "35",
          "description": "# key"
        },
        {
          "name": "KEY_DOLLAR",
          "value": "36",
          "description": "$ key"
        },
        {
          "name": "KEY_PERCENT",
          "value": "37",
          "description": "% key"
        },
        {
          "name": "KEY_AMPERSAND",
          "value": "38",
          "description": "& key"
        },
        {
          "name": "KEY_APOSTROPHE",
          "value": "39",
          "description": "' key"
        },
        {
          "name": "KEY_PARENLEFT",
          "value": "40",
          "description": "( key"
        },
        {
          "name": "KEY_PARENRIGHT",
          "value": "41",
          "description": ") key"
        },
        {
          "name": "KEY_ASTERISK",
          "value": "42",
          "description": "* key"
        },
        {
          "name": "KEY_PLUS",
          "value": "43",
          "description": "+ key"
        },
        {
          "name": "KEY_COMMA",
          "value": "44",
          "description": ", key"
        },
        {
          "name": "KEY_MINUS",
          "value": "45",
          "description": "- key"
        },
        {
          "name": "KEY_PERIOD",
          "value": "46",
          "description": ". key"
        },
        {
          "name": "KEY_SLASH",
          "value": "47",
          "description": "/ key"
        },
        {
          "name": "KEY_0",
          "value": "48",
          "description": "Number 0"
        },
        {
          "name": "KEY_1",
          "value": "49",
          "description": "Number 1"
        },
        {
          "name": "KEY_2",
          "value": "50",
          "description": "Number 2"
        },
        {
          "name": "KEY_3",
          "value": "51",
          "description": "Number 3"
        },
        {
          "name": "KEY_4",
          "value": "52",
          "description": "Number 4"
        },
        {
          "name": "KEY_5",
          "value": "53",
          "description": "Number 5"
        },
        {
          "name": "KEY_6",
          "value": "54",
          "description": "Number 6"
        },
        {
          "name": "KEY_7",
          "value": "55",
          "description": "Number 7"
        },
        {
          "name": "KEY_8",
          "value": "56",
          "description": "Number 8"
        },
        {
          "name": "KEY_9",
          "value": "57",
          "description": "Number 9"
        },
        {
          "name": "KEY_COLON",
          "value": "58",
          "description": ": key"
        },
        {
          "name": "KEY_SEMICOLON",
          "value": "59",
          "description": "; key"
        },
        {
          "name": "KEY_LESS",
          "value": "60",
          "description": "Lower than key"
        },
        {
          "name": "KEY_EQUAL",
          "value": "61",
          "description": "= key"
        },
        {
          "name": "KEY_GREATER",
          "value": "62",
          "description": "Greater than key"
        },
        {
          "name": "KEY_QUESTION",
          "value": "63",
          "description": "? key"
        },
        {
          "name": "KEY_AT",
          "value": "64",
          "description": "@ key"
        },
        {
          "name": "KEY_A",
          "value": "65",
          "description": "A Key"
        },
        {
          "name": "KEY_B",
          "value": "66",
          "description": "B Key"
        },
        {
          "name": "KEY_C",
          "value": "67",
          "description": "C Key"
        },
        {
          "name": "KEY_D",
          "value": "68",
          "description": "D Key"
        },
        {
          "name": "KEY_E",
          "value": "69",
          "description": "E Key"
        },
        {
          "name": "KEY_F",
          "value": "70",
          "description": "F Key"
        },
        {
          "name": "KEY_G",
          "value": "71",
          "description": "G Key"
        },
        {
          "name": "KEY_H",
          "value": "72",
          "description": "H Key"
        },
        {
          "name": "KEY_I",
          "value": "73",
          "description": "I Key"
        },
        {
          "name": "KEY_J",
          "value": "74",
          "description": "J Key"
        },
        {
          "name": "KEY_K",
          "value": "75",
          "description": "K Key"
        },
        {
          "name": "KEY_L",
          "value": "76",
          "description": "L Key"
        },
        {
          "name": "KEY_M",
          "value": "77",
          "description": "M Key"
        },
        {
          "name": "KEY_N",
          "value": "78",
          "description": "N Key"
        },
        {
          "name": "KEY_O",
          "value": "79",
          "description": "O Key"
        },
        {
          "name": "KEY_P",
          "value": "80",
          "description": "P Key"
        },
        {
          "name": "KEY_Q",
          "value": "81",
          "description": "Q Key"
        },
        {
          "name": "KEY_R",
          "value": "82",
          "description": "R Key"
        },
        {
          "name": "KEY_S",
          "value": "83",
          "description": "S Key"
        },
        {
          "name": "KEY_T",
          "value": "84",
          "description": "T Key"
        },
        {
          "name": "KEY_U",
          "value": "85",
          "description": "U Key"
        },
        {
          "name": "KEY_V",
          "value": "86",
          "description": "V Key"
        },
        {
          "name": "KEY_W",
          "value": "87",
          "description": "W Key"
        },
        {
          "name": "KEY_X",
          "value": "88",
          "description": "X Key"
        },
        {
          "name": "KEY_Y",
          "value": "89",
          "description": "Y Key"
        },
        {
          "name": "KEY_Z",
          "value": "90",
          "description": "Z Key"
        },
        {
          "name": "KEY_BRACKETLEFT",
          "value": "91",
          "description": "[ key"
        },
        {
          "name": "KEY_BACKSLASH",
          "value": "92",
          "description": "\\ key"
        },
        {
          "name": "KEY_BRACKETRIGHT",
          "value": "93",
          "description": "] key"
        },
        {
          "name": "KEY_ASCIICIRCUM",
          "value": "94",
          "description": "^ key"
        },
        {
          "name": "KEY_UNDERSCORE",
          "value": "95",
          "description": "_ key"
        },
        {
          "name": "KEY_QUOTELEFT",
          "value": "96",
          "description": ""
        },
        {
          "name": "KEY_BRACELEFT",
          "value": "123",
          "description": "{ key"
        },
        {
          "name": "KEY_BAR",
          "value": "124",
          "description": "| key"
        },
        {
          "name": "KEY_BRACERIGHT",
          "value": "125",
          "description": "} key"
        },
        {
          "name": "KEY_ASCIITILDE",
          "value": "126",
          "description": "~ key"
        },
        {
          "name": "KEY_NOBREAKSPACE",
          "value": "160",
          "description": ""
        },
        {
          "name": "KEY_EXCLAMDOWN",
          "value": "161",
          "description": ""
        },
        {
          "name": "KEY_CENT",
          "value": "162",
          "description": "¢ key"
        },
        {
          "name": "KEY_STERLING",
          "value": "163",
          "description": ""
        },
        {
          "name": "KEY_CURRENCY",
          "value": "164",
          "description": ""
        },
        {
          "name": "KEY_YEN",
          "value": "165",
          "description": ""
        },
        {
          "name": "KEY_BROKENBAR",
          "value": "166",
          "description": "¦ key"
        },
        {
          "name": "KEY_SECTION",
          "value": "167",
          "description": "§ key"
        },
        {
          "name": "KEY_DIAERESIS",
          "value": "168",
          "description": "¨ key"
        },
        {
          "name": "KEY_COPYRIGHT",
          "value": "169",
          "description": "© key"
        },
        {
          "name": "KEY_ORDFEMININE",
          "value": "170",
          "description": ""
        },
        {
          "name": "KEY_GUILLEMOTLEFT",
          "value": "171",
          "description": "« key"
        },
        {
          "name": "KEY_NOTSIGN",
          "value": "172",
          "description": "» key"
        },
        {
          "name": "KEY_HYPHEN",
          "value": "173",
          "description": "‐ key"
        },
        {
          "name": "KEY_REGISTERED",
          "value": "174",
          "description": "® key"
        },
        {
          "name": "KEY_MACRON",
          "value": "175",
          "description": ""
        },
        {
          "name": "KEY_DEGREE",
          "value": "176",
          "description": "° key"
        },
        {
          "name": "KEY_PLUSMINUS",
          "value": "177",
          "description": "± key"
        },
        {
          "name": "KEY_TWOSUPERIOR",
          "value": "178",
          "description": "² key"
        },
        {
          "name": "KEY_THREESUPERIOR",
          "value": "179",
          "description": "³ key"
        },
        {
          "name": "KEY_ACUTE",
          "value": "180",
          "description": "´ key"
        },
        {
          "name": "KEY_MU",
          "value": "181",
          "description": "µ key"
        },
        {
          "name": "KEY_PARAGRAPH",
          "value": "182",
          "description": ""
        },
        {
          "name": "KEY_PERIODCENTERED",
          "value": "183",
          "description": "· key"
        },
        {
          "name": "KEY_CEDILLA",
          "value": "184",
          "description": "¬ key"
        },
        {
          "name": "KEY_ONESUPERIOR",
          "value": "185",
          "description": ""
        },
        {
          "name": "KEY_MASCULINE",
          "value": "186",
          "description": ""
        },
        {
          "name": "KEY_GUILLEMOTRIGHT",
          "value": "187",
          "description": ""
        },
        {
          "name": "KEY_ONEQUARTER",
          "value": "188",
          "description": ""
        },
        {
          "name": "KEY_ONEHALF",
          "value": "189",
          "description": "½ key"
        },
        {
          "name": "KEY_THREEQUARTERS",
          "value": "190",
          "description": ""
        },
        {
          "name": "KEY_QUESTIONDOWN",
          "value": "191",
          "description": ""
        },
        {
          "name": "KEY_AGRAVE",
          "value": "192",
          "description": ""
        },
        {
          "name": "KEY_AACUTE",
          "value": "193",
          "description": ""
        },
        {
          "name": "KEY_ACIRCUMFLEX",
          "value": "194",
          "description": ""
        },
        {
          "name": "KEY_ATILDE",
          "value": "195",
          "description": ""
        },
        {
          "name": "KEY_ADIAERESIS",
          "value": "196",
          "description": ""
        },
        {
          "name": "KEY_ARING",
          "value": "197",
          "description": ""
        },
        {
          "name": "KEY_AE",
          "value": "198",
          "description": ""
        },
        {
          "name": "KEY_CCEDILLA",
          "value": "199",
          "description": ""
        },
        {
          "name": "KEY_EGRAVE",
          "value": "200",
          "description": ""
        },
        {
          "name": "KEY_EACUTE",
          "value": "201",
          "description": ""
        },
        {
          "name": "KEY_ECIRCUMFLEX",
          "value": "202",
          "description": ""
        },
        {
          "name": "KEY_EDIAERESIS",
          "value": "203",
          "description": ""
        },
        {
          "name": "KEY_IGRAVE",
          "value": "204",
          "description": ""
        },
        {
          "name": "KEY_IACUTE",
          "value": "205",
          "description": ""
        },
        {
          "name": "KEY_ICIRCUMFLEX",
          "value": "206",
          "description": ""
        },
        {
          "name": "KEY_IDIAERESIS",
          "value": "207",
          "description": ""
        },
        {
          "name": "KEY_ETH",
          "value": "208",
          "description": ""
        },
        {
          "name": "KEY_NTILDE",
          "value": "209",
          "description": ""
        },
        {
          "name": "KEY_OGRAVE",
          "value": "210",
          "description": ""
        },
        {
          "name": "KEY_OACUTE",
          "value": "211",
          "description": ""
        },
        {
          "name": "KEY_OCIRCUMFLEX",
          "value": "212",
          "description": ""
        },
        {
          "name": "KEY_OTILDE",
          "value": "213",
          "description": ""
        },
        {
          "name": "KEY_ODIAERESIS",
          "value": "214",
          "description": ""
        },
        {
          "name": "KEY_MULTIPLY",
          "value": "215",
          "description": ""
        },
        {
          "name": "KEY_OOBLIQUE",
          "value": "216",
          "description": ""
        },
        {
          "name": "KEY_UGRAVE",
          "value": "217",
          "description": ""
        },
        {
          "name": "KEY_UACUTE",
          "value": "218",
          "description": ""
        },
        {
          "name": "KEY_UCIRCUMFLEX",
          "value": "219",
          "description": ""
        },
        {
          "name": "KEY_UDIAERESIS",
          "value": "220",
          "description": ""
        },
        {
          "name": "KEY_YACUTE",
          "value": "221",
          "description": ""
        },
        {
          "name": "KEY_THORN",
          "value": "222",
          "description": ""
        },
        {
          "name": "KEY_SSHARP",
          "value": "223",
          "description": ""
        },
        {
          "name": "KEY_DIVISION",
          "value": "247",
          "description": ""
        },
        {
          "name": "KEY_YDIAERESIS",
          "value": "255",
          "description": ""
        },
        {
          "name": "KEY_CODE_MASK",
          "value": "33554431",
          "description": ""
        },
        {
          "name": "KEY_MODIFIER_MASK",
          "value": "-16777216",
          "description": ""
        },
        {
          "name": "KEY_MASK_SHIFT",
          "value": "33554432",
          "description": ""
        },
        {
          "name": "KEY_MASK_ALT",
          "value": "67108864",
          "description": ""
        },
        {
          "name": "KEY_MASK_META",
          "value": "134217728",
          "description": ""
        },
        {
          "name": "KEY_MASK_CTRL",
          "value": "268435456",
          "description": ""
        },
        {
          "name": "KEY_MASK_CMD",
          "value": "268435456",
          "description": ""
        },
        {
          "name": "KEY_MASK_KPAD",
          "value": "536870912",
          "description": ""
        },
        {
          "name": "KEY_MASK_GROUP_SWITCH",
          "value": "1073741824",
          "description": ""
        },
        {
          "name": "BUTTON_LEFT",
          "value": "1",
          "description": "Left Mouse Button"
        },
        {
          "name": "BUTTON_RIGHT",
          "value": "2",
          "description": "Right Mouse Button"
        },
        {
          "name": "BUTTON_MIDDLE",
          "value": "3",
          "description": "Middle Mouse Button"
        },
        {
          "name": "BUTTON_WHEEL_UP",
          "value": "4",
          "description": "Mouse wheel up"
        },
        {
          "name": "BUTTON_WHEEL_DOWN",
          "value": "5",
          "description": "Mouse wheel down"
        },
        {
          "name": "BUTTON_WHEEL_LEFT",
          "value": "6",
          "description": "Mouse wheel left button"
        },
        {
          "name": "BUTTON_WHEEL_RIGHT",
          "value": "7",
          "description": "Mouse wheel right button"
        },
        {
          "name": "BUTTON_MASK_LEFT",
          "value": "1",
          "description": ""
        },
        {
          "name": "BUTTON_MASK_RIGHT",
          "value": "2",
          "description": ""
        },
        {
          "name": "BUTTON_MASK_MIDDLE",
          "value": "4",
          "description": ""
        },
        {
          "name": "JOY_BUTTON_0",
          "value": "0",
          "description": "Joystick Button 0"
        },
        {
          "name": "JOY_BUTTON_1",
          "value": "1",
          "description": "Joystick Button 1"
        },
        {
          "name": "JOY_BUTTON_2",
          "value": "2",
          "description": "Joystick Button 2"
        },
        {
          "name": "JOY_BUTTON_3",
          "value": "3",
          "description": "Joystick Button 3"
        },
        {
          "name": "JOY_BUTTON_4",
          "value": "4",
          "description": "Joystick Button 4"
        },
        {
          "name": "JOY_BUTTON_5",
          "value": "5",
          "description": "Joystick Button 5"
        },
        {
          "name": "JOY_BUTTON_6",
          "value": "6",
          "description": "Joystick Button 6"
        },
        {
          "name": "JOY_BUTTON_7",
          "value": "7",
          "description": "Joystick Button 7"
        },
        {
          "name": "JOY_BUTTON_8",
          "value": "8",
          "description": "Joystick Button 8"
        },
        {
          "name": "JOY_BUTTON_9",
          "value": "9",
          "description": "Joystick Button 9"
        },
        {
          "name": "JOY_BUTTON_10",
          "value": "10",
          "description": "Joystick Button 10"
        },
        {
          "name": "JOY_BUTTON_11",
          "value": "11",
          "description": "Joystick Button 11"
        },
        {
          "name": "JOY_BUTTON_12",
          "value": "12",
          "description": "Joystick Button 12"
        },
        {
          "name": "JOY_BUTTON_13",
          "value": "13",
          "description": "Joystick Button 13"
        },
        {
          "name": "JOY_BUTTON_14",
          "value": "14",
          "description": "Joystick Button 14"
        },
        {
          "name": "JOY_BUTTON_15",
          "value": "15",
          "description": "Joystick Button 15"
        },
        {
          "name": "JOY_BUTTON_MAX",
          "value": "16",
          "description": "Joystick Button 16"
        },
        {
          "name": "JOY_SNES_A",
          "value": "1",
          "description": "Super Nintendo Entertaiment System controller A button"
        },
        {
          "name": "JOY_SNES_B",
          "value": "0",
          "description": "Super Nintendo Entertaiment System controller B button"
        },
        {
          "name": "JOY_SNES_X",
          "value": "3",
          "description": "Super Nintendo Entertaiment System controller X button"
        },
        {
          "name": "JOY_SNES_Y",
          "value": "2",
          "description": "Super Nintendo Entertaiment System controller Y button"
        },
        {
          "name": "JOY_SONY_CIRCLE",
          "value": "1",
          "description": "DUALSHOCK circle button"
        },
        {
          "name": "JOY_SONY_X",
          "value": "0",
          "description": "DUALSHOCK X button"
        },
        {
          "name": "JOY_SONY_SQUARE",
          "value": "2",
          "description": "DUALSHOCK square button"
        },
        {
          "name": "JOY_SONY_TRIANGLE",
          "value": "3",
          "description": "DUALSHOCK triangle button"
        },
        {
          "name": "JOY_SEGA_B",
          "value": "1",
          "description": "SEGA controller B button"
        },
        {
          "name": "JOY_SEGA_A",
          "value": "0",
          "description": "SEGA controller A button"
        },
        {
          "name": "JOY_SEGA_X",
          "value": "2",
          "description": "SEGA controller X button"
        },
        {
          "name": "JOY_SEGA_Y",
          "value": "3",
          "description": "SEGA controller Y button"
        },
        {
          "name": "JOY_XBOX_B",
          "value": "1",
          "description": "XBOX controller B button"
        },
        {
          "name": "JOY_XBOX_A",
          "value": "0",
          "description": "XBOX controller A button"
        },
        {
          "name": "JOY_XBOX_X",
          "value": "2",
          "description": "XBOX controller X button"
        },
        {
          "name": "JOY_XBOX_Y",
          "value": "3",
          "description": "XBOX controller Y button"
        },
        {
          "name": "JOY_DS_A",
          "value": "1",
          "description": ""
        },
        {
          "name": "JOY_DS_B",
          "value": "0",
          "description": ""
        },
        {
          "name": "JOY_DS_X",
          "value": "3",
          "description": ""
        },
        {
          "name": "JOY_DS_Y",
          "value": "2",
          "description": ""
        },
        {
          "name": "JOY_SELECT",
          "value": "10",
          "description": "Joystick Button Select"
        },
        {
          "name": "JOY_START",
          "value": "11",
          "description": "Joystick Button Start"
        },
        {
          "name": "JOY_DPAD_UP",
          "value": "12",
          "description": "Joystick DPad Up"
        },
        {
          "name": "JOY_DPAD_DOWN",
          "value": "13",
          "description": "Joystick DPad Down"
        },
        {
          "name": "JOY_DPAD_LEFT",
          "value": "14",
          "description": "Joystick DPad Left"
        },
        {
          "name": "JOY_DPAD_RIGHT",
          "value": "15",
          "description": "Joystick DPad Right"
        },
        {
          "name": "JOY_L",
          "value": "4",
          "description": "Joystick Left Shoulder Button"
        },
        {
          "name": "JOY_L2",
          "value": "6",
          "description": "Joystick Left Trigger"
        },
        {
          "name": "JOY_L3",
          "value": "8",
          "description": "Joystick Left Stick Click"
        },
        {
          "name": "JOY_R",
          "value": "5",
          "description": "Joystick Right Shoulder Button"
        },
        {
          "name": "JOY_R2",
          "value": "7",
          "description": "Joystick Right Trigger"
        },
        {
          "name": "JOY_R3",
          "value": "9",
          "description": "Joystick Right Stick Click"
        },
        {
          "name": "JOY_AXIS_0",
          "value": "0",
          "description": "Joystick Left Stick Horizontal Axis"
        },
        {
          "name": "JOY_AXIS_1",
          "value": "1",
          "description": "Joystick Left Stick Vertical Axis"
        },
        {
          "name": "JOY_AXIS_2",
          "value": "2",
          "description": "Joystick Right Stick Horizontal Axis"
        },
        {
          "name": "JOY_AXIS_3",
          "value": "3",
          "description": "Joystick Right Stick Vertical Axis"
        },
        {
          "name": "JOY_AXIS_4",
          "value": "4",
          "description": ""
        },
        {
          "name": "JOY_AXIS_5",
          "value": "5",
          "description": ""
        },
        {
          "name": "JOY_AXIS_6",
          "value": "6",
          "description": "Joystick Left Trigger Analog Axis"
        },
        {
          "name": "JOY_AXIS_7",
          "value": "7",
          "description": "Joystick Right Trigger Analog Axis"
        },
        {
          "name": "JOY_AXIS_MAX",
          "value": "8",
          "description": ""
        },
        {
          "name": "JOY_ANALOG_0_X",
          "value": "0",
          "description": "Joystick Left Stick Horizontal Axis"
        },
        {
          "name": "JOY_ANALOG_0_Y",
          "value": "1",
          "description": "Joystick Left Stick Vertical Axis"
        },
        {
          "name": "JOY_ANALOG_1_X",
          "value": "2",
          "description": "Joystick Right Stick Horizontal Axis"
        },
        {
          "name": "JOY_ANALOG_1_Y",
          "value": "3",
          "description": "Joystick Right Stick Vertical Axis"
        },
        {
          "name": "JOY_ANALOG_2_X",
          "value": "4",
          "description": ""
        },
        {
          "name": "JOY_ANALOG_2_Y",
          "value": "5",
          "description": ""
        },
        {
          "name": "JOY_ANALOG_L2",
          "value": "6",
          "description": ""
        },
        {
          "name": "JOY_ANALOG_R2",
          "value": "7",
          "description": ""
        },
        {
          "name": "OK",
          "value": "0",
          "description": "Functions that return Error return OK when everything went ok. Most functions don't return error anyway and/or just print errors to stdout."
        },
        {
          "name": "FAILED",
          "value": "1",
          "description": "Generic fail return error."
        },
        {
          "name": "ERR_UNAVAILABLE",
          "value": "2",
          "description": ""
        },
        {
          "name": "ERR_UNCONFIGURED",
          "value": "3",
          "description": ""
        },
        {
          "name": "ERR_UNAUTHORIZED",
          "value": "4",
          "description": ""
        },
        {
          "name": "ERR_PARAMETER_RANGE_ERROR",
          "value": "5",
          "description": ""
        },
        {
          "name": "ERR_OUT_OF_MEMORY",
          "value": "6",
          "description": ""
        },
        {
          "name": "ERR_FILE_NOT_FOUND",
          "value": "7",
          "description": ""
        },
        {
          "name": "ERR_FILE_BAD_DRIVE",
          "value": "8",
          "description": ""
        },
        {
          "name": "ERR_FILE_BAD_PATH",
          "value": "9",
          "description": ""
        },
        {
          "name": "ERR_FILE_NO_PERMISSION",
          "value": "10",
          "description": ""
        },
        {
          "name": "ERR_FILE_ALREADY_IN_USE",
          "value": "11",
          "description": ""
        },
        {
          "name": "ERR_FILE_CANT_OPEN",
          "value": "12",
          "description": ""
        },
        {
          "name": "ERR_FILE_CANT_WRITE",
          "value": "13",
          "description": ""
        },
        {
          "name": "ERR_FILE_CANT_READ",
          "value": "14",
          "description": ""
        },
        {
          "name": "ERR_FILE_UNRECOGNIZED",
          "value": "15",
          "description": ""
        },
        {
          "name": "ERR_FILE_CORRUPT",
          "value": "16",
          "description": ""
        },
        {
          "name": "ERR_FILE_MISSING_DEPENDENCIES",
          "value": "17",
          "description": ""
        },
        {
          "name": "ERR_FILE_EOF",
          "value": "18",
          "description": ""
        },
        {
          "name": "ERR_CANT_OPEN",
          "value": "19",
          "description": ""
        },
        {
          "name": "ERR_CANT_CREATE",
          "value": "20",
          "description": ""
        },
        {
          "name": "ERR_PARSE_ERROR",
          "value": "43",
          "description": ""
        },
        {
          "name": "ERROR_QUERY_FAILED",
          "value": "21",
          "description": ""
        },
        {
          "name": "ERR_ALREADY_IN_USE",
          "value": "22",
          "description": ""
        },
        {
          "name": "ERR_LOCKED",
          "value": "23",
          "description": ""
        },
        {
          "name": "ERR_TIMEOUT",
          "value": "24",
          "description": ""
        },
        {
          "name": "ERR_CANT_AQUIRE_RESOURCE",
          "value": "28",
          "description": ""
        },
        {
          "name": "ERR_INVALID_DATA",
          "value": "30",
          "description": ""
        },
        {
          "name": "ERR_INVALID_PARAMETER",
          "value": "31",
          "description": ""
        },
        {
          "name": "ERR_ALREADY_EXISTS",
          "value": "32",
          "description": ""
        },
        {
          "name": "ERR_DOES_NOT_EXIST",
          "value": "33",
          "description": ""
        },
        {
          "name": "ERR_DATABASE_CANT_READ",
          "value": "34",
          "description": ""
        },
        {
          "name": "ERR_DATABASE_CANT_WRITE",
          "value": "35",
          "description": ""
        },
        {
          "name": "ERR_COMPILATION_FAILED",
          "value": "36",
          "description": ""
        },
        {
          "name": "ERR_METHOD_NOT_FOUND",
          "value": "37",
          "description": ""
        },
        {
          "name": "ERR_LINK_FAILED",
          "value": "38",
          "description": ""
        },
        {
          "name": "ERR_SCRIPT_FAILED",
          "value": "39",
          "description": ""
        },
        {
          "name": "ERR_CYCLIC_LINK",
          "value": "40",
          "description": ""
        },
        {
          "name": "ERR_BUSY",
          "value": "44",
          "description": ""
        },
        {
          "name": "ERR_HELP",
          "value": "46",
          "description": ""
        },
        {
          "name": "ERR_BUG",
          "value": "47",
          "description": ""
        },
        {
          "name": "ERR_WTF",
          "value": "49",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_NONE",
          "value": "0",
          "description": "No hint for edited property."
        },
        {
          "name": "PROPERTY_HINT_RANGE",
          "value": "1",
          "description": "Hints that the string is a range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats."
        },
        {
          "name": "PROPERTY_HINT_EXP_RANGE",
          "value": "2",
          "description": "Hints that the string is an exponential range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats."
        },
        {
          "name": "PROPERTY_HINT_ENUM",
          "value": "3",
          "description": "Property hint for an enumerated value, like \"Hello,Something,Else\". This is valid for integer, float and string properties."
        },
        {
          "name": "PROPERTY_HINT_EXP_EASING",
          "value": "4",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_LENGTH",
          "value": "5",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_KEY_ACCEL",
          "value": "7",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_FLAGS",
          "value": "8",
          "description": "Property hint for a bitmask description, for bits 0,1,2,3 and 5 the hint would be like \"Bit0,Bit1,Bit2,Bit3,,Bit5\". Valid only for integers."
        },
        {
          "name": "PROPERTY_HINT_ALL_FLAGS",
          "value": "9",
          "description": "Property hint for a bitmask description that covers all 32 bits. Valid only for integers."
        },
        {
          "name": "PROPERTY_HINT_FILE",
          "value": "10",
          "description": "String property is a file (so pop up a file dialog when edited). Hint string can be a set of wildcards like \"*.doc\"."
        },
        {
          "name": "PROPERTY_HINT_DIR",
          "value": "11",
          "description": "String property is a directory (so pop up a file dialog when edited)."
        },
        {
          "name": "PROPERTY_HINT_GLOBAL_FILE",
          "value": "12",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_GLOBAL_DIR",
          "value": "13",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_RESOURCE_TYPE",
          "value": "14",
          "description": "String property is a resource, so open the resource popup menu when edited."
        },
        {
          "name": "PROPERTY_HINT_MULTILINE_TEXT",
          "value": "15",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_COLOR_NO_ALPHA",
          "value": "16",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSY",
          "value": "17",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS",
          "value": "18",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_STORAGE",
          "value": "1",
          "description": "Property will be used as storage (default)."
        },
        {
          "name": "PROPERTY_USAGE_EDITOR",
          "value": "2",
          "description": "Property will be visible in editor (default)."
        },
        {
          "name": "PROPERTY_USAGE_NETWORK",
          "value": "4",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_EDITOR_HELPER",
          "value": "8",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_CHECKABLE",
          "value": "16",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_CHECKED",
          "value": "32",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_INTERNATIONALIZED",
          "value": "64",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_BUNDLE",
          "value": "128",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_CATEGORY",
          "value": "256",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_STORE_IF_NONZERO",
          "value": "512",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_STORE_IF_NONONE",
          "value": "1024",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_NO_INSTANCE_STATE",
          "value": "2048",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_RESTART_IF_CHANGED",
          "value": "4096",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_SCRIPT_VARIABLE",
          "value": "8192",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_DEFAULT",
          "value": "7",
          "description": "Default usage (storage and editor)."
        },
        {
          "name": "PROPERTY_USAGE_DEFAULT_INTL",
          "value": "71",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_NOEDITOR",
          "value": "5",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_NORMAL",
          "value": "1",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_EDITOR",
          "value": "2",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_NOSCRIPT",
          "value": "4",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_CONST",
          "value": "8",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_REVERSE",
          "value": "16",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_VIRTUAL",
          "value": "32",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_FROM_SCRIPT",
          "value": "64",
          "description": ""
        },
        {
          "name": "METHOD_FLAGS_DEFAULT",
          "value": "1",
          "description": ""
        },
        {
          "name": "TYPE_NIL",
          "value": "0",
          "description": "Variable is of type nil (only applied for null)."
        },
        {
          "name": "TYPE_BOOL",
          "value": "1",
          "description": "Variable is of type [bool]."
        },
        {
          "name": "TYPE_INT",
          "value": "2",
          "description": "Variable is of type [int]."
        },
        {
          "name": "TYPE_REAL",
          "value": "3",
          "description": "Variable is of type [float]/real."
        },
        {
          "name": "TYPE_STRING",
          "value": "4",
          "description": "Variable is of type [String]."
        },
        {
          "name": "TYPE_VECTOR2",
          "value": "5",
          "description": "Variable is of type [Vector2]."
        },
        {
          "name": "TYPE_RECT2",
          "value": "6",
          "description": "Variable is of type [Rect2]."
        },
        {
          "name": "TYPE_VECTOR3",
          "value": "7",
          "description": "Variable is of type [Vector3]."
        },
        {
          "name": "TYPE_MATRIX32",
          "value": "8",
          "description": "Variable is of type [Matrix32]."
        },
        {
          "name": "TYPE_PLANE",
          "value": "9",
          "description": "Variable is of type [Plane]."
        },
        {
          "name": "TYPE_QUAT",
          "value": "10",
          "description": "Variable is of type [Quat]."
        },
        {
          "name": "TYPE_AABB",
          "value": "11",
          "description": "Variable is of type [AABB]."
        },
        {
          "name": "TYPE_MATRIX3",
          "value": "12",
          "description": "Variable is of type [Matrix3]."
        },
        {
          "name": "TYPE_TRANSFORM",
          "value": "13",
          "description": "Variable is of type [Transform]."
        },
        {
          "name": "TYPE_COLOR",
          "value": "14",
          "description": "Variable is of type [Color]."
        },
        {
          "name": "TYPE_IMAGE",
          "value": "15",
          "description": "Variable is of type [Image]."
        },
        {
          "name": "TYPE_NODE_PATH",
          "value": "16",
          "description": "Variable is of type [NodePath]."
        },
        {
          "name": "TYPE_RID",
          "value": "17",
          "description": "Variable is of type [RID]."
        },
        {
          "name": "TYPE_OBJECT",
          "value": "18",
          "description": "Variable is of type [Object]."
        },
        {
          "name": "TYPE_INPUT_EVENT",
          "value": "19",
          "description": "Variable is of type [InputEvent]."
        },
        {
          "name": "TYPE_DICTIONARY",
          "value": "20",
          "description": "Variable is of type [Dictionary]."
        },
        {
          "name": "TYPE_ARRAY",
          "value": "21",
          "description": "Variable is of type [Array]."
        },
        {
          "name": "TYPE_RAW_ARRAY",
          "value": "22",
          "description": ""
        },
        {
          "name": "TYPE_INT_ARRAY",
          "value": "23",
          "description": ""
        },
        {
          "name": "TYPE_REAL_ARRAY",
          "value": "24",
          "description": ""
        },
        {
          "name": "TYPE_STRING_ARRAY",
          "value": "25",
          "description": ""
        },
        {
          "name": "TYPE_VECTOR2_ARRAY",
          "value": "26",
          "description": ""
        },
        {
          "name": "TYPE_VECTOR3_ARRAY",
          "value": "27",
          "description": ""
        },
        {
          "name": "TYPE_COLOR_ARRAY",
          "value": "28",
          "description": ""
        },
        {
          "name": "TYPE_MAX",
          "value": "29",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "AS",
          "type": "AudioServer",
          "description": "[AudioServer] singleton"
        },
        {
          "name": "AudioServer",
          "type": "AudioServer",
          "description": "[AudioServer] singleton"
        },
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "[Geometry] singleton"
        },
        {
          "name": "Globals",
          "type": "Globals",
          "description": "[Globals] singleton"
        },
        {
          "name": "IP",
          "type": "IP",
          "description": "[IP] singleton"
        },
        {
          "name": "Input",
          "type": "Input",
          "description": "[Input] singleton"
        },
        {
          "name": "InputMap",
          "type": "InputMap",
          "description": "[InputMap] singleton"
        },
        {
          "name": "Marshalls",
          "type": "Reference",
          "description": "[Marshalls] singleton"
        },
        {
          "name": "OS",
          "type": "OS",
          "description": "[OS] singleton"
        },
        {
          "name": "PS",
          "type": "PhysicsServer",
          "description": "[PhysicsServer] singleton"
        },
        {
          "name": "PS2D",
          "type": "Physics2DServer",
          "description": "[Physics2DServer] singleton"
        },
        {
          "name": "PathRemap",
          "type": "PathRemap",
          "description": "[PathRemap] singleton"
        },
        {
          "name": "Performance",
          "type": "Performance",
          "description": "[Performance] singleton"
        },
        {
          "name": "Physics2DServer",
          "type": "Physics2DServer",
          "description": "[Physics2DServer] singleton"
        },
        {
          "name": "PhysicsServer",
          "type": "PhysicsServer",
          "description": "[PhysicsServer] singleton"
        },
        {
          "name": "ResourceLoader",
          "type": "ResourceLoader",
          "description": "[ResourceLoader] singleton"
        },
        {
          "name": "ResourceSaver",
          "type": "ResourceSaver",
          "description": "[ResourceSaver] singleton"
        },
        {
          "name": "SS",
          "type": "SpatialSoundServer",
          "description": "[SpatialSoundServer] singleton"
        },
        {
          "name": "SS2D",
          "type": "SpatialSound2DServer",
          "description": "[SpatialSound2DServer] singleton"
        },
        {
          "name": "SpatialSound2DServer",
          "type": "SpatialSound2DServer",
          "description": "[SpatialSound2DServer] singleton"
        },
        {
          "name": "SpatialSoundServer",
          "type": "SpatialSoundServer",
          "description": "[SpatialSoundServer] singleton"
        },
        {
          "name": "TS",
          "type": "TranslationServer",
          "description": "[TranslationServer] singleton"
        },
        {
          "name": "TranslationServer",
          "type": "TranslationServer",
          "description": "[TranslationServer] singleton"
        },
        {
          "name": "VS",
          "type": "VisualServer",
          "description": "[VisualServer] singleton"
        },
        {
          "name": "VisualServer",
          "type": "VisualServer",
          "description": "[VisualServer] singleton"
        }
      ],
      "theme_properties": []
    },
    "AABB": {
      "name": "AABB",
      "category": "Built-In Types",
      "brief_description": "Axis-Aligned Bounding Box.",
      "description": "AABB provides an 3D Axis-Aligned Bounding Box. It consists of a position, a size, and several utility functions. It is typically used for simple (fast) overlap tests.",
      "methods": [
        {
          "name": "AABB",
          "description": "Optional constructor, accepts position and size.",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "encloses",
          "description": "Return true if this [AABB] completely encloses another one.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "expand",
          "description": "Return this [AABB] expanded to include a given point.",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_area",
          "description": "Get the area of the [AABB].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_endpoint",
          "description": "Get the position of the 8 endpoints of the [AABB] in space.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_longest_axis",
          "description": "Return the normalized longest axis of the [AABB].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_longest_axis_index",
          "description": "Return the index of the longest axis of the [AABB] (according to [Vector3]::AXIS* enum).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_longest_axis_size",
          "description": "Return the scalar length of the longest axis of the [AABB].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_shortest_axis",
          "description": "Return the normalized shortest axis of the [AABB].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_shortest_axis_index",
          "description": "Return the index of the shortest axis of the [AABB] (according to [Vector3]::AXIS* enum).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_shortest_axis_size",
          "description": "Return the scalar length of the shortest axis of the [AABB].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_support",
          "description": "Return the support point in a given direction. This is useful for collision detection algorithms.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "grow",
          "description": "Return a copy of the [AABB] grown a given amount of units towards all the sides.",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_no_area",
          "description": "Return true if the [AABB] is flat or empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_no_surface",
          "description": "Return true if the [AABB] is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "description": "Return true if the [AABB] contains a point.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersection",
          "description": "Return the intersection between two [AABB]. An empty AABB (size 0,0,0) is returned on failure.",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects",
          "description": "Return true if the [AABB] overlaps with another.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_plane",
          "description": "Return true if the [AABB] is at both sides of a plane.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plane",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_segment",
          "description": "Return true if the [AABB] intersects the line segment between from and to",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "merge",
          "description": "Combine this [AABB] with another, a larger one is returned that contains both.",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "AABB",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "end",
          "type": "Vector3",
          "description": "Ending corner."
        },
        {
          "name": "pos",
          "type": "Vector3",
          "description": "Position (starting corner)."
        },
        {
          "name": "size",
          "type": "Vector3",
          "description": "Size from position to end."
        }
      ],
      "theme_properties": []
    },
    "AStar": {
      "name": "AStar",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "_compute_cost",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_estimate_cost",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_point",
          "description": "Add a new point at the given position. The [code]weight_scale[/code] has to be 1 or larger.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "weight_scale",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "are_points_connected",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connect_points",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "bidirectional",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "disconnect_points",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_available_point_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_closest_point",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "to_pos",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_pos_in_segment",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "to_pos",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_id_path",
          "description": "",
          "return_type": "IntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_path",
          "description": "",
          "return_type": "Vector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_weight_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_point",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AcceptDialog": {
      "name": "AcceptDialog",
      "inherits": "WindowDialog",
      "category": "Core",
      "brief_description": "Base dialog for user notification.",
      "description": "This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result.",
      "methods": [
        {
          "name": "add_button",
          "description": "Add custom button to the dialog and return the created button.\n\t\t\t\tThe button titled with [i]text[/i] and the [i]action[/i] will be passed to [custom_action] signal when it is pressed.",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "right",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "action",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "add_cancel",
          "description": "Add custom cancel button to the dialog and return the created button.",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_hide_on_ok",
          "qualifiers": "const",
          "description": "Return true if the dialog will be hidden when accepted (default true).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_label",
          "description": "Return the label used for built-in text.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_ok",
          "description": "Return the OK Button.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Return the built-in label text.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "register_text_enter",
          "description": "Register a [LineEdit] in the dialog. When the enter key is pressed, the dialog will be accepted.",
          "return_type": "LineEdit",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line_edit",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hide_on_ok",
          "description": "Set whether the dialog is hidden when accepted (default true).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "Set the built-in label text.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "confirmed",
          "description": "Emitted when accepted.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "custom_action",
          "description": "Emitted with a custom button is added.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AnimatedSprite": {
      "name": "AnimatedSprite",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Sprite node that can use multiple textures for animation.",
      "description": "Sprite node that can use multiple textures for animation.",
      "methods": [
        {
          "name": "get_animation",
          "qualifiers": "const",
          "description": "Return the name of the current animation set to the node.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "Return the visible frame index.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "Return the color modulation for this sprite.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the offset of the sprite in the node origin.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_sprite_frames",
          "qualifiers": "const",
          "description": "Get the [SpriteFrames] resource, which contains all frames.",
          "return_type": "SpriteFrames",
          "arguments": []
        },
        {
          "name": "is_centered",
          "qualifiers": "const",
          "description": "Return true when centered. See [method set_centered].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_h",
          "qualifiers": "const",
          "description": "Return true if sprite is flipped horizontally.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_v",
          "qualifiers": "const",
          "description": "Return true if sprite is flipped vertically.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return true if an animation if currently being played.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play the animation set in parameter. If no parameter is provided, the current animation is played.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "set_animation",
          "description": "Set the current animation of the node and reinits the frame counter of the animation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "animation",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_centered",
          "description": "When turned on, offset at (0,0) is the center of the sprite, when off, the top-left corner is.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "centered",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_h",
          "description": "If true, sprite is flipped horizontally.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_h",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_v",
          "description": "If true, sprite is flipped vertically.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_v",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_frame",
          "description": "Set the visible sprite frame index (from the list of frames inside the [SpriteFrames] resource).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frame",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "Change the color modulation (multiplication) for this sprite.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "modulate",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the offset of the sprite in the node origin. Position varies depending on whether it is centered or not.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sprite_frames",
          "description": "Set the [SpriteFrames] resource, which contains all frames.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sprite_frames",
              "type": "SpriteFrames",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the current animation (does not reset the frame counter).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "finished",
          "description": "Emitted when the animation is finished (when it plays the last frame). If the animation is looping, this signal is emitted everytime the last frame is drawn, before looping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "frame_changed",
          "description": "Emitted when frame is changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AnimatedSprite3D": {
      "name": "AnimatedSprite3D",
      "inherits": "SpriteBase3D",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_animation",
          "qualifiers": "const",
          "description": "Return the name of the current animation set to the node.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "Return the visible frame index.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_sprite_frames",
          "qualifiers": "const",
          "description": "Get the [SpriteFrames] resource, which contains all frames.",
          "return_type": "SpriteFrames",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return true if an animation if currently being played.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play the animation set in parameter. If no parameter is provided, the current animation is played.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "set_animation",
          "description": "Set the current animation of the node and reinits the frame counter of the animation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "animation",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_frame",
          "description": "Set the visible sprite frame index (from the list of frames inside the [SpriteFrames] resource).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frame",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sprite_frames",
          "description": "Set the [SpriteFrames] resource, which contains all frames.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sprite_frames",
              "type": "SpriteFrames",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the current animation (does not reset the frame counter).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "frame_changed",
          "description": "Emitted when frame is changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Animation": {
      "name": "Animation",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Contains data used to animate everything in the engine.",
      "description": "An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.\n\t\tAnimations are just data containers, and must be added to odes such as an [AnimationPlayer] or [AnimationTreePlayer] to be played back.",
      "methods": [
        {
          "name": "add_track",
          "description": "Add a track to the Animation. The track type must be specified as any of the values in the TYPE_* enumeration.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "at_pos",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the animation (clear all tracks and reset all).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "find_track",
          "qualifiers": "const",
          "description": "Return the index of the specified track. If the track is not found, return -1.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the total length of the animation (in seconds).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_step",
          "qualifiers": "const",
          "description": "Get the animation step value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_track_count",
          "qualifiers": "const",
          "description": "Return the amount of tracks in the animation.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "Return whether the animation has the loop flag set.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "method_track_get_key_indices",
          "qualifiers": "const",
          "description": "Return all the key indices of a method track, given a position and delta time.",
          "return_type": "IntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "method_track_get_name",
          "qualifiers": "const",
          "description": "Return the method name of a method track.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "method_track_get_params",
          "qualifiers": "const",
          "description": "Return the arguments values to be called on a method track for a given key in a given track.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_track",
          "description": "Remove a track by specifying the track index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_length",
          "description": "Set the total length of the animation (in seconds). Note that length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "Set a flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_step",
          "description": "Set the animation step value.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_find_key",
          "qualifiers": "const",
          "description": "Find the key index by time in a given track. Optionally, only find it if the exact time is given.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "exact",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "track_get_interpolation_type",
          "qualifiers": "const",
          "description": "Return the interpolation type of a given track, from the INTERPOLATION_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_count",
          "qualifiers": "const",
          "description": "Return the amount of keys in a given track.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_time",
          "qualifiers": "const",
          "description": "Return the time at which the key is located.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_transition",
          "qualifiers": "const",
          "description": "Return the transition curve (easing) for a specific key (see built-in math function \"ease\").",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_value",
          "qualifiers": "const",
          "description": "Return the value of a given key in a given track.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_path",
          "qualifiers": "const",
          "description": "Get the path of a track. for more information on the path format, see [method track_set_path]",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_type",
          "qualifiers": "const",
          "description": "Get the type of a track.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_insert_key",
          "description": "Insert a generic key in a given track.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "key",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "transition",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "track_is_imported",
          "qualifiers": "const",
          "description": "Return true if the given track is imported. Else, return false.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_move_down",
          "description": "Move a track down.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_move_up",
          "description": "Move a track up.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_remove_key",
          "description": "Remove a key by index in a given track.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_remove_key_at_pos",
          "description": "Remove a key by position (seconds) in a given track.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_imported",
          "description": "Set the given track as imported or not.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "imported",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_interpolation_type",
          "description": "Set the interpolation type of a given track, from the INTERPOLATION_* enum.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "interpolation",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_key_transition",
          "description": "Set the transition curve (easing) for a specific key (see built-in math function \"ease\").",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transition",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_key_value",
          "description": "Set the value of an existing key.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_path",
          "description": "Set the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by \":\". Example: \"character/skeleton:ankle\" or \"character/mesh:transform/local\"",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transform_track_insert_key",
          "description": "Insert a transform key for a transform track.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "loc",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "rot",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transform_track_interpolate",
          "qualifiers": "const",
          "description": "Return the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position ([Vector3]), rotation ([Quat]) and scale ([Vector3]).",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "value_track_get_key_indices",
          "qualifiers": "const",
          "description": "Return all the key indices of a value track, given a position and delta time.",
          "return_type": "IntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "value_track_get_update_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "value_track_set_update_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TYPE_VALUE",
          "value": "0",
          "description": "Value tracks set values in node properties, but only those which can be Interpolated."
        },
        {
          "name": "TYPE_TRANSFORM",
          "value": "1",
          "description": "Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are Interpolated."
        },
        {
          "name": "TYPE_METHOD",
          "value": "2",
          "description": "Method tracks call functions with given arguments per key."
        },
        {
          "name": "INTERPOLATION_NEAREST",
          "value": "0",
          "description": "No interpolation (nearest value)."
        },
        {
          "name": "INTERPOLATION_LINEAR",
          "value": "1",
          "description": "Linear interpolation."
        },
        {
          "name": "INTERPOLATION_CUBIC",
          "value": "2",
          "description": "Cubic interpolation."
        },
        {
          "name": "UPDATE_CONTINUOUS",
          "value": "0",
          "description": ""
        },
        {
          "name": "UPDATE_DISCRETE",
          "value": "1",
          "description": ""
        },
        {
          "name": "UPDATE_TRIGGER",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AnimationPlayer": {
      "name": "AnimationPlayer",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Container and player of [Animation] resources.",
      "description": "An animation player is used for general purpose playback of [Animation] resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.",
      "methods": [
        {
          "name": "add_animation",
          "description": "Add an animation resource to the player, which will be later referenced by the \"name\" argument.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "advance",
          "description": "Used to skip ahead or skip back in an animation. Delta is the time in seconds to skip.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_get_next",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_set_next",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anim_to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_caches",
          "description": "The animation player creates caches for faster access to the nodes it will animate. However, if a specific node is removed, it may not notice it, so clear_caches will force the player to search for the nodes again.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_queue",
          "description": "If animations are queued to play, clear them.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "find_animation",
          "qualifiers": "const",
          "description": "Find an animation name by resource.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation",
          "qualifiers": "const",
          "description": "Get an [Animation] resource by requesting a name.",
          "return_type": "Animation",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation_list",
          "qualifiers": "const",
          "description": "Get the list of names of the animations stored in the player.",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "get_animation_process_mode",
          "qualifiers": "const",
          "description": "Return the mode in which the animation player processes. See [method set_animation_process_mode].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_autoplay",
          "qualifiers": "const",
          "description": "Return the name of the animation that will be automatically played when the scene is loaded.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_blend_time",
          "qualifiers": "const",
          "description": "Get the blend time between two animations, referenced by their names.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anim_to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_animation",
          "qualifiers": "const",
          "description": "Return the name of the animation being played.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_animation_length",
          "qualifiers": "const",
          "description": "Get the length (in seconds) of the currently being played animation.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_current_animation_pos",
          "qualifiers": "const",
          "description": "Get the position (in seconds) of the currently being played animation.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_blend_time",
          "qualifiers": "const",
          "description": "Return the default blend time between animations.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_pos",
          "qualifiers": "const",
          "description": "Return the playback position (in seconds) in an animation channel (or channel 0 if none is provided).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_root",
          "qualifiers": "const",
          "description": "Return path to root node (see [method set_root]).",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_speed",
          "qualifiers": "const",
          "description": "Get the speed scaling ratio in a given animation channel (or channel 0 if none is provided). Default ratio is [i]1[/i] (no scaling).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_animation",
          "qualifiers": "const",
          "description": "Request whether an [Animation] name exist within the player.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Return true if the player is active.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return whether an animation is playing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play a given animation by the animation name. Custom speed and blend times can be set. If custom speed is negative (-1), 'from_end' being true can play the animation backwards.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "1",
              "name": "custom_blend",
              "type": "float",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "custom_speed",
              "type": "float",
              "default_value": "1"
            },
            {
              "index": "3",
              "name": "from_end",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "play_backwards",
          "description": "Play a given animation by the animation name in reverse.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "1",
              "name": "custom_blend",
              "type": "float",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "queue",
          "description": "Queue an animation for playback once the current one is done.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_animation",
          "description": "Remove an animation from the player (by supplying the same name used to add it).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_animation",
          "description": "Rename an existing animation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "newname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek",
          "description": "Seek the animation to a given position in time (in seconds). If 'update' is true, the animation will be updated too, otherwise it will be updated at process time.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "update",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_active",
          "description": "Set the player as active (playing). If false, it will do nothing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_process_mode",
          "description": "Set the mode in which the animation player processes. By default, it processes on idle time (framerate dependent), but using fixed time works well for animating static collision bodies in 2D and 3D. See enum ANIMATION_PROCESS_*.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "Set the name of the animation that will be automatically played when the scene is loaded.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_blend_time",
          "description": "Specify a blend time (in seconds) between two animations, referenced by their names.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anim_to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_animation",
          "description": "Set the current animation (even if no playback occurs). Using set_current_animation() and set_active() are similar to calling play().",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_blend_time",
          "description": "Set the default blend time between animations.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_root",
          "description": "AnimationPlayer resolves animation track paths from this node (which is relative to itself), by default root is \"..\", but it can be changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed",
          "description": "Set a speed scaling ratio in a given animation channel (or channel 0 if none is provided). Default ratio is [i]1[/i] (no scaling).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the currently playing animation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "reset",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "stop_all",
          "description": "Stop playback of animations (deprecated).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "animation_changed",
          "description": "If the currently being played animation changes, this signal will notify of such change.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "old_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_started",
          "description": "Notifies when an animation starts playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "finished",
          "description": "Notifies when an animation finished playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "ANIMATION_PROCESS_FIXED",
          "value": "0",
          "description": "Process animation on fixed process. This is specially useful when animating kinematic bodies."
        },
        {
          "name": "ANIMATION_PROCESS_IDLE",
          "value": "1",
          "description": "Process animation on idle process."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AnimationTreePlayer": {
      "name": "AnimationTreePlayer",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Animation Player that uses a node graph for the blending.",
      "description": "Animation Player that uses a node graph for the blending. This kind of player is very useful when animating character or other skeleton based rigs, because it can combine several animations to form a desired pose.",
      "methods": [
        {
          "name": "add_node",
          "description": "Add a node of a given type in the graph with given id.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "advance",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_get_animation",
          "qualifiers": "const",
          "description": "",
          "return_type": "Animation",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_get_master_animation",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_set_animation",
          "description": "Set the animation for an animation node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_set_filter_path",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_set_master_animation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "source",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend2_node_get_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend2_node_set_amount",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "blend",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend2_node_set_filter_path",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend3_node_get_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend3_node_set_amount",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "blend",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend4_node_get_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend4_node_set_amount",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "blend",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "connect",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dst_id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst_input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dst_input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation_process_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_base_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_master_player",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_node_list",
          "description": "",
          "return_type": "StringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_connected",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dst_id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst_input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mix_node_get_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mix_node_set_amount",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_exists",
          "qualifiers": "const",
          "description": "Check if a node exists (by name).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_input_count",
          "qualifiers": "const",
          "description": "Return the input count for a given node. Different types of nodes have different amount of inputs.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_input_source",
          "qualifiers": "const",
          "description": "Return the input source for a given node input.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_type",
          "qualifiers": "const",
          "description": "Get the node type, will return from NODE_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_rename",
          "description": "Rename a node in the graph.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_set_pos",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "screen_pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_autorestart_delay",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_autorestart_random_delay",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_fadein_time",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_fadeout_time",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_has_autorestart",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_is_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_autorestart",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_autorestart_delay",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "delay_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_autorestart_random_delay",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rand_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_fadein_time",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_fadeout_time",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_filter_path",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_start",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_stop",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "recompute_caches",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_node",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_active",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_process_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_path",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_master_player",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "nodepath",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "timescale_node_get_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "timescale_node_set_scale",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "timeseek_node_seek",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_delete_input",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_get_current",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_get_input_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_get_xfade_time",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_has_input_auto_advance",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_current",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_input_auto_advance",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_input_count",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "count",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_xfade_time",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NODE_OUTPUT",
          "value": "0",
          "description": ""
        },
        {
          "name": "NODE_ANIMATION",
          "value": "1",
          "description": ""
        },
        {
          "name": "NODE_ONESHOT",
          "value": "2",
          "description": ""
        },
        {
          "name": "NODE_MIX",
          "value": "3",
          "description": ""
        },
        {
          "name": "NODE_BLEND2",
          "value": "4",
          "description": ""
        },
        {
          "name": "NODE_BLEND3",
          "value": "5",
          "description": ""
        },
        {
          "name": "NODE_BLEND4",
          "value": "6",
          "description": ""
        },
        {
          "name": "NODE_TIMESCALE",
          "value": "7",
          "description": ""
        },
        {
          "name": "NODE_TIMESEEK",
          "value": "8",
          "description": ""
        },
        {
          "name": "NODE_TRANSITION",
          "value": "9",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Area": {
      "name": "Area",
      "inherits": "CollisionObject",
      "category": "Core",
      "brief_description": "General purpose area detection and influence for 3D physics.",
      "description": "General purpose area detection for 3D physics. Areas can be used for detection of objects that enter/exit them, as well as overriding space parameters (changing gravity, damping, etc). For this, use any space override different from AREA_SPACE_OVERRIDE_DISABLE and point gravity at the center of mass.",
      "methods": [
        {
          "name": "get_angular_damp",
          "qualifiers": "const",
          "description": "Return the angular damp rate.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "Return the physics layers this area can scan for collisions.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_gravity",
          "qualifiers": "const",
          "description": "Return the gravity intensity.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_distance_scale",
          "qualifiers": "const",
          "description": "Return the falloff factor for point gravity.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_vector",
          "qualifiers": "const",
          "description": "Return the gravity vector. If gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "Return the physics layer this area is in.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_layer_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the layer mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_linear_damp",
          "qualifiers": "const",
          "description": "Return the linear damp rate.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_overlapping_areas",
          "qualifiers": "const",
          "description": "Return a list of the areas that are totally or partially inside this area.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_overlapping_bodies",
          "qualifiers": "const",
          "description": "Return a list of the bodies ([PhysicsBody]) that are totally or partially inside this area.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_priority",
          "qualifiers": "const",
          "description": "Return the processing order of this area.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_space_override_mode",
          "qualifiers": "const",
          "description": "Return the space override mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_gravity_a_point",
          "qualifiers": "const",
          "description": "Return whether gravity is a point. A point gravity will attract objects towards it, as opposed to a gravity vector, which moves them in a given direction.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_monitorable",
          "qualifiers": "const",
          "description": "Return whether this area can be detected by other, monitoring, areas.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_monitoring_enabled",
          "qualifiers": "const",
          "description": "Return whether this area detects bodies/areas entering/exiting it.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "overlaps_area",
          "qualifiers": "const",
          "description": "Return whether the area passed is totally or partially inside this area.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "overlaps_body",
          "qualifiers": "const",
          "description": "Return whether the body passed is totally or partially inside this area.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_angular_damp",
          "description": "Set the rate at which objects stop spinning in this area, if there are not any other forces making it spin. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.\n\t\t\t\tIn practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "Set the physics layers this area can scan for collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collision_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enable_monitoring",
          "description": "Set whether this area can detect bodies/areas entering/exiting it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity",
          "description": "Set the gravity intensity. This is useful to alter the force of gravity without altering its direction.\n\t\t\t\tThis value multiplies the gravity vector, whether it is the given vector ([method set_gravity_vector]), or a calculated one (when using a center of gravity).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gravity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_distance_scale",
          "description": "Set the falloff factor for point gravity. The greater this value is, the faster the strength of gravity decreases with the square of distance.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_is_point",
          "description": "When overriding space parameters, this method sets whether this area has a center of gravity. To set/get the location of the center of gravity, use [method set_gravity_vector]/[method get_gravity_vector].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_vector",
          "description": "Set the gravity vector. This vector does not have to be normalized.\n\t\t\t\tIf gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "Set the physics layers this area is in.\n\t\t\t\tCollidable objects can exist in any of 32 different layers. These layers are not visual, but more of a tagging system instead. A collidable can use these layers/tags to select with which objects it can collide, using [method set_collision_mask].\n\t\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask_bit",
          "description": "Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_damp",
          "description": "Set the rate at which objects stop moving in this area, if there are not any other forces moving it. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.\n\t\t\t\tIn practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_monitorable",
          "description": "Set whether this area can be detected by other, monitoring, areas. Only areas need to be marked as monitorable. Bodies are always so.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_priority",
          "description": "Set the order in which the area is processed. Greater values mean the area gets processed first. This is useful for areas which have an space override different from AREA_SPACE_OVERRIDE_DISABLED or AREA_SPACE_OVERRIDE_COMBINE, as they replace values, and are thus order-dependent.\n\t\t\t\tAreas with the same priority value get evaluated in an unpredictable order, and should be differentiated if evaluation order is to be important.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "priority",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_space_override_mode",
          "description": "Set the space override mode. This mode controls how an area affects gravity and damp.\n\t\t\t\tAREA_SPACE_OVERRIDE_DISABLED: This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.\n\t\t\t\tAREA_SPACE_OVERRIDE_COMBINE: This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.\n\t\t\t\tAREA_SPACE_OVERRIDE_COMBINE_REPLACE: This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.\n\t\t\t\tAREA_SPACE_OVERRIDE_REPLACE: This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.\n\t\t\t\tAREA_SPACE_OVERRIDE_REPLACE_COMBINE: This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "area_enter",
          "description": "This signal is triggered only once when an area enters this area. The only parameter passed is the area that entered this area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_enter_shape",
          "description": "This signal triggers only once when an area enters this area. The first parameter is the area's [RID]. The second one is the area as an object. The third one is the index of the shape entering this area, and the fourth one is the index of the shape in this area that reported the entering.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_exit",
          "description": "This signal is triggered only once when an area exits this area. The only parameter passed is the area that exited this area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_exit_shape",
          "description": "This signal triggers only once when an area exits this area. The first parameter is the area's [RID]. The second one is the area as an object. The third one is the index of the shape entering this area, and the fourth one is the index of the shape in this area that reported the entering.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_enter",
          "description": "This signal is triggered only once when a body enters this area. The only parameter passed is the body that entered this area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_enter_shape",
          "description": "This signal triggers only once when a body enters this area. The first parameter is the body's [RID]. The second one is the body as an object. The third one is the index of the shape of the body that entered this area, and the fourth one is the index of the shape in this area that reported the entering.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exit",
          "description": "This signal is triggered only once when a body exits this area. The only parameter passed is the body that exited this area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exit_shape",
          "description": "This signal triggers only once when a body exits this area. The first parameter is the body's [RID]. The second one is the body as an object. The third one is the index of the shape exiting this area, and the fourth one is the index of the shape in this area that reported the exit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Area2D": {
      "name": "Area2D",
      "inherits": "CollisionObject2D",
      "category": "Core",
      "brief_description": "General purpose area detection and influence for 2D physics.",
      "description": "General purpose area detection for 2D physics. Areas can be used for detection of objects that enter/exit them, as well as overriding space parameters (changing gravity, damping, etc). For this, use any space override different from AREA_SPACE_OVERRIDE_DISABLE and point gravity at the center of mass.",
      "methods": [
        {
          "name": "get_angular_damp",
          "qualifiers": "const",
          "description": "Return the angular damp rate.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "Return the physics layers this area can scan for collisions.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_gravity",
          "qualifiers": "const",
          "description": "Return the gravity intensity.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_distance_scale",
          "qualifiers": "const",
          "description": "Return the falloff factor for point gravity.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_vector",
          "qualifiers": "const",
          "description": "Return the gravity vector. If gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "Return the physics layer this area is in.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_layer_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the layer mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_linear_damp",
          "qualifiers": "const",
          "description": "Return the linear damp rate.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_overlapping_areas",
          "qualifiers": "const",
          "description": "Return a list of the areas that are totally or partially inside this area.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_overlapping_bodies",
          "qualifiers": "const",
          "description": "Return a list of the bodies ([PhysicsBody2D]) that are totally or partially inside this area.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_priority",
          "qualifiers": "const",
          "description": "Return the processing order of this area.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_space_override_mode",
          "qualifiers": "const",
          "description": "Return the space override mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_gravity_a_point",
          "qualifiers": "const",
          "description": "Return whether gravity is a point. A point gravity will attract objects towards it, as opposed to a gravity vector, which moves them in a given direction.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_monitorable",
          "qualifiers": "const",
          "description": "Return whether this area can be detected by other, monitoring, areas.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_monitoring_enabled",
          "qualifiers": "const",
          "description": "Return whether this area detects bodies/areas entering/exiting it.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "overlaps_area",
          "qualifiers": "const",
          "description": "Return whether the area passed is totally or partially inside this area.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "overlaps_body",
          "qualifiers": "const",
          "description": "Return whether the body passed is totally or partially inside this area.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_angular_damp",
          "description": "Set the rate at which objects stop spinning in this area, if there are not any other forces making it spin. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.\n\t\t\t\tIn practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "Set the physics layers this area can scan for collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collision_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enable_monitoring",
          "description": "Set whether this area can detect bodies/areas entering/exiting it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity",
          "description": "Set the gravity intensity. This is useful to alter the force of gravity without altering its direction.\n\t\t\t\tThis value multiplies the gravity vector, whether it is the given vector ([method set_gravity_vector]), or a calculated one (when using a center of gravity).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gravity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_distance_scale",
          "description": "Set the falloff factor for point gravity. The greater this value is, the faster the strength of gravity decreases with the square of distance.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_is_point",
          "description": "When overriding space parameters, this method sets whether this area has a center of gravity. To set/get the location of the center of gravity, use [method set_gravity_vector]/[method get_gravity_vector].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_vector",
          "description": "Set the gravity vector. This vector does not have to be normalized.\n\t\t\t\tIf gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "Set the physics layers this area is in.\n\t\t\t\tCollidable objects can exist in any of 32 different layers. These layers are not visual, but more of a tagging system instead. A collidable can use these layers/tags to select with which objects it can collide, using [method set_collision_mask].\n\t\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask_bit",
          "description": "Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_damp",
          "description": "Set the rate at which objects stop moving in this area, if there are not any other forces moving it. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.\n\t\t\t\tIn practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_monitorable",
          "description": "Set whether this area can be detected by other, monitoring, areas. Only areas need to be marked as monitorable. Bodies are always so.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_priority",
          "description": "Set the order in which the area is processed. Greater values mean the area gets processed first. This is useful for areas which have an space override different from AREA_SPACE_OVERRIDE_DISABLED or AREA_SPACE_OVERRIDE_COMBINE, as they replace values, and are thus order-dependent.\n\t\t\t\tAreas with the same priority value get evaluated in an unpredictable order, and should be differentiated if evaluation order is to be important.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "priority",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_space_override_mode",
          "description": "Set the space override mode. This mode controls how an area affects gravity and damp.\n\t\t\t\tAREA_SPACE_OVERRIDE_DISABLED: This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.\n\t\t\t\tAREA_SPACE_OVERRIDE_COMBINE: This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.\n\t\t\t\tAREA_SPACE_OVERRIDE_COMBINE_REPLACE: This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.\n\t\t\t\tAREA_SPACE_OVERRIDE_REPLACE: This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.\n\t\t\t\tAREA_SPACE_OVERRIDE_REPLACE_COMBINE: This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "area_enter",
          "description": "This signal is triggered only once when an area enters this area. The only parameter passed is the area that entered this area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_enter_shape",
          "description": "This signal triggers only once when an area enters this area. The first parameter is the area's [RID]. The second one is the area as an object. The third one is the index of the shape entering this area, and the fourth one is the index of the shape in this area that reported the entering.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_exit",
          "description": "This signal is triggered only once when an area exits this area. The only parameter passed is the area that exited this area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_exit_shape",
          "description": "This signal triggers only once when an area exits this area. The first parameter is the area's [RID]. The second one is the area as an object. The third one is the index of the shape entering this area, and the fourth one is the index of the shape in this area that reported the entering.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_enter",
          "description": "This signal is triggered only once when a body enters this area. The only parameter passed is the body that entered this area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_enter_shape",
          "description": "This signal triggers only once when a body enters this area. The first parameter is the body's [RID]. The second one is the body as an object. The third one is the index of the shape of the body that entered this area, and the fourth one is the index of the shape in this area that reported the entering.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exit",
          "description": "This signal is triggered only once when a body exits this area. The only parameter passed is the body that exited this area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exit_shape",
          "description": "This signal triggers only once when a body exits this area. The first parameter is the body's [RID]. The second one is the body as an object. The third one is the index of the shape exiting this area, and the fourth one is the index of the shape in this area that reported the exit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Array": {
      "name": "Array",
      "category": "Built-In Types",
      "brief_description": "Generic array datatype.",
      "description": "Generic array, contains several elements of any type, accessible by numerical index starting at 0. Negative indices can be used to count from the right, like in Python. Arrays are always passed by reference.",
      "methods": [
        {
          "name": "Array",
          "description": "Construct an array from a [RawArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "ColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [RawArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [RawArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [RawArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [RawArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [RawArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [RawArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "back",
          "description": "Returns the last element of the array if the array is not empty (size>0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear",
          "description": "Clear the array (resize to 0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "count",
          "description": "Return the amount of times an element is in the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "empty",
          "description": "Return true if the array is empty (size==0).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "erase",
          "description": "Remove the first occurrence of a value from the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find",
          "description": "Searches the array for a value and returns its index or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "find_last",
          "description": "Searches the array in reverse order for a value and returns its index or -1 if not found.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "front",
          "description": "Returns the first element of the array if the array is not empty (size>0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has",
          "description": "Return true if the array contains given value.\n\t\t\t\t[codeblock]\n\t\t\t\t[ \"inside\", 7 ].has(\"inside\") == true\n\t\t\t\t[ \"inside\", 7 ].has(\"outside\") == false\n\t\t\t\t[ \"inside\", 7 ].has(7) == true\n\t\t\t\t[ \"inside\", 7 ].has(\"7\") == false\n\t\t\t\t[/codeblock]",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hash",
          "description": "Return a hashed integer value representing the array contents.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_shared",
          "description": "Get whether this is a shared array instance.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pop_back",
          "description": "Remove the last element of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pop_front",
          "description": "Remove the first element of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append an element at the end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_front",
          "description": "Add an element at the beginning of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Resize the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are Null.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rfind",
          "description": "Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the amount of elements in the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sort",
          "description": "Sort the array using natural order.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sort_custom",
          "description": "Sort the array using a custom method. The arguments are an object that holds the method and the name of such method. The custom method receives two arguments (a pair of elements from the array) and must return true if the first argument is less than the second, and return false otherwise.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "func",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AtlasTexture": {
      "name": "AtlasTexture",
      "inherits": "Texture",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_atlas",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "set_atlas",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "atlas",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "atlas_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioServer": {
      "name": "AudioServer",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Server interface for low level audio access.",
      "description": "AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.",
      "methods": [
        {
          "name": "free_rid",
          "description": "Free a [RID] resource.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_event_voice_global_volume_scale",
          "qualifiers": "const",
          "description": "Return the global scale for event-based stream playback.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fx_global_volume_scale",
          "qualifiers": "const",
          "description": "Return the global scale for all voices.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_stream_global_volume_scale",
          "qualifiers": "const",
          "description": "Return the global scale for stream playback.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "sample_create",
          "description": "Create an audio sample, return a [RID] referencing it. The sample will be created with a given format (from the SAMPLE_FORMAT_* enum), a total length (in samples, not bytes), in either stereo or mono.\n\t\t\t\tEven if a stereo sample consists of a left sample and a right sample, it still counts as one sample for length purposes.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "stereo",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "length",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_data",
          "qualifiers": "const",
          "description": "Return the sample data as an array of bytes. The length will be the expected length in bytes.",
          "return_type": "RawArray",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_description",
          "qualifiers": "const",
          "description": "Return the description of an audio sample. Mainly used for organization.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_format",
          "qualifiers": "const",
          "description": "Return the format of the audio sample, in the form of the SAMPLE_FORMAT_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_length",
          "qualifiers": "const",
          "description": "Return the length in samples (not bytes) of the audio sample. Even if a stereo sample consists of a left sample and a right sample, it still counts as one sample for length purposes.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_loop_begin",
          "qualifiers": "const",
          "description": "Return the initial loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_loop_end",
          "qualifiers": "const",
          "description": "Return the final loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_loop_format",
          "qualifiers": "const",
          "description": "Return the loop format for a sample, as a value from the SAMPLE_LOOP_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_mix_rate",
          "qualifiers": "const",
          "description": "Return the mix rate of the given sample.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_is_stereo",
          "qualifiers": "const",
          "description": "Return whether the sample is stereo (2 channels).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_data",
          "description": "Set the sample data for a given sample as an array of bytes. The length must be equal to the sample length expected in bytes or an error will be produced. The byte length can be calculated as follows:\n\t\t\t\tGet the sample length ([method sample_get_length]).\n\t\t\t\tIf the sample format is SAMPLE_FORMAT_PCM16, multiply it by 2.\n\t\t\t\tIf the sample format is SAMPLE_FORMAT_IMA_ADPCM, divide it by 2 (rounding any fraction up), then add 4.\n\t\t\t\tIf the sample is stereo ([method sample_is_stereo]), multiply it by 2.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_description",
          "description": "Set the description of an audio sample. Mainly used for organization.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "description",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_loop_begin",
          "description": "Set the initial loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_loop_end",
          "description": "Set the final loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_loop_format",
          "description": "Set the loop format for a sample from the SAMPLE_LOOP_* enum. As a warning, Ping Pong loops may not be available on some hardware-mixing platforms.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "loop_format",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_mix_rate",
          "description": "Change the default mix rate of a given sample.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mix_rate",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_signed_data",
          "description": "Set the sample data for a given sample as an array of floats. The length must be equal to the sample length or an error will be produced.\n\t\t\t\tFor this method, a stereo sample is made from two samples. Thus, in case of a stereo sample, the array length must be twice the length returned by [method sample_get_length].\n\t\t\t\tTrying to alter a SAMPLE_FORMAT_IMA_ADPCM sample is not supported. It will throw an error to the console, but will not alter the sample data.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "RealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_event_voice_global_volume_scale",
          "description": "Set global scale for event-based stream ([EventStream]) playback. Default is 1.0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fx_global_volume_scale",
          "description": "Set global scale for all voices (not including streams). Default is 1.0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream_global_volume_scale",
          "description": "Set global scale for stream playback. Default is 1.0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_create",
          "description": "Allocate a voice for playback. Voices are persistent. A voice can play a single sample at the same time. See [method sample_create].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "voice_get_chorus",
          "qualifiers": "const",
          "description": "Return the current chorus send for a given voice (0 to 1).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_filter_cutoff",
          "qualifiers": "const",
          "description": "Return the current filter cutoff (in hz) for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_filter_resonance",
          "qualifiers": "const",
          "description": "Return the current filter resonance for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_filter_type",
          "qualifiers": "const",
          "description": "Return the current selected filter type for a given voice, from the FILTER_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_mix_rate",
          "qualifiers": "const",
          "description": "Return the current mix rate for a given voice.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_pan",
          "qualifiers": "const",
          "description": "Return the current pan for a given voice (-1 to +1 range).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_pan_depth",
          "qualifiers": "const",
          "description": "Return the current pan depth for a given voice (-1 to +1 range).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_pan_height",
          "qualifiers": "const",
          "description": "Return the current pan height for a given voice (-1 to +1 range).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_reverb",
          "qualifiers": "const",
          "description": "Return the current reverb send for a given voice (0 to 1).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_reverb_type",
          "qualifiers": "const",
          "description": "Return the current reverb type for a given voice from the REVERB_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_get_volume",
          "qualifiers": "const",
          "description": "Return the current volume for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_is_positional",
          "qualifiers": "const",
          "description": "Return whether the current voice is positional. See [method voice_set_positional].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_play",
          "description": "Start playback of a given voice using a given sample. If the voice was already playing it will be restarted.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "sample",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_set_chorus",
          "description": "Set chorus send post processing for the voice (from 0 to 1).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "chorus",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_set_filter",
          "description": "Set a resonant filter post processing for the voice. Filter type is a value from the FILTER_* enum.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "cutoff",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "resonance",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "gain",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "voice_set_mix_rate",
          "description": "Set a different playback mix rate for the given voice.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rate",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_set_pan",
          "description": "Change the pan of a currently playing voice and, optionally, the depth and height for a positional/3D sound. Panning values are expressed within the -1 to +1 range.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pan",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "depth",
              "type": "float",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "height",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "voice_set_positional",
          "description": "Set whether a given voice is positional. This is only interpreted as a hint and used for backends that may support binaural encoding.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_set_reverb",
          "description": "Set the reverb send post processing for the voice (from 0 to 1) and the reverb type, from the REVERB_* enum.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "room",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "reverb",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_set_volume",
          "description": "Change the volume of a currently playing voice. Volume is expressed as linear gain where 0.0 is mute and 1.0 is default.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "volume",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_stop",
          "description": "Stop a given voice.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "RID",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SAMPLE_FORMAT_PCM8",
          "value": "0",
          "description": "Sample format is 8 bits, signed."
        },
        {
          "name": "SAMPLE_FORMAT_PCM16",
          "value": "1",
          "description": "Sample format is 16 bits, little-endian, signed."
        },
        {
          "name": "SAMPLE_FORMAT_IMA_ADPCM",
          "value": "2",
          "description": "Sample format is IMA-ADPCM compressed."
        },
        {
          "name": "SAMPLE_LOOP_NONE",
          "value": "0",
          "description": "Sample does not loop."
        },
        {
          "name": "SAMPLE_LOOP_FORWARD",
          "value": "1",
          "description": "Sample loops in forward mode."
        },
        {
          "name": "SAMPLE_LOOP_PING_PONG",
          "value": "2",
          "description": "Sample loops in a bidirectional way."
        },
        {
          "name": "FILTER_NONE",
          "value": "0",
          "description": "Filter is disabled."
        },
        {
          "name": "FILTER_LOWPASS",
          "value": "1",
          "description": "Filter is a resonant lowpass."
        },
        {
          "name": "FILTER_BANDPASS",
          "value": "2",
          "description": "Filter is a resonant bandpass."
        },
        {
          "name": "FILTER_HIPASS",
          "value": "3",
          "description": "Filter is a resonant highpass."
        },
        {
          "name": "FILTER_NOTCH",
          "value": "4",
          "description": "Filter is a notch (band reject)."
        },
        {
          "name": "FILTER_BANDLIMIT",
          "value": "6",
          "description": "Filter is a bandlimit (resonance used as highpass)."
        },
        {
          "name": "REVERB_SMALL",
          "value": "0",
          "description": "Small reverb room (closet, bathroom, etc)."
        },
        {
          "name": "REVERB_MEDIUM",
          "value": "1",
          "description": "Medium reverb room (living room)"
        },
        {
          "name": "REVERB_LARGE",
          "value": "2",
          "description": "Large reverb room (warehouse)."
        },
        {
          "name": "REVERB_HALL",
          "value": "3",
          "description": "Large reverb room with long decay."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AudioServerSW": {
      "name": "AudioServerSW",
      "inherits": "AudioServer",
      "category": "Core",
      "brief_description": "Software implementation of [AudioServer].",
      "description": "This is a software audio server. It does not use any kind of hardware acceleration.\n\t\tThis class does not expose any new method.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStream": {
      "name": "AudioStream",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Base class for audio streams.",
      "description": "Base class for audio streams. Audio streams are used for music playback, or other types of streamed sounds that don't fit or require more flexibility than a [Sample].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamMPC": {
      "name": "AudioStreamMPC",
      "inherits": "AudioStream",
      "category": "Core",
      "brief_description": "MusePack audio stream driver.",
      "description": "MusePack audio stream driver.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamOGGVorbis": {
      "name": "AudioStreamOGGVorbis",
      "inherits": "AudioStream",
      "category": "Core",
      "brief_description": "OGG Vorbis audio stream driver.",
      "description": "OGG Vorbis audio stream driver.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamOpus": {
      "name": "AudioStreamOpus",
      "inherits": "AudioStream",
      "category": "Core",
      "brief_description": "Opus Codec audio stream driver.",
      "description": "Opus Codec audio stream driver.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamPlayback": {
      "name": "AudioStreamPlayback",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_channels",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_loop_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_minimum_buffer_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mix_rate",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_pos_sec",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "seek_pos",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamSpeex": {
      "name": "AudioStreamSpeex",
      "inherits": "AudioStream",
      "category": "Core",
      "brief_description": "Speex audio stream driver.",
      "description": "Speex audio stream driver. Speex is very useful for compressed speech. It allows loading a very large amount of speech in memory at little IO/latency cost.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "BackBufferCopy": {
      "name": "BackBufferCopy",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Copies a region of the screen (or the whole screen) to a buffer so it can be accessed with the texscreen() shader instruction.",
      "description": "Node for back-buffering the currently displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Accessing this buffer is done with the texscreen() shader instruction.",
      "methods": [
        {
          "name": "get_copy_mode",
          "qualifiers": "const",
          "description": "Return the copy mode currently applied to the BackBufferCopy (refer to constants section).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Return the area covered by the BackBufferCopy.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "set_copy_mode",
          "description": "Set the copy mode of the BackBufferCopy (refer to constants section).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "copy_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rect",
          "description": "Defines the area covered by the BackBufferCopy.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "COPY_MODE_DISABLED",
          "value": "0",
          "description": "Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers."
        },
        {
          "name": "COPY_MODE_RECT",
          "value": "1",
          "description": "Sets the copy mode to a region."
        },
        {
          "name": "COPY_MODE_VIEWPORT",
          "value": "2",
          "description": "Sets the copy mode to the entire screen."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "BakedLight": {
      "name": "BakedLight",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_lightmap",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "gen_size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_lightmaps",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "erase_lightmap",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_ao_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ao_strength",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_bake_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bounces",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_cell_extra_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_cell_subdivision",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_edge_damp",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_energy_multiplier",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_gamma_adjust",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_initial_lattice_subdiv",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_light",
          "qualifiers": "const",
          "description": "",
          "return_type": "RawArray",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_normal_damp",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_octree",
          "qualifiers": "const",
          "description": "",
          "return_type": "RawArray",
          "arguments": []
        },
        {
          "name": "get_plot_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_realtime_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_realtime_color_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_realtime_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sampler_octree",
          "qualifiers": "const",
          "description": "",
          "return_type": "IntArray",
          "arguments": []
        },
        {
          "name": "get_saturation",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tint",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_transfer_lightmaps_only_to_uv2",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_ao_radius",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ao_radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ao_strength",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ao_strength",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bake_flag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bounces",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounces",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_extra_margin",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cell_extra_margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_subdivision",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cell_subdivision",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edge_damp",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "edge_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_energy_multiplier",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy_multiplier",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_format",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gamma_adjust",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gamma_adjust",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_initial_lattice_subdiv",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cell_subdivision",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_light",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal_damp",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_octree",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "octree",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_plot_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plot_size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_realtime_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tint",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_realtime_color_enabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_realtime_energy",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sampler_octree",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sampler_octree",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_saturation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "saturation",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tint",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tint",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transfer_lightmaps_only_to_uv2",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MODE_OCTREE",
          "value": "0",
          "description": ""
        },
        {
          "name": "MODE_LIGHTMAPS",
          "value": "1",
          "description": ""
        },
        {
          "name": "BAKE_DIFFUSE",
          "value": "0",
          "description": ""
        },
        {
          "name": "BAKE_SPECULAR",
          "value": "1",
          "description": ""
        },
        {
          "name": "BAKE_TRANSLUCENT",
          "value": "2",
          "description": ""
        },
        {
          "name": "BAKE_CONSERVE_ENERGY",
          "value": "3",
          "description": ""
        },
        {
          "name": "BAKE_MAX",
          "value": "5",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "BakedLightInstance": {
      "name": "BakedLightInstance",
      "inherits": "VisualInstance",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_baked_light",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_baked_light_instance",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "set_baked_light",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "baked_light",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "baked_light_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "BakedLightSampler": {
      "name": "BakedLightSampler",
      "inherits": "VisualInstance",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resolution",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_resolution",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resolution",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_RADIUS",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_STRENGTH",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_DETAIL_RATIO",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "BaseButton": {
      "name": "BaseButton",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Provides a base class for different kinds of buttons.",
      "description": "BaseButton is the abstract base class for buttons, so it shouldn't be used directly (It doesn't display anything). Other types of buttons inherit from it.",
      "methods": [
        {
          "name": "_pressed",
          "qualifiers": "virtual",
          "description": "Called when button is pressed.",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "_toggled",
          "qualifiers": "virtual",
          "description": "Called when button is toggled (only if toggle_mode is active).",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_click_on_press",
          "qualifiers": "const",
          "description": "Return the state of the click_on_press property (see [method set_click_on_press]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_draw_mode",
          "qualifiers": "const",
          "description": "Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to \"draw\" signal. The visual state of the button is defined by the DRAW_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_enabled_focus_mode",
          "qualifiers": "const",
          "description": "Returns focus access mode used when switching between enabled/disabled (see [method Control.set_focus_mode] and [method set_disabled]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shortcut",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "is_disabled",
          "qualifiers": "const",
          "description": "Return whether the button is in disabled state (see [method set_disabled]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_hovered",
          "qualifiers": "const",
          "description": "Return true if mouse entered the button before it exit.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "qualifiers": "const",
          "description": "If toggle_mode is active, return whether the button is toggled. If toggle_mode is not active, return whether the button is pressed down.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_toggle_mode",
          "qualifiers": "const",
          "description": "Return the toggle_mode property (see [method set_toggle_mode]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_click_on_press",
          "description": "Set the button click_on_press mode. This mode generates click events when a mouse button or key is just pressed (by default events are generated when the button/keys are released and both press and release occur in the visual area of the Button).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disabled",
          "description": "Set the button into disabled state. When a button is disabled, it can't be clicked or toggled.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled_focus_mode",
          "description": "Sets the focus access mode to use when switching between enabled/disabled (see [method Control.set_focus_mode] and [method set_disabled]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressed",
          "description": "Set the button to pressed state (only if toggle_mode is active).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shortcut",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shortcut",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_toggle_mode",
          "description": "Set the button toggle_mode property. Toggle mode makes the button flip state between pressed and unpressed each time its area is clicked.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "button_down",
          "description": "Emitted when the button starts being held down.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "button_up",
          "description": "Emitted when the button stops being held down.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pressed",
          "description": "This signal is emitted every time the button is toggled or pressed (i.e. activated, so on [code]button_down[/code] if \"Click on press\" is active and on [code]button_up[/code] otherwise).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "released",
          "description": "Emitted when the button was released. This is only emitted by non-toggle buttons and if \"Click on press\" is active.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "toggled",
          "description": "This signal is emitted when the button was just toggled between pressed and normal states (only if toggle_mode is active). The new state is contained in the [i]pressed[/i] argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "DRAW_NORMAL",
          "value": "0",
          "description": "The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons."
        },
        {
          "name": "DRAW_PRESSED",
          "value": "1",
          "description": "The state of buttons are pressed."
        },
        {
          "name": "DRAW_HOVER",
          "value": "2",
          "description": "The state of buttons are hovered."
        },
        {
          "name": "DRAW_DISABLED",
          "value": "3",
          "description": "The state of buttons are disabled."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "BitMap": {
      "name": "BitMap",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "create",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_from_image_alpha",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_true_bit_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_bit",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bit",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bit_rect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bit",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "BitmapFont": {
      "name": "BitmapFont",
      "inherits": "Font",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_char",
          "description": "Add a character to the font, where [i]character[/i] is the unicode value, [i]texture[/i] is the texture index, [i]rect[/i] is the region in the texture (in pixels!), [i]align[/i] is the (optional) alignment for the character and [i]advance[/i] is the (optional) advance.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "character",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "align",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            },
            {
              "index": "4",
              "name": "advance",
              "type": "float",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_kerning_pair",
          "description": "Add a kerning pair to the [BitmapFont] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "char_a",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "char_b",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "kerning",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_texture",
          "description": "Add a texture to the [BitmapFont].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear all the font data.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_from_fnt",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_char_size",
          "qualifiers": "const",
          "description": "Return the size of a character, optionally taking kerning into account if the next character is provided.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "char",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "next",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_fallback",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_kerning_pair",
          "qualifiers": "const",
          "description": "Return a kerning pair as a difference.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "char_a",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "char_b",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_texture_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_ascent",
          "description": "Set the font ascent (number of pixels above the baseline).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "px",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_distance_field_hint",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fallback",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fallback",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_height",
          "description": "Set the total font height (ascent plus descent) in pixels.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "px",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "BoneAttachment": {
      "name": "BoneAttachment",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "A node that will attach to a bone.",
      "description": "This node must be the child of a [Skeleton] node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone.",
      "methods": [
        {
          "name": "get_bone_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_bone_name",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "BoxContainer": {
      "name": "BoxContainer",
      "inherits": "Container",
      "category": "Core",
      "brief_description": "Base class for Box containers.",
      "description": "Base class for Box containers. It arranges children controls vertically or horizontally, and rearranges them automatically when their minimum size changes.",
      "methods": [
        {
          "name": "add_spacer",
          "description": "Add a control to the box as a spacer.\n\t\t\t\tIf [i]begin[/i] is true the spacer control will be inserted in front of other children.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "begin",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_alignment",
          "qualifiers": "const",
          "description": "Return the alignment of children in the container.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_alignment",
          "description": "Set the alignment of children in the container(Must be one of ALIGN_BEGIN, ALIGN_CENTER or ALIGN_END).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "alignment",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ALIGN_BEGIN",
          "value": "0",
          "description": "Align children with beginning of the container."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": "Align children with center of the container."
        },
        {
          "name": "ALIGN_END",
          "value": "2",
          "description": "Align children with end of the container."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "BoxShape": {
      "name": "BoxShape",
      "inherits": "Shape",
      "category": "Core",
      "brief_description": "Box shape resource.",
      "description": "Box shape resource, which can be set into a [PhysicsBody] or area.",
      "methods": [
        {
          "name": "get_extents",
          "qualifiers": "const",
          "description": "Return the half extents of the shape.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "set_extents",
          "description": "Set the half extents for the shape.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Button": {
      "name": "Button",
      "inherits": "BaseButton",
      "category": "Core",
      "brief_description": "Standard themed Button.",
      "description": "Button is the standard themed button. It can contain text and an icon, and will display them according to the current [Theme].",
      "methods": [
        {
          "name": "get_button_icon",
          "qualifiers": "const",
          "description": "Return the button icon.",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_clip_text",
          "qualifiers": "const",
          "description": "Return the state of the [i]clip_text[/i] property (see [method set_clip_text])",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Return the button text.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_text_align",
          "qualifiers": "const",
          "description": "Return the text alignment policy.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_flat",
          "qualifiers": "const",
          "description": "Return the state of the [i]flat[/i] property (see [method set_flat]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_button_icon",
          "description": "Set the icon that will be displayed next to the text inside the button area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clip_text",
          "description": "Set the [i]clip_text[/i] property of a Button. When this property is enabled, text that is too large to fit the button is clipped, when disabled (default) the Button will always be wide enough to hold the text.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flat",
          "description": "Set the [i]flat[/i] property of a Button. Flat buttons don't display decoration unless hovered or pressed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "Set the button text, which will be displayed inside the button area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text_align",
          "description": "Set the text alignment policy, using one of the ALIGN_* constants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": "Align the text to the left."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": "Center the text."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": "Align the text to the right."
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ButtonArray": {
      "name": "ButtonArray",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Array of Buttons.",
      "description": "Array of Buttons. A ButtonArray is useful to have an array of buttons laid out vertically or horizontally. Only one button can be selected, and is referenced by its index in the array (first button is 0, second button is 1, etc.).\n\t\tThis is useful [i]e.g.[/i] for joypad-friendly interfaces and option menus.",
      "methods": [
        {
          "name": "add_button",
          "description": "Append a new button to the array, with the specified text.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "add_icon_button",
          "description": "Append a new button to the array, with the specified icon and text.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "2",
              "name": "tooltip",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Remove all buttons from the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "erase_button",
          "description": "Remove the specified button in the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_button_count",
          "qualifiers": "const",
          "description": "Return the amount of buttons in the array.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_button_icon",
          "qualifiers": "const",
          "description": "Return the icon of the specified button.",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_button_text",
          "qualifiers": "const",
          "description": "Return the text of the specified button.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_button_tooltip",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_hovered",
          "qualifiers": "const",
          "description": "Return the index of the currently hovered button in the array.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selected",
          "qualifiers": "const",
          "description": "Return the index of the currently selected button in the array.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_flat",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_button_icon",
          "description": "Set the icon of the specified button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_button_text",
          "description": "Define the text of the specified button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_button_tooltip",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flat",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_selected",
          "description": "Select a button in the array based on the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "button_selected",
          "description": "A button has been selected, its index is given as the argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_BEGIN",
          "value": "0",
          "description": "Align buttons at the beginning."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": "Align buttons in the middle."
        },
        {
          "name": "ALIGN_END",
          "value": "2",
          "description": "Align buttons at the end."
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "description": "Spread the buttons, but keep them small."
        },
        {
          "name": "ALIGN_EXPAND_FILL",
          "value": "4",
          "description": "Spread the buttons, but expand them."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ButtonGroup": {
      "name": "ButtonGroup",
      "inherits": "BoxContainer",
      "category": "Core",
      "brief_description": "Group of Buttons.",
      "description": "Group of [Button]. All direct and indirect children buttons become radios. Only one allows being pressed.",
      "methods": [
        {
          "name": "get_button_list",
          "qualifiers": "const",
          "description": "Return the list of all the buttons in the group.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_focused_button",
          "qualifiers": "const",
          "description": "Return the focused button.",
          "return_type": "BaseButton",
          "arguments": []
        },
        {
          "name": "get_pressed_button",
          "qualifiers": "const",
          "description": "Return the pressed button.",
          "return_type": "BaseButton",
          "arguments": []
        },
        {
          "name": "get_pressed_button_index",
          "qualifiers": "const",
          "description": "Return the index of the pressed button (by tree order).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_pressed_button",
          "description": "Set the button to be pressed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "BaseButton",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "button_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "Camera": {
      "name": "Camera",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "Camera node, displays from a point of view.",
      "description": "Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the Camera will register in the global viewport. In other words, a Camera just provides [i]3D[/i] display capabilities to a [Viewport], and, without one, a scene registered in that [Viewport] (or higher viewports) can't be displayed.",
      "methods": [
        {
          "name": "clear_current",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_camera_transform",
          "qualifiers": "const",
          "description": "Get the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the [Node] transform.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "get_environment",
          "qualifiers": "const",
          "description": "",
          "return_type": "Environment",
          "arguments": []
        },
        {
          "name": "get_fov",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_h_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_keep_aspect_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_projection",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_v_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_visible_layers",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_zfar",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_znear",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_current",
          "qualifiers": "const",
          "description": "Return whether the Camera is the current one in the [Viewport], or plans to become current (if outside the scene tree).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_position_behind",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "world_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_current",
          "description": "Make this camera the current Camera for the [Viewport] (see class description). If the Camera Node is outside the scene tree, it will attempt to become current once it's added.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "project_local_ray_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "project_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "project_ray_normal",
          "qualifiers": "const",
          "description": "Return a normal vector in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin,normal) for object intersection or picking.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "project_ray_origin",
          "qualifiers": "const",
          "description": "Return a 3D position in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin,normal) for object intersection or picking.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_environment",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "env",
              "type": "Environment",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_offset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_keep_aspect_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_orthogonal",
          "description": "Set the camera projection to orthogonal mode, by specifying a width and the [i]near[/i] and [i]far[/i] clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels)",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "z_near",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_far",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_perspective",
          "description": "Set the camera projection to perspective mode, by specifying a [i]FOV[/i] Y angle in degrees (FOV means Field of View), and the [i]near[/i] and [i]far[/i] clip planes in worldspace units.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fov",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "z_near",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_far",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_offset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visible_layers",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unproject_position",
          "qualifiers": "const",
          "description": "Return how a 3D point in worldspace maps to a 2D coordinate in the [Viewport] rectangle.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "world_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PROJECTION_PERSPECTIVE",
          "value": "0",
          "description": "Perspective Projection (object's size on the screen becomes smaller when far away)."
        },
        {
          "name": "PROJECTION_ORTHOGONAL",
          "value": "1",
          "description": "Orthogonal Projection (objects remain the same size on the screen no matter how far away they are)."
        },
        {
          "name": "KEEP_WIDTH",
          "value": "0",
          "description": ""
        },
        {
          "name": "KEEP_HEIGHT",
          "value": "1",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Camera2D": {
      "name": "Camera2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Camera node for 2D scenes.",
      "description": "Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem] based nodes.\n\t\tThis node is intended to be a simple helper get get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [Node2D] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [Viewport].",
      "methods": [
        {
          "name": "align",
          "description": "Align the camera to the tracked node",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_current",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_update_scroll",
          "description": "Force the camera to update scroll immediately.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_anchor_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_camera_pos",
          "qualifiers": "const",
          "description": "Return the camera position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_camera_screen_center",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_custom_viewport",
          "qualifiers": "const",
          "description": "Return the viewport RID for this layer.",
          "return_type": "Viewport",
          "arguments": []
        },
        {
          "name": "get_drag_margin",
          "qualifiers": "const",
          "description": "Return the margins needed to drag the camera (see [method set_drag_margin]).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_follow_smoothing",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_h_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_limit",
          "qualifiers": "const",
          "description": "Return the scrolling limit in pixels.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the scroll offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_v_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_zoom",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "is_current",
          "qualifiers": "const",
          "description": "Return true of this is the current camera (see [method make_current]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_follow_smoothing_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_h_drag_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_rotating",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_v_drag_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_current",
          "description": "Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reset_smoothing",
          "description": "Set the camera's position immediately to its current smoothing destination.\n\t\t\t\tThis has no effect if smoothing is disabled.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_anchor_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anchor_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_viewport",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Viewport",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drag_margin",
          "description": "Set the margins needed to drag the camera (relative to the screen size). Margin uses the MARGIN_* enum. Drag margins of 0,0,0,0 will keep the camera at the center of the screen, while drag margins of 1,1,1,1 will only move when the camera is at the edges.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "drag_margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enable_follow_smoothing",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "follow_smoothing",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_follow_smoothing",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "follow_smoothing",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_drag_enabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_offset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_limit",
          "description": "Set the scrolling limit in pixels.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "limit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the scroll offset. Useful for looking around or camera shake animations.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotating",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotating",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_drag_enabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_offset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_zoom",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "zoom",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ANCHOR_MODE_DRAG_CENTER",
          "value": "1",
          "description": ""
        },
        {
          "name": "ANCHOR_MODE_FIXED_TOP_LEFT",
          "value": "0",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "CanvasItem": {
      "name": "CanvasItem",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Base class of anything 2D.",
      "description": "Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by [Control], for anything GUI related, and by [Node2D] for anything 2D engine related.\n\t\tAny CanvasItem can draw. For this, the \"update\" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though.\n\t\tCanvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though).\n\t\tCanvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode.\n\t\tUltimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.",
      "methods": [
        {
          "name": "_draw",
          "qualifiers": "virtual",
          "description": "Called (if exists) to draw the canvas item.",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "draw_char",
          "description": "Draw a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "char",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "next",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            }
          ]
        },
        {
          "name": "draw_circle",
          "description": "Draw a colored circle.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_colored_polygon",
          "description": "Draw a colored polygon of any amount of points, convex or concave.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "Vector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "uvs",
              "type": "Vector2Array",
              "default_value": "Vector2Array([])"
            },
            {
              "index": "3",
              "name": "texture",
              "type": "Texture",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "draw_line",
          "description": "Draw a line from a 2D point to another, with a given color and width.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "width",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "draw_polygon",
          "description": "Draw a polygon of any amount of points, convex or concave.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "Vector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "colors",
              "type": "ColorArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "uvs",
              "type": "Vector2Array",
              "default_value": "Vector2Array([])"
            },
            {
              "index": "3",
              "name": "texture",
              "type": "Texture",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "draw_primitive",
          "description": "Draw a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "Vector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "colors",
              "type": "ColorArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "uvs",
              "type": "Vector2Array",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "texture",
              "type": "Texture",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "width",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "draw_rect",
          "description": "Draw a colored rectangle.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_set_transform",
          "description": "Set a custom transform for drawing. Anything drawn afterwards will be transformed by this.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rot",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_set_transform_matrix",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_string",
          "description": "Draw a string using a custom font.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            },
            {
              "index": "4",
              "name": "clip_w",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "draw_style_box",
          "description": "Draw a styled rectangle.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "style_box",
              "type": "StyleBox",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_texture",
          "description": "Draw a texture at a given position.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            }
          ]
        },
        {
          "name": "draw_texture_rect",
          "description": "Draw a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tile",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_texture_rect_region",
          "description": "Draw a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "edit_get_state",
          "qualifiers": "const",
          "description": "Used for editing, returns an opaque value representing the transform state.",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "edit_rotate",
          "description": "Used for editing, handle rotation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "edit_set_rect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "edit_set_state",
          "description": "Set the transform state of this CanvasItem. For [Node2D], this is an [Array] with (in order) a [Vector2] for position, a float for rotation and another [Vector2] for scale. For [Control] this is a [Rect2] with the position and size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_blend_mode",
          "qualifiers": "const",
          "description": "Return the current blending mode from enum BLEND_MODE_*.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_canvas",
          "qualifiers": "const",
          "description": "Return the [RID] of the [World2D] canvas where this item is in.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_canvas_item",
          "qualifiers": "const",
          "description": "Return the canvas item RID used by [VisualServer] for this item.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_canvas_transform",
          "qualifiers": "const",
          "description": "Get the transform matrix of this item's canvas.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_global_mouse_pos",
          "qualifiers": "const",
          "description": "Get the global position of the mouse.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_global_transform",
          "qualifiers": "const",
          "description": "Get the global transform matrix of this item.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_global_transform_with_canvas",
          "qualifiers": "const",
          "description": "Get the global transform matrix of this item in relation to the canvas.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_item_and_children_rect",
          "qualifiers": "const",
          "description": "Get a [Rect2] with the boundaries of this item and its children.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_item_rect",
          "qualifiers": "const",
          "description": "Return a rect containing the editable boundaries of the item.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_light_mask",
          "qualifiers": "const",
          "description": "Get this item's light mask number.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_local_mouse_pos",
          "qualifiers": "const",
          "description": "Get the mouse position relative to this item's position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_material",
          "qualifiers": "const",
          "description": "Get the material of this item.",
          "return_type": "CanvasItemMaterial",
          "arguments": []
        },
        {
          "name": "get_opacity",
          "qualifiers": "const",
          "description": "Return the canvas item opacity. This affects the canvas item and all the children.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_self_opacity",
          "qualifiers": "const",
          "description": "Return the canvas item self-opacity.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Get the transform matrix of this item.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_use_parent_material",
          "qualifiers": "const",
          "description": "Get whether this item uses its parent's material.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_viewport_rect",
          "qualifiers": "const",
          "description": "Get the viewport's boundaries as a [Rect2].",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_viewport_transform",
          "qualifiers": "const",
          "description": "Get this item's transform in relation to the viewport.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_world_2d",
          "qualifiers": "const",
          "description": "Get the [World2D] where this item is in.",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "hide",
          "description": "Hide the CanvasItem currently visible.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_draw_behind_parent_enabled",
          "qualifiers": "const",
          "description": "Return whether the item is drawn behind its parent.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_hidden",
          "qualifiers": "const",
          "description": "Return true if this CanvasItem is hidden. Note that the CanvasItem may not be visible, but as long as it's not hidden ([method hide] called) the function will return false.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_set_as_toplevel",
          "qualifiers": "const",
          "description": "Return if set as toplevel. See [method set_as_toplevel].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_visible",
          "qualifiers": "const",
          "description": "Return true if this CanvasItem is visible. It may be invisible because itself or a parent canvas item is hidden.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_canvas_pos_local",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_input_local",
          "qualifiers": "const",
          "description": "Takes a global input event and convert to this item's coordinate system.",
          "return_type": "InputEvent",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_as_toplevel",
          "description": "Set as top level. This means that it will not inherit transform from parent canvas items.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_blend_mode",
          "description": "Set the blending mode from enum BLEND_MODE_*.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "blend_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_behind_parent",
          "description": "Set whether the canvas item is drawn behind its parent.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hidden",
          "description": "Set whether this item should be hidden or not. Note that no matter what is set here this item won't be shown if its parent or grandparents nodes are also hidden. A hidden CanvasItem make all children hidden too.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hidden",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_light_mask",
          "description": "Set the ligtht mask number of this item.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_material",
          "description": "Set the material of this item.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "CanvasItemMaterial",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_opacity",
          "description": "Set canvas item opacity. This will affect the canvas item and all the children.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "opacity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_self_opacity",
          "description": "Set canvas item self-opacity. This does not affect the opacity of children items.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "self_opacity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_parent_material",
          "description": "Set whether or not this item should use its parent's material.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show",
          "description": "Show the CanvasItem currently hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "update",
          "description": "Queue the CanvasItem for update. [code]NOTIFICATION_DRAW[/code] will be called on idle time to request redraw.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "draw",
          "description": "Emitted when the CanvasItem must redraw. This can only be connected realtime, as deferred will not allow drawing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "hide",
          "description": "Emitted when becoming hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_rect_changed",
          "description": "Emitted when the item rect has changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "visibility_changed",
          "description": "Emitted when the visibility (hidden/visible) changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "BLEND_MODE_MIX",
          "value": "0",
          "description": "Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value."
        },
        {
          "name": "BLEND_MODE_ADD",
          "value": "1",
          "description": "Additive blending mode."
        },
        {
          "name": "BLEND_MODE_SUB",
          "value": "2",
          "description": "Subtractive blending mode."
        },
        {
          "name": "BLEND_MODE_MUL",
          "value": "3",
          "description": "Multiplicative blending mode."
        },
        {
          "name": "BLEND_MODE_PREMULT_ALPHA",
          "value": "4",
          "description": "Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value."
        },
        {
          "name": "NOTIFICATION_DRAW",
          "value": "30",
          "description": "CanvasItem is requested to draw."
        },
        {
          "name": "NOTIFICATION_VISIBILITY_CHANGED",
          "value": "31",
          "description": "Canvas item visibility has changed."
        },
        {
          "name": "NOTIFICATION_ENTER_CANVAS",
          "value": "32",
          "description": "Canvas item has entered the canvas."
        },
        {
          "name": "NOTIFICATION_EXIT_CANVAS",
          "value": "33",
          "description": "Canvas item has exited the canvas."
        },
        {
          "name": "NOTIFICATION_TRANSFORM_CHANGED",
          "value": "29",
          "description": "Canvas item transform has changed. Only received if requested."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "CanvasItemMaterial": {
      "name": "CanvasItemMaterial",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_shader",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shader",
          "arguments": []
        },
        {
          "name": "get_shader_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_shading_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_shader",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "Shader",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shader_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shading_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SHADING_NORMAL",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADING_UNSHADED",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHADING_ONLY_LIGHT",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "CanvasItemShader": {
      "name": "CanvasItemShader",
      "inherits": "Shader",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CanvasItemShaderGraph": {
      "name": "CanvasItemShaderGraph",
      "inherits": "ShaderGraph",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CanvasLayer": {
      "name": "CanvasLayer",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Canvas Item layer.",
      "description": "Canvas Item layer. [CanvasItem] nodes that are direct or indirect children of a [CanvasLayer] will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a [CanvasLayer] with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below).",
      "methods": [
        {
          "name": "get_custom_viewport",
          "qualifiers": "const",
          "description": "Return the viewport RID for this layer.",
          "return_type": "Viewport",
          "arguments": []
        },
        {
          "name": "get_layer",
          "qualifiers": "const",
          "description": "Return the layer index, determines the draw order, a lower value will be below a higher one.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the base offset for this layer (helper).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "qualifiers": "const",
          "description": "Return the base rotation for this layer (helper).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rotationd",
          "qualifiers": "const",
          "description": "Get rotation of the layer in degree.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_scale",
          "qualifiers": "const",
          "description": "Return the base scale for this layer (helper).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Return the base transform for this layer.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_world_2d",
          "qualifiers": "const",
          "description": "Return the [World2D] used by this layer.",
          "return_type": "World2D",
          "arguments": []
        },
        {
          "name": "set_custom_viewport",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Viewport",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer",
          "description": "Set the layer index, determines the draw order, a lower value will be below a higher one.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the base offset for this layer (helper).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation",
          "description": "Set the base rotation for this layer (helper).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotationd",
          "description": "Set rotation of the layer in degree.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scale",
          "description": "Set the base scale for this layer (helper).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Set the base transform for this layer.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CanvasModulate": {
      "name": "CanvasModulate",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Tint the entire canvas",
      "description": "CanvasModulate tints the canvas elements using its asigned color",
      "methods": [
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Gets the canvas tint color",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "Sets the canvas tint color",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CapsuleShape": {
      "name": "CapsuleShape",
      "inherits": "Shape",
      "category": "Core",
      "brief_description": "Capsule shape resource.",
      "description": "Capsule shape resource, which can be set into a [PhysicsBody] or area.",
      "methods": [
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the capsule height.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "Return the capsule radius.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_height",
          "description": "Set the capsule height.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radius",
          "description": "Set the capsule radius.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CapsuleShape2D": {
      "name": "CapsuleShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "brief_description": "Capsule 2D shape resource for physics.",
      "description": "Capsule 2D shape resource for physics. A capsule (or sometimes called \"pill\") is like a line grown in all directions. It has a radius and a height, and is often useful for modeling biped characters.",
      "methods": [
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the height of the [CapsuleShape2D].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "Return the radius of the [CapsuleShape2D].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_height",
          "description": "Set the height of the [CapsuleShape2D].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radius",
          "description": "Set the radius of the [CapsuleShape2D].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CenterContainer": {
      "name": "CenterContainer",
      "inherits": "Container",
      "category": "Core",
      "brief_description": "Keeps children controls centered.",
      "description": "CenterContainer Keeps children controls centered. This container keeps all children to their minimum size, in the center.",
      "methods": [
        {
          "name": "is_using_top_left",
          "qualifiers": "const",
          "description": "Should put children to the top left corner instead of center of the container.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_use_top_left",
          "description": "This function will anchor the container children to the top left corner of the the container boundaries, moving all its children to that position, (the children new center will be the top left corner of the container).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CheckBox": {
      "name": "CheckBox",
      "inherits": "Button",
      "category": "Core",
      "brief_description": "Binary choice user interface widget",
      "description": "A checkbox allows the user to make a binary choice (choosing only one of two posible options), for example Answer 'yes' or 'no'.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "check_vadjust",
          "type": "int",
          "description": ""
        },
        {
          "name": "checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "radio_checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "radio_unchecked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "unchecked",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "CheckButton": {
      "name": "CheckButton",
      "inherits": "Button",
      "category": "Core",
      "brief_description": "Checkable button.",
      "description": "CheckButton is a toggle button displayed as a check field.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "check_vadjust",
          "type": "int",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "off",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "on",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "CircleShape2D": {
      "name": "CircleShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "brief_description": "Circular Shape for 2D Physics.",
      "description": "Circular Shape for 2D Physics. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast.",
      "methods": [
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "Return the radius of the circle shape.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_radius",
          "description": "Set the radius of the circle shape.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionObject": {
      "name": "CollisionObject",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "click_pos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "click_normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Shape",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": "Transform()"
            }
          ]
        },
        {
          "name": "clear_shapes",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_capture_input_on_drag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shape",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_shape_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shape_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_ray_pickable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shape_set_as_trigger",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_capture_input_on_drag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ray_pickable",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ray_pickable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_as_trigger",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "input_event",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "click_pos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "click_normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mouse_enter",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_exit",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionObject2D": {
      "name": "CollisionObject2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Base node for 2D collisionables.",
      "description": "CollisionObject2D is the base class for 2D physics collisionables. They can hold any number of 2D collision shapes. Usually, they are edited by placing [CollisionShape2D] and/or [CollisionPolygon2D] nodes as children. Such nodes are for reference and not present outside the editor, so code should use the regular shape API.",
      "methods": [
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "This method can be used to override normal input processing. The first parameter is the viewport where the event took place. The second holds the input event received, and the third the shape of this object where it happened.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_shape",
          "description": "Add a [Shape2D] to the collision body, with a given custom transform.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Matrix32",
              "default_value": "((1, 0), (0, 1), (0, 0))"
            }
          ]
        },
        {
          "name": "clear_shapes",
          "description": "Remove all shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "Return the RID of this object.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_shape",
          "qualifiers": "const",
          "description": "Return the shape in the given index.",
          "return_type": "Shape2D",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_shape_count",
          "qualifiers": "const",
          "description": "Return the amount of shapes in the collision body. Because a [CollisionPolygon2D] can generate more than one [Shape2D], the amount returned does not have to match the sum of [CollisionShape2D] and [CollisionPolygon2D].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shape_transform",
          "qualifiers": "const",
          "description": "Return the shape transform in the given index.",
          "return_type": "Matrix32",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_pickable",
          "qualifiers": "const",
          "description": "Return whether this object is pickable.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shape_set_as_trigger",
          "qualifiers": "const",
          "description": "Return whether a shape is a trigger. A trigger shape detects collisions, but is otherwise unaffected by physics (i.e. colliding objects will not get blocked).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_shape",
          "description": "Remove the shape in the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pickable",
          "description": "Set whether this object is pickable. A pickable object can detect the mouse pointer enter/leave it and, if the mouse is inside it, report input events.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "Change a shape in the collision body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_as_trigger",
          "description": "Set whether a shape is a trigger. A trigger shape detects collisions, but is otherwise unaffected by physics (i.e. colliding objects will not get blocked).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_transform",
          "description": "Change the shape transform in the collision body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "input_event",
          "description": "This signal triggers when an input event fires over a shape. The first parameter is the viewport where the event took place. The second holds the input event received, and the third the shape of this object where it happened.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mouse_enter",
          "description": "This event fires only once when the mouse pointer enters any shape of this object.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_exit",
          "description": "This event fires only once when the mouse pointer exits all shapes of this object.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionPolygon": {
      "name": "CollisionPolygon",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_build_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_object_first_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_object_last_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_depth",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "set_build_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "build_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_depth",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "depth",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_polygon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionPolygon2D": {
      "name": "CollisionPolygon2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Editor-only class for easy editing of collision polygons.",
      "description": "Editor-only class. This is not present when running the game. It's used in the editor to properly edit and position collision shapes in [CollisionObject2D]. This is not accessible from regular code. This class is for editing custom shape polygons.",
      "methods": [
        {
          "name": "get_build_mode",
          "qualifiers": "const",
          "description": "Return whether the polygon is a [ConvexPolygonShape2D] ([code]build_mode==0[/code]), or a [ConcavePolygonShape2D] ([code]build_mode==1[/code]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_object_first_shape",
          "qualifiers": "const",
          "description": "Return the index of the first shape generated by the editor.\n\t\t\t\tWhen [code]build_mode[/code] is set to generate convex polygons, the shape shown in the editor may be decomposed into many convex polygons. In that case, a range of indexes is needed to directly access the [Shape2D].\n\t\t\t\tWhen [code]build_mode[/code] is set to generate concave polygons, there is only one [Shape2D] generated, so the start index and the end index are the same.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_object_last_shape",
          "qualifiers": "const",
          "description": "Return the index of the last shape generated by the editor.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "qualifiers": "const",
          "description": "Return the list of points that define the polygon.",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "is_trigger",
          "qualifiers": "const",
          "description": "Return whether this polygon is a trigger.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_build_mode",
          "description": "Set whether the polygon is to be a [ConvexPolygonShape2D] ([code]build_mode==0[/code]), or a [ConcavePolygonShape2D] ([code]build_mode==1[/code]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "build_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_polygon",
          "description": "Set the array of points forming the polygon.\n\t\t\t\tWhen editing the point list via the editor, depending on [method get_build_mode], it has to be a list of points (for [code]build_mode==0[/code]), or a list of lines (for [code]build_mode==1[/code]). In the second case, the even elements of the array define the start point of the line, and the odd elements the end point.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_trigger",
          "description": "Set whether this polygon is a trigger. A trigger polygon detects collisions, but is otherwise unaffected by physics (i.e. colliding objects will not get blocked).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "trigger",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionShape": {
      "name": "CollisionShape",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_collision_object_shape_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "is_trigger",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_convex_from_brothers",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resource_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_trigger",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionShape2D": {
      "name": "CollisionShape2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Editor-only class for easy editing of shapes.",
      "description": "Editor-only class. This is not present when running the game. It's used in the editor to properly edit and position collision shapes in [CollisionObject2D]. This is not accessible from regular code.",
      "methods": [
        {
          "name": "get_collision_object_shape_index",
          "qualifiers": "const",
          "description": "Return the index of this shape inside its container [CollisionObject2D]. This can be used to directly access the underlying [Shape2D].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shape",
          "qualifiers": "const",
          "description": "Return this shape's [Shape2D].",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "is_trigger",
          "qualifiers": "const",
          "description": "Return whether this shape is a trigger.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_shape",
          "description": "Set this shape's [Shape2D]. This will not appear as a node, but can be directly edited as a property.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_trigger",
          "description": "Set whether this shape is a trigger. A trigger shape detects collisions, but is otherwise unaffected by physics (i.e. will not block movement of colliding objects).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Color": {
      "name": "Color",
      "category": "Built-In Types",
      "brief_description": "Color in RGBA format.",
      "description": "A color is represented as red, green and blue (r,g,b) components. Additionally, \"a\" represents the alpha component, often used for transparency. Values are in floating point and usually range from 0 to 1.  Some methods (such as set_modulate() ) may accept values > 1.",
      "methods": [
        {
          "name": "Color",
          "description": "Construct the color from an RGBA profile.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "g",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "a",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Color",
          "description": "Construct the color from an RGBA profile.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "g",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Color",
          "description": "Construct the color from an RGBA profile.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Color",
          "description": "Construct the color from an RGBA profile.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend",
          "description": "Return a new color blended with anothor one.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "over",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "contrasted",
          "description": "Return the most contrasting color with this one.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "gray",
          "description": "Convert the color to gray.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverted",
          "description": "Return the inverted color (1-r, 1-g, 1-b, 1-a).",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "linear_interpolate",
          "description": "Return the linear interpolation with another color.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_32",
          "description": "Convert the color to a 32 its integer (each byte represents a RGBA).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_ARGB32",
          "description": "Convert color to ARGB32, more compatible with DirectX.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_html",
          "description": "Return the HTML hexadecimal color string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with_alpha",
              "type": "bool",
              "default_value": "True"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "a",
          "type": "float",
          "description": "Alpha (0 to 1)"
        },
        {
          "name": "a8",
          "type": "int",
          "description": "Alpha (0 to 255)"
        },
        {
          "name": "b",
          "type": "float",
          "description": "Blue (0 to 1)"
        },
        {
          "name": "b8",
          "type": "int",
          "description": "Blue (0 to 255)"
        },
        {
          "name": "g",
          "type": "float",
          "description": "Green (0 to 1)"
        },
        {
          "name": "g8",
          "type": "int",
          "description": "Green (0 to 255)"
        },
        {
          "name": "h",
          "type": "float",
          "description": "Hue (0 to 1)"
        },
        {
          "name": "r",
          "type": "float",
          "description": "Red (0 to 1)"
        },
        {
          "name": "r8",
          "type": "int",
          "description": "Red (0 to 255)"
        },
        {
          "name": "s",
          "type": "float",
          "description": "Saturation (0 to 1)"
        },
        {
          "name": "v",
          "type": "float",
          "description": "Value (0 to 1)"
        }
      ],
      "theme_properties": []
    },
    "ColorArray": {
      "name": "ColorArray",
      "category": "Built-In Types",
      "brief_description": "Array of Colors",
      "description": "Array of Color, can only contains colors. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "ColorArray",
          "description": "Create from a generic array.",
          "return_type": "ColorArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [ColorArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "ColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append a value to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the [ColorArray]. If larger than the current size it will reserve some space beforehand, and if it is smaller it will cut off the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [Color] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the array size.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ColorFrame": {
      "name": "ColorFrame",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_frame_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "set_frame_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ColorPicker": {
      "name": "ColorPicker",
      "inherits": "BoxContainer",
      "category": "Core",
      "brief_description": "Color picker control.",
      "description": "This is a simple color picker [Control]. It's useful for selecting a color from an RGB/RGBA colorspace.",
      "methods": [
        {
          "name": "add_preset",
          "description": "Adds the current selected to color to a list of colors (presets), the presets will be displayed in the color picker and the user will be able to select them, notice that the presets list is only for this color picker.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Return the current (edited) color.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "is_editing_alpha",
          "qualifiers": "const",
          "description": "Returns whether the color has transparency or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_raw_mode",
          "qualifiers": "const",
          "description": "Returns whether this color picker is in raw mode or not, raw mode will allow the color R, G, B component values to go beyond 1, you have to consider that the max value for color components is 1, going beyond that value will not have effect in the color, but can be used for special operations that require it (like tinting without darkening or rendering sprites in HDR).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "Select the current color.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edit_alpha",
          "description": "Set true if you want the color to have an alpha channel (transparency), or false if you want a solid color.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_raw_mode",
          "description": "Set whether this color picker is using raw mode or not, see [method is_raw_mode].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "color_changed",
          "description": "Emitted when the color is changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "add_preset",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "color_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "hseparator",
          "type": "int",
          "description": ""
        },
        {
          "name": "label_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "screen_picker",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "value_height",
          "type": "int",
          "description": ""
        },
        {
          "name": "value_width",
          "type": "int",
          "description": ""
        }
      ]
    },
    "ColorPickerButton": {
      "name": "ColorPickerButton",
      "inherits": "Button",
      "category": "Core",
      "brief_description": "Button that pops out a [ColorPicker]",
      "description": "Encapsulates a [ColorPicker] making it accesible by pressing a button, pressing the button will toggle the [ColorPicker] visibility",
      "methods": [
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Gets the current color",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_picker",
          "description": "",
          "return_type": "ColorPicker",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_editing_alpha",
          "qualifiers": "const",
          "description": "See [method ColorPicker.is_edit_alpha]",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "Sets the current color",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edit_alpha",
          "description": "See [method ColorPicker.set_edit_alpha]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "color_changed",
          "description": "Emitted when the color is changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ColorRamp": {
      "name": "ColorRamp",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Color interpolator node",
      "description": "Given a set of colors, this node will interpolate them in order, meaning, that if you have color 1, color 2 and color3, the ramp will interpolate (generate the colors between two colors) from color 1 to color 2 and from color 2 to color 3. Initially the ramp will have 2 colors (black and white), one (black) at ramp lower offset offset 0 and the other (white) at the ramp higher offset 1.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds the specified color to the end of the ramp, with the specified offset",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Returns the color of the ramp color at index [i]point[/i]",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_colors",
          "qualifiers": "const",
          "description": "Returns the colors in the ramp",
          "return_type": "ColorArray",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Returns the offset of the ramp color at index [i]point[/i]",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_offsets",
          "qualifiers": "const",
          "description": "Returns the offsets for the colors in this ramp",
          "return_type": "RealArray",
          "arguments": []
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the number of colors in the ramp",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "interpolate",
          "description": "Returns the interpolated color specified by [i]offset[/i]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Removes the color at the index [i]offset[/i]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color",
          "description": "Sets the color of the ramp color at index [i]point[/i]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_colors",
          "description": "Sets the colors for the specified amount of elements. Calling this function with a different number of elements than previously defined causes the ramp to resize its colors and offsets array to accomodate the new elements.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "colors",
              "type": "ColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Sets the offset for the ramp color at index [i]point[/i]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offsets",
          "description": "Sets the offset for the specified amount of elements. Calling this function with a different number of elements than previously defined causes the ramp to resize its colors and offsets array to accomodate the new elements, all new colors will be black by default.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offsets",
              "type": "RealArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ConcavePolygonShape": {
      "name": "ConcavePolygonShape",
      "inherits": "Shape",
      "category": "Core",
      "brief_description": "Concave polygon shape.",
      "description": "Concave polygon shape resource, which can be set into a [PhysicsBody] or area. This shape is created by feeding a list of triangles.",
      "methods": [
        {
          "name": "get_faces",
          "qualifiers": "const",
          "description": "Return the faces (an array of triangles).",
          "return_type": "Vector3Array",
          "arguments": []
        },
        {
          "name": "set_faces",
          "description": "Set the faces (an array of triangles).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "faces",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ConcavePolygonShape2D": {
      "name": "ConcavePolygonShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "brief_description": "Concave polygon 2D shape resource for physics.",
      "description": "Concave polygon 2D shape resource for physics. It is made out of segments and is very optimal for complex polygonal concave collisions. It is really not advised to use for [RigidBody2D] nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.\n\t\tThe main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.",
      "methods": [
        {
          "name": "get_segments",
          "qualifiers": "const",
          "description": "Return the array of segments.",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "set_segments",
          "description": "Set the array of segments.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ConeTwistJoint": {
      "name": "ConeTwistJoint",
      "inherits": "Joint",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_SWING_SPAN",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_TWIST_SPAN",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_BIAS",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_SOFTNESS",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_RELAXATION",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "5",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ConfigFile": {
      "name": "ConfigFile",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Helper class to handle INI-style files.",
      "description": "This helper class can be used to store [Variant] values on the filesystem using an INI-style formatting. The stored values as referenced by a section and a key. The stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly with accessing the filesystem.\n\t\tThe following example shows how to parse a INI-style file from the system, read its contents and store new values in it:\n\t\t[codeblock]\n\t\tvar config = ConfigFile.new()\n\t\tvar err = config.load(\"user://settings.cfg\")\n\t\tif err == OK: # if not, something went wrong with the file loading\n\t\t    # Look for the display/width pair, and default to 1024 if missing\n\t\t    var screen_width = get_value(\"display\", \"width\", 1024)\n\t\t    # Store a variable if and only it hasn't been defined yet\n\t\t    if not config.has_section_key(\"audio\", \"mute\"):\n\t\t        config.set_value(\"audio\", \"mute\", false)\n\t\t    # Save the changes by overwriting the previous file\n\t\t    config.save(\"user://settings.cfg\")\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "get_section_keys",
          "qualifiers": "const",
          "description": "Return an array of all defined key identifiers in the specified section.",
          "return_type": "StringArray",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_sections",
          "qualifiers": "const",
          "description": "Return an array of all defined section identifiers.",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "get_value",
          "qualifiers": "const",
          "description": "Return the current value for the specified section and key. If the section and/or the key do not exist, the method returns the value of the optional [i]default[/i] argument (and thus [code]NULL[/code] if not specified).",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "default",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "has_section",
          "qualifiers": "const",
          "description": "Check if the specified section exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_section_key",
          "qualifiers": "const",
          "description": "Check if the specified section-key pair exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load",
          "description": "Load the config file specified as a parameter. The file's contents are parsed and loaded in the ConfigFile object from which the method was called. The return value is one of the OK, FAILED or ERR_* constants listed in [@Global Scope] (if the load was successful, it returns OK).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save",
          "description": "Save the contents of the ConfigFile object to the file specified as a parameter. The output file uses an INI-style structure.\n\t\t\t\tThe return value is one of the OK, FAILED or ERR_* constants listed in [@Global Scope] (if the save was successful, it returns OK).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_value",
          "description": "Assign a value to the specified key of the the specified section. If the section and/or the key do not exist, they are created. Passing a [code]NULL[/code] value deletes the specified key if it exists (and deletes the section if it ends up empty once the key has been removed).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ConfirmationDialog": {
      "name": "ConfirmationDialog",
      "inherits": "AcceptDialog",
      "category": "Core",
      "brief_description": "Dialog for confirmation of actions.",
      "description": "Dialog for confirmation of actions. This dialog inherits from [AcceptDialog], but has by default an OK and Cancel button (in host OS order).",
      "methods": [
        {
          "name": "get_cancel",
          "description": "Return the cancel button.",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Container": {
      "name": "Container",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Base node for containers.",
      "description": "Base node for containers. A [Container] contains other controls and automatically arranges them in a certain way.\n\t\tA Control can inherit this to create custom container classes.",
      "methods": [
        {
          "name": "fit_child_in_rect",
          "description": "Fit a child control in a given rect. This is mainly a helper for creating custom container classes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child",
              "type": "Control",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_sort",
          "description": "Queue resort of the contained children. This is called automatically anyway, but can be called upon request.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "sort_children",
          "description": "Emitted when sorting the children is needed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_SORT_CHILDREN",
          "value": "50",
          "description": "Notification for when sorting the children, it must be obeyed immediately."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Control": {
      "name": "Control",
      "inherits": "CanvasItem",
      "category": "Core",
      "brief_description": "Control is the base node for all the GUI components.",
      "description": "Control is the base class Node for all the GUI components. Every GUI component inherits from it, directly or indirectly. In this way, sections of the scene tree made of contiguous control nodes, become user interfaces.\n\t\tControls are relative to the parent position and size by using anchors and margins. This ensures that they can adapt easily in most situation to changing dialog and screen sizes. When more flexibility is desired, [Container] derived nodes can be used.\n\t\tAnchors work by defining which margin do they follow, and a value relative to it. Allowed anchoring modes are ANCHOR_BEGIN, where the margin is relative to the top or left margins of the parent (in pixels), ANCHOR_END for the right and bottom margins of the parent and ANCHOR_RATIO, which is a ratio from 0 to 1 in the parent range.\n\t\tInput device events ([InputEvent]) are first sent to the root controls via the [method Node._input], which distribute it through the tree, then delivers them to the adequate one (under cursor or keyboard focus based) by calling [method MainLoop._input_event]. There is no need to enable input processing on controls to receive such events. To ensure that no one else will receive the event (not even [method Node._unhandled_input]), the control can accept it by calling [method accept_event].\n\t\tOnly one control can hold the keyboard focus (receiving keyboard events), for that the control must define the focus mode with [method set_focus_mode]. Focus is lost when another control gains it, or the current focus owner is hidden.\n\t\tIt is sometimes desired for a control to ignore mouse/pointer events. This is often the case when placing other controls on top of a button, in such cases. Calling [method set_ignore_mouse] enables this function.\n\t\tFinally, controls are skinned according to a [Theme]. Setting a [Theme] on a control will propagate all the skinning down the tree. Optionally, skinning can be overridden per each control by calling the add_*_override functions, or from the editor.",
      "methods": [
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "Called when an input event reaches the control.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "accept_event",
          "description": "Handles the event, no other control will receive it and it will not be sent to nodes waiting on [method Node._unhandled_input] or [method Node._unhandled_key_input].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "add_color_override",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_constant_override",
          "description": "Override a single constant (integer) in the theme of this Control. If constant equals Theme.INVALID_CONSTANT, override is cleared.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "constant",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_font_override",
          "description": "Override a single font (font) in the theme of this Control. If font is empty, override is cleared.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_icon_override",
          "description": "Override a single icon ([Texture]) in the theme of this Control. If texture is empty, override is cleared.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_shader_override",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shader",
              "type": "Shader",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_style_override",
          "description": "Override a single stylebox ([Stylebox]) in the theme of this Control. If stylebox is empty, override is cleared.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "stylebox",
              "type": "StyleBox",
              "default_value": ""
            }
          ]
        },
        {
          "name": "can_drop_data",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "drop_data",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "force_drag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "preview",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_anchor",
          "qualifiers": "const",
          "description": "Return the anchor type (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_begin",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_combined_minimum_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_cursor_shape",
          "qualifiers": "const",
          "description": "Return the cursor shape at a certain position in the control.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            }
          ]
        },
        {
          "name": "get_custom_minimum_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_default_cursor_shape",
          "qualifiers": "const",
          "description": "Return the default cursor shape for this control. See enum CURSOR_* for the list of shapes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_drag_data",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_end",
          "qualifiers": "const",
          "description": "Returns MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_focus_mode",
          "qualifiers": "const",
          "description": "Returns the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL) (see [method set_focus_mode]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_focus_neighbour",
          "qualifiers": "const",
          "description": "Return the forced neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function.",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_focus_owner",
          "qualifiers": "const",
          "description": "Return which control is owning the keyboard focus, or null if no one.",
          "return_type": "Control",
          "arguments": []
        },
        {
          "name": "get_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "Font",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_global_pos",
          "qualifiers": "const",
          "description": "Returns the Control position, relative to the top-left corner of the parent Control and independent of the anchor mode.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_global_rect",
          "qualifiers": "const",
          "description": "Return position and size of the Control, relative to the top-left corner of the [i]window[/i] Control. This is a helper (see [method get_global_pos], [method get_size]).",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_h_size_flags",
          "qualifiers": "const",
          "description": "Hint for containers, return horizontal positioning flags.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "Return a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being returned depends on the anchor mode.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_minimum_size",
          "qualifiers": "const",
          "description": "Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_minimum_size",
          "qualifiers": "virtual",
          "description": "Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_parent_area_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_parent_control",
          "qualifiers": "const",
          "description": "",
          "return_type": "Control",
          "arguments": []
        },
        {
          "name": "get_pos",
          "qualifiers": "const",
          "description": "Returns the Control position, relative to the top-left corner of the parent Control and independent of the anchor mode.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Return position and size of the Control, relative to the top-left corner of the parent Control. This is a helper (see [method get_pos], [method get_size]).",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rotation_deg",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Returns the size of the Control, computed from all margins, however the size returned will [b]never be smaller than the minimum size reported by[/b] [method get_minimum_size]. This means that even if end position of the Control rectangle is smaller than the begin position, the Control will still display and interact correctly. (see description, [method get_minimum_size], [method set_margin], [method set_anchor]).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_stretch_ratio",
          "qualifiers": "const",
          "description": "Hint for containers, return the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "StyleBox",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_theme",
          "qualifiers": "const",
          "description": "Return a [Theme] override, if one exists (see [method set_theme]).",
          "return_type": "Theme",
          "arguments": []
        },
        {
          "name": "get_tooltip",
          "qualifiers": "const",
          "description": "Return the tooltip, which will appear when the cursor is resting over this control.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "atpos",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            }
          ]
        },
        {
          "name": "get_v_size_flags",
          "qualifiers": "const",
          "description": "Hint for containers, return vertical positioning flags.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "grab_click_focus",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "grab_focus",
          "description": "Steal the focus from another control and become the focused control (see [method set_focus_mode]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_color_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_constant_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_focus",
          "qualifiers": "const",
          "description": "Return whether the Control is the current focused control (see [method set_focus_mode]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_font_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_icon_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_point",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_stylebox_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_ignoring_mouse",
          "qualifiers": "const",
          "description": "Return if the control is ignoring mouse events (even touchpad events send mouse events).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_stopping_mouse",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "minimum_size_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "release_focus",
          "description": "Give up the focus, no other control will be able to receive keyboard input.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_anchor",
          "description": "Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Changing the anchor mode converts the current margin offset from the previous anchor mode to the new one, so margin offsets ([method set_margin]) must be done after setting anchors, or at the same time ([method set_anchor_and_margin])\n\t\t\t\tAdditionally, [code]keep_margin[/code] controls whether margins should be left the same, or changed to keep the same position and size on-screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anchor_mode",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "keep_margin",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_anchor_and_margin",
          "description": "Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM), and also set its offset. This is a helper (see [method set_anchor] and [method set_margin]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anchor_mode",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_area_as_parent_rect",
          "description": "Change all margins and anchors, so this Control always takes up the same area as the parent Control. This is a helper (see [method set_anchor], [method set_margin]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_begin",
          "description": "Sets MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_minimum_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_cursor_shape",
          "description": "Set the default cursor shape for this control. See enum CURSOR_* for the list of shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drag_forwarding",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drag_preview",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_end",
          "description": "Sets MARGIN_RIGHT and MARGIN_BOTTOM at the same time. This is a helper (see [method set_margin]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_focus_mode",
          "description": "Set the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL). Only one Control can be focused at the same time, and it will receive keyboard signals.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_focus_neighbour",
          "description": "Force a neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "neighbour",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_pos",
          "description": "Move the Control to a new position, relative to the top-left corner of the [i]window[/i] Control, and without changing current anchor mode. (see [method set_margin]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_size_flags",
          "description": "Hint for containers, set horizontal positioning flags.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ignore_mouse",
          "description": "Ignore mouse events on this control (even touchpad events send mouse events).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ignore",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin",
          "description": "Set a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being set depends on the anchor mode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pos",
          "description": "Move the Control to a new position, relative to the top-left corner of the parent Control, changing all margins if needed and without changing current anchor mode. This is a helper (see [method set_margin]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation_deg",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scale",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "Changes MARGIN_RIGHT and MARGIN_BOTTOM to fit a given size. This is a helper (see [method set_margin]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stop_mouse",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stop",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stretch_ratio",
          "description": "Hint for containers, set the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_theme",
          "description": "Override whole the [Theme] for this Control and all its children controls.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "theme",
              "type": "Theme",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tooltip",
          "description": "Set a tooltip, which will appear when the cursor is resting over this control.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_size_flags",
          "description": "Hint for containers, set vertical positioning flags.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show_modal",
          "description": "Display a Control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exclusive",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "warp_mouse",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "focus_enter",
          "description": "Emitted when keyboard focus is gained.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "focus_exit",
          "description": "Emitted when the keyboard focus is lost.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "input_event",
          "description": "Emitted when an input event is received. Connecting in realtime is recommended for accepting the events.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ev",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "minimum_size_changed",
          "description": "Emitted when the minimum size of the control changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "modal_close",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_enter",
          "description": "Emitted when the mouse enters the control area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_exit",
          "description": "Emitted when the mouse left the control area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resized",
          "description": "Emitted when the control changed size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "size_flags_changed",
          "description": "Emitted when the size flags changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "ANCHOR_BEGIN",
          "value": "0",
          "description": "X is relative to MARGIN_LEFT, Y is relative to MARGIN_TOP."
        },
        {
          "name": "ANCHOR_END",
          "value": "1",
          "description": "X is relative to -MARGIN_RIGHT, Y is relative to -MARGIN_BOTTOM."
        },
        {
          "name": "ANCHOR_RATIO",
          "value": "2",
          "description": "X and Y are a ratio (0 to 1) relative to the parent size 0 is left/top, 1 is right/bottom."
        },
        {
          "name": "ANCHOR_CENTER",
          "value": "3",
          "description": ""
        },
        {
          "name": "FOCUS_NONE",
          "value": "0",
          "description": "Control can't acquire focus."
        },
        {
          "name": "FOCUS_CLICK",
          "value": "1",
          "description": "Control can acquire focus only if clicked."
        },
        {
          "name": "FOCUS_ALL",
          "value": "2",
          "description": "Control can acquire focus if clicked, or by pressing TAB/Directionals in the keyboard from another Control."
        },
        {
          "name": "NOTIFICATION_RESIZED",
          "value": "40",
          "description": "Control changed size (get_size() reports the new size)."
        },
        {
          "name": "NOTIFICATION_MOUSE_ENTER",
          "value": "41",
          "description": "Mouse pointer entered the area of the Control."
        },
        {
          "name": "NOTIFICATION_MOUSE_EXIT",
          "value": "42",
          "description": "Mouse pointer exited the area of the Control."
        },
        {
          "name": "NOTIFICATION_FOCUS_ENTER",
          "value": "43",
          "description": "Control gained focus."
        },
        {
          "name": "NOTIFICATION_FOCUS_EXIT",
          "value": "44",
          "description": "Control lost focus."
        },
        {
          "name": "NOTIFICATION_THEME_CHANGED",
          "value": "45",
          "description": "Theme changed. Redrawing is desired."
        },
        {
          "name": "NOTIFICATION_MODAL_CLOSE",
          "value": "46",
          "description": "Modal control was closed."
        },
        {
          "name": "CURSOR_ARROW",
          "value": "0",
          "description": ""
        },
        {
          "name": "CURSOR_IBEAM",
          "value": "1",
          "description": ""
        },
        {
          "name": "CURSOR_POINTING_HAND",
          "value": "2",
          "description": ""
        },
        {
          "name": "CURSOR_CROSS",
          "value": "3",
          "description": ""
        },
        {
          "name": "CURSOR_WAIT",
          "value": "4",
          "description": ""
        },
        {
          "name": "CURSOR_BUSY",
          "value": "5",
          "description": ""
        },
        {
          "name": "CURSOR_DRAG",
          "value": "6",
          "description": ""
        },
        {
          "name": "CURSOR_CAN_DROP",
          "value": "7",
          "description": ""
        },
        {
          "name": "CURSOR_FORBIDDEN",
          "value": "8",
          "description": ""
        },
        {
          "name": "CURSOR_VSIZE",
          "value": "9",
          "description": ""
        },
        {
          "name": "CURSOR_HSIZE",
          "value": "10",
          "description": ""
        },
        {
          "name": "CURSOR_BDIAGSIZE",
          "value": "11",
          "description": ""
        },
        {
          "name": "CURSOR_FDIAGSIZE",
          "value": "12",
          "description": ""
        },
        {
          "name": "CURSOR_MOVE",
          "value": "13",
          "description": ""
        },
        {
          "name": "CURSOR_VSPLIT",
          "value": "14",
          "description": ""
        },
        {
          "name": "CURSOR_HSPLIT",
          "value": "15",
          "description": ""
        },
        {
          "name": "CURSOR_HELP",
          "value": "16",
          "description": ""
        },
        {
          "name": "SIZE_EXPAND",
          "value": "1",
          "description": ""
        },
        {
          "name": "SIZE_FILL",
          "value": "2",
          "description": ""
        },
        {
          "name": "SIZE_EXPAND_FILL",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ConvexPolygonShape": {
      "name": "ConvexPolygonShape",
      "inherits": "Shape",
      "category": "Core",
      "brief_description": "Convex Polygon Shape.",
      "description": "Convex polygon shape resource, which can be set into a [PhysicsBody] or area.",
      "methods": [
        {
          "name": "get_points",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3Array",
          "arguments": []
        },
        {
          "name": "set_points",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ConvexPolygonShape2D": {
      "name": "ConvexPolygonShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "brief_description": "Convex Polygon Shape for 2D physics.",
      "description": "Convex Polygon Shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).\n\t\tThe main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.",
      "methods": [
        {
          "name": "get_points",
          "qualifiers": "const",
          "description": "Return a list of points in either clockwise or counter clockwise order, forming a convex polygon.",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "set_point_cloud",
          "description": "Currently, this method does nothing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point_cloud",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_points",
          "description": "Set a list of points in either clockwise or counter clockwise order, forming a convex polygon.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CubeMap": {
      "name": "CubeMap",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_flags",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_lossy_storage_quality",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_side",
          "qualifiers": "const",
          "description": "",
          "return_type": "Image",
          "arguments": [
            {
              "index": "0",
              "name": "side",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_storage",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_flags",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lossy_storage_quality",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "quality",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_side",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "side",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_storage",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STORAGE_RAW",
          "value": "0",
          "description": ""
        },
        {
          "name": "STORAGE_COMPRESS_LOSSY",
          "value": "1",
          "description": ""
        },
        {
          "name": "STORAGE_COMPRESS_LOSSLESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "SIDE_LEFT",
          "value": "0",
          "description": ""
        },
        {
          "name": "SIDE_RIGHT",
          "value": "1",
          "description": ""
        },
        {
          "name": "SIDE_BOTTOM",
          "value": "2",
          "description": ""
        },
        {
          "name": "SIDE_TOP",
          "value": "3",
          "description": ""
        },
        {
          "name": "SIDE_FRONT",
          "value": "4",
          "description": ""
        },
        {
          "name": "SIDE_BACK",
          "value": "5",
          "description": ""
        },
        {
          "name": "FLAG_MIPMAPS",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_REPEAT",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_FILTER",
          "value": "4",
          "description": ""
        },
        {
          "name": "FLAGS_DEFAULT",
          "value": "7",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Curve2D": {
      "name": "Curve2D",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Describes a Bezier curve in 2D space.",
      "description": "This class describes a Bezier curve in 2D space. It is mainly used to give a shape to a [Path2D], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed further calculations up.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds a point to a curve, at position \"pos\", with control points \"in\" and \"out\".\n\t\t\t\tIf \"atpos\" is given, the point is inserted before the point number \"atpos\", moving that point (and every point after) after the inserted point. If \"atpos\" is not given, or is an illegal value (atpos <0 or atpos >= [method get_point_count]), the point will be appended at the end of the point list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "in",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            },
            {
              "index": "2",
              "name": "out",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            },
            {
              "index": "3",
              "name": "atpos",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear_points",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_bake_interval",
          "qualifiers": "const",
          "description": "Returns the distance between two adjacent cached points.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_length",
          "qualifiers": "const",
          "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_points",
          "qualifiers": "const",
          "description": "Returns the cache of points as a [Vector2Array].",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the number of points describing the curve.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_in",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_out",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_pos",
          "qualifiers": "const",
          "description": "Returns the position of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate",
          "qualifiers": "const",
          "description": "Returns the position between the vertex \"idx\" and the vertex \"idx\"+1, where \"t\" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of \"t\" outside the range (0.0 >= t  <=1) give strange, but predictable results.\n\t\t\t\tIf \"idx\" is out of bounds it is truncated to the first or last vertex, and \"t\" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate_baked",
          "qualifiers": "const",
          "description": "Returns a point within the curve at position \"offset\", where \"offset\" is measured as a pixel distance along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the \"offset\" lies between, then interpolates the values. This interpolation is cubic if \"cubic\" is set to true, or linear if set to false.\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cubic",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "interpolatef",
          "qualifiers": "const",
          "description": "Returns the position at the vertex \"fofs\". It calls [method interpolate] using the integer part of fofs as \"idx\", and its fractional part as \"t\".",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "fofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Deletes the point \"idx\" from the curve. Sends an error to the console if \"idx\" is out of bounds.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bake_interval",
          "description": "Sets the distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time a xxx_baked_xxx function is called. The less distance, the more points the cache will have, and the more memory it will consume, so use with care.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_in",
          "description": "Sets the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_out",
          "description": "Sets the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_pos",
          "description": "Sets the position for the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tesselate",
          "qualifiers": "const",
          "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t\"max_stages\" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t\"tolerance_degrees\" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.",
          "return_type": "Vector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "max_stages",
              "type": "int",
              "default_value": "5"
            },
            {
              "index": "1",
              "name": "tolerance_degrees",
              "type": "float",
              "default_value": "4"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Curve3D": {
      "name": "Curve3D",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Describes a Bezier curve in 3D space.",
      "description": "This class describes a Bezier curve in 3D space. It is mainly used to give a shape to a [Path], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed further calculations up.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds a point to a curve, at position \"pos\", with control points \"in\" and \"out\".\n\t\t\t\tIf \"atpos\" is given, the point is inserted before the point number \"atpos\", moving that point (and every point after) after the inserted point. If \"atpos\" is not given, or is an illegal value (atpos <0 or atpos >= [method get_point_count]), the point will be appended at the end of the point list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "in",
              "type": "Vector3",
              "default_value": "Vector3(0, 0, 0)"
            },
            {
              "index": "2",
              "name": "out",
              "type": "Vector3",
              "default_value": "Vector3(0, 0, 0)"
            },
            {
              "index": "3",
              "name": "atpos",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear_points",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_bake_interval",
          "qualifiers": "const",
          "description": "Returns the distance between two adjacent cached points.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_length",
          "qualifiers": "const",
          "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_points",
          "qualifiers": "const",
          "description": "Returns the cache of points as a [Vector3Array].",
          "return_type": "Vector3Array",
          "arguments": []
        },
        {
          "name": "get_baked_tilts",
          "qualifiers": "const",
          "description": "Returns the cache of tilts as a [RealArray].",
          "return_type": "RealArray",
          "arguments": []
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the number of points describing the curve.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_in",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_out",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_pos",
          "qualifiers": "const",
          "description": "Returns the position of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_tilt",
          "qualifiers": "const",
          "description": "Returns the tilt angle in radians for the point \"idx\". If the index is out of bounds, the function sends an error to the console, and returns 0.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate",
          "qualifiers": "const",
          "description": "Returns the position between the vertex \"idx\" and the vertex \"idx\"+1, where \"t\" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of \"t\" outside the range (0.0 >= t  <=1) give strange, but predictable results.\n\t\t\t\tIf \"idx\" is out of bounds it is truncated to the first or last vertex, and \"t\" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate_baked",
          "qualifiers": "const",
          "description": "Returns a point within the curve at position \"offset\", where \"offset\" is measured as a distance in 3D units along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the \"offset\" lies between, then interpolates the values. This interpolation is cubic if \"cubic\" is set to true, or linear if set to false.\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cubic",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "interpolatef",
          "qualifiers": "const",
          "description": "Returns the position at the vertex \"fofs\". It calls [method interpolate] using the integer part of fofs as \"idx\", and its fractional part as \"t\".",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "fofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Deletes the point \"idx\" from the curve. Sends an error to the console if \"idx\" is out of bounds.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bake_interval",
          "description": "Sets the distance in 3D units between two adjacent cached points. Changing it forces the cache to be recomputed the next time a xxx_baked_xxx function is called. The less distance, the more points the cache will have, and the more memory it will consume, so use with care.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_in",
          "description": "Sets the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_out",
          "description": "Sets the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_pos",
          "description": "Sets the position for the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_tilt",
          "description": "Sets the tilt angle in radians for the point \"idx\". If the index is out of bounds, the function sends an error to the console.\n\t\t\t\tThe tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a [PathFollow], this tilt is an offset over the natural tilt the PathFollow calculates.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tilt",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tesselate",
          "qualifiers": "const",
          "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t\"max_stages\" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t\"tolerance_degrees\" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.",
          "return_type": "Vector3Array",
          "arguments": [
            {
              "index": "0",
              "name": "max_stages",
              "type": "int",
              "default_value": "5"
            },
            {
              "index": "1",
              "name": "tolerance_degrees",
              "type": "float",
              "default_value": "4"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "DampedSpringJoint2D": {
      "name": "DampedSpringJoint2D",
      "inherits": "Joint2D",
      "category": "Core",
      "brief_description": "Damped spring constraint for 2D physics.",
      "description": "Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.",
      "methods": [
        {
          "name": "get_damping",
          "qualifiers": "const",
          "description": "Return the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the maximum length of the spring joint.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rest_length",
          "qualifiers": "const",
          "description": "Return the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_stiffness",
          "qualifiers": "const",
          "description": "Return the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_damping",
          "description": "Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "damping",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_length",
          "description": "Set the maximum length of the spring joint.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rest_length",
          "description": "Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rest_length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stiffness",
          "description": "Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stiffness",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Dictionary": {
      "name": "Dictionary",
      "category": "Built-In Types",
      "brief_description": "Dictionary type.",
      "description": "Dictionary type. Associative container which contains values referenced by unique keys. Dictionaries are always passed by reference.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear the dictionary, removing all key/value pairs.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "empty",
          "description": "Return true if the dictionary is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "erase",
          "description": "Erase a dictionary key/value pair by key.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has",
          "description": "Return true if the dictionary has a given key.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_all",
          "description": "Return true if the dictionary has all of the keys in the given array.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keys",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hash",
          "description": "Return a hashed integer value representing the dictionary contents.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "keys",
          "description": "Return the list of keys in the [Dictionary].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "parse_json",
          "description": "Parse JSON text to the dictionary. Return OK when successed or the error code when failed.\n\t\t\t\tBe aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert every numerical values to [float] types.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "json",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the dictionary (in pairs).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_json",
          "description": "Return the dictionary as json text.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "values",
          "description": "Return the list of values in the [Dictionary].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "DirectionalLight": {
      "name": "DirectionalLight",
      "inherits": "Light",
      "category": "Core",
      "brief_description": "Directional Light, such as the Sun or the Moon.",
      "description": "A DirectionalLight is a type of [Light] node that emits light constantly in one direction (the negative z axis of the node). It is used lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored, only the basis is used do determine light direction.",
      "methods": [
        {
          "name": "get_shadow_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shadow_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SHADOW_ORTHOGONAL",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADOW_PERSPECTIVE",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHADOW_PARALLEL_2_SPLITS",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHADOW_PARALLEL_4_SPLITS",
          "value": "3",
          "description": ""
        },
        {
          "name": "SHADOW_PARAM_MAX_DISTANCE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADOW_PARAM_PSSM_SPLIT_WEIGHT",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHADOW_PARAM_PSSM_ZOFFSET_SCALE",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Directory": {
      "name": "Directory",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Type used to handle the filesystem.",
      "description": "Directory type. It is used to manage directories and their content (not restricted to the project folder).\n\t\tHere is an example on how to iterate through the files of a directory:\n\t\t[codeblock]\n\t\tfunc dir_contents(path):\n\t\t    var dir = Directory.new()\n\t\t    if dir.open(path) == OK:\n\t\t        dir.list_dir_begin()\n\t\t        var file_name = dir.get_next()\n\t\t        while (file_name != \"\"):\n\t\t            if dir.current_is_dir():\n\t\t                print(\"Found directory: \" + file_name)\n\t\t            else:\n\t\t                print(\"Found file: \" + file_name)\n\t\t            file_name = dir.get_next()\n\t\t    else:\n\t\t        print(\"An error occurred when trying to access the path.\")\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "change_dir",
          "description": "Change the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. [code]newdir[/code] or [code]../newdir[/code]), or an absolute path (e.g. [code]/tmp/newdir[/code] or [code]res://somedir/newdir[/code]).\n\t\t\t\tThe method returns one of the error code constants defined in [@Global Scope] (OK or ERR_*).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "todir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "copy",
          "description": "Copy the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturns one of the error code constants defined in [@Global Scope] (OK, FAILED or ERR_*).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "current_is_dir",
          "qualifiers": "const",
          "description": "Return whether the current item processed with the last [method get_next] call is a directory ([code].[/code] and [code]..[/code] are considered directories).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "dir_exists",
          "description": "Return whether the target directory exists. The argument can be relative to the current directory, or an absolute path.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "file_exists",
          "description": "Return whether the target file exists. The argument can be relative to the current directory, or an absolute path.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_dir",
          "description": "Return the absolute path to the currently opened directory (e.g. [code]res://folder[/code] or [code]C:\\tmp\\folder[/code]).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_drive",
          "description": "On Windows, return the name of the drive (partition) passed as an argument (e.g. [code]C:[/code]). On other platforms, or if the requested drive does not existed, the method returns an empty String.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_drive_count",
          "description": "On Windows, return the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_next",
          "description": "Return the next element (file or directory) in the current directory (including [code].[/code] and [code]..[/code]). The name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. [method list_dir_end] would not be mandatory in such a case).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_space_left",
          "description": "On Unix desktop systems, return the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "list_dir_begin",
          "description": "Initialise the stream used to list all files and directories using the [method get_next] function, closing the current opened stream if needed. Once the stream has been processed, it should typically be closed with [method list_dir_end].\n\t\t\t\tReturn true if the stream could not be initialised.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "list_dir_end",
          "description": "Close the current stream opened with [method list_dir_begin] (whether it has been fully processed with [method get_next] or not does not matter).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "make_dir",
          "description": "Create a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see [method make_dir_recursive]).\n\t\t\t\tThe method returns one of the error code constants defined in [@Global Scope] (OK, FAILED or ERR_*).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_dir_recursive",
          "description": "Create a target directory and all necessary intermediate directories in its path, by calling [method make_dir] recursively. The argument can be relative to the current directory, or an absolute path.\n\t\t\t\tReturn one of the error code constants defined in [@Global Scope] (OK, FAILED or ERR_*).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open",
          "description": "Open an existing directory of the filesystem. The [i]path[/i] argument can be within the project tree ([code]res://folder[/code]), the user directory ([code]user://folder[/code]) or an absolute path of the user filesystem (e.g. [code]/tmp/folder[/code] or [code]C:\\tmp\\folder[/code]).\n\t\t\t\tThe method returns one of the error code constants defined in [@Global Scope] (OK or ERR_*).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Delete the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.\n\t\t\t\tReturn one of the error code constants defined in [@Global Scope] (OK or FAILED).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename",
          "description": "Rename (move) the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturn one of the error code constants defined in [@Global Scope] (OK or FAILED).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "DynamicFont": {
      "name": "DynamicFont",
      "inherits": "Font",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_fallback",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "DynamicFontData",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_fallback",
          "qualifiers": "const",
          "description": "",
          "return_type": "DynamicFontData",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_fallback_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_font_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "DynamicFontData",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_spacing",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_use_filter",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_use_mipmaps",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove_fallback",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fallback",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "DynamicFontData",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_font_data",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "DynamicFontData",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_spacing",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_filter",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_mipmaps",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SPACING_TOP",
          "value": "0",
          "description": ""
        },
        {
          "name": "SPACING_BOTTOM",
          "value": "1",
          "description": ""
        },
        {
          "name": "SPACING_CHAR",
          "value": "2",
          "description": ""
        },
        {
          "name": "SPACING_SPACE",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "DynamicFontData": {
      "name": "DynamicFontData",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_font_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_font_path",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorExportPlugin": {
      "name": "EditorExportPlugin",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Editor plugin to control the export process.",
      "description": "This plugin is added into EditorImportExport and allows to modify the behavior of the export process for individual files.",
      "methods": [
        {
          "name": "custom_export",
          "qualifiers": "virtual",
          "description": "This function is called for each file exported and depending from the return value one of many things might happen.\n\t\t\t\t1) If returned value is null, the file is exported as is.\n\t\t\t\t2) If the returned value is a RawAray (array of bytes), the content of that array becomes the new file being exported.\n\t\t\t\t3) If the file must also change its name when exported, then a [Dictionary] must be returned with two fields: 'name' with the new filename and 'data' with a [RawArray] containing the raw contents of the file. Even if the name is changed, the run-time will redirect the old file to the new file automatically when accessed.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "platform",
              "type": "EditorExportPlatform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorFileDialog": {
      "name": "EditorFileDialog",
      "inherits": "ConfirmationDialog",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_filter",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_filters",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_access",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_current_dir",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_file",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_display_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vbox",
          "description": "",
          "return_type": "VBoxContainer",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "invalidate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_overwrite_warning_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_showing_hidden_files",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_access",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "access",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_dir",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_file",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_path",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disable_overwrite_warning",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_display_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_show_hidden_files",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "dir_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "file_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "files_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paths",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MODE_OPEN_FILE",
          "value": "0",
          "description": ""
        },
        {
          "name": "MODE_OPEN_FILES",
          "value": "1",
          "description": ""
        },
        {
          "name": "MODE_OPEN_DIR",
          "value": "2",
          "description": ""
        },
        {
          "name": "MODE_OPEN_ANY",
          "value": "3",
          "description": ""
        },
        {
          "name": "MODE_SAVE_FILE",
          "value": "4",
          "description": ""
        },
        {
          "name": "ACCESS_RESOURCES",
          "value": "0",
          "description": ""
        },
        {
          "name": "ACCESS_USERDATA",
          "value": "1",
          "description": ""
        },
        {
          "name": "ACCESS_FILESYSTEM",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "EditorImportPlugin": {
      "name": "EditorImportPlugin",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Import plugin for editor",
      "description": "Import plugins make it easy to handle importing of external assets into a project. They way they work is not that obvious though, so please make sure to read the documentation, tutorials and examples.",
      "methods": [
        {
          "name": "can_reimport_multiple_files",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "custom_export",
          "qualifiers": "virtual",
          "description": "Generally, files that are imported stay the same when exported. The only exception is in some cases when the file must be re-imported for different platforms (ie. texture compression).\n\t\t\t\tIf you want to customize the export process, it's recommended to use [method EditorExportPlugin.custom_export] instead.",
          "return_type": "RawArray",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "platform",
              "type": "EditorExportPlatform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "expand_source_path",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_name",
          "qualifiers": "virtual",
          "description": "Get the name of the import plugin, which will be used to identify content imported by this plugin. Try to use lowercase and underscores if possible.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_visible_name",
          "qualifiers": "virtual",
          "description": "Visible name for this plugin, which will be shown on the import menu.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "import",
          "qualifiers": "virtual",
          "description": "Perform an import of an external resources into the project. This function is both called on import (from the dialog) or re-import (manual or automatic when external source files changed).\n\t\t\t\tAn import process generally works like this:\n\t\t\t\t1) Check the metadata for source files and options. Metadata is either generated in the import dialog or taken from an existing resource upon reimport.\n\t\t\t\t2) Perform the import process into a new resource. Some times the resource being re-imported may be already loaded and in use, so checking for this by using [method ResourceLoader.has] is recommended. Otherwise create a new resource.\n\t\t\t\t3) Set the metadata from the argument into the existing or new resource being created using [method Resource.set_import_metadata].\n\t\t\t\t4) Save the resource into 'path' (function argument)",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "ResourceImportMetadata",
              "default_value": ""
            }
          ]
        },
        {
          "name": "import_dialog",
          "qualifiers": "virtual",
          "description": "This function is called when either the user chooses to import a resource of this type (Import menu), or when the user chooses to re-import the resource (from filesystem). In the later case, the path for the existing file is supplied in the argument.\n\t\t\t\tIf the path is supplied, it is recommended to read the import metadata with [method ResourceLoader.load_import_metadata] and fill in the fields with the values contained there.\n\t\t\t\tThe dialog can be shown in any way (just use a ConfirmationDialog and pop it up). Upon confirmation, fill up a ResourceImportMetadata and call the [method EditorImportPlugin.import] function with this information.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "import_from_drop",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "files",
              "type": "StringArray",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dest_path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reimport_multiple_files",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "files",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "validate_source_path",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorPlugin": {
      "name": "EditorPlugin",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Used by the editor to extend its functionality.",
      "description": "Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins.",
      "methods": [
        {
          "name": "add_control_to_bottom_panel",
          "description": "Add a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_bottom_panel].",
          "return_type": "ToolButton",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_control_to_container",
          "description": "Add a custom control to a container (see CONTAINER_* enum). There are many locations where custom controls can be added in the editor UI.\n\t\t\t\tPlease remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).\n\t\t\t\tIf your plugin is being removed, also make sure to remove your custom controls too.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "container",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_control_to_dock",
          "description": "Add the control to a specific dock slot (see DOCK_* enum for options).\n\t\t\t\tIf the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.\n\t\t\t\tIf your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_docks].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_custom_type",
          "description": "Add a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.\n\t\t\t\tWhen given node or resource is selected, the base type will be instanced (ie, \"Spatial\", \"Control\", \"Resource\"), then the script will be loaded and set to this object.\n\t\t\t\tYou can use the [method EditorPlugin.handles] to check if your custom object is being edited by checking the script or using 'extends' keyword.\n\t\t\t\tDuring run-time, this will be a simple object with a script so this function does not need to be called then.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "base",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "script",
              "type": "Script",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_export_plugin",
          "description": "Add an export plugin. Plugins of this kind can change files being exported. On exit don't forget to call [method remove_export_plugin].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plugin",
              "type": "EditorExportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_import_plugin",
          "description": "Add an import plugin. These plugins manage importing external content (from outside the project) into formats the engine can understand.\n\t\t\t\tOn exit, don't forget to remove the plugin by calling [method remove_import_plugin]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plugin",
              "type": "EditorImportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_changes",
          "qualifiers": "virtual",
          "description": "This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.\n\t\t\t\tThis is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "clear",
          "qualifiers": "virtual",
          "description": "Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "create_spatial_gizmo",
          "qualifiers": "virtual",
          "description": "This is used for plugins that create gizmos used by the spatial editor. Just check that the node passed in the \"for_spatial\" argument matches your plugin.",
          "return_type": "EditorSpatialGizmo",
          "arguments": [
            {
              "index": "0",
              "name": "for_spatial",
              "type": "Spatial",
              "default_value": ""
            }
          ]
        },
        {
          "name": "edit",
          "qualifiers": "virtual",
          "description": "This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "edit_resource",
          "description": "Tells the editor to handle the edit of the given resource. For example, if you pass a script as argument, the editor will open the script editor.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "forward_input_event",
          "qualifiers": "virtual",
          "description": "This is a low level function for plugins that edit a given object type derived from CanvasItem to capture the input in the 2D editor viewport. The function is only being called if your object is being edited.\n\t\t\t\tReturn true if you want to capture the input, otherwise false.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "forward_spatial_input_event",
          "qualifiers": "virtual",
          "description": "This is a low level function for plugins that edit a given objet type derived from Spatial to capture the input of the viewport. The function is only being called if your object is being edited.\n\t\t\t\tBy using the [InputEvent] and the [Camera] arguments it's pretty easy to do raycasts into space using Camera functions.\n\t\t\t\tReturn true if you want to capture the input, otherwise false.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Camera",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_base_control",
          "description": "Get a base control where it's safe to place dialogs. Many plugins open dialogs and they need a control as a base to make sure they use the editor icons and theme.",
          "return_type": "Control",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_breakpoints",
          "qualifiers": "virtual",
          "description": "This is for editors that edit script based objects. You can return a list of breakpoints in the format (script:line), for example: res://path_to_script.gd:25",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "get_editor_settings",
          "description": "Get the general settings for the editor (the same window that appears in the Settings menu).",
          "return_type": "EditorSettings",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_editor_viewport",
          "description": "Get the main editor control. Use this as a parent for main screens.",
          "return_type": "Control",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "virtual",
          "description": "Get the name of the editor plugin. For main scren plugins this is what will appear in the selector (which by default is 2D, 3D, Script).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_selection",
          "description": "Get the object that handles the selection of nodes in the Scene Tree editor.",
          "return_type": "EditorSelection",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_state",
          "qualifiers": "virtual",
          "description": "Get the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_undo_redo",
          "description": "Get the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.",
          "return_type": "UndoRedo",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_window_layout",
          "qualifiers": "virtual",
          "description": "Get the GUI layout of the plugin. This is used to save the project's editor layout when the [method EditorPlugin.queue_save_layout] is called or the editor layout was changed(For example changing the position of a dock).",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "layout",
              "type": "ConfigFile",
              "default_value": ""
            }
          ]
        },
        {
          "name": "handles",
          "qualifiers": "virtual",
          "description": "Implement this function if your plugin edits a specific type of object (Resource or Node). If you return true, then you will get the functions [method EditorPlugin.edit] and [method EditorPlugin.make_visible] called when the editor requests them.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_main_screen",
          "qualifiers": "virtual",
          "description": "Return true if this is a main screen editor plugin (it goes in the main screen selector together with 2D, 3D, Script).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_visible",
          "qualifiers": "virtual",
          "description": "This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.\n\t\t\t\tRemember that you have to manage the visibility of all your editor controls manually.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_save_layout",
          "qualifiers": "const",
          "description": "Queue save the project's editor layout.",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "remove_control_from_bottom_panel",
          "description": "Remove the control from the bottom panel. Don't forget to call this if you added one, so the editor can remove it cleanly.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_control_from_docks",
          "description": "Remove the control from the dock. Don't forget to call this if you added one, so the editor can save the layout and remove it cleanly.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_custom_type",
          "description": "Remove a custom type added by [method EditorPlugin.add_custom_type]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_export_plugin",
          "description": "Remove the export plugin, don't forget to call this on exit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plugin",
              "type": "EditorExportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_import_plugin",
          "description": "Remove the import plugin, don't forget to call this on exit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plugin",
              "type": "EditorImportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save_external_data",
          "qualifiers": "virtual",
          "description": "This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "set_state",
          "qualifiers": "virtual",
          "description": "Restore the state saved by [method EditorPlugin.get_state].",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_layout",
          "qualifiers": "virtual",
          "description": "Restore the plugin GUI layout saved by [method EditorPlugin.get_window_layout].",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "layout",
              "type": "ConfigFile",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CONTAINER_TOOLBAR",
          "value": "0",
          "description": ""
        },
        {
          "name": "CONTAINER_SPATIAL_EDITOR_MENU",
          "value": "1",
          "description": ""
        },
        {
          "name": "CONTAINER_SPATIAL_EDITOR_SIDE",
          "value": "2",
          "description": ""
        },
        {
          "name": "CONTAINER_SPATIAL_EDITOR_BOTTOM",
          "value": "3",
          "description": ""
        },
        {
          "name": "CONTAINER_CANVAS_EDITOR_MENU",
          "value": "4",
          "description": ""
        },
        {
          "name": "CONTAINER_CANVAS_EDITOR_SIDE",
          "value": "5",
          "description": ""
        },
        {
          "name": "CONTAINER_PROPERTY_EDITOR_BOTTOM",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_UL",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_BL",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_UR",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_BR",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_UL",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_BL",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_UR",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_BR",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_MAX",
          "value": "8",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "EditorScenePostImport": {
      "name": "EditorScenePostImport",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Base script for post-processing scenes being imported.",
      "description": "These scripts can modify scenes after being imported by the 3D Scene import option of the Import menu.",
      "methods": [
        {
          "name": "post_import",
          "qualifiers": "virtual",
          "description": "This function is called upon import with the imported scene.\n\t\t\t\tJust do any changes desired to the scene and return it. If null is returned, import will fail and throw an error to the user.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorScript": {
      "name": "EditorScript",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Simple script to perform changes in the currently edited scene.",
      "description": "This script can be run from the Scene -> Run Script menu option.",
      "methods": [
        {
          "name": "_run",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "add_root_node",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_scene",
          "description": "",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorSelection": {
      "name": "EditorSelection",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Manages the SceneTree selection in the editor.",
      "description": "This object manages the SceneTree selection in the editor.",
      "methods": [
        {
          "name": "add_node",
          "description": "Add a node to the selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_selected_nodes",
          "description": "Get the list of selectes nodes.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_node",
          "description": "Remove a node from the selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "selection_changed",
          "description": "Emitted when the selection changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorSettings": {
      "name": "EditorSettings",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Object that holds the project-independent editor settings.",
      "description": "Object that holds the project-independent editor settings. These settings are generally visible in the Editor Settings menu.\n\t\tAccessing the settings is done by using the regular [Object] API, such as:\n\t\t[codeblock]\n\t\tsettings.set(prop,value)\n\t\tsettings.get(prop)\n\t\tlist_of_settings = settings.get_property_list()\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "add_property_info",
          "description": "Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@Global Scope]), and optionally hint:[int](see PROPERTY_HINT_* in [@Global Scope]), hint_string:[String].\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\teditor_settings.set(\"category/property_name\", 0)\n\n\t\t\t\tvar property_info = {\n\t\t\t\t    \"name\": \"category/property_name\",\n\t\t\t\t    \"type\": TYPE_INT,\n\t\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t\t}\n\n\t\t\t\teditor_settings.add_property_info(property_info)\n\t\t\t\t[/codeblock]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "info",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase",
          "description": "Erase a given setting (pass full property path).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_favorite_dirs",
          "qualifiers": "const",
          "description": "Get the list of favorite directories for this project.",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "get_project_settings_path",
          "qualifiers": "const",
          "description": "Get the specific project settings path. Projects all have an unique sub-directory inside the settings path where project specific settings are saved.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_recent_dirs",
          "qualifiers": "const",
          "description": "Get the list of recently visited folders in the file dialog for this project.",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "get_settings_path",
          "qualifiers": "const",
          "description": "Get the global settings path for the engine. Inside this path you can find some standard paths such as:\n\t\t\t\tsettings/tmp - used for temporary storage of files\n\t\t\t\tsettings/templates - where export templates are located",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_favorite_dirs",
          "description": "Set the list of favorite directories for this project.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dirs",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_recent_dirs",
          "description": "Set the list of recently visited folders in the file dialog for this project.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dirs",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "settings_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorSpatialGizmo": {
      "name": "EditorSpatialGizmo",
      "inherits": "SpatialGizmo",
      "category": "Core",
      "brief_description": "Custom gizmo for editing Spatial objects.",
      "description": "Custom gizmo that is used for providing custom visualization and editing (handles) for 3D Spatial objects. These are created by [method EditorPlugin.create_spatial_gizmo].",
      "methods": [
        {
          "name": "add_collision_segments",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_collision_triangles",
          "description": "Add collision triangles to the gizmo for picking. A [TriangleMesh] can be generated from a regular [Mesh] too. Call this function during [method redraw].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "triangles",
              "type": "TriangleMesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_handles",
          "description": "Add a list of handles (points) which can be used to deform the object being edited.\n\t\t\t\tThere are virtual functions which will be called upon editing of these handles. Call this function during [method redraw].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "handles",
              "type": "Vector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "billboard",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "secondary",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_lines",
          "description": "Add lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this function during [method redraw].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lines",
              "type": "Vector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "Material",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "billboard",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_mesh",
          "description": "Add a mesh to the gizmo, this is used for visualization. Call this function during [method redraw].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "billboard",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "skeleton",
              "type": "RID",
              "default_value": "RID()"
            }
          ]
        },
        {
          "name": "add_unscaled_billboard",
          "description": "Add an unscaled billboard for visualization. Call this function during [method redraw].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "default_scale",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit_handle",
          "qualifiers": "virtual",
          "description": "Commit a handle being edited (handles must have been prevously added by [method add_handles]).\n\t\t\t\tIf the cancel parameter is true, an option to restore the edited value to the original is provided.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "restore",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "cancel",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_handle_name",
          "qualifiers": "virtual",
          "description": "Get the name of an edited handle (handles must have been previously added by [method add_handles]).\n\t\t\t\tHandles can be named for reference to the user when editing.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_handle_value",
          "qualifiers": "virtual",
          "description": "Get actual value of a handle. This value can be anything and used for eventually undoing the motion when calling [method commit_handle]",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "redraw",
          "qualifiers": "virtual",
          "description": "This function is called when the Spatial this gizmo refers to changes (the [method Spatial.update_gizmo] is called).",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "set_handle",
          "qualifiers": "virtual",
          "description": "This function is used when the user drags a gizmo handle (previously added with [method add_handles]) in screen coordinates.\n\t\t\t\tThe [Camera] is also provided so screen coordinates can be converted to raycasts.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "camera",
              "type": "Camera",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_spatial_node",
          "description": "Call this function once and upon creation of the gizmo, otherwise no other function will work. The argument is the node being edited by the gizmo.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Spatial",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Environment": {
      "name": "Environment",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "fx_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fx_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_background",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_background_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_fx_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "effect",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_background",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bgmode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_background_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enable_fx",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "effect",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "BG_KEEP",
          "value": "0",
          "description": ""
        },
        {
          "name": "BG_DEFAULT_COLOR",
          "value": "1",
          "description": ""
        },
        {
          "name": "BG_COLOR",
          "value": "2",
          "description": ""
        },
        {
          "name": "BG_TEXTURE",
          "value": "3",
          "description": ""
        },
        {
          "name": "BG_CUBEMAP",
          "value": "4",
          "description": ""
        },
        {
          "name": "BG_CANVAS",
          "value": "5",
          "description": ""
        },
        {
          "name": "BG_MAX",
          "value": "6",
          "description": ""
        },
        {
          "name": "BG_PARAM_CANVAS_MAX_LAYER",
          "value": "0",
          "description": ""
        },
        {
          "name": "BG_PARAM_COLOR",
          "value": "1",
          "description": ""
        },
        {
          "name": "BG_PARAM_TEXTURE",
          "value": "2",
          "description": ""
        },
        {
          "name": "BG_PARAM_CUBEMAP",
          "value": "3",
          "description": ""
        },
        {
          "name": "BG_PARAM_ENERGY",
          "value": "4",
          "description": ""
        },
        {
          "name": "BG_PARAM_GLOW",
          "value": "6",
          "description": ""
        },
        {
          "name": "BG_PARAM_MAX",
          "value": "7",
          "description": ""
        },
        {
          "name": "FX_AMBIENT_LIGHT",
          "value": "0",
          "description": ""
        },
        {
          "name": "FX_FXAA",
          "value": "1",
          "description": ""
        },
        {
          "name": "FX_GLOW",
          "value": "2",
          "description": ""
        },
        {
          "name": "FX_DOF_BLUR",
          "value": "3",
          "description": ""
        },
        {
          "name": "FX_HDR",
          "value": "4",
          "description": ""
        },
        {
          "name": "FX_FOG",
          "value": "5",
          "description": ""
        },
        {
          "name": "FX_BCS",
          "value": "6",
          "description": ""
        },
        {
          "name": "FX_SRGB",
          "value": "7",
          "description": ""
        },
        {
          "name": "FX_MAX",
          "value": "8",
          "description": ""
        },
        {
          "name": "FX_BLUR_BLEND_MODE_ADDITIVE",
          "value": "0",
          "description": ""
        },
        {
          "name": "FX_BLUR_BLEND_MODE_SCREEN",
          "value": "1",
          "description": ""
        },
        {
          "name": "FX_BLUR_BLEND_MODE_SOFTLIGHT",
          "value": "2",
          "description": ""
        },
        {
          "name": "FX_HDR_TONE_MAPPER_LINEAR",
          "value": "0",
          "description": ""
        },
        {
          "name": "FX_HDR_TONE_MAPPER_LOG",
          "value": "1",
          "description": ""
        },
        {
          "name": "FX_HDR_TONE_MAPPER_REINHARDT",
          "value": "2",
          "description": ""
        },
        {
          "name": "FX_HDR_TONE_MAPPER_REINHARDT_AUTOWHITE",
          "value": "3",
          "description": ""
        },
        {
          "name": "FX_PARAM_AMBIENT_LIGHT_COLOR",
          "value": "0",
          "description": ""
        },
        {
          "name": "FX_PARAM_AMBIENT_LIGHT_ENERGY",
          "value": "1",
          "description": ""
        },
        {
          "name": "FX_PARAM_GLOW_BLUR_PASSES",
          "value": "2",
          "description": ""
        },
        {
          "name": "FX_PARAM_GLOW_BLUR_SCALE",
          "value": "3",
          "description": ""
        },
        {
          "name": "FX_PARAM_GLOW_BLUR_STRENGTH",
          "value": "4",
          "description": ""
        },
        {
          "name": "FX_PARAM_GLOW_BLUR_BLEND_MODE",
          "value": "5",
          "description": ""
        },
        {
          "name": "FX_PARAM_GLOW_BLOOM",
          "value": "6",
          "description": ""
        },
        {
          "name": "FX_PARAM_GLOW_BLOOM_TRESHOLD",
          "value": "7",
          "description": ""
        },
        {
          "name": "FX_PARAM_DOF_BLUR_PASSES",
          "value": "8",
          "description": ""
        },
        {
          "name": "FX_PARAM_DOF_BLUR_BEGIN",
          "value": "9",
          "description": ""
        },
        {
          "name": "FX_PARAM_DOF_BLUR_RANGE",
          "value": "10",
          "description": ""
        },
        {
          "name": "FX_PARAM_HDR_TONEMAPPER",
          "value": "11",
          "description": ""
        },
        {
          "name": "FX_PARAM_HDR_EXPOSURE",
          "value": "12",
          "description": ""
        },
        {
          "name": "FX_PARAM_HDR_WHITE",
          "value": "13",
          "description": ""
        },
        {
          "name": "FX_PARAM_HDR_GLOW_TRESHOLD",
          "value": "14",
          "description": ""
        },
        {
          "name": "FX_PARAM_HDR_GLOW_SCALE",
          "value": "15",
          "description": ""
        },
        {
          "name": "FX_PARAM_HDR_MIN_LUMINANCE",
          "value": "16",
          "description": ""
        },
        {
          "name": "FX_PARAM_HDR_MAX_LUMINANCE",
          "value": "17",
          "description": ""
        },
        {
          "name": "FX_PARAM_HDR_EXPOSURE_ADJUST_SPEED",
          "value": "18",
          "description": ""
        },
        {
          "name": "FX_PARAM_FOG_BEGIN",
          "value": "19",
          "description": ""
        },
        {
          "name": "FX_PARAM_FOG_ATTENUATION",
          "value": "22",
          "description": ""
        },
        {
          "name": "FX_PARAM_FOG_BEGIN_COLOR",
          "value": "20",
          "description": ""
        },
        {
          "name": "FX_PARAM_FOG_END_COLOR",
          "value": "21",
          "description": ""
        },
        {
          "name": "FX_PARAM_FOG_BG",
          "value": "23",
          "description": ""
        },
        {
          "name": "FX_PARAM_BCS_BRIGHTNESS",
          "value": "24",
          "description": ""
        },
        {
          "name": "FX_PARAM_BCS_CONTRAST",
          "value": "25",
          "description": ""
        },
        {
          "name": "FX_PARAM_BCS_SATURATION",
          "value": "26",
          "description": ""
        },
        {
          "name": "FX_PARAM_MAX",
          "value": "27",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "EventPlayer": {
      "name": "EventPlayer",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Class for event stream playback.",
      "description": "Class for event stream playback. Event streams are music expressed as a series of events (note on, note off, instrument change...), as opposed to audio streams, which are just audio data. Examples of event-based streams are MIDI files, or MOD music.\n\t\tCurrently, only MOD, S3M, IT, and XM music is supported.",
      "methods": [
        {
          "name": "get_channel_last_note_time",
          "qualifiers": "const",
          "description": "Return the time at which the last note of a given channel in the stream plays.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "channel",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_channel_volume",
          "qualifiers": "const",
          "description": "Return the volume scale for an individual channel of the stream.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "channel",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the song length. May be in seconds, but depends on the stream type.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_loop_count",
          "qualifiers": "const",
          "description": "Return the number of times the playback has looped.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_pitch_scale",
          "qualifiers": "const",
          "description": "Return the pitch scale factor for this player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_pos",
          "qualifiers": "const",
          "description": "Return the playback position. May be in seconds, but depends on the stream type.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_stream",
          "qualifiers": "const",
          "description": "Return the currently assigned stream.",
          "return_type": "EventStream",
          "arguments": []
        },
        {
          "name": "get_stream_name",
          "qualifiers": "const",
          "description": "Return the name of the currently assigned stream. This is not the file name, but a field inside the file. If no stream is assigned, if returns \"<No Stream>\".",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_tempo_scale",
          "qualifiers": "const",
          "description": "Return the tempo multiplier.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_volume",
          "qualifiers": "const",
          "description": "Return the playback volume for this player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_volume_db",
          "qualifiers": "const",
          "description": "Return the playback volume for this player, in decibels.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_autoplay",
          "qualifiers": "const",
          "description": "Return whether this player will start playing as soon as it enters the scene tree.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "Return whether this player will be restart the playback at the end.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_paused",
          "qualifiers": "const",
          "description": "Return whether the playback is currently paused.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return whether this player is playing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play the currently assigned stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "seek_pos",
          "description": "Set the playback position. May be in seconds, but depends on the stream type.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "Set whether this player will start playing as soon as it enters the scene tree.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_channel_volume",
          "description": "Set the volume scale for an individual channel of the stream, with the same value range as [method set_volume]. The channel number depends on the stream format. For example, MIDIs range from 0 to 15, and MODs from 0 to 63.\n\t\t\t\tMany stream formats are multichannel, so this allows to affect only a part of the music.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "channel",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "channel_volume",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "Set whether the stream will be restarted at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_paused",
          "description": "Pause stream playback.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paused",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pitch_scale",
          "description": "Set the pitch multiplier for all sounds coming from this stream. A value of 2.0 shifts all pitches one octave up, and a value of 0.5 shifts pitches one octave down.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pitch_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream",
          "description": "Set the [EventStream] this player will play.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "EventStream",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tempo_scale",
          "description": "Set the tempo multiplier. This allows to slow down or speed up the music, without affecting its pitch.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tempo_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume",
          "description": "Set the playback volume for this player. This is a float between 0.0 (silent) and 1.0 (full volume). Values over 1.0 may amplify sound even more, but may introduce distortion. Negative values may just invert the output waveform, which produces no audible difference.\n\t\t\t\tThe effect of these special values ultimately depends on the low-level implementation of the file format being played.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "volume",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume_db",
          "description": "Set the playback volume for this player, in decibels. This is a float between -80.0 (silent) and 0.0 (full volume). Values under -79.0 get truncated to -80, but values over 0.0 do not, so the warnings for over amplifying (see [method set_volume]) still apply.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EventStream": {
      "name": "EventStream",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Base class for all event-based stream drivers.",
      "description": "Base class for all event-based stream drivers. Event streams are music expressed as a series of events (note on, note off, instrument change...), as opposed to audio streams, which are just audio data. Examples of event-based streams are MIDI files, of MOD music.\n\t\tThis class exposes no methods.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EventStreamChibi": {
      "name": "EventStreamChibi",
      "inherits": "EventStream",
      "category": "Core",
      "brief_description": "Driver for MOD playback.",
      "description": "This driver plays MOD music. MOD music, as all event-based streams, is a music format defined by note events occurring at defined moments, instead of a stream of audio samples.\n\t\tCurrently, this driver supports the MOD, S3M, IT, and XM formats.\n\t\tThis class exposes no methods.\n\t\tThis class can return its playback position in seconds, but does not allow to set it, failing with only a console warning.\n\t\tThis class can not return its song length, returning 1.0 when queried.\n\t\tThis class does not limit its volume settings, allowing for overflow/distortion and wave inversion.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "File": {
      "name": "File",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Type to handle file reading and writing operations.",
      "description": "File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.\n\t\tHere's a sample on how to write and read from a file:\n\t\t[codeblock]\n\t\tfunc save(content):\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", file.WRITE)\n\t\t    file.store_string(content)\n\t\t    file.close()\n\n\t\tfunc load():\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", file.READ)\n\t\t    var content = file.get_as_text()\n\t\t    file.close()\n\t\t    return content\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "close",
          "description": "Close the currently opened file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "eof_reached",
          "qualifiers": "const",
          "description": "Return whether the file cursor reached the end of the file.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "file_exists",
          "qualifiers": "const",
          "description": "Get whether or not the file in the specified path exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_16",
          "qualifiers": "const",
          "description": "Get the next 16 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_32",
          "qualifiers": "const",
          "description": "Get the next 32 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_64",
          "qualifiers": "const",
          "description": "Get the next 64 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_8",
          "qualifiers": "const",
          "description": "Get the next 8 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_as_text",
          "qualifiers": "const",
          "description": "Get the whole file as a [String].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_buffer",
          "qualifiers": "const",
          "description": "Get next len bytes of the file as a [RawArray].",
          "return_type": "RawArray",
          "arguments": [
            {
              "index": "0",
              "name": "len",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_csv_line",
          "qualifiers": "const",
          "description": "Get the next value of the file in CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default \",\" (comma).",
          "return_type": "StringArray",
          "arguments": [
            {
              "index": "0",
              "name": "delim",
              "type": "String",
              "default_value": "\",\""
            }
          ]
        },
        {
          "name": "get_double",
          "qualifiers": "const",
          "description": "Get the next 64 bits from the file as a floating point number.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_endian_swap",
          "description": "Get whether endian swap is enabled for this file.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_error",
          "qualifiers": "const",
          "description": "Get the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [@Global Scope].",
          "return_type": "Error",
          "arguments": []
        },
        {
          "name": "get_float",
          "qualifiers": "const",
          "description": "Get the next 32 bits from the file as a floating point number.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_len",
          "qualifiers": "const",
          "description": "Return the size of the file in bytes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_line",
          "qualifiers": "const",
          "description": "Get the next line of the file as a [String].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_md5",
          "qualifiers": "const",
          "description": "Return a md5 String representing the file at the given path or an empty [String] on failure.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_modified_time",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pascal_string",
          "description": "Get a [String] saved in Pascal format from the file.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_pos",
          "qualifiers": "const",
          "description": "Return the file cursor position.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_real",
          "qualifiers": "const",
          "description": "Get the next bits from the file as a floating point number.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sha256",
          "qualifiers": "const",
          "description": "Return a sha256 String representing the file at the given path or an empty [String] on failure.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_var",
          "qualifiers": "const",
          "description": "Get the next Variant value from the file.",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "is_open",
          "qualifiers": "const",
          "description": "Return whether the file is currently opened.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "open",
          "description": "Open the file for writing or reading, depending on the flags.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_encrypted",
          "description": "Open an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "key",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_encrypted_with_pass",
          "description": "Open an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "pass",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek",
          "description": "Change the file reading/writing cursor to the specified position (in bytes from the beginning of the file).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek_end",
          "description": "Change the file reading/writing cursor to the specified position (in bytes from the end of the file). Note that this is an offset, so you should use negative numbers or the cursor will be at the end of the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_endian_swap",
          "description": "Set whether to swap the endianess of the file. Enable this if you're dealing with files written in big endian machines.\n\t\t\t\tNote that this is about the file format, not CPU type. This is always reseted to [code]false[/code] whenever you open the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_16",
          "description": "Store an integer as 16 bits in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_32",
          "description": "Store an integer as 32 bits in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_64",
          "description": "Store an integer as 64 bits in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_8",
          "description": "Store an integer as 8 bits in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_buffer",
          "description": "Store the given array of bytes in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_double",
          "description": "Store a floating point number as 64 bits in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_float",
          "description": "Store a floating point number as 32 bits in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_line",
          "description": "Store the given [String] as a line in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_pascal_string",
          "description": "Store the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_real",
          "description": "Store a floating point number in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_string",
          "description": "Store the given [String] in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_var",
          "description": "Store any Variant value in the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "READ",
          "value": "1",
          "description": "Open the file for reading."
        },
        {
          "name": "WRITE",
          "value": "2",
          "description": "Open the file for writing. Create it if the file not exists and truncate if it exists."
        },
        {
          "name": "READ_WRITE",
          "value": "3",
          "description": "Open the file for reading and writing, without truncating the file."
        },
        {
          "name": "WRITE_READ",
          "value": "7",
          "description": "Open the file for reading and writing. Create it if the file not exists and truncate if it exists."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "FileDialog": {
      "name": "FileDialog",
      "inherits": "ConfirmationDialog",
      "category": "Core",
      "brief_description": "Dialog for selecting files or directories in the filesystem.",
      "description": "FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.",
      "methods": [
        {
          "name": "add_filter",
          "description": "Add a custom filter. Filter format is: \"mask ; description\", example (C++): dialog->add_filter(\"*.png ; PNG Images\");",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_filters",
          "description": "Clear all the added filters in the dialog.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_access",
          "qualifiers": "const",
          "description": "Return the file access permission of the dialog.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_current_dir",
          "qualifiers": "const",
          "description": "Get the current working directory of the file dialog.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_file",
          "qualifiers": "const",
          "description": "Get the current selected file of the file dialog (empty if none).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_path",
          "qualifiers": "const",
          "description": "Get the current selected path (directory and file) of the file dialog (empty if none).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_filters",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Get the file dialog mode from the MODE_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vbox",
          "description": "Return the vertical box container of the dialog, custom controls can be added to it.",
          "return_type": "VBoxContainer",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "invalidate",
          "description": "Invalidate and update the current dialog content list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_showing_hidden_files",
          "qualifiers": "const",
          "description": "Return true if the diaog allows show hidden files.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_access",
          "description": "Set the file access permission of the dialog(Must be one of [ACCESS_RESOURCES], [ACCESS_USERDATA] or [ACCESS_FILESYSTEM]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "access",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_dir",
          "description": "Set the current working directory of the file dialog.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_file",
          "description": "Set the current selected file name of the file dialog.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_path",
          "description": "Set the current selected file path of the file dialog.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_filters",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filters",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the file dialog mode from the MODE_* enum.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_show_hidden_files",
          "description": "Set the dialog should show hidden files.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "dir_selected",
          "description": "Event emitted when the user selects a directory.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "file_selected",
          "description": "Event emitted when the user selects a file (double clicks it or presses the OK button).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "files_selected",
          "description": "Event emitted when the user selects multiple files.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paths",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MODE_OPEN_FILE",
          "value": "0",
          "description": "The dialog allows the selection of one, and only one file."
        },
        {
          "name": "MODE_OPEN_FILES",
          "value": "1",
          "description": "The dialog allows the selection of multiple files."
        },
        {
          "name": "MODE_OPEN_DIR",
          "value": "2",
          "description": "The dialog functions as a folder selector, disallowing the selection of any file."
        },
        {
          "name": "MODE_OPEN_ANY",
          "value": "3",
          "description": "The dialog allows the selection of a file or a directory."
        },
        {
          "name": "MODE_SAVE_FILE",
          "value": "4",
          "description": "The dialog will warn when a file exists."
        },
        {
          "name": "ACCESS_RESOURCES",
          "value": "0",
          "description": "The dialog allows the selection of file and directory."
        },
        {
          "name": "ACCESS_USERDATA",
          "value": "1",
          "description": "The dialog allows ascess files under [Resource] path(res://) ."
        },
        {
          "name": "ACCESS_FILESYSTEM",
          "value": "2",
          "description": "The dialog allows ascess files in whole file system."
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "files_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "folder",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "reload",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "FixedMaterial": {
      "name": "FixedMaterial",
      "inherits": "Material",
      "category": "Core",
      "brief_description": "Simple Material with a fixed parameter set.",
      "description": "FixedMaterial is a simple type of material [Resource], which contains a fixed amount of parameters. It is the only type of material supported in fixed-pipeline devices and APIs. It is also an often a better alternative to [ShaderMaterial] for most simple use cases.",
      "methods": [
        {
          "name": "get_fixed_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_light_shader",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_parameter",
          "qualifiers": "const",
          "description": "Return a parameter, parameters are defined in the PARAM_* enum. The type of each parameter may change, so it's best to check the enum.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_texcoord_mode",
          "qualifiers": "const",
          "description": "Return the texture coordinate mode. Each texture param (from the PARAM_* enum) has one. It defines how the textures are mapped to the object.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Return a texture. Textures change parameters per texel and are mapped to the model depending on the texcoord mode (see [method set_texcoord_mode]).",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_uv_transform",
          "qualifiers": "const",
          "description": "Returns the special transform used to post-transform UV coordinates of the uv_xform texcoord mode: TEXCOORD_UV_TRANSFORM.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "set_fixed_flag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_light_shader",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_parameter",
          "description": "Set a parameter, parameters are defined in the PARAM_* enum. The type of each parameter may change, so it's best to check the enum.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texcoord_mode",
          "description": "Set the texture coordinate mode. Each texture param (from the PARAM_* enum) has one. It defines how the textures are mapped to the object.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "Set a texture. Textures change parameters per texel and are mapped to the model depending on the texcoord mode (see [method set_texcoord_mode]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv_transform",
          "description": "Sets a special transform used to post-transform UV coordinates of the uv_xform texcoord mode: TEXCOORD_UV_TRANSFORM.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_DIFFUSE",
          "value": "0",
          "description": "Diffuse Lighting (light scattered from surface)."
        },
        {
          "name": "PARAM_DETAIL",
          "value": "1",
          "description": "Detail Layer for diffuse lighting."
        },
        {
          "name": "PARAM_SPECULAR",
          "value": "2",
          "description": "Specular Lighting (light reflected from the surface)."
        },
        {
          "name": "PARAM_EMISSION",
          "value": "3",
          "description": "Emission Lighting (light emitted from the surface)."
        },
        {
          "name": "PARAM_SPECULAR_EXP",
          "value": "4",
          "description": "Specular Exponent (size of the specular dot)."
        },
        {
          "name": "PARAM_GLOW",
          "value": "5",
          "description": "Glow (Visible emitted scattered light)."
        },
        {
          "name": "PARAM_NORMAL",
          "value": "6",
          "description": "Normal Map (irregularity map)."
        },
        {
          "name": "PARAM_SHADE_PARAM",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "8",
          "description": "Maximum amount of parameters."
        },
        {
          "name": "TEXCOORD_UV",
          "value": "0",
          "description": "Read texture coordinates from the UV array."
        },
        {
          "name": "TEXCOORD_UV_TRANSFORM",
          "value": "1",
          "description": "Read texture coordinates from the UV array and transform them by uv_xform."
        },
        {
          "name": "TEXCOORD_UV2",
          "value": "2",
          "description": "Read texture coordinates from the UV2 array."
        },
        {
          "name": "TEXCOORD_SPHERE",
          "value": "3",
          "description": ""
        },
        {
          "name": "FLAG_USE_ALPHA",
          "value": "0",
          "description": ""
        },
        {
          "name": "FLAG_USE_COLOR_ARRAY",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_USE_POINT_SIZE",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_DISCARD_ALPHA",
          "value": "3",
          "description": ""
        },
        {
          "name": "LIGHT_SHADER_LAMBERT",
          "value": "0",
          "description": ""
        },
        {
          "name": "LIGHT_SHADER_WRAP",
          "value": "1",
          "description": ""
        },
        {
          "name": "LIGHT_SHADER_VELVET",
          "value": "2",
          "description": ""
        },
        {
          "name": "LIGHT_SHADER_TOON",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Font": {
      "name": "Font",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Internationalized font and text drawing support.",
      "description": "Font contains an unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. TODO check wikipedia for graph of ascent/baseline/descent/height/etc.",
      "methods": [
        {
          "name": "draw",
          "qualifiers": "const",
          "description": "Draw \"string\" into a canvas item using the font at a given \"pos\" position, with \"modulate\" color, and optionally clipping the width. \"pos\" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "string",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            },
            {
              "index": "4",
              "name": "clip_w",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "draw_char",
          "qualifiers": "const",
          "description": "Draw character \"char\" into a canvas item using the font at a given \"pos\" position, with \"modulate\" color, and optionally kerning if \"next\" is passed. clipping the width. \"pos\" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "char",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "next",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "4",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            }
          ]
        },
        {
          "name": "get_ascent",
          "qualifiers": "const",
          "description": "Return the font ascent (number of pixels above the baseline).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_descent",
          "qualifiers": "const",
          "description": "Return the font descent (number of pixels below the baseline).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the total font height (ascent plus descent) in pixels.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_string_size",
          "qualifiers": "const",
          "description": "Return the size of a string, taking kerning and advance into account.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_distance_field_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "update_changes",
          "description": "After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "FuncRef": {
      "name": "FuncRef",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Reference to a function in an object.",
      "description": "In GDScript, functions are not [i]first-class objects[/i]. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments.\n\t\tHowever, by creating a [FuncRef] using the [method @GDScript.funcref] function, a reference to a function in a given object can be created, passed around and called.",
      "methods": [
        {
          "name": "call_func",
          "description": "Call the referenced function with the given arguments. The argument count must correspond to the required number of arguments in the function. Returns the return value of the function call.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "arg4",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "5",
              "name": "arg5",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "6",
              "name": "arg6",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "7",
              "name": "arg7",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "8",
              "name": "arg8",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "9",
              "name": "arg9",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "set_function",
          "description": "Set the name of the function to call on the object, without parentheses or any parameters.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance",
          "description": "Set the object on which to call the referenced function. This object must be of a type actually inheriting from [Object], not a built-in type such as [int], [Vector2] or [Dictionary].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GDFunctionState": {
      "name": "GDFunctionState",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "State of a function call after yielding.",
      "description": "Calling [method @GDScript.yield] within a function will cause that function to yield and return its current state as an object of this type. The yielded function call can then be resumed later by calling [method resume] on this state object.",
      "methods": [
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "Check whether the function call may be resumed. This is not the case if the function state was already resumed.\n\t\t\t\tIf [code]extended_check[/code] is enabled, it also checks if the associated script and object still exist. The extended check is done in debug mode as part of [method GDFunctionState.resume], but you can use this if you know you may be trying to resume without knowing for sure the object and/or script have survived up to that point.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "extended_check",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "resume",
          "description": "Resume execution of the yielded function call.\n\t\t\t\tIf handed an argument, return the argument from the [method @GDScript.yield] call in the yielded function call. You can pass e.g. an [Array] to hand multiple arguments.\n\t\t\t\tThis function returns what the resumed function call returns, possibly another function state if yielded again.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GDNativeClass": {
      "name": "GDNativeClass",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "new",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GDScript": {
      "name": "GDScript",
      "inherits": "Script",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_as_byte_code",
          "qualifiers": "const",
          "description": "",
          "return_type": "RawArray",
          "arguments": []
        },
        {
          "name": "new",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Generic6DOFJoint": {
      "name": "Generic6DOFJoint",
      "inherits": "Joint",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_flag_x",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_flag_y",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_flag_z",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param_x",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param_y",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param_z",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag_x",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag_y",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag_z",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param_x",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param_y",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param_z",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_LINEAR_LOWER_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_UPPER_LIMIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_RESTITUTION",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_DAMPING",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LOWER_LIMIT",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_UPPER_LIMIT",
          "value": "6",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_SOFTNESS",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_DAMPING",
          "value": "8",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_RESTITUTION",
          "value": "9",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_FORCE_LIMIT",
          "value": "10",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_ERP",
          "value": "11",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTOR_TARGET_VELOCITY",
          "value": "12",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTOR_FORCE_LIMIT",
          "value": "13",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "14",
          "description": ""
        },
        {
          "name": "FLAG_ENABLE_LINEAR_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "FLAG_ENABLE_ANGULAR_LIMIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_ENABLE_MOTOR",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Geometry": {
      "name": "Geometry",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "build_box_planes",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "build_capsule_planes",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sides",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "lats",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "axis",
              "type": "int",
              "default_value": "2"
            }
          ]
        },
        {
          "name": "build_cylinder_planes",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sides",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "axis",
              "type": "int",
              "default_value": "2"
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment_2d",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment_uncapped",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment_uncapped_2d",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_points_between_segments",
          "description": "",
          "return_type": "Vector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "p2",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "q1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "q2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_points_between_segments_2d",
          "description": "",
          "return_type": "Vector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "q1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "p2",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "q2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_uv84_normal_bit",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_atlas",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sizes",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "point_is_inside_triangle",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "c",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ray_intersects_triangle",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dir",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "a",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "c",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_circle",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segment_from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "segment_to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "circle_pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "circle_radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_convex",
          "description": "",
          "return_type": "Vector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "planes",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_cylinder",
          "description": "",
          "return_type": "Vector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "height",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_segment_2d",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_b",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_sphere",
          "description": "",
          "return_type": "Vector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "spos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "sradius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_triangle",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "a",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "c",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "triangulate_polygon",
          "description": "",
          "return_type": "IntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GeometryInstance": {
      "name": "GeometryInstance",
      "inherits": "VisualInstance",
      "category": "Core",
      "brief_description": "Base node for geometry based visual instances.",
      "description": "Base node for geometry based visual instances. Shares some common functionality like visibility and custom materials.",
      "methods": [
        {
          "name": "get_baked_light_texture_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_cast_shadows_setting",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_draw_range_begin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_draw_range_end",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_extra_cull_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_material_override",
          "qualifiers": "const",
          "description": "Return the material override for the whole geometry.",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "set_baked_light_texture_id",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cast_shadows_setting",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shadow_casting_setting",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_range_begin",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_range_end",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_extra_cull_margin",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_material_override",
          "description": "Set the material override for the whole geometry.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_VISIBLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "FLAG_CAST_SHADOW",
          "value": "3",
          "description": ""
        },
        {
          "name": "FLAG_RECEIVE_SHADOWS",
          "value": "4",
          "description": ""
        },
        {
          "name": "FLAG_BILLBOARD",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_BILLBOARD_FIX_Y",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_DEPH_SCALE",
          "value": "5",
          "description": ""
        },
        {
          "name": "FLAG_VISIBLE_IN_ALL_ROOMS",
          "value": "6",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "8",
          "description": ""
        },
        {
          "name": "SHADOW_CASTING_SETTING_OFF",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADOW_CASTING_SETTING_ON",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHADOW_CASTING_SETTING_DOUBLE_SIDED",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHADOW_CASTING_SETTING_SHADOWS_ONLY",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Globals": {
      "name": "Globals",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Contains global variables accessible from everywhere.",
      "description": "Contains global variables accessible from everywhere. Use the normal [Object] API, such as \"Globals.get(variable)\", \"Globals.set(variable,value)\" or \"Globals.has(variable)\" to access them. Variables stored in engine.cfg are also loaded into globals, making this object very useful for reading custom game configuration options.",
      "methods": [
        {
          "name": "add_property_info",
          "description": "Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@Global Scope]), and optionally hint:[int](see PROPERTY_HINT_* in [@Global Scope]), hint_string:[String].\n\t\t\tExample:\n\t\t\t[codeblock]\n\t\t\tGlobals.set(\"category/property_name\", 0)\n\n\t\t\tvar property_info = {\n\t\t\t    \"name\": \"category/property_name\",\n\t\t\t    \"type\": TYPE_INT,\n\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t}\n\n\t\t\tGlobals.add_property_info(property_info)\n\t\t\t[/codeblock]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hint",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the whole configuration (not recommended, may break things).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_order",
          "qualifiers": "const",
          "description": "Return the order of a configuration value (influences when saved to the config file).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_singleton",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "globalize_path",
          "qualifiers": "const",
          "description": "Convert a localized path (res://) to a full native OS path.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has",
          "qualifiers": "const",
          "description": "Return true if a configuration value is present.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_singleton",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_persisting",
          "qualifiers": "const",
          "description": "If returns true, this value can be saved to the configuration file. This is useful for editors.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load_resource_pack",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pack",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "localize_path",
          "qualifiers": "const",
          "description": "Convert a path to a localized path (res:// path).",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "save_custom",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_order",
          "description": "Set the order of a configuration value (influences when saved to the config file).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_persisting",
          "description": "If set to true, this value can be saved to the configuration file. This is useful for editors.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GraphEdit": {
      "name": "GraphEdit",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "GraphEdit is an area capable of showing various GraphNodes. It manages connection events between them.",
      "description": "GraphEdit manages the showing of GraphNodes it contains, as well as connections an disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default.\n\t\tIt is greatly advised to enable low processor usage mode (see [method OS.set_low_processor_usage_mode]) when using GraphEdits.",
      "methods": [
        {
          "name": "connect_node",
          "description": "Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect_node",
          "description": "Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_list",
          "qualifiers": "const",
          "description": "Return an Array containing the list of connections. A connection consists in a structure of the form {from_slot: 0, from: \"GraphNode name 0\", to_slot: 1, to: \"GraphNode name 1\" }",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_scroll_ofs",
          "qualifiers": "const",
          "description": "Return the scroll offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_zoom",
          "qualifiers": "const",
          "description": "Return the current zoom value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_node_connected",
          "description": "Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_right_disconnects_enabled",
          "qualifiers": "const",
          "description": "Return true is the disconnection of connections is enable in the visual GraphEdit. False otherwise.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_right_disconnects",
          "description": "Enable the disconnection of existing connections in the visual GraphEdit by left-clicking a connection and releasing into the void.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_zoom",
          "description": "Set the zoom value of the GraphEdit. Zoom value is between [0.01; 1.728].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_zoom",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "_begin_node_move",
          "description": "Signal sent at the beginning of a GraphNode movement.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "_end_node_move",
          "description": "Signal sent at the end of a GraphNode movement.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connection_request",
          "description": "Signal sent to the GraphEdit when the connection between 'from_slot' slot of 'from' GraphNode and 'to_slot' slot of 'to' GraphNode is attempted to be created.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_slot",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "delete_nodes_request",
          "description": "Signal sent when a GraphNode is attempted to be removed from the GraphEdit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "disconnection_request",
          "description": "Signal sent to the GraphEdit when the connection between 'from_slot' slot of 'from' GraphNode and 'to_slot' slot of 'to' GraphNode is attempted to be removed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_slot",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "duplicate_nodes_request",
          "description": "Signal sent when a GraphNode is attempted to be duplicated in the GraphEdit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "popup_request",
          "description": "Signal sent when a popup is requested. Happens on right-clicking in the GraphEdit. 'p_position' is the position of the mouse pointer when the signal is sent.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "minus",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "more",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "reset",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "GraphNode": {
      "name": "GraphNode",
      "inherits": "Container",
      "category": "Core",
      "brief_description": "A GraphNode is a container with several input and output slots allowing connections between GraphNodes. Slots can have different, incompatible types.",
      "description": "A GraphNode is a container defined by a title. It can have 1 or more input and output slots, which can be enabled (shown) or disabled (not shown) and have different (incompatible) types. Colors can also be assigned to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input and output connections are left and right slots, but only enabled slots are counted as connections.",
      "methods": [
        {
          "name": "clear_all_slots",
          "description": "Disable all input and output slots of the GraphNode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_slot",
          "description": "Disable input and output slot whose index is 'idx'.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_input_color",
          "description": "Return the color of the input connection 'idx'.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_input_count",
          "description": "Return the number of enabled input slots (connections) to the GraphNode.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connection_input_pos",
          "description": "Return the position of the input connection 'idx'.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_input_type",
          "description": "Return the type of the input connection 'idx'.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_output_color",
          "description": "Return the color of the output connection 'idx'.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_output_count",
          "description": "Return the number of enabled output slots (connections) of the GraphNode.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connection_output_pos",
          "description": "Return the position of the output connection 'idx'.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_output_type",
          "description": "Return the type of the output connection 'idx'.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the offset of the GraphNode.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_slot_color_left",
          "qualifiers": "const",
          "description": "Return the color set to 'idx' left (input) slot.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_color_right",
          "qualifiers": "const",
          "description": "Return the color set to 'idx' right (output) slot.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_type_left",
          "qualifiers": "const",
          "description": "Return the (integer) type of left (input) 'idx' slot.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_type_right",
          "qualifiers": "const",
          "description": "Return the (integer) type of right (output) 'idx' slot.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_title",
          "qualifiers": "const",
          "description": "Return the title of the GraphNode.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_close_button_visible",
          "qualifiers": "const",
          "description": "Returns true if the close button is shown. False otherwise.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_slot_enabled_left",
          "qualifiers": "const",
          "description": "Return true if left (input) slot 'idx' is enabled. False otherwise.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_slot_enabled_right",
          "qualifiers": "const",
          "description": "Return true if right (output) slot 'idx' is enabled. False otherwise.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the offset of the GraphNode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_show_close_button",
          "description": "Show the close button on the GraphNode if 'show' is true (disabled by default). If enabled, a connection on the signal close_request is needed for the close button to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_slot",
          "description": "Set the tuple of input/output slots defined by 'idx' ID. 'left' slots are input, 'right' are output. 'type' is an integer defining the type of the slot. Refer to description for the compatibility between slot types.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable_left",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "type_left",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "color_left",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "enable_right",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "type_right",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "color_right",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_title",
          "description": "Set the title of the GraphNode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "close_request",
          "description": "Signal sent on closing the GraphNode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "dragged",
          "description": "Signal sent when the GraphNode is dragged.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "offset_changed",
          "description": "Signal sent when the GraphNode is moved.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "raise_request",
          "description": "Signal sent when the GraphNode is requested to be displayed over other ones. Happens on focusing (clicking into) the GraphNode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "close",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "close_offset",
          "type": "int",
          "description": ""
        },
        {
          "name": "defaultfocus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "defaultframe",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "frame",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "port",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "port_offset",
          "type": "int",
          "description": ""
        },
        {
          "name": "selectedframe",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "title_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "title_offset",
          "type": "int",
          "description": ""
        }
      ]
    },
    "GridContainer": {
      "name": "GridContainer",
      "inherits": "Container",
      "category": "Core",
      "brief_description": "Grid container used to arrange elements in a grid like layout",
      "description": "Grid container will arrange its children in a grid like structure, the grid columns are specified using the [method set_columns] method and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.",
      "methods": [
        {
          "name": "get_columns",
          "qualifiers": "const",
          "description": "Returns the number of columns in this container",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_columns",
          "description": "Sets the numbers of columns in the container, then reorder its children to accommodate the new layout",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "columns",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "GridMap": {
      "name": "GridMap",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "area_get_bounds",
          "qualifiers": "const",
          "description": "",
          "return_type": "AABB",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_portal_disable_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_portal_disable_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_is_exterior_portal",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_exterior_portal",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_name",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_portal_disable_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_portal_disable_distance",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bake_geometry",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_area",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_area",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_item",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_item_orientation",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_center_x",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_center_y",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_center_z",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_octant_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_theme",
          "qualifiers": "const",
          "description": "",
          "return_type": "MeshLibrary",
          "arguments": []
        },
        {
          "name": "get_unused_area_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_baking_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_baked_light",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "resource_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bake",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_item",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "item",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "orientation",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_cell_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_center_x",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_center_y",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_center_z",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clip",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "clipabove",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "2",
              "name": "floor",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "axis",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_octant_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_theme",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "theme",
              "type": "MeshLibrary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_baked_light",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "use",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "INVALID_CELL_ITEM",
          "value": "-1",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "GrooveJoint2D": {
      "name": "GrooveJoint2D",
      "inherits": "Joint2D",
      "category": "Core",
      "brief_description": "Groove constraint for 2D physics.",
      "description": "Groove constraint for 2D physics. This is useful for making a body \"slide\" through a segment placed in another.",
      "methods": [
        {
          "name": "get_initial_offset",
          "qualifiers": "const",
          "description": "Set the final offset of the groove on body A.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the length of the groove.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_initial_offset",
          "description": "Set the initial offset of the groove on body A.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_length",
          "description": "Set the length of the groove.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HBoxContainer": {
      "name": "HBoxContainer",
      "inherits": "BoxContainer",
      "category": "Core",
      "brief_description": "Horizontal box container.",
      "description": "Horizontal box container. See [BoxContainer].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "HButtonArray": {
      "name": "HButtonArray",
      "inherits": "ButtonArray",
      "category": "Core",
      "brief_description": "Horizontal button array.",
      "description": "Horizontal button array. See [ButtonArray].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "button_separator",
          "type": "int",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_selected",
          "type": "Font",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "icon_separator",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selected",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "HScrollBar": {
      "name": "HScrollBar",
      "inherits": "ScrollBar",
      "category": "Core",
      "brief_description": "Horizontal scroll bar.",
      "description": "Horizontal scroll bar. See [ScrollBar]. This one goes from left (min) to right (max).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_hilite",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "scroll",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "scroll_focus",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "HSeparator": {
      "name": "HSeparator",
      "inherits": "Separator",
      "category": "Core",
      "brief_description": "Horizontal separator.",
      "description": "Horizontal separator. See [Separator]. It is used to separate objects vertically, though (but it looks horizontal!).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "separator",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "HSlider": {
      "name": "HSlider",
      "inherits": "Slider",
      "category": "Core",
      "brief_description": "Horizontal slider.",
      "description": "Horizontal slider. See [Slider]. This one goes from left (min) to right (max).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_hilite",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "slider",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tick",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "HSplitContainer": {
      "name": "HSplitContainer",
      "inherits": "SplitContainer",
      "category": "Core",
      "brief_description": "Horizontal split container.",
      "description": "Horizontal split container. See [SplitContainer]. This goes from left to right.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "autohide",
          "type": "int",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "HTTPClient": {
      "name": "HTTPClient",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Hyper-text transfer protocol client.",
      "description": "Hyper-text transfer protocol client. Supports SSL and SSL server certificate verification.\n\t\tCan be reused to connect to different hosts and make many requests.",
      "methods": [
        {
          "name": "close",
          "description": "Cloces the current connection, allows for reusal of [HTTPClient].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connect",
          "description": "Connect to a host. This needs to be done before any requests are sent.\n\t\t\t\tThe host should not have http:// prepended but will strip the protocol identifier if provided.\n\t\t\t\tverify_host will check the SSL identity of the host if set to true.",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "use_ssl",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "verify_host",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_connection",
          "qualifiers": "const",
          "description": "Return current connection.",
          "return_type": "StreamPeer",
          "arguments": []
        },
        {
          "name": "get_response_body_length",
          "qualifiers": "const",
          "description": "Return the response's body length.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_response_code",
          "qualifiers": "const",
          "description": "Return the HTTP status code of the response.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_response_headers",
          "description": "Return the response headers.",
          "return_type": "StringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_response_headers_as_dictionary",
          "description": "Returns all response headers as dictionary where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where \"; \" is used as separator.\n\t\t\t\tStructure: (\"key\":\"value1; value2\")\n\t\t\t\tExample: (content-length:12), (Content-Type:application/json; charset=UTF-8)",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_status",
          "qualifiers": "const",
          "description": "Returns a STATUS_* enum constant. Need to call [method poll] in order to get status updates.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_response",
          "qualifiers": "const",
          "description": "Return whether this [HTTPClient] has a response available.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_blocking_mode_enabled",
          "qualifiers": "const",
          "description": "Return whether blocking mode is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_response_chunked",
          "qualifiers": "const",
          "description": "Return whether this [HTTPClient] has a response that is chunked.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "poll",
          "description": "This needs to be called in order to have any request processed. Check results with [method get_status]",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "query_string_from_dict",
          "description": "Generates a GET/POST application/x-www-form-urlencoded style query string from a provided dictionary, e.g.:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\": \"user\", \"password\": \"pass\"}\n\t\t\t\tString queryString = httpClient.query_string_from_dict(fields)\n\t\t\t\treturns:= \"username=user&password=pass\"\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fields",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "read_response_body_chunk",
          "description": "Reads one chunk from the response.",
          "return_type": "RawArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "request",
          "description": "Sends a request to the connected host. The url is what is normally behind the hostname, i.e. in [code]http://somehost.com/index.php[/code], url would be \"index.php\".\n\t\t\t\tHeaders are HTTP request headers.\n\t\t\t\tTo create a POST request with query strings to push to the server, do:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\" : \"user\", \"password\" : \"pass\"}\n\t\t\t\tvar queryString = httpClient.query_string_from_dict(fields)\n\t\t\t\tvar headers = [\"Content-Type: application/x-www-form-urlencoded\", \"Content-Length: \" + str(queryString.length())]\n\t\t\t\tvar result = httpClient.request(httpClient.METHOD_POST, \"index.php\", headers, queryString)\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "url",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "headers",
              "type": "StringArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "request_raw",
          "description": "Sends a raw request to the connected host. The url is what is normally behind the hostname, i.e. in [code]http://somehost.com/index.php[/code], url would be \"index.php\".\n\t\t\t\tHeaders are HTTP request headers.\n\t\t\t\tSends body raw, as a byte array, does not encode it in any way.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "url",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "headers",
              "type": "StringArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "send_body_data",
          "description": "Stub function",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "send_body_text",
          "description": "Stub function",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_blocking_mode",
          "description": "If set to true, execution will block until all data is read from the response.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_connection",
          "description": "Set connection to use, for this client.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "connection",
              "type": "StreamPeer",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_read_chunk_size",
          "description": "Sets the size of the buffer used and maximum bytes to read per iteration. see [method read_response_body_chunk]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "METHOD_GET",
          "value": "0",
          "description": ""
        },
        {
          "name": "METHOD_HEAD",
          "value": "1",
          "description": ""
        },
        {
          "name": "METHOD_POST",
          "value": "2",
          "description": ""
        },
        {
          "name": "METHOD_PUT",
          "value": "3",
          "description": ""
        },
        {
          "name": "METHOD_DELETE",
          "value": "4",
          "description": ""
        },
        {
          "name": "METHOD_OPTIONS",
          "value": "5",
          "description": ""
        },
        {
          "name": "METHOD_TRACE",
          "value": "6",
          "description": ""
        },
        {
          "name": "METHOD_CONNECT",
          "value": "7",
          "description": ""
        },
        {
          "name": "METHOD_MAX",
          "value": "8",
          "description": ""
        },
        {
          "name": "STATUS_DISCONNECTED",
          "value": "0",
          "description": ""
        },
        {
          "name": "STATUS_RESOLVING",
          "value": "1",
          "description": ""
        },
        {
          "name": "STATUS_CANT_RESOLVE",
          "value": "2",
          "description": ""
        },
        {
          "name": "STATUS_CONNECTING",
          "value": "3",
          "description": ""
        },
        {
          "name": "STATUS_CANT_CONNECT",
          "value": "4",
          "description": ""
        },
        {
          "name": "STATUS_CONNECTED",
          "value": "5",
          "description": ""
        },
        {
          "name": "STATUS_REQUESTING",
          "value": "6",
          "description": ""
        },
        {
          "name": "STATUS_BODY",
          "value": "7",
          "description": ""
        },
        {
          "name": "STATUS_CONNECTION_ERROR",
          "value": "8",
          "description": ""
        },
        {
          "name": "STATUS_SSL_HANDSHAKE_ERROR",
          "value": "9",
          "description": ""
        },
        {
          "name": "RESPONSE_CONTINUE",
          "value": "100",
          "description": ""
        },
        {
          "name": "RESPONSE_SWITCHING_PROTOCOLS",
          "value": "101",
          "description": ""
        },
        {
          "name": "RESPONSE_PROCESSING",
          "value": "102",
          "description": ""
        },
        {
          "name": "RESPONSE_OK",
          "value": "200",
          "description": ""
        },
        {
          "name": "RESPONSE_CREATED",
          "value": "201",
          "description": ""
        },
        {
          "name": "RESPONSE_ACCEPTED",
          "value": "202",
          "description": ""
        },
        {
          "name": "RESPONSE_NON_AUTHORITATIVE_INFORMATION",
          "value": "203",
          "description": ""
        },
        {
          "name": "RESPONSE_NO_CONTENT",
          "value": "204",
          "description": ""
        },
        {
          "name": "RESPONSE_RESET_CONTENT",
          "value": "205",
          "description": ""
        },
        {
          "name": "RESPONSE_PARTIAL_CONTENT",
          "value": "206",
          "description": ""
        },
        {
          "name": "RESPONSE_MULTI_STATUS",
          "value": "207",
          "description": ""
        },
        {
          "name": "RESPONSE_IM_USED",
          "value": "226",
          "description": ""
        },
        {
          "name": "RESPONSE_MULTIPLE_CHOICES",
          "value": "300",
          "description": ""
        },
        {
          "name": "RESPONSE_MOVED_PERMANENTLY",
          "value": "301",
          "description": ""
        },
        {
          "name": "RESPONSE_FOUND",
          "value": "302",
          "description": ""
        },
        {
          "name": "RESPONSE_SEE_OTHER",
          "value": "303",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_MODIFIED",
          "value": "304",
          "description": ""
        },
        {
          "name": "RESPONSE_USE_PROXY",
          "value": "305",
          "description": ""
        },
        {
          "name": "RESPONSE_TEMPORARY_REDIRECT",
          "value": "307",
          "description": ""
        },
        {
          "name": "RESPONSE_BAD_REQUEST",
          "value": "400",
          "description": ""
        },
        {
          "name": "RESPONSE_UNAUTHORIZED",
          "value": "401",
          "description": ""
        },
        {
          "name": "RESPONSE_PAYMENT_REQUIRED",
          "value": "402",
          "description": ""
        },
        {
          "name": "RESPONSE_FORBIDDEN",
          "value": "403",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_FOUND",
          "value": "404",
          "description": ""
        },
        {
          "name": "RESPONSE_METHOD_NOT_ALLOWED",
          "value": "405",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_ACCEPTABLE",
          "value": "406",
          "description": ""
        },
        {
          "name": "RESPONSE_PROXY_AUTHENTICATION_REQUIRED",
          "value": "407",
          "description": ""
        },
        {
          "name": "RESPONSE_REQUEST_TIMEOUT",
          "value": "408",
          "description": ""
        },
        {
          "name": "RESPONSE_CONFLICT",
          "value": "409",
          "description": ""
        },
        {
          "name": "RESPONSE_GONE",
          "value": "410",
          "description": ""
        },
        {
          "name": "RESPONSE_LENGTH_REQUIRED",
          "value": "411",
          "description": ""
        },
        {
          "name": "RESPONSE_PRECONDITION_FAILED",
          "value": "412",
          "description": ""
        },
        {
          "name": "RESPONSE_REQUEST_ENTITY_TOO_LARGE",
          "value": "413",
          "description": ""
        },
        {
          "name": "RESPONSE_REQUEST_URI_TOO_LONG",
          "value": "414",
          "description": ""
        },
        {
          "name": "RESPONSE_UNSUPPORTED_MEDIA_TYPE",
          "value": "415",
          "description": ""
        },
        {
          "name": "RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE",
          "value": "416",
          "description": ""
        },
        {
          "name": "RESPONSE_EXPECTATION_FAILED",
          "value": "417",
          "description": ""
        },
        {
          "name": "RESPONSE_UNPROCESSABLE_ENTITY",
          "value": "422",
          "description": ""
        },
        {
          "name": "RESPONSE_LOCKED",
          "value": "423",
          "description": ""
        },
        {
          "name": "RESPONSE_FAILED_DEPENDENCY",
          "value": "424",
          "description": ""
        },
        {
          "name": "RESPONSE_UPGRADE_REQUIRED",
          "value": "426",
          "description": ""
        },
        {
          "name": "RESPONSE_INTERNAL_SERVER_ERROR",
          "value": "500",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_IMPLEMENTED",
          "value": "501",
          "description": ""
        },
        {
          "name": "RESPONSE_BAD_GATEWAY",
          "value": "502",
          "description": ""
        },
        {
          "name": "RESPONSE_SERVICE_UNAVAILABLE",
          "value": "503",
          "description": ""
        },
        {
          "name": "RESPONSE_GATEWAY_TIMEOUT",
          "value": "504",
          "description": ""
        },
        {
          "name": "RESPONSE_HTTP_VERSION_NOT_SUPPORTED",
          "value": "505",
          "description": ""
        },
        {
          "name": "RESPONSE_INSUFFICIENT_STORAGE",
          "value": "507",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_EXTENDED",
          "value": "510",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "HTTPRequest": {
      "name": "HTTPRequest",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "A Node with the ability to send HTTP requests.",
      "description": "A Node with the ability to send HTTP requests. Uses a [HTTPClient] internally, supports HTTPS.\n\t\tCan be used to make HTTP requests or download files via HTTP.",
      "methods": [
        {
          "name": "cancel_request",
          "description": "Cancel the current request.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_body_size",
          "qualifiers": "const",
          "description": "Return the response body length.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_body_size_limit",
          "qualifiers": "const",
          "description": "Return current body size limit.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_download_file",
          "qualifiers": "const",
          "description": "Return the file this request will download into.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_downloaded_bytes",
          "qualifiers": "const",
          "description": "Return the amount of bytes this HTTPRequest downloaded.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_http_client_status",
          "qualifiers": "const",
          "description": "Return the current status of the underlying [HTTPClient].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_max_redirects",
          "qualifiers": "const",
          "description": "Return the maximum amount of redirects that will be followed.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_using_threads",
          "qualifiers": "const",
          "description": "Whether this request is using threads.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "request",
          "description": "Make a HTTP request (by default GET, unless specified otherwise as method). The url is the complete url including \"http://\" or \"https://\" which will be parsed for a host and a port.\n\t\t\t\tThe custom_headers are HTTP request headers which will be used. If User-Agent is not specified a Godot specific will be used.\n\t\t\t\tThe ssl_validate_domain specifies if in case of HTTPS the server certificate should be verified.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "url",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "custom_headers",
              "type": "StringArray",
              "default_value": "StringArray([])"
            },
            {
              "index": "2",
              "name": "ssl_validate_domain",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "3",
              "name": "method",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "4",
              "name": "request_data",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "set_body_size_limit",
          "description": "Set the response body size limit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_download_file",
          "description": "Set the file to download into. Outputs the response body into the file.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_redirects",
          "description": "Set the maximum amount of redirects the request will follow.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_threads",
          "description": "Make this HTTPRequest use threads.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "request_completed",
          "description": "This signal is emitted upon request completion.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "result",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "response_code",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "headers",
              "type": "StringArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "RESULT_SUCCESS",
          "value": "0",
          "description": "Request successful."
        },
        {
          "name": "RESULT_CHUNKED_BODY_SIZE_MISMATCH",
          "value": "1",
          "description": ""
        },
        {
          "name": "RESULT_CANT_CONNECT",
          "value": "2",
          "description": "Request failed while connecting."
        },
        {
          "name": "RESULT_CANT_RESOLVE",
          "value": "3",
          "description": "Request failed while resolving."
        },
        {
          "name": "RESULT_CONNECTION_ERROR",
          "value": "4",
          "description": "Request failed due to connection(read/write) error."
        },
        {
          "name": "RESULT_SSL_HANDSHAKE_ERROR",
          "value": "5",
          "description": "Request failed on SSL handshake."
        },
        {
          "name": "RESULT_NO_RESPONSE",
          "value": "6",
          "description": "Request does not have a response(yet)."
        },
        {
          "name": "RESULT_BODY_SIZE_LIMIT_EXCEEDED",
          "value": "7",
          "description": "Request exceded its maximum size limit, see [method set_body_size_limit]."
        },
        {
          "name": "RESULT_REQUEST_FAILED",
          "value": "8",
          "description": "Request failed. (unused)"
        },
        {
          "name": "RESULT_DOWNLOAD_FILE_CANT_OPEN",
          "value": "9",
          "description": "HTTPRequest couldn't open the download file."
        },
        {
          "name": "RESULT_DOWNLOAD_FILE_WRITE_ERROR",
          "value": "10",
          "description": "HTTPRequest couldn't write to the download file."
        },
        {
          "name": "RESULT_REDIRECT_LIMIT_REACHED",
          "value": "11",
          "description": "Request reached its maximum redirect limit, see [method set_max_redirects]."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "HingeJoint": {
      "name": "HingeJoint",
      "inherits": "Joint",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_BIAS",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_UPPER",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_LOWER",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_BIAS",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_SOFTNESS",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_RELAXATION",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARAM_MOTOR_TARGET_VELOCITY",
          "value": "6",
          "description": ""
        },
        {
          "name": "PARAM_MOTOR_MAX_IMPULSE",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "8",
          "description": ""
        },
        {
          "name": "FLAG_USE_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "FLAG_ENABLE_MOTOR",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "IP": {
      "name": "IP",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "IP Protocol support functions.",
      "description": "IP contains some support functions for the IPv4 protocol. TCP/IP support is in different classes (see [StreamPeerTCP] and [TCP_Server]). IP provides hostname resolution support, both blocking and threaded.",
      "methods": [
        {
          "name": "clear_cache",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "erase_resolve_item",
          "description": "Erase a queue ID, removing it from the queue if needed. This should be used after a queue is completed to free it and enable more queries to happen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_local_addresses",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_resolve_item_address",
          "qualifiers": "const",
          "description": "Return a resolved item address, or an empty string if an error happened or resolution didn't happen yet (see [method get_resolve_item_status]).",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resolve_item_status",
          "qualifiers": "const",
          "description": "Return the status of hostname queued for resolving, given its queue ID. Returned status can be any of the RESOLVER_STATUS_* enumeration.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resolve_hostname",
          "description": "Resolve a given hostname, blocking. Resolved hostname is returned as an IPv4 or IPv6 depending on \"ip_type\".",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ip_type",
              "type": "int",
              "default_value": "3"
            }
          ]
        },
        {
          "name": "resolve_hostname_queue_item",
          "description": "Create a queue item for resolving a given hostname to an IPv4 or IPv6 depending on \"ip_type\". The queue ID is returned, or RESOLVER_INVALID_ID on error.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ip_type",
              "type": "int",
              "default_value": "3"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "RESOLVER_STATUS_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "RESOLVER_STATUS_WAITING",
          "value": "1",
          "description": ""
        },
        {
          "name": "RESOLVER_STATUS_DONE",
          "value": "2",
          "description": ""
        },
        {
          "name": "RESOLVER_STATUS_ERROR",
          "value": "3",
          "description": ""
        },
        {
          "name": "RESOLVER_MAX_QUERIES",
          "value": "32",
          "description": ""
        },
        {
          "name": "RESOLVER_INVALID_ID",
          "value": "-1",
          "description": ""
        },
        {
          "name": "TYPE_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "TYPE_IPV4",
          "value": "1",
          "description": ""
        },
        {
          "name": "TYPE_IPV6",
          "value": "2",
          "description": ""
        },
        {
          "name": "TYPE_ANY",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "IP_Unix": {
      "name": "IP_Unix",
      "inherits": "IP",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Image": {
      "name": "Image",
      "category": "Built-In Types",
      "brief_description": "Image datatype.",
      "description": "Built in native image datatype. Contains image data, which can be converted to a texture, and several functions to interact with it.",
      "methods": [
        {
          "name": "Image",
          "description": "Create an empty image of a specific size and format.",
          "return_type": "Image",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "mipmaps",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "format",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend_rect",
          "description": "Alpha-blends a \"src_rect\" [Rect2] from \"src\" [Image] to this [Image] on coordinates \"dest\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dest",
              "type": "Vector2",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "blend_rect_mask",
          "description": "Alpha-blends a \"src_rect\" [Rect2] from \"src\" [Image] to this [Image] using a \"mask\" [Image] on coordinates \"dest\". Alpha channels are required for both \"src\" and \"mask\", dest pixels and src pixels will blend if the corresponding mask pixel's alpha value is not 0. \"src\" [Image] and \"mask\" [Image] *must* have the same size (width and height) but they can have different formats",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "dest",
              "type": "Vector2",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "blit_rect",
          "description": "Copy a \"src_rect\" [Rect2] from \"src\" [Image] to this [Image] on coordinates \"dest\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dest",
              "type": "Vector2",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "blit_rect_mask",
          "description": "Blits a \"src_rect\" [Rect2] from \"src\" [Image] to this [Image] using a \"mask\" [Image] on coordinates \"dest\". Alpha channel is required for \"mask\", will copy src pixel onto dest if the corresponding mask pixel's alpha value is not 0. \"src\" [Image] and \"mask\" [Image] *must* have the same size (width and height) but they can have different formats",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "dest",
              "type": "Vector2",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "brush_transfer",
          "description": "Transfer data from \"src\" to this [Image] using a \"brush\" as a mask/brush on coordinates \"pos\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "brush",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "pos",
              "type": "Vector2",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "brushed",
          "description": "Return a new [Image] from this [Image] that is created by brushhing see [method brush_transfer].",
          "return_type": "Image",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "brush",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "pos",
              "type": "Vector2",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "compressed",
          "description": "Return a new compressed [Image] from this [Image] using one of [Image].COMPRESS_*.",
          "return_type": "Image",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "converted",
          "description": "Return a new [Image] from this [Image] with a different format.",
          "return_type": "Image",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "decompressed",
          "description": "Return a new decompressed [Image].",
          "return_type": "Image",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "empty",
          "description": "Return whether this [Image] is empty(no data).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "fill",
          "description": "Fills an [Image] with a specified [Color]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "fix_alpha_edges",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_data",
          "description": "Return the raw data of the [Image].",
          "return_type": "RawArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_format",
          "description": "Return the format of the [Image], one of [Image].FORMAT_*.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_height",
          "description": "Return the height of the [Image].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_pixel",
          "description": "Return the color of the pixel in the [Image] on coordinates \"x,y\" on mipmap level \"mipmap_level\".",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "mipmap_level",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_rect",
          "description": "Return a new [Image] that is a copy of \"area\" in this [Image].",
          "return_type": "Image",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Rect2",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_used_rect",
          "description": "Return the area of this [Image] that is used/visibly colored/opaque.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_width",
          "description": "Return the width of the [Image].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "load",
          "description": "Load an [Image].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "put_pixel",
          "description": "Put a pixel of \"color\" on coordinates \"x,y\" on mipmap level \"mipmap_level\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "mipmap_level",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "resized",
          "description": "Return a new [Image] from this [Image] that is resized to size \"x,y\" using [Image].INTERPOLATE_*.",
          "return_type": "Image",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "interpolation",
              "type": "int",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "save_png",
          "description": "Save this [Image] as a png.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": "0"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "COMPRESS_BC",
          "value": "0",
          "description": ""
        },
        {
          "name": "COMPRESS_PVRTC2",
          "value": "1",
          "description": ""
        },
        {
          "name": "COMPRESS_PVRTC4",
          "value": "2",
          "description": ""
        },
        {
          "name": "COMPRESS_ETC",
          "value": "3",
          "description": ""
        },
        {
          "name": "FORMAT_GRAYSCALE",
          "value": "0",
          "description": ""
        },
        {
          "name": "FORMAT_INTENSITY",
          "value": "1",
          "description": ""
        },
        {
          "name": "FORMAT_GRAYSCALE_ALPHA",
          "value": "2",
          "description": ""
        },
        {
          "name": "FORMAT_RGB",
          "value": "3",
          "description": ""
        },
        {
          "name": "FORMAT_RGBA",
          "value": "4",
          "description": ""
        },
        {
          "name": "FORMAT_INDEXED",
          "value": "5",
          "description": ""
        },
        {
          "name": "FORMAT_INDEXED_ALPHA",
          "value": "6",
          "description": ""
        },
        {
          "name": "FORMAT_YUV_422",
          "value": "7",
          "description": ""
        },
        {
          "name": "FORMAT_YUV_444",
          "value": "8",
          "description": ""
        },
        {
          "name": "FORMAT_BC1",
          "value": "9",
          "description": ""
        },
        {
          "name": "FORMAT_BC2",
          "value": "10",
          "description": ""
        },
        {
          "name": "FORMAT_BC3",
          "value": "11",
          "description": ""
        },
        {
          "name": "FORMAT_BC4",
          "value": "12",
          "description": ""
        },
        {
          "name": "FORMAT_BC5",
          "value": "13",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC2",
          "value": "14",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC2_ALPHA",
          "value": "15",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC4",
          "value": "16",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC4_ALPHA",
          "value": "17",
          "description": ""
        },
        {
          "name": "FORMAT_ETC",
          "value": "18",
          "description": ""
        },
        {
          "name": "FORMAT_ATC",
          "value": "19",
          "description": ""
        },
        {
          "name": "FORMAT_ATC_ALPHA_EXPLICIT",
          "value": "20",
          "description": ""
        },
        {
          "name": "FORMAT_ATC_ALPHA_INTERPOLATED",
          "value": "21",
          "description": ""
        },
        {
          "name": "FORMAT_CUSTOM",
          "value": "22",
          "description": ""
        },
        {
          "name": "INTERPOLATE_NEAREST",
          "value": "0",
          "description": ""
        },
        {
          "name": "INTERPOLATE_BILINEAR",
          "value": "1",
          "description": ""
        },
        {
          "name": "INTERPOLATE_CUBIC",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ImageTexture": {
      "name": "ImageTexture",
      "inherits": "Texture",
      "category": "Core",
      "brief_description": "A [Texture] based on an [Image].",
      "description": "A [Texture] based on an [Image]. Can be created from an [Image].",
      "methods": [
        {
          "name": "create",
          "description": "Create a new [ImageTexture] with \"width\" and \"height\".\n\t\t\t\t\"format\" one of [Image].FORMAT_*.\n\t\t\t\t\"flags\" one or more of [Texture].FLAG_*.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "format",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "create_from_image",
          "description": "Create a new [ImageTexture] from an [Image] with \"flags\" from [Texture].FLAG_*.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "fix_alpha_edges",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_data",
          "qualifiers": "const",
          "description": "Return the [Image] of this [ImageTexture].",
          "return_type": "Image",
          "arguments": []
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "Return the format of the [ImageTexture], one of [Image].FORMAT_*.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_lossy_storage_quality",
          "qualifiers": "const",
          "description": "Return the storage quality for [ImageTexture].STORAGE_COMPRESS_LOSSY.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_storage",
          "qualifiers": "const",
          "description": "Return the storage type. One of [ImageTexture].STORAGE_*.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "load",
          "description": "Load an [ImageTexure].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "normal_to_xy",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "premultiply_alpha",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_data",
          "description": "Set the [Image] of this [ImageTexture].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lossy_storage_quality",
          "description": "Set the storage quality in case of [ImageTexture].STORAGE_COMPRESS_LOSSY.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "quality",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size_override",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_storage",
          "description": "Set the storage type. One of [ImageTexture].STORAGE_*.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shrink_x2_and_keep_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STORAGE_RAW",
          "value": "0",
          "description": "[Image] data is stored raw and unaltered."
        },
        {
          "name": "STORAGE_COMPRESS_LOSSY",
          "value": "1",
          "description": "[Image] data is compressed with a lossy algorithm. You can set the storage quality with [method set_lossy_storage_quality]."
        },
        {
          "name": "STORAGE_COMPRESS_LOSSLESS",
          "value": "2",
          "description": "[Image] data is compressed with a lossless algorithm."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ImmediateGeometry": {
      "name": "ImmediateGeometry",
      "inherits": "GeometryInstance",
      "category": "Core",
      "brief_description": "Node to draw simple geometry from code, ala OpenGL 1.x",
      "description": "",
      "methods": [
        {
          "name": "add_sphere",
          "description": "Simple helper to draw an uvsphere, with given latitudes, longitude and radius.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lats",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "lons",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "add_uv",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "add_vertex",
          "description": "Add a vertex with the currently set color/uv/etc.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "begin",
          "description": "Begin drawing (And optionally pass a texture override). When done call end(). For more information on how this works, search for glBegin() glEnd() references.\n\t\t\tFor the type of primitive, use the [Mesh].PRIMITIVE_* enumerations.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "primitive",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear everything that was drawn using begin/end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "end",
          "description": "Call this when done adding a batch of geometry, otherwise it can't be displayed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "Set the color that the next vertex will use to be drawn.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal",
          "description": "Set the normal that the next vertex will use to be drawn.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tangent",
          "description": "Set the tangent (and binormal facing) that the next vertex will use to be drawn.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tangent",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv",
          "description": "Set the UV that the next vertex will use to be drawn.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv2",
          "description": "Set the second layer of UV that the next vertex will use to be drawn.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Input": {
      "name": "Input",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "A Singleton that deals with inputs.",
      "description": "A Singleton that deals with inputs. This includes key presses, mouse buttons and movement, joysticks, and input actions.",
      "methods": [
        {
          "name": "action_press",
          "description": "This will simulate pressing the specificed action.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "action_release",
          "description": "If the specified action is already pressed, this will release it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_joy_mapping",
          "description": "Add a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mapping",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "update_existing",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_accelerometer",
          "description": "If the device has an accelerometer, this will return the movement.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connected_joysticks",
          "description": "Returns an [Array] containing the device IDs of all currently connected joysticks.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_gravity",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_gyroscope",
          "description": "If the device has a gyroscope, this will return the rate of rotation in rad/s around a device's x, y, and z axis.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_joy_axis",
          "description": "Returns the current value of the joystick axis at given index (see JOY_* constants in [@Global Scope])",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_axis_index_from_string",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_axis_string",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_button_index_from_string",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_button_string",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_guid",
          "qualifiers": "const",
          "description": "Returns a SDL2 compatible device guid on platforms that use gamepad remapping. Returns \"Default Gamepad\" otherwise.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_name",
          "description": "Returns the name of the joystick at the specified device index",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_vibration_duration",
          "description": "Returns the duration of the current vibration effect in seconds.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_vibration_strength",
          "description": "Returns the strength of the joystick vibration: x is the strength of the weak motor, and y is the strength of the strong motor.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_magnetometer",
          "description": "If the device has a magnetometer, this will return the magnetic field strength in micro-Tesla for all axes.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_mouse_button_mask",
          "qualifiers": "const",
          "description": "Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time the bits are added together.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mouse_mode",
          "qualifiers": "const",
          "description": "Return the mouse mode. See the constants for more information.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mouse_speed",
          "qualifiers": "const",
          "description": "Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "is_action_pressed",
          "description": "Returns true or false depending on whether the action event is pressed. Actions and their events can be set in the Project Settings / Input Map tab. Or be set with [InputMap].",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_joy_button_pressed",
          "description": "Returns if the joystick button at the given index is currently pressed. (see JOY_* constants in [@Global Scope])",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_joy_known",
          "description": "Returns if the specified device is known by the system. This means that it sets all button and axis indices exactly as defined in the JOY_* constants (see [@Global Scope]). Unknown joysticks are not expected to match these constants, but you can still retrieve events from them.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_key_pressed",
          "description": "Returns true or false depending on whether the key is pressed or not. You can pass KEY_*, which are pre-defined constants listed in [@Global Scope].",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scancode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_mouse_button_pressed",
          "description": "Returns true or false depending on whether mouse button is pressed or not. You can pass BUTTON_*, which are pre-defined constants listed in [@Global Scope].",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "parse_input_event",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_joy_mapping",
          "description": "Removes all mappings from the internal db that match the given uid.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "guid",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_mouse_cursor",
          "description": "Set a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "hotspot",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            }
          ]
        },
        {
          "name": "set_mouse_mode",
          "description": "Set the mouse mode. See the constants for more information.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "start_joy_vibration",
          "description": "Starts to vibrate the joystick. Joysticks usually come with two rumble motors, a strong and a weak one. weak_magnitude is the strength of the weak motor (between 0 and 1) and strong_magnitude is the strength of the strong motor (between 0 and 1). duration is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).\n\t\t\t\tNote that not every hardware is compatible with long effect durations, it is recommended to restart an effect if in need to play it for more than a few seconds.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weak_magnitude",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "strong_magnitude",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "duration",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "stop_joy_vibration",
          "description": "Stops the vibration of the joystick.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "warp_mouse_pos",
          "description": "Sets the mouse position to the specified vector.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "joy_connection_changed",
          "description": "Emitted when a joystick device has been connected or disconnected",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "connected",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MOUSE_MODE_VISIBLE",
          "value": "0",
          "description": "Makes the mouse cursor visible if it is hidden."
        },
        {
          "name": "MOUSE_MODE_HIDDEN",
          "value": "1",
          "description": "Makes the mouse cursor hidden if it is visible."
        },
        {
          "name": "MOUSE_MODE_CAPTURED",
          "value": "2",
          "description": "Captures the mouse. The mouse will be hidden and unable to leave the game window. But it will still register movement and mouse button presses."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "InputDefault": {
      "name": "InputDefault",
      "inherits": "Input",
      "category": "Core",
      "brief_description": "Default implementation of the [Input] class.",
      "description": "Default implementation of the [Input] class, used internally by the editor and games for default input management.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEvent": {
      "name": "InputEvent",
      "category": "Built-In Types",
      "brief_description": "Built-in input event data.",
      "description": "Built-in input event data. InputEvent is a built-in engine datatype, given that it's passed around and used so much. Depending on its type, the members contained can be different, so read the documentation well! Input events can also represent actions (editable from the project settings).",
      "methods": [
        {
          "name": "is_action",
          "description": "Return if this input event matches a pre-defined action, no matter the type.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "description": "Return whether the given action is being pressed (and is not an echo event for KEY events). Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "description": "Return whether the given action is released (i.e. not pressed). Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_echo",
          "description": "Return if this input event is an echo event (only for events of type KEY, it will return false for other types).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "description": "Return if this input event is pressed. Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_action",
          "description": "Change the input event to an action event of the given name, regardless of its initial type, with the pressed status passed as argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NONE",
          "value": "0",
          "description": "Empty input event."
        },
        {
          "name": "KEY",
          "value": "1",
          "description": "Key event."
        },
        {
          "name": "MOUSE_MOTION",
          "value": "2",
          "description": "Mouse motion event."
        },
        {
          "name": "MOUSE_BUTTON",
          "value": "3",
          "description": "Mouse button event."
        },
        {
          "name": "JOYSTICK_MOTION",
          "value": "4",
          "description": "Joystick motion event."
        },
        {
          "name": "JOYSTICK_BUTTON",
          "value": "5",
          "description": "Joystick button event."
        },
        {
          "name": "SCREEN_TOUCH",
          "value": "6",
          "description": "Screen touch event."
        },
        {
          "name": "SCREEN_DRAG",
          "value": "7",
          "description": "Screen drag event."
        },
        {
          "name": "ACTION",
          "value": "8",
          "description": "Pre-defined action event (see [InputMap])."
        }
      ],
      "properties": [
        {
          "name": "ID",
          "type": "int",
          "description": "Event identifier, positive integer increased at each new event."
        },
        {
          "name": "device",
          "type": "int",
          "description": "Device identifier."
        },
        {
          "name": "type",
          "type": "int",
          "description": "Type of event (one of the [InputEvent] constants)."
        }
      ],
      "theme_properties": []
    },
    "InputEventAction": {
      "name": "InputEventAction",
      "category": "Built-In Types",
      "brief_description": "Built-in input event type for actions.",
      "description": "Input event type for actions that extends the global [InputEvent] type.",
      "methods": [
        {
          "name": "is_action",
          "description": "Return if this input event matches a pre-defined action, i.e. always true for InputEventAction.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "description": "Return whether the given action is being pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "description": "Return whether the given action is released (i.e. not pressed).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_echo",
          "description": "Return if this input event is an echo event (only for events of type KEY, i.e. always false for this type).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "description": "Return if this input event is pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_action",
          "description": "Change the input event to an action event of the given name with the pressed status passed as argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NONE",
          "value": "0",
          "description": "Empty input event."
        },
        {
          "name": "KEY",
          "value": "1",
          "description": "Key event."
        },
        {
          "name": "MOUSE_MOTION",
          "value": "2",
          "description": "Mouse motion event."
        },
        {
          "name": "MOUSE_BUTTON",
          "value": "3",
          "description": "Mouse button event."
        },
        {
          "name": "JOYSTICK_MOTION",
          "value": "4",
          "description": "Joystick motion event."
        },
        {
          "name": "JOYSTICK_BUTTON",
          "value": "5",
          "description": "Joystick button event."
        },
        {
          "name": "SCREEN_TOUCH",
          "value": "6",
          "description": "Screen touch event."
        },
        {
          "name": "SCREEN_DRAG",
          "value": "7",
          "description": "Screen drag event."
        },
        {
          "name": "ACTION",
          "value": "8",
          "description": "Pre-defined action event (see [InputMap])."
        }
      ],
      "properties": [
        {
          "name": "ID",
          "type": "int",
          "description": "Event identifier, positive integer increased at each new event."
        },
        {
          "name": "device",
          "type": "int",
          "description": "Device identifier."
        },
        {
          "name": "type",
          "type": "int",
          "description": "Type of event (one of the [InputEvent] constants)."
        }
      ],
      "theme_properties": []
    },
    "InputEventJoystickButton": {
      "name": "InputEventJoystickButton",
      "category": "Built-In Types",
      "brief_description": "Built-in input event type for joystick button events.",
      "description": "Input event type for joystick button events that extends the global [InputEvent] type.",
      "methods": [
        {
          "name": "is_action",
          "description": "Return if this input event matches a pre-defined action.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "description": "Return whether the given action is being pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "description": "Return whether the given action is released (i.e. not pressed).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_echo",
          "description": "Return if this input event is an echo event (only for events of type KEY, i.e. always false for this type).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "description": "Return if this input event is pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_action",
          "description": "Change the input event to an action event of the given name with the pressed status passed as argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NONE",
          "value": "0",
          "description": "Empty input event."
        },
        {
          "name": "KEY",
          "value": "1",
          "description": "Key event."
        },
        {
          "name": "MOUSE_MOTION",
          "value": "2",
          "description": "Mouse motion event."
        },
        {
          "name": "MOUSE_BUTTON",
          "value": "3",
          "description": "Mouse button event."
        },
        {
          "name": "JOYSTICK_MOTION",
          "value": "4",
          "description": "Joystick motion event."
        },
        {
          "name": "JOYSTICK_BUTTON",
          "value": "5",
          "description": "Joystick button event."
        },
        {
          "name": "SCREEN_TOUCH",
          "value": "6",
          "description": "Screen touch event."
        },
        {
          "name": "SCREEN_DRAG",
          "value": "7",
          "description": "Screen drag event."
        },
        {
          "name": "ACTION",
          "value": "8",
          "description": "Pre-defined action event (see [InputMap])."
        }
      ],
      "properties": [
        {
          "name": "ID",
          "type": "int",
          "description": "Event identifier, positive integer increased at each new event."
        },
        {
          "name": "button_index",
          "type": "int",
          "description": "Joystick button identifier, one of the JOY_BUTTON_* constants in [@Global Scope]."
        },
        {
          "name": "device",
          "type": "int",
          "description": "Device identifier."
        },
        {
          "name": "pressed",
          "type": "bool",
          "description": "Pressed state of the joystick button."
        },
        {
          "name": "pressure",
          "type": "float",
          "description": "Intensity of the button pressure, ranges from 0 to 1.0."
        },
        {
          "name": "type",
          "type": "int",
          "description": "Type of event (one of the [InputEvent] constants)."
        }
      ],
      "theme_properties": []
    },
    "InputEventJoystickMotion": {
      "name": "InputEventJoystickMotion",
      "category": "Built-In Types",
      "brief_description": "Built-in input event type for joystick motion/axis events.",
      "description": "Input event type for joystick motion/axis events that extends the global [InputEvent] type.",
      "methods": [
        {
          "name": "is_action",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "description": "Return whether the given action is being pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "description": "Return whether the given action is released (i.e. not pressed).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_echo",
          "description": "Return if this input event is an echo event (only for events of type KEY, i.e. always false for this type).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "description": "Return if this input event is pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_action",
          "description": "Change the input event to an action event of the given name with the pressed status passed as argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NONE",
          "value": "0",
          "description": "Empty input event."
        },
        {
          "name": "KEY",
          "value": "1",
          "description": "Key event."
        },
        {
          "name": "MOUSE_MOTION",
          "value": "2",
          "description": "Mouse motion event."
        },
        {
          "name": "MOUSE_BUTTON",
          "value": "3",
          "description": "Mouse button event."
        },
        {
          "name": "JOYSTICK_MOTION",
          "value": "4",
          "description": "Joystick motion event."
        },
        {
          "name": "JOYSTICK_BUTTON",
          "value": "5",
          "description": "Joystick button event."
        },
        {
          "name": "SCREEN_TOUCH",
          "value": "6",
          "description": "Screen touch event."
        },
        {
          "name": "SCREEN_DRAG",
          "value": "7",
          "description": "Screen drag event."
        },
        {
          "name": "ACTION",
          "value": "8",
          "description": "Pre-defined action event (see [InputMap])."
        }
      ],
      "properties": [
        {
          "name": "ID",
          "type": "int",
          "description": "Event identifier, positive integer increased at each new event."
        },
        {
          "name": "axis",
          "type": "int",
          "description": "Joystick axis identifier, one of the JOY_AXIS_* constants in [@Global Scope]."
        },
        {
          "name": "device",
          "type": "int",
          "description": "Device identifier."
        },
        {
          "name": "type",
          "type": "int",
          "description": "Type of event (one of the [InputEvent] constants)."
        },
        {
          "name": "value",
          "type": "float",
          "description": "Position of the axis, ranging from -1.0 to 1.0. A value of 0 means that the axis is in its neutral position."
        }
      ],
      "theme_properties": []
    },
    "InputEventKey": {
      "name": "InputEventKey",
      "category": "Built-In Types",
      "brief_description": "Built-in input event type for keyboard events.",
      "description": "Input event type for keyboard events that extends the global [InputEvent] type.",
      "methods": [
        {
          "name": "is_action",
          "description": "Return if this input event matches a pre-defined action.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "description": "Return whether the given action is being pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "description": "Return whether the given action is released (i.e. not pressed).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_echo",
          "description": "Return if this input event is an echo event.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "description": "Return if this input event is pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_action",
          "description": "Change the input event to an action event of the given name with the pressed status passed as argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NONE",
          "value": "0",
          "description": "Empty input event."
        },
        {
          "name": "KEY",
          "value": "1",
          "description": "Key event."
        },
        {
          "name": "MOUSE_MOTION",
          "value": "2",
          "description": "Mouse motion event."
        },
        {
          "name": "MOUSE_BUTTON",
          "value": "3",
          "description": "Mouse button event."
        },
        {
          "name": "JOYSTICK_MOTION",
          "value": "4",
          "description": "Joystick motion event."
        },
        {
          "name": "JOYSTICK_BUTTON",
          "value": "5",
          "description": "Joystick button event."
        },
        {
          "name": "SCREEN_TOUCH",
          "value": "6",
          "description": "Screen touch event."
        },
        {
          "name": "SCREEN_DRAG",
          "value": "7",
          "description": "Screen drag event."
        },
        {
          "name": "ACTION",
          "value": "8",
          "description": "Pre-defined action event (see [InputMap])."
        }
      ],
      "properties": [
        {
          "name": "ID",
          "type": "int",
          "description": "Event identifier, positive integer increased at each new event."
        },
        {
          "name": "alt",
          "type": "bool",
          "description": "State of the Alt modifier."
        },
        {
          "name": "control",
          "type": "bool",
          "description": "State of the Ctrl modifier."
        },
        {
          "name": "device",
          "type": "int",
          "description": "Device identifier."
        },
        {
          "name": "echo",
          "type": "bool",
          "description": "Echo state of the key, i.e. whether it's a repeat event or not."
        },
        {
          "name": "meta",
          "type": "bool",
          "description": "State of the Meta modifier."
        },
        {
          "name": "pressed",
          "type": "bool",
          "description": "Pressed state of the key."
        },
        {
          "name": "scancode",
          "type": "int",
          "description": "Scancode of the key, one of the KEY_* constants in [@Global Scope]."
        },
        {
          "name": "shift",
          "type": "bool",
          "description": "State of the Shift modifier."
        },
        {
          "name": "type",
          "type": "int",
          "description": "Type of event (one of the [InputEvent] constants)."
        },
        {
          "name": "unicode",
          "type": "int",
          "description": "Unicode identifier of the key (when relevant)."
        }
      ],
      "theme_properties": []
    },
    "InputEventMouseButton": {
      "name": "InputEventMouseButton",
      "category": "Built-In Types",
      "brief_description": "Built-in input event type for mouse button events.",
      "description": "Input event type for mouse button events that extends the global [InputEvent] type.",
      "methods": [
        {
          "name": "is_action",
          "description": "Return if this input event matches a pre-defined action.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "description": "Return whether the given action is being pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "description": "Return whether the given action is released (i.e. not pressed).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_echo",
          "description": "Return if this input event is an echo event (only for events of type KEY, i.e. always false for this type).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "description": "Return if this input event is pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_action",
          "description": "Change the input event to an action event of the given name with the pressed status passed as argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NONE",
          "value": "0",
          "description": "Empty input event."
        },
        {
          "name": "KEY",
          "value": "1",
          "description": "Key event."
        },
        {
          "name": "MOUSE_MOTION",
          "value": "2",
          "description": "Mouse motion event."
        },
        {
          "name": "MOUSE_BUTTON",
          "value": "3",
          "description": "Mouse button event."
        },
        {
          "name": "JOYSTICK_MOTION",
          "value": "4",
          "description": "Joystick motion event."
        },
        {
          "name": "JOYSTICK_BUTTON",
          "value": "5",
          "description": "Joystick button event."
        },
        {
          "name": "SCREEN_TOUCH",
          "value": "6",
          "description": "Screen touch event."
        },
        {
          "name": "SCREEN_DRAG",
          "value": "7",
          "description": "Screen drag event."
        },
        {
          "name": "ACTION",
          "value": "8",
          "description": "Pre-defined action event (see [InputMap])."
        }
      ],
      "properties": [
        {
          "name": "ID",
          "type": "int",
          "description": "Event identifier, positive integer increased at each new event."
        },
        {
          "name": "alt",
          "type": "bool",
          "description": "State of the Alt modifier."
        },
        {
          "name": "button_index",
          "type": "int",
          "description": "Mouse button identifier, one of the BUTTON_* or BUTTON_WHEEL_* constants in [@Global Scope]."
        },
        {
          "name": "button_mask",
          "type": "int",
          "description": "Mouse button mask identifier, one of or a bitwise combination of the BUTTON_MASK_* constants in [@Global Scope]."
        },
        {
          "name": "control",
          "type": "bool",
          "description": "State of the Control modifier."
        },
        {
          "name": "device",
          "type": "int",
          "description": "Device identifier."
        },
        {
          "name": "doubleclick",
          "type": "bool",
          "description": "Whether the event is a double-click."
        },
        {
          "name": "global_pos",
          "type": "Vector2",
          "description": "Global position of the mouse click."
        },
        {
          "name": "global_x",
          "type": "int",
          "description": "Global X coordinate of the mouse click."
        },
        {
          "name": "global_y",
          "type": "int",
          "description": "Global Y coordinate of the mouse click."
        },
        {
          "name": "meta",
          "type": "bool",
          "description": "State of the Meta modifier."
        },
        {
          "name": "pos",
          "type": "Vector2",
          "description": "Local position of the mouse click."
        },
        {
          "name": "pressed",
          "type": "bool",
          "description": "Pressed state of the mouse button."
        },
        {
          "name": "shift",
          "type": "bool",
          "description": "State of the Shift modifier."
        },
        {
          "name": "type",
          "type": "int",
          "description": "Type of event (one of the [InputEvent] constants)."
        },
        {
          "name": "x",
          "type": "int",
          "description": "Local X coordinate of the mouse click."
        },
        {
          "name": "y",
          "type": "int",
          "description": "Local Y coordinate of the mouse click."
        }
      ],
      "theme_properties": []
    },
    "InputEventMouseMotion": {
      "name": "InputEventMouseMotion",
      "category": "Built-In Types",
      "brief_description": "Built-in input event type for mouse motion events.",
      "description": "Input event type for mouse motion events that extends the global [InputEvent] type.",
      "methods": [
        {
          "name": "is_action",
          "description": "Return if this input event matches a pre-defined action.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "description": "Return whether the given action is being pressed. Not relevant for MOUSE_MOTION events, always false.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "description": "Return whether the given action is released (i.e. not pressed). Not relevant for MOUSE_MOTION events, can be true or false depending on whether [method is_action] is true.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_echo",
          "description": "Return if this input event is an echo event (only for events of type KEY, i.e. always false for this type).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "description": "Return if this input event is pressed. Not relevant for MOUSE_MOTION events, always false.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_action",
          "description": "Change the input event to an action event of the given name with the (irrelevant for this type) pressed status passed as argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NONE",
          "value": "0",
          "description": "Empty input event."
        },
        {
          "name": "KEY",
          "value": "1",
          "description": "Key event."
        },
        {
          "name": "MOUSE_MOTION",
          "value": "2",
          "description": "Mouse motion event."
        },
        {
          "name": "MOUSE_BUTTON",
          "value": "3",
          "description": "Mouse button event."
        },
        {
          "name": "JOYSTICK_MOTION",
          "value": "4",
          "description": "Joystick motion event."
        },
        {
          "name": "JOYSTICK_BUTTON",
          "value": "5",
          "description": "Joystick button event."
        },
        {
          "name": "SCREEN_TOUCH",
          "value": "6",
          "description": "Screen touch event."
        },
        {
          "name": "SCREEN_DRAG",
          "value": "7",
          "description": "Screen drag event."
        },
        {
          "name": "ACTION",
          "value": "8",
          "description": "Pre-defined action event (see [InputMap])."
        }
      ],
      "properties": [
        {
          "name": "ID",
          "type": "int",
          "description": "Event identifier, positive integer increased at each new event."
        },
        {
          "name": "alt",
          "type": "bool",
          "description": "State of the Alt modifier."
        },
        {
          "name": "button_mask",
          "type": "int",
          "description": "Mouse button mask identifier, one of or a bitwise combination of the BUTTON_MASK_* constants in [@Global Scope]."
        },
        {
          "name": "control",
          "type": "bool",
          "description": "State of the Ctrl modifier."
        },
        {
          "name": "device",
          "type": "int",
          "description": "Device identifier."
        },
        {
          "name": "global_pos",
          "type": "Vector2",
          "description": "Global position of the mouse pointer."
        },
        {
          "name": "global_x",
          "type": "int",
          "description": "Global X coordinate of the mouse pointer."
        },
        {
          "name": "global_y",
          "type": "int",
          "description": "Global Y coordinate of the mouse pointer."
        },
        {
          "name": "meta",
          "type": "bool",
          "description": "State of the Meta modifier."
        },
        {
          "name": "pos",
          "type": "Vector2",
          "description": "Local position of the mouse pointer."
        },
        {
          "name": "relative_pos",
          "type": "Vector2",
          "description": "Position of the mouse pointer relative to the previous mouse position."
        },
        {
          "name": "relative_x",
          "type": "int",
          "description": "X coordinate of the mouse pointer relative to the previous mouse position."
        },
        {
          "name": "relative_y",
          "type": "int",
          "description": "Y coordinate of the mouse pointer relative to the previous mouse position."
        },
        {
          "name": "shift",
          "type": "bool",
          "description": "State of the Shift modifier."
        },
        {
          "name": "speed",
          "type": "Vector2",
          "description": "Speed of the mouse pointer."
        },
        {
          "name": "speed_x",
          "type": "float",
          "description": "Speed of the mouse pointer on the X axis."
        },
        {
          "name": "speed_y",
          "type": "float",
          "description": "Speed of the mouse pointer on the Y axis."
        },
        {
          "name": "type",
          "type": "int",
          "description": "Type of event (one of the [InputEvent] constants)."
        },
        {
          "name": "x",
          "type": "int",
          "description": "Local X coordinate of the mouse pointer."
        },
        {
          "name": "y",
          "type": "int",
          "description": "Local Y coordinate of the mouse pointer."
        }
      ],
      "theme_properties": []
    },
    "InputEventScreenDrag": {
      "name": "InputEventScreenDrag",
      "category": "Built-In Types",
      "brief_description": "Built-in input event type for screen drag events.",
      "description": "Input event type for screen drag events that extends the global [InputEvent] type.",
      "methods": [
        {
          "name": "is_action",
          "description": "Return if this input event matches a pre-defined action.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "description": "Return whether the given action is being pressed. Not relevant for SCREEN_DRAG events, always false.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "description": "Return whether the given action is released (i.e. not pressed). Not relevant for SCREEN_DRAG events, can be true or false depending on whether [method is_action] is true.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_echo",
          "description": "Return if this input event is an echo event (only for events of type KEY, i.e. always false for this type).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "description": "Return if this input event is pressed. Not relevant for SCREEN_DRAG events, always false.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_action",
          "description": "Change the input event to an action event of the given name with the (irrelevant for this type) pressed status passed as argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NONE",
          "value": "0",
          "description": "Empty input event."
        },
        {
          "name": "KEY",
          "value": "1",
          "description": "Key event."
        },
        {
          "name": "MOUSE_MOTION",
          "value": "2",
          "description": "Mouse motion event."
        },
        {
          "name": "MOUSE_BUTTON",
          "value": "3",
          "description": "Mouse button event."
        },
        {
          "name": "JOYSTICK_MOTION",
          "value": "4",
          "description": "Joystick motion event."
        },
        {
          "name": "JOYSTICK_BUTTON",
          "value": "5",
          "description": "Joystick button event."
        },
        {
          "name": "SCREEN_TOUCH",
          "value": "6",
          "description": "Screen touch event."
        },
        {
          "name": "SCREEN_DRAG",
          "value": "7",
          "description": "Screen drag event."
        },
        {
          "name": "ACTION",
          "value": "8",
          "description": "Pre-defined action event (see [InputMap])."
        }
      ],
      "properties": [
        {
          "name": "ID",
          "type": "int",
          "description": "Event identifier, positive integer increased at each new event."
        },
        {
          "name": "device",
          "type": "int",
          "description": "Device identifier."
        },
        {
          "name": "index",
          "type": "int",
          "description": "Drag event index in the case of a multi-drag event."
        },
        {
          "name": "pos",
          "type": "Vector2",
          "description": "Position of the drag event."
        },
        {
          "name": "relative_pos",
          "type": "Vector2",
          "description": "Position of the drag event relative to its start position."
        },
        {
          "name": "relative_x",
          "type": "float",
          "description": "X coordinate of the drag event relative to its start position."
        },
        {
          "name": "relative_y",
          "type": "float",
          "description": "Y coordinate of the drag event relative to its start position."
        },
        {
          "name": "speed",
          "type": "Vector2",
          "description": "Speed of the drag event."
        },
        {
          "name": "speed_x",
          "type": "float",
          "description": "Speed of the drag event on the X axis."
        },
        {
          "name": "speed_y",
          "type": "float",
          "description": "Speed of the drag event on the Y axis."
        },
        {
          "name": "type",
          "type": "int",
          "description": "Type of event (one of the [InputEvent] constants)."
        },
        {
          "name": "x",
          "type": "float",
          "description": "X coordinate of the drag event."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Y coordinate of the drag event."
        }
      ],
      "theme_properties": []
    },
    "InputEventScreenTouch": {
      "name": "InputEventScreenTouch",
      "category": "Built-In Types",
      "brief_description": "Built-in input event type for touchscreen drag events.",
      "description": "Input event type for touchscreen drag events that extends the global [InputEvent] type.",
      "methods": [
        {
          "name": "is_action",
          "description": "Return if this input event matches a pre-defined action.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "description": "Return whether the given action is being pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "description": "Return whether the given action is released (i.e. not pressed).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_echo",
          "description": "Return if this input event is an echo event (only for events of type KEY, i.e. always false for this type).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "description": "Return if this input event is pressed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_action",
          "description": "Change the input event to an action event of the given name with the pressed status passed as argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NONE",
          "value": "0",
          "description": "Empty input event."
        },
        {
          "name": "KEY",
          "value": "1",
          "description": "Key event."
        },
        {
          "name": "MOUSE_MOTION",
          "value": "2",
          "description": "Mouse motion event."
        },
        {
          "name": "MOUSE_BUTTON",
          "value": "3",
          "description": "Mouse button event."
        },
        {
          "name": "JOYSTICK_MOTION",
          "value": "4",
          "description": "Joystick motion event."
        },
        {
          "name": "JOYSTICK_BUTTON",
          "value": "5",
          "description": "Joystick button event."
        },
        {
          "name": "SCREEN_TOUCH",
          "value": "6",
          "description": "Screen touch event."
        },
        {
          "name": "SCREEN_DRAG",
          "value": "7",
          "description": "Screen drag event."
        },
        {
          "name": "ACTION",
          "value": "8",
          "description": "Pre-defined action event (see [InputMap])."
        }
      ],
      "properties": [
        {
          "name": "ID",
          "type": "int",
          "description": "Event identifier, positive integer increased at each new event."
        },
        {
          "name": "device",
          "type": "int",
          "description": "Device identifier."
        },
        {
          "name": "index",
          "type": "int",
          "description": "Touch event index in the case of a multi-touch event."
        },
        {
          "name": "pos",
          "type": "Vector2",
          "description": "Position of the touch event."
        },
        {
          "name": "pressed",
          "type": "bool",
          "description": "Pressed state of the touch event."
        },
        {
          "name": "type",
          "type": "int",
          "description": "Type of event (one of the [InputEvent] constants)."
        },
        {
          "name": "x",
          "type": "float",
          "description": "X coordinate of the touch event."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Y coordinate of the touch event."
        }
      ],
      "theme_properties": []
    },
    "InputMap": {
      "name": "InputMap",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Singleton that manages actions.",
      "description": "Singleton that manages actions. InputMap has a list of the actions used in InputEvent, which can be modified.",
      "methods": [
        {
          "name": "action_add_event",
          "description": "Add an [InputEvent] to an action. This [InputEvent] will trigger the action.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "action_erase_event",
          "description": "Remove an [InputEvent] from an action.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "action_has_event",
          "description": "Whether an action has an [InputEvent] associated with it.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_action",
          "description": "Add an (empty) action to the [InputMap]. An [InputEvent] can then be added to this action with [method action_add_event].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_action",
          "description": "Remove an action from the [InputMap].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "event_is_action",
          "qualifiers": "const",
          "description": "Return whether the given event is part of an existing action.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_action_from_id",
          "qualifiers": "const",
          "description": "Return the action corresponding to the identifier.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_action_id",
          "qualifiers": "const",
          "description": "Return the identifier of the given action.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_action_list",
          "description": "Return an array of InputEvents associated with a given action.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_actions",
          "description": "Return an array of all actions in the [InputMap].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_action",
          "qualifiers": "const",
          "description": "Whether this InputMap has a registered action with the given name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load_from_globals",
          "description": "Clear the [InputMap] and load it anew from [Globals].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InstancePlaceholder": {
      "name": "InstancePlaceholder",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Placeholder for the root [Node] of a [PackedScene].",
      "description": "Turning on the option [b]Load As Placeholder[/b] for an instanced scene in the editor causes it to be replaced by an InstacePlaceholder when running the game. This makes it possible to delay actually loading the scene until calling [method replace_by_instance]. This is useful to avoid loading large scenes all at once by loading parts of it selectively.\n\t\tThe InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again.",
      "methods": [
        {
          "name": "get_instance_path",
          "qualifiers": "const",
          "description": "Retrieve the path to the [PackedScene] resource file that is loaded by default when calling [method replace_by_instance].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_stored_values",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with_order",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "replace_by_instance",
          "description": "Replace this placeholder by the scene handed as an argument, or the original scene if no argument is given. As for all resources, the scene is loaded only if it's not loaded already. By manually loading the scene beforehand, delays caused by this function can be avoided.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "custom_scene",
              "type": "PackedScene",
              "default_value": "NULL"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "IntArray": {
      "name": "IntArray",
      "category": "Built-In Types",
      "brief_description": "Integer Array.",
      "description": "Integer Array. Array of integers. Can only contain integers. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "IntArray",
          "description": "Create from a generic array.",
          "return_type": "IntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [IntArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new int at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append a value to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the [IntArray]. If larger than the current size it will reserve some space beforehand, and if it is smaller it will cut off the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the int at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the array size.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InterpolatedCamera": {
      "name": "InterpolatedCamera",
      "inherits": "Camera",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_speed",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_target_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "is_interpolation_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_interpolation_enabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target_path",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_target",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Camera",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_target_path",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target_path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InverseKinematics": {
      "name": "InverseKinematics",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_bone_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_chain_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_iterations",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_precision",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_speed",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_bone_name",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ik_bone",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_chain_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "chain_size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_iterations",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "iterations",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_precision",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "precision",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ItemList": {
      "name": "ItemList",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Control that provides a list of selectable items (and/or icons) in a single column, or optionally in multiple columns.",
      "description": "This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons,\n\t\tor both text and icon.  Tooltips are supported and may be different for every item in the list.  Selectable items in the list\n\t\tmay be selected or deselected and multiple selection may be enabled.  Selection with right mouse button may also be enabled\n\t\tto allow use of popup context menus.  Items may also be 'activated' with a double click (or Enter key).",
      "methods": [
        {
          "name": "add_icon_item",
          "description": "Adds an item to the item list with no text, only an icon.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selectable",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "add_item",
          "description": "Adds an item to the item list with specified text.  Specify an icon of null for a list item with no icon.\n\t\t\t\tIf selectable is true the list item will be selectable.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": "NULL"
            },
            {
              "index": "2",
              "name": "selectable",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Remove all items from the list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "ensure_current_is_visible",
          "description": "Ensure selection is visible, adjusting the scroll position as necessary.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_allow_rmb_select",
          "qualifiers": "const",
          "description": "Return whether or not items may be selected via right mouse clicking.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_fixed_column_width",
          "qualifiers": "const",
          "description": "If column size has been fixed to a value, return that value.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_fixed_icon_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_icon_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_icon_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_item_at_pos",
          "qualifiers": "const",
          "description": "Given a position within the control return the item (if any) at that point.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "exact",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_item_count",
          "qualifiers": "const",
          "description": "Return count of items currently in the item list.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_custom_bg_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_icon_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_text",
          "qualifiers": "const",
          "description": "Return the text for specified item index.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_tooltip",
          "qualifiers": "const",
          "description": "Return tooltip hint for specified item index.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_max_columns",
          "qualifiers": "const",
          "description": "Return total number of columns in use by the list.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_max_text_lines",
          "qualifiers": "const",
          "description": "Return total number of lines currently in use by the list.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_select_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selected_items",
          "description": "Returns the list of selected indexes.",
          "return_type": "IntArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_v_scroll",
          "description": "Returns the current vertical scroll bar for the List.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_item_disabled",
          "qualifiers": "const",
          "description": "Returns whether or not the item at the specified index is disabled",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_selectable",
          "qualifiers": "const",
          "description": "Returns whether or not the item at the specified index is selectable.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_tooltip_enabled",
          "qualifiers": "const",
          "description": "Returns whether the tooptip is enabled for specified item index.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_same_column_width",
          "qualifiers": "const",
          "description": "Returns whether or not all columns of the list are of the same size.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_selected",
          "qualifiers": "const",
          "description": "Returns whether or not item at the specified index is currently selected.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_item",
          "description": "Remove item at specified index from the list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Select the item at the specified index.\n\t\t\t\tNote:  This method does not trigger the item selection signal.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "single",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "set_allow_rmb_select",
          "description": "Allow (or disallow) selection of (selectable) items in the list using right mouse button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "allow",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fixed_column_width",
          "description": "Set the size (width) all columns in the list are to use.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fixed_icon_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_scale",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_custom_bg_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "custom_bg_color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_disabled",
          "description": "Disable (or enable) item at specified index.\n\t\t\t\tDisabled items are not be selectable and do not fire activation (Enter or double-click) signals.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon",
          "description": "Set (or replace) icon of the item at the specified index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon_region",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_metadata",
          "description": "Sets a value (of any type) to be stored with the item at the specified index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_selectable",
          "description": "Allow or disallow selection of the item at the specified index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selectable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_text",
          "description": "Sets text of item at specified index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_tooltip",
          "description": "Sets tooltip hint for item at specified index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_tooltip_enabled",
          "description": "Sets whether the tooltip is enabled for specified item index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_columns",
          "description": "Set maximum number of columns to use for the list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_text_lines",
          "description": "Set maximum number of lines to use for the list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lines",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_same_column_width",
          "description": "Sets a fixed size (width) to use for all columns of the list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_select_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sort_items_by_text",
          "description": "Sorts items in the list by their text.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unselect",
          "description": "Ensure item at specified index is not selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "item_activated",
          "description": "Fired when specified list item is activated via double click or Enter.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_rmb_selected",
          "description": "Fired when specified list item has been selected via right mouse clicking.\n\t\t\t\tThe click position is also provided to allow appropriate popup of context menus\n\t\t\t\tat the correct location.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "atpos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_selected",
          "description": "Fired when specified item has been selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multi_selected",
          "description": "Fired when a multiple selection is altered on a list allowing mutliple selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selected",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ICON_MODE_TOP",
          "value": "0",
          "description": ""
        },
        {
          "name": "ICON_MODE_LEFT",
          "value": "1",
          "description": ""
        },
        {
          "name": "SELECT_SINGLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SELECT_MULTI",
          "value": "1",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "bg_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "cursor",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "cursor_unfocused",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "guide_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "icon_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "line_separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "selected",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selected_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Joint": {
      "name": "Joint",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_exclude_nodes_from_collision",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_node_a",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_node_b",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_solver_priority",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_exclude_nodes_from_collision",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_a",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_b",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_solver_priority",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "priority",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Joint2D": {
      "name": "Joint2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Base node for all joint constraints in 2D physics.",
      "description": "Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint.",
      "methods": [
        {
          "name": "get_bias",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_exclude_nodes_from_collision",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_node_a",
          "qualifiers": "const",
          "description": "Return the path to the A node for the joint.",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_node_b",
          "qualifiers": "const",
          "description": "Return the path to the B node for the joint.",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "set_bias",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bias",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_exclude_nodes_from_collision",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_a",
          "description": "Set the path to the A node for the joint. Must be of type [PhysicsBody2D].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_b",
          "description": "Set the path to the B node for the joint. Must be of type [PhysicsBody2D].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "KinematicBody": {
      "name": "KinematicBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "brief_description": "Kinematic body 3D node.",
      "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:\n\t\tSimulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\tKinematic Characters: KinematicBody also has an api for moving objects (the [method move] method) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.",
      "methods": [
        {
          "name": "can_collide_with_character_bodies",
          "qualifiers": "const",
          "description": "Return if this body can collide with character bodies.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "can_collide_with_kinematic_bodies",
          "qualifiers": "const",
          "description": "Return if this body can collide with kinematic bodies.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "can_collide_with_rigid_bodies",
          "qualifiers": "const",
          "description": "Return if this body can collide with rigid bodies.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "can_collide_with_static_bodies",
          "qualifiers": "const",
          "description": "Return if this body can collide with static bodies.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "can_teleport_to",
          "description": "Returns whether the KinematicBody can be teleported to the destination given as an argument, checking all collision shapes of the body against potential colliders at the destination.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "Return the body that collided with this one.",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "Return the shape index from the body that collided with this one. If there is no collision, this method will return 0, so collisions must be checked first with [method is_colliding].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_velocity",
          "qualifiers": "const",
          "description": "Return the velocity of the body that collided with this one.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_collision_margin",
          "qualifiers": "const",
          "description": "Return the collision margin for this object.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "Return the normal of the surface the body collided with. This is useful to implement sliding along a surface.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_collision_pos",
          "qualifiers": "const",
          "description": "Return the point in space where the body is touching another. If there is no collision, this method will return (0,0,0), so collisions must be checked first with [method is_colliding].",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "is_colliding",
          "qualifiers": "const",
          "description": "Return whether the body is colliding with another.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "move",
          "description": "Move the body in the given direction, stopping if there is an obstacle. The returned vector is how much movement was remaining before being stopped.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rel_vec",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_to",
          "description": "Move the body to the given position. This is not a teleport, and the body will stop if there is an obstacle. The returned vector is how much movement was remaining before being stopped.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collide_with_character_bodies",
          "description": "Set if this body should collide with character bodies.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collide_with_kinematic_bodies",
          "description": "Set if this body should collide with kinematic bodies.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collide_with_rigid_bodies",
          "description": "Set if this body should collide with rigid bodies.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collide_with_static_bodies",
          "description": "Set if this body should collide with static bodies.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_margin",
          "description": "Set the collision margin for this object. A collision margin is an amount that all shapes will grow when computing collisions, to account for numerical imprecision.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pixels",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "KinematicBody2D": {
      "name": "KinematicBody2D",
      "inherits": "PhysicsBody2D",
      "category": "Core",
      "brief_description": "Kinematic body 2D node.",
      "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:\n\t\tSimulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\tKinematic Characters: KinematicBody2D also has an api for moving objects (the [method move] method) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.",
      "methods": [
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "Return the body that collided with this one.",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "get_collider_metadata",
          "qualifiers": "const",
          "description": "Return the metadata of the shape that collided with this body. If there is no collision, it will return 0, so collisions must be checked first with [method is_colliding]. Additionally, this metadata can not be set with [method Object.set_meta], it must be set with [method Physics2DServer.body_set_shape_metadata].",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "Return the shape index from the body that collided with this one. If there is no collision, this method will return 0, so collisions must be checked first with [method is_colliding].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_velocity",
          "qualifiers": "const",
          "description": "Return the velocity of the body that collided with this one.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collision_margin",
          "qualifiers": "const",
          "description": "Return the collision margin for this object.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "Return the normal of the surface the body collided with. This is useful to implement sliding along a surface.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collision_pos",
          "qualifiers": "const",
          "description": "Return the point in space where the body is touching another. If there is no collision, this method will return (0,0), so collisions must be checked first with [method is_colliding].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_move_and_slide_colliders",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_travel",
          "qualifiers": "const",
          "description": "Return the last movement done by the body.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "is_colliding",
          "qualifiers": "const",
          "description": "Return whether the body is colliding with another.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_move_and_slide_on_ceiling",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_move_and_slide_on_floor",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_move_and_slide_on_wall",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "move",
          "description": "Move the body in the given direction, stopping if there is an obstacle. The returned vector is how much movement was remaining before being stopped.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rel_vec",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_and_slide",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_velocity",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "floor_normal",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            },
            {
              "index": "2",
              "name": "slope_stop_min_velocity",
              "type": "float",
              "default_value": "5"
            },
            {
              "index": "3",
              "name": "max_bounces",
              "type": "int",
              "default_value": "4"
            }
          ]
        },
        {
          "name": "move_to",
          "description": "Move the body to the given position. This is not a teleport, and the body will stop if there is an obstacle. The returned vector is how much movement was remaining before being stopped.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "revert_motion",
          "description": "Undo the last movement done by the body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_collision_margin",
          "description": "Set the collision margin for this object. A collision margin is an amount (in pixels) that all shapes will grow when computing collisions, to account for numerical imprecision.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pixels",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "test_move",
          "description": "Return true if there would be a collision if the body moved in the given direction.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rel_vec",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "test_move_from",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rel_vec",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Label": {
      "name": "Label",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Control that displays formatted text.",
      "description": "Label is a control that displays formatted text, optionally autowrapping it to the [Control] area. It inherits from range to be able to scroll wrapped text vertically.",
      "methods": [
        {
          "name": "get_align",
          "qualifiers": "const",
          "description": "Return the alignment mode (any of the ALIGN_* enumeration values).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_line_count",
          "qualifiers": "const",
          "description": "Return the amount of lines.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_line_height",
          "qualifiers": "const",
          "description": "Return the height of a line.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_lines_skipped",
          "qualifiers": "const",
          "description": "Return the the number of lines to skipped before displaying.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_max_lines_visible",
          "qualifiers": "const",
          "description": "Return the restricted number of lines to display. Returns -1 if unrestricted.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_percent_visible",
          "qualifiers": "const",
          "description": "Return the restricted number of characters to display (as a percentage of the total text).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Return the label text. Text can contain newlines.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_total_character_count",
          "qualifiers": "const",
          "description": "Return the total length of the text.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_valign",
          "qualifiers": "const",
          "description": "Return the vertical alignment mode (any of the VALIGN_* enumeration values).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_visible_characters",
          "qualifiers": "const",
          "description": "Return the restricted number of characters to display. Returns -1 if unrestricted.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_visible_line_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_autowrap",
          "qualifiers": "const",
          "description": "Return the state of the [i]autowrap[/i] mode (see [method set_autowrap]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_clipping_text",
          "qualifiers": "const",
          "description": "Return true if text would be cut off if it is too wide.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_uppercase",
          "qualifiers": "const",
          "description": "Return true if text is displayed in all capitals.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_align",
          "description": "Sets the alignment mode to any of the ALIGN_* enumeration values.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autowrap",
          "description": "Set [i]autowrap[/i] mode. When enabled, autowrap will fit text to the control width, breaking sentences when they exceed the available horizontal space. When disabled, the label minimum width becomes the width of the longest row, and the minimum height large enough to fit all rows.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clip_text",
          "description": "Cuts off the rest of the text if it is too wide.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lines_skipped",
          "description": "Sets the number of lines to skip before displaying. Useful for scrolling text.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lines_skipped",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_lines_visible",
          "description": "Restricts the number of lines to display. Set to -1 to disable.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lines_visible",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_percent_visible",
          "description": "Restricts the number of characters to display (as a percentage of the total text).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "percent_visible",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "Set the label text. Text can contain newlines.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uppercase",
          "description": "Display text in all capitals.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_valign",
          "description": "Sets the vertical alignment mode to any of the VALIGN_* enumeration values.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "valign",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visible_characters",
          "description": "Restricts the number of characters to display. Set to -1 to disable.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": "Align rows to the left (default)."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": "Align rows centered."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": "Align rows to the right (default)."
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "description": "Expand row whitespaces to fit the width."
        },
        {
          "name": "VALIGN_TOP",
          "value": "0",
          "description": "Align the whole text to the top."
        },
        {
          "name": "VALIGN_CENTER",
          "value": "1",
          "description": "Align the whole text to the center."
        },
        {
          "name": "VALIGN_BOTTOM",
          "value": "2",
          "description": "Align the whole text to the bottom."
        },
        {
          "name": "VALIGN_FILL",
          "value": "3",
          "description": "Align the whole text by spreading the rows."
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_shadow",
          "type": "Color",
          "description": ""
        },
        {
          "name": "line_spacing",
          "type": "int",
          "description": ""
        },
        {
          "name": "shadow_as_outline",
          "type": "int",
          "description": ""
        },
        {
          "name": "shadow_offset_x",
          "type": "int",
          "description": ""
        },
        {
          "name": "shadow_offset_y",
          "type": "int",
          "description": ""
        }
      ]
    },
    "LargeTexture": {
      "name": "LargeTexture",
      "inherits": "Texture",
      "category": "Core",
      "brief_description": "A Texture capable of storing many smaller Textures with offsets.",
      "description": "A Texture capable of storing many smaller Textures with offsets.\n\t\tYou can dynamically add pieces(Textures) to this fLargeTexture] using different offsets.",
      "methods": [
        {
          "name": "add_piece",
          "description": "Add another [Texture] to this [LargeTexture], starting on offset \"ofs\".",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the [LargeTexture].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_piece_count",
          "qualifiers": "const",
          "description": "Return the number of pieces currently in this [LargeTexture].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_piece_offset",
          "qualifiers": "const",
          "description": "Return the offset of the piece with index \"idx\".",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_piece_texture",
          "qualifiers": "const",
          "description": "Return the [Texture] of the piece with index \"idx\".",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_piece_offset",
          "description": "Set the offset of the piece with index \"idx\" to \"ofs\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_piece_texture",
          "description": "Set the [Texture] of the piece with index \"idx\" to  \"ofs\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "Set the size of this [LargeTexture].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Light": {
      "name": "Light",
      "inherits": "VisualInstance",
      "category": "Core",
      "brief_description": "Provides a base class for different kinds of light nodes.",
      "description": "Light is the abstract base class for light nodes, so it shouldn't be used directly (It can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.",
      "methods": [
        {
          "name": "get_bake_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_operator",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_parameter",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "variable",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_projector",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "has_project_shadows",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_editor_only",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_bake_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bake_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editor_only",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "editor_only",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_operator",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "operator",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_parameter",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "variable",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_project_shadows",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_projector",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "projector",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_RADIUS",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_ENERGY",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_SPOT_ANGLE",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_SPOT_ATTENUATION",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_DARKENING",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_Z_OFFSET",
          "value": "6",
          "description": ""
        },
        {
          "name": "COLOR_DIFFUSE",
          "value": "0",
          "description": ""
        },
        {
          "name": "COLOR_SPECULAR",
          "value": "1",
          "description": ""
        },
        {
          "name": "BAKE_MODE_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "BAKE_MODE_INDIRECT",
          "value": "1",
          "description": ""
        },
        {
          "name": "BAKE_MODE_INDIRECT_AND_SHADOWS",
          "value": "2",
          "description": ""
        },
        {
          "name": "BAKE_MODE_FULL",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Light2D": {
      "name": "Light2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Node that casts light in a 2D environment.",
      "description": "Node that casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related). Note that Light2D can be used as a mask.",
      "methods": [
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Return the color of the Light2D.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_energy",
          "qualifiers": "const",
          "description": "Return the energy value of the Light2D.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the height of the Light2D. Used with 2D normalmapping.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_item_mask",
          "qualifiers": "const",
          "description": "Return the item mask of the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_shadow_mask",
          "qualifiers": "const",
          "description": "Return the item shadow mask of the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_layer_range_max",
          "qualifiers": "const",
          "description": "Set the maximum layer value of objects of the scene that are affected by the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_layer_range_min",
          "qualifiers": "const",
          "description": "Get the minimum layer value of objects of the scene that are affected by the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Return the current mode set to the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shadow_buffer_size",
          "qualifiers": "const",
          "description": "Return the shadow buffer size.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shadow_color",
          "qualifiers": "const",
          "description": "Return the color of casted shadows for this Light2D.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_shadow_esm_multiplier",
          "qualifiers": "const",
          "description": "Return the Exponential Shadow Multiplier (ESM) value of the Light2D.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Return the texture of the Light2D.",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_texture_offset",
          "qualifiers": "const",
          "description": "Return the offset of the light texture.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_texture_scale",
          "qualifiers": "const",
          "description": "Return the scale value of the light texture.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_z_range_max",
          "qualifiers": "const",
          "description": "Get the maximum Z value that objects of the scene can be in order to be affected by the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_z_range_min",
          "qualifiers": "const",
          "description": "Get the minimum Z value that objects of the scene have to be in order to be affected by the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_editor_only",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "Return true if the Light2D is enabled, false if it is not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shadow_enabled",
          "qualifiers": "const",
          "description": "Return true if shadow casting is enabled for this Light2D, else return false.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "Set the color of the Light2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editor_only",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "editor_only",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled",
          "description": "Switches the Light2D on or off, depending on the 'enabled' parameter.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_energy",
          "description": "Set the energy value of the Light2D. The bigger the value, the stronger the light.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_height",
          "description": "Set the height of the Light2D. Used with 2D normalmapping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_mask",
          "description": "Set the item mask of the Light2D to 'item_mask' value.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_shadow_mask",
          "description": "Set the item shadow mask to 'item_shadow_mask' value.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item_shadow_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_range_max",
          "description": "Set the maximum layer value of objects of the scene that are affected by the Light2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_range_min",
          "description": "Set the minimum layer value of objects of the scene that are affected by the Light2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the behaviour mode of the Light2D. Use constants defined in the constants section.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_buffer_size",
          "description": "Set the shadow buffer size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_color",
          "description": "Set the color of casted shadows for this Light2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shadow_color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_enabled",
          "description": "Enable or disable shadows casting from this Light2D according to the 'enabled' parameter.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_esm_multiplier",
          "description": "Set the Exponential Shadow Multiplier (ESM) value of the Light2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "multiplier",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "Set the texture of the Light2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_offset",
          "description": "Set the offset of the light texture.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_scale",
          "description": "Set the scale value of the light texture.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_z_range_max",
          "description": "Set the maximum Z value that objects of the scene can be in order to be affected by the Light2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_z_range_min",
          "description": "Set the minimum Z value that objects of the scene have to be in order to be affected by the Light2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MODE_ADD",
          "value": "0",
          "description": "Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behaviour of a light."
        },
        {
          "name": "MODE_SUB",
          "value": "1",
          "description": "Substract the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect."
        },
        {
          "name": "MODE_MIX",
          "value": "2",
          "description": "Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation."
        },
        {
          "name": "MODE_MASK",
          "value": "3",
          "description": "The light texture of the Light2D is used as a mask, hiding or revealing parts of the screen underneath depending on the value of each pixel of the light (mask) texture."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "LightOccluder2D": {
      "name": "LightOccluder2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Occludes light cast by a Light2D, thus casting shadows.",
      "description": "Occludes light cast by a Light2D, thus casting shadows. The LightOccluder2D must be provided with a shape (see OccluderPolygon2D) that allows the shadow to be computed. This shape affects the resulting shadow, while the shape of the representating asset shadowed does not actually affect shadows.",
      "methods": [
        {
          "name": "get_occluder_light_mask",
          "qualifiers": "const",
          "description": "Return the light mask of the LightOccluder2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_occluder_polygon",
          "qualifiers": "const",
          "description": "Return the OccluderPolygon2D that defines the LightOccluder2D.",
          "return_type": "OccluderPolygon2D",
          "arguments": []
        },
        {
          "name": "set_occluder_light_mask",
          "description": "Set the LightOccluder2D light mask. The LightOccluder2D will cast shadows only from Light2Ds that belong to the same light mask(s).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_occluder_polygon",
          "description": "Set the OccluderPolygon2D that defines the LightOccluder2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "OccluderPolygon2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "LineEdit": {
      "name": "LineEdit",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Control that provides single line string editing.",
      "description": "LineEdit provides a single line string editor, used for text fields.",
      "methods": [
        {
          "name": "append_at_cursor",
          "description": "Append text at cursor, scrolling the [LineEdit] when needed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the [LineEdit] text.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "cursor_get_blink_enabled",
          "qualifiers": "const",
          "description": "Gets whether the line edit caret is blinking.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "cursor_get_blink_speed",
          "qualifiers": "const",
          "description": "Gets the line edit caret blink speed.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "cursor_set_blink_enabled",
          "description": "Set the line edit caret to blink.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_blink_speed",
          "description": "Set the line edit caret blink speed. Cannot be less then or equal to 0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "blink_speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_align",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_cursor_pos",
          "qualifiers": "const",
          "description": "Return the cursor position inside the [LineEdit].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_max_length",
          "qualifiers": "const",
          "description": "Return the maximum amount of characters the [LineEdit] can edit. If 0 is returned, no limit exists.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_menu",
          "qualifiers": "const",
          "description": "",
          "return_type": "PopupMenu",
          "arguments": []
        },
        {
          "name": "get_placeholder",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_placeholder_alpha",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Return the text in the [LineEdit].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_editable",
          "qualifiers": "const",
          "description": "Return the [i]editable[/i] status of the [LineEdit] (see [method set_editable]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_secret",
          "qualifiers": "const",
          "description": "Return the [i]secret[/i] status of the [LineEdit] (see [method set_secret]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "menu_option",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "option",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "1",
              "name": "to",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "select_all",
          "description": "Select the whole string.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_align",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cursor_pos",
          "description": "Set the cursor position inside the [LineEdit], causing it to scroll if needed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editable",
          "description": "Set the [i]editable[/i] status of the [LineEdit]. When disabled, existing text can't be modified and new text can't be added.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_length",
          "description": "Set the maximum amount of characters the [LineEdit] can edit, and cropping existing text in case it exceeds that limit. Setting 0 removes the limit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "chars",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_placeholder",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_placeholder_alpha",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "alpha",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_secret",
          "description": "Set the [i]secret[/i] status of the [LineEdit]. When enabled, every character is displayed as \"*\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "Set the text in the [LineEdit], clearing the existing one and the selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "text_changed",
          "description": "When the text changes, this signal is emitted.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "text_entered",
          "description": "This signal is emitted when the user presses KEY_ENTER on the [LineEdit]. This signal is often used as an alternate confirmation mechanism in dialogs.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": ""
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": ""
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": ""
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "description": ""
        },
        {
          "name": "MENU_CUT",
          "value": "0",
          "description": ""
        },
        {
          "name": "MENU_COPY",
          "value": "1",
          "description": ""
        },
        {
          "name": "MENU_PASTE",
          "value": "2",
          "description": ""
        },
        {
          "name": "MENU_CLEAR",
          "value": "3",
          "description": ""
        },
        {
          "name": "MENU_SELECT_ALL",
          "value": "4",
          "description": ""
        },
        {
          "name": "MENU_UNDO",
          "value": "5",
          "description": ""
        },
        {
          "name": "MENU_MAX",
          "value": "6",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "cursor_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "minimum_spaces",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "read_only",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        }
      ]
    },
    "LineShape2D": {
      "name": "LineShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "brief_description": "Line shape for 2D collision objects.",
      "description": "Line shape for 2D collision objects. It works like a 2D plane and will not allow any body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame.",
      "methods": [
        {
          "name": "get_d",
          "qualifiers": "const",
          "description": "Return the line distance from the origin.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_normal",
          "qualifiers": "const",
          "description": "Return the line normal.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_d",
          "description": "Set the line distance from the origin.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "d",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal",
          "description": "Set the line normal.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "LinkButton": {
      "name": "LinkButton",
      "inherits": "BaseButton",
      "category": "Core",
      "brief_description": "Simple button used to represent a link to some resource",
      "description": "This kind of buttons are primarily used when the interaction with the button causes a context change (like linking to a web page).",
      "methods": [
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Returns the text of the button.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_underline_mode",
          "qualifiers": "const",
          "description": "Returns the underline mode for this button.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_text",
          "description": "Sets the text of the button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_underline_mode",
          "description": "Sets the underline mode for this button, the argument must be one of the [LinkButton] constants (see constants section).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "underline_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "UNDERLINE_MODE_ALWAYS",
          "value": "0",
          "description": "The LinkButton will always show an underline at the bottom of its text"
        },
        {
          "name": "UNDERLINE_MODE_ON_HOVER",
          "value": "1",
          "description": "The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it."
        },
        {
          "name": "UNDERLINE_MODE_NEVER",
          "value": "2",
          "description": "The LinkButton will never show an underline at the bottom of its text."
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "underline_spacing",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Listener": {
      "name": "Listener",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear_current",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_listener_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "is_current",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_current",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MainLoop": {
      "name": "MainLoop",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Main loop is the abstract main loop base class.",
      "description": "Main loop is the abstract main loop base class. All other main loop classes are derived from it. Upon application start, a [MainLoop] has to be provided to OS, else the application will exit. This happens automatically (and a [SceneTree] is created), unless a main [Script] is supplied, which may or not create and return a [MainLoop].",
      "methods": [
        {
          "name": "_drop_files",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "files",
              "type": "StringArray",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "screen",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_finalize",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "_idle",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_initialize",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "ev",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_input_text",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_iteration",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "finish",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "idle",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "init",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "input_event",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ev",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "input_text",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "iteration",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NOTIFICATION_WM_MOUSE_ENTER",
          "value": "3",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_MOUSE_EXIT",
          "value": "4",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_FOCUS_IN",
          "value": "5",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_FOCUS_OUT",
          "value": "6",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_QUIT_REQUEST",
          "value": "7",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_UNFOCUS_REQUEST",
          "value": "8",
          "description": ""
        },
        {
          "name": "NOTIFICATION_OS_MEMORY_WARNING",
          "value": "9",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "MarginContainer": {
      "name": "MarginContainer",
      "inherits": "Container",
      "category": "Core",
      "brief_description": "Simple margin container.",
      "description": "Simple margin container. Adds custom margins to anything contained.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "margin_bottom",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin_left",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin_right",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin_top",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Marshalls": {
      "name": "Marshalls",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "base64_to_raw",
          "description": "",
          "return_type": "RawArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base64_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "base64_to_utf8",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base64_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "base64_to_variant",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base64_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "raw_to_base64",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "utf8_to_base64",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "utf8_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "variant_to_base64",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "variant",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Material": {
      "name": "Material",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Abstract base [Resource] for coloring and shading geometry.",
      "description": "Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.",
      "methods": [
        {
          "name": "get_blend_mode",
          "qualifiers": "const",
          "description": "Return blend mode for the material, which can be one of BLEND_MODE_MIX (default), BLEND_MODE_ADD, BLEND_MODE_SUB. Keep in mind that only BLEND_MODE_MIX ensures that the material [i]may[/i] be opaque, any other blend mode will render with alpha blending enabled in raster-based [VisualServer] implementations.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_depth_draw_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_flag",
          "qualifiers": "const",
          "description": "Return a [Material] flag, which toggles on or off a behavior when rendering. See enumeration FLAG_* for a list.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_line_width",
          "qualifiers": "const",
          "description": "Return the line width for geometry drawn with FLAG_WIREFRAME enabled, or LINE primitives. Note that not all hardware or VisualServer backends support this (like DirectX).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_blend_mode",
          "description": "Set blend mode for the material, which can be one of BLEND_MODE_MIX (default), BLEND_MODE_ADD, BLEND_MODE_SUB. Keep in mind that only BLEND_MODE_MIX ensures that the material [i]may[/i] be opaque, any other blend mode will render with alpha blending enabled in raster-based [VisualServer] implementations.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_depth_draw_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag",
          "description": "Set a [Material] flag, which toggles on or off a behavior when rendering. See enumeration FLAG_* for a list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_line_width",
          "description": "Set the line width for geometry drawn with FLAG_WIREFRAME enabled, or LINE primitives. Note that not all hardware or VisualServer backends support this (like DirectX).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_VISIBLE",
          "value": "0",
          "description": "Geometry is visible when this flag is enabled (default)."
        },
        {
          "name": "FLAG_DOUBLE_SIDED",
          "value": "1",
          "description": "Both front facing and back facing triangles are rendered when this flag is enabled."
        },
        {
          "name": "FLAG_INVERT_FACES",
          "value": "2",
          "description": "Front facing and back facing order is swapped when this flag is enabled."
        },
        {
          "name": "FLAG_UNSHADED",
          "value": "3",
          "description": "Shading (lighting) is disabled when this flag is enabled."
        },
        {
          "name": "FLAG_ONTOP",
          "value": "4",
          "description": ""
        },
        {
          "name": "FLAG_LIGHTMAP_ON_UV2",
          "value": "5",
          "description": ""
        },
        {
          "name": "FLAG_COLOR_ARRAY_SRGB",
          "value": "6",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "7",
          "description": "Maximum amount of flags."
        },
        {
          "name": "DEPTH_DRAW_ALWAYS",
          "value": "0",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_OPAQUE_ONLY",
          "value": "1",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_OPAQUE_PRE_PASS_ALPHA",
          "value": "2",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_NEVER",
          "value": "3",
          "description": ""
        },
        {
          "name": "BLEND_MODE_MIX",
          "value": "0",
          "description": "Use the regular alpha blending equation (source and dest colors are faded) (default)."
        },
        {
          "name": "BLEND_MODE_ADD",
          "value": "1",
          "description": "Use additive blending equation, often used for particle effects such as fire or light decals."
        },
        {
          "name": "BLEND_MODE_SUB",
          "value": "2",
          "description": "Use subtractive blending equation, often used for some smoke effects or types of glass."
        },
        {
          "name": "BLEND_MODE_MUL",
          "value": "3",
          "description": ""
        },
        {
          "name": "BLEND_MODE_PREMULT_ALPHA",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "MaterialShader": {
      "name": "MaterialShader",
      "inherits": "Shader",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MaterialShaderGraph": {
      "name": "MaterialShaderGraph",
      "inherits": "ShaderGraph",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Matrix3": {
      "name": "Matrix3",
      "category": "Built-In Types",
      "brief_description": "3x3 matrix datatype.",
      "description": "3x3 matrix used for 3D rotation and scale. Contains 3 vector fields x,y and z. Can also be accessed as array of 3D vectors. Almost always used as orthogonal basis for a [Transform].",
      "methods": [
        {
          "name": "Matrix3",
          "description": "Create a matrix from a quaternion.",
          "return_type": "Matrix3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Matrix3",
          "description": "Create a matrix from an axis vector and an angle.",
          "return_type": "Matrix3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Matrix3",
          "description": "Create a matrix from 3 axis vectors.",
          "return_type": "Matrix3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_axis",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "determinant",
          "description": "Return the determinant of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_euler",
          "description": "Return euler angles from the matrix.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_orthogonal_index",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scale",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverse",
          "description": "Return the affine inverse of the matrix.",
          "return_type": "Matrix3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "orthonormalized",
          "description": "Return the orthonormalized version of the matrix (useful to call from time to time to avoid rounding error).",
          "return_type": "Matrix3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotated",
          "description": "Return the rotated version of the matrix, by a given axis and angle.",
          "return_type": "Matrix3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scaled",
          "description": "Return the scaled version of the matrix, by a 3D scale.",
          "return_type": "Matrix3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tdotx",
          "description": "Transposed dot product with the x axis of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tdoty",
          "description": "Transposed dot product with the y axis of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tdotz",
          "description": "Transposed dot product with the z axis of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transposed",
          "description": "Return the transposed version of the matrix.",
          "return_type": "Matrix3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "xform",
          "description": "Return a vector transformed by the matrix and return it.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_inv",
          "description": "Return a vector transformed by the transposed matrix and return it.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "x",
          "type": "Vector3",
          "description": ""
        },
        {
          "name": "y",
          "type": "Vector3",
          "description": ""
        },
        {
          "name": "z",
          "type": "Vector3",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Matrix32": {
      "name": "Matrix32",
      "category": "Built-In Types",
      "brief_description": "3x2 Matrix for 2D transforms.",
      "description": "3x2 Matrix for 2D transforms.",
      "methods": [
        {
          "name": "Matrix32",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Matrix32",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x_axis",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y_axis",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "origin",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Matrix32",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rot",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "affine_inverse",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "basis_xform",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "basis_xform_inv",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_origin",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scale",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "interpolate_with",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "m",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "c",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "orthonormalized",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotated",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scaled",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translated",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_inv",
          "description": "",
          "return_type": "Matrix32",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "o",
          "type": "Vector2",
          "description": ""
        },
        {
          "name": "x",
          "type": "Vector2",
          "description": ""
        },
        {
          "name": "y",
          "type": "Vector2",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "MenuButton": {
      "name": "MenuButton",
      "inherits": "Button",
      "category": "Core",
      "brief_description": "Special button that brings up a [PopupMenu] when clicked.",
      "description": "Special button that brings up a [PopupMenu] when clicked. That's pretty much all it does, as it's just a helper class when building GUIs.",
      "methods": [
        {
          "name": "get_popup",
          "description": "Return the [PopupMenu] contained in this button.",
          "return_type": "PopupMenu",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "about_to_show",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "Mesh": {
      "name": "Mesh",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "A [Resource] that contains vertex-array based geometry.",
      "description": "Mesh is a type of [Resource] that contains vertex-array based geometry, divided in [i]surfaces[/i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.",
      "methods": [
        {
          "name": "add_morph_target",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_surface",
          "description": "Create a new surface ([method get_surface_count] that will become surf_idx for this.\n\t\t\t\tSurfaces are created to be rendered using a \"primitive\", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. (As a note, when using indices, it is recommended to only use just points, lines or triangles).\n\t\t\t\tThe format of a surface determines which arrays it will allocate and hold, so \"format\" is a combination of ARRAY_FORMAT_* mask constants ORed together. ARRAY_FORMAT_VERTEX must be always present. \"array_len\" determines the amount of vertices in the array (not primitives!). if ARRAY_FORMAT_INDEX is in the format mask, then it means that an index array will be allocated and \"index_array_len\" must be passed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "primitive",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arrays",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "morph_arrays",
              "type": "Array",
              "default_value": "Array()"
            },
            {
              "index": "3",
              "name": "alphasort",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "center_geometry",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_morph_targets",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_convex_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shape",
          "arguments": []
        },
        {
          "name": "create_outline",
          "qualifiers": "const",
          "description": "",
          "return_type": "Mesh",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_trimesh_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shape",
          "arguments": []
        },
        {
          "name": "generate_triangle_mesh",
          "qualifiers": "const",
          "description": "",
          "return_type": "TriangleMesh",
          "arguments": []
        },
        {
          "name": "get_custom_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "get_faces",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3Array",
          "arguments": []
        },
        {
          "name": "get_morph_target_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_morph_target_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_morph_target_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_surface_count",
          "qualifiers": "const",
          "description": "Return the amount of surfaces that the [Mesh] holds.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "regen_normalmaps",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_custom_aabb",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "aabb",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_morph_target_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_array_index_len",
          "qualifiers": "const",
          "description": "Return the length in indices of the index array in the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_array_len",
          "qualifiers": "const",
          "description": "Return the length in vertices of the vertex array in the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_format",
          "qualifiers": "const",
          "description": "Return the format mask of the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_material",
          "qualifiers": "const",
          "description": "Return a [Material] in a given surface. Surface is rendered using this material.",
          "return_type": "Material",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_primitive_type",
          "qualifiers": "const",
          "description": "Return the primitive type of the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_remove",
          "description": "Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_set_material",
          "description": "Set a [Material] for a given surface. Surface will be rendered using this material.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_set_name",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NO_INDEX_ARRAY",
          "value": "-1",
          "description": "Default value used for index_array_len when no indices are present."
        },
        {
          "name": "ARRAY_WEIGHTS_SIZE",
          "value": "4",
          "description": "Amount of weights/bone indices per vertex (always 4)."
        },
        {
          "name": "ARRAY_VERTEX",
          "value": "0",
          "description": "Vertex array (array of [Vector3] vertices)."
        },
        {
          "name": "ARRAY_NORMAL",
          "value": "1",
          "description": "Normal array (array of [Vector3] normals)."
        },
        {
          "name": "ARRAY_TANGENT",
          "value": "2",
          "description": "Tangent array, array of groups of 4 floats. first 3 floats determine the tangent, and the last the binormal direction as -1 or 1."
        },
        {
          "name": "ARRAY_COLOR",
          "value": "3",
          "description": "Vertex array (array of [Color] colors)."
        },
        {
          "name": "ARRAY_TEX_UV",
          "value": "4",
          "description": "UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v))."
        },
        {
          "name": "ARRAY_TEX_UV2",
          "value": "5",
          "description": "Second UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v))."
        },
        {
          "name": "ARRAY_BONES",
          "value": "6",
          "description": "Array of bone indices, as a float array. Each element in groups of 4 floats."
        },
        {
          "name": "ARRAY_WEIGHTS",
          "value": "7",
          "description": "Array of bone weights, as a float array. Each element in groups of 4 floats."
        },
        {
          "name": "ARRAY_INDEX",
          "value": "8",
          "description": "Array of integers, used as indices referencing vertices. No index can be beyond the vertex array size."
        },
        {
          "name": "ARRAY_FORMAT_VERTEX",
          "value": "1",
          "description": "Array format will include vertices (mandatory)."
        },
        {
          "name": "ARRAY_FORMAT_NORMAL",
          "value": "2",
          "description": "Array format will include normals"
        },
        {
          "name": "ARRAY_FORMAT_TANGENT",
          "value": "4",
          "description": "Array format will include tangents"
        },
        {
          "name": "ARRAY_FORMAT_COLOR",
          "value": "8",
          "description": "Array format will include a color array."
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV",
          "value": "16",
          "description": "Array format will include UVs."
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV2",
          "value": "32",
          "description": "Array format will include another set of UVs."
        },
        {
          "name": "ARRAY_FORMAT_BONES",
          "value": "64",
          "description": "Array format will include bone indices."
        },
        {
          "name": "ARRAY_FORMAT_WEIGHTS",
          "value": "128",
          "description": "Array format will include bone weights."
        },
        {
          "name": "ARRAY_FORMAT_INDEX",
          "value": "256",
          "description": "Index array will be used."
        },
        {
          "name": "PRIMITIVE_POINTS",
          "value": "0",
          "description": "Render array as points (one vertex equals one point)."
        },
        {
          "name": "PRIMITIVE_LINES",
          "value": "1",
          "description": "Render array as lines (every two vertices a line is created)."
        },
        {
          "name": "PRIMITIVE_LINE_STRIP",
          "value": "2",
          "description": "Render array as line strip."
        },
        {
          "name": "PRIMITIVE_LINE_LOOP",
          "value": "3",
          "description": "Render array as line loop (like line strip, but closed)."
        },
        {
          "name": "PRIMITIVE_TRIANGLES",
          "value": "4",
          "description": "Render array as triangles (every three vertices a triangle is created)."
        },
        {
          "name": "PRIMITIVE_TRIANGLE_STRIP",
          "value": "5",
          "description": "Render array as triangle strips."
        },
        {
          "name": "PRIMITIVE_TRIANGLE_FAN",
          "value": "6",
          "description": "Render array as triangle fans."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "MeshDataTool": {
      "name": "MeshDataTool",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit_to_surface",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_from_surface",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edge_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_edge_faces",
          "qualifiers": "const",
          "description": "",
          "return_type": "IntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edge_meta",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edge_vertex",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vertex",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_face_edge",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "edge",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_meta",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_vertex",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vertex",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_material",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_vertex",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_bones",
          "qualifiers": "const",
          "description": "",
          "return_type": "IntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertex_edges",
          "qualifiers": "const",
          "description": "",
          "return_type": "IntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_faces",
          "qualifiers": "const",
          "description": "",
          "return_type": "IntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_meta",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_tangent",
          "qualifiers": "const",
          "description": "",
          "return_type": "Plane",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_uv",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_uv2",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_weights",
          "qualifiers": "const",
          "description": "",
          "return_type": "RealArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edge_meta",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_face_meta",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_material",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vertex",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_bones",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bones",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_meta",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_normal",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_tangent",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tangent",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_uv",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_uv2",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "uv2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_weights",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weights",
              "type": "RealArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MeshInstance": {
      "name": "MeshInstance",
      "inherits": "GeometryInstance",
      "category": "Core",
      "brief_description": "Node that instances meshes into a scenario.",
      "description": "MeshInstance is a [Node] that takes a [Mesh] resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single [Mesh] in many places. This allows to reuse geometry and save on resources. When a [Mesh] has to be instanced more than thousands of times at close proximity, consider using a [MultiMesh] in a [MultiMeshInstance] instead.",
      "methods": [
        {
          "name": "create_convex_collision",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_trimesh_collision",
          "description": "This helper creates a [StaticBody] child [Node] using the mesh geometry as collision. It's mainly used for testing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_aabb",
          "qualifiers": "const",
          "description": "Return the AABB of the mesh, in local coordinates.",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "get_mesh",
          "qualifiers": "const",
          "description": "Return the current [Mesh] resource for the instance.",
          "return_type": "Mesh",
          "arguments": []
        },
        {
          "name": "get_skeleton_path",
          "description": "",
          "return_type": "NodePath",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_mesh",
          "description": "Set the [Mesh] resource for the instance.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_skeleton_path",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "skeleton_path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MeshLibrary": {
      "name": "MeshLibrary",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Library of meshes.",
      "description": "Library of meshes. Contains a list of [Mesh] resources, each with name and ID. Useful for GridMap or painting Terrain.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear the library.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_item",
          "description": "Create a new item in the library, supplied an id.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_list",
          "qualifiers": "const",
          "description": "Return the list of items.",
          "return_type": "IntArray",
          "arguments": []
        },
        {
          "name": "get_item_mesh",
          "qualifiers": "const",
          "description": "Return the mesh of the item.",
          "return_type": "Mesh",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_name",
          "qualifiers": "const",
          "description": "Return the name of the item.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_navmesh",
          "qualifiers": "const",
          "description": "",
          "return_type": "NavigationMesh",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shape",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_last_unused_item_id",
          "qualifiers": "const",
          "description": "Get an unused id for a new item.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "remove_item",
          "description": "Remove the item.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_mesh",
          "description": "Set the mesh of the item.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_name",
          "description": "Set the name of the item.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_navmesh",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "navmesh",
              "type": "NavigationMesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MultiMesh": {
      "name": "MultiMesh",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Provides high performance mesh instancing.",
      "description": "MultiMesh provides low level mesh instancing. If the amount of [Mesh] instances needed goes from hundreds to thousands (and most need to be visible at close proximity) creating such a large amount of [MeshInstance] nodes may affect performance by using too much CPU or video memory.\n\t\tFor this case a MultiMesh becomes very useful, as it can draw thousands of instances with little API overhead.\n\t\tAs a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object).\n\t\tSince instances may have any behavior, the AABB used for visibility must be provided by the user, or generated with [method generate_aabb].",
      "methods": [
        {
          "name": "generate_aabb",
          "description": "Generate a new visibility AABB, using mesh AABB and instance transforms. Since instance information is stored in the [VisualServer], this function is VERY SLOW and must NOT be used often.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_aabb",
          "qualifiers": "const",
          "description": "Return the visibility AABB.",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "get_instance_color",
          "qualifiers": "const",
          "description": "Get the color of a specific instance.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_instance_count",
          "qualifiers": "const",
          "description": "Return the amount of instances that is going to be drawn.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_instance_transform",
          "qualifiers": "const",
          "description": "Return the transform of a specific instance.",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_mesh",
          "qualifiers": "const",
          "description": "Return the [Mesh] resource drawn as multiple instances.",
          "return_type": "Mesh",
          "arguments": []
        },
        {
          "name": "set_aabb",
          "description": "Set the visibility AABB. If not provided, MultiMesh will not be visible.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visibility_aabb",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_color",
          "description": "Set the color of a specific instance.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_count",
          "description": "Set the amount of instances that is going to be drawn. Changing this number will erase all the existing instance transform and color data.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "count",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_transform",
          "description": "Set the transform for a specific instance.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mesh",
          "description": "Set the [Mesh] resource to be drawn in multiple instances.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MultiMeshInstance": {
      "name": "MultiMeshInstance",
      "inherits": "GeometryInstance",
      "category": "Core",
      "brief_description": "Node that instances a [MultiMesh].",
      "description": "MultiMeshInstance is a [Node] that takes a [MultiMesh] resource and adds it to the current scenario by creating an instance of it (yes, this is an instance of instances).",
      "methods": [
        {
          "name": "get_multimesh",
          "qualifiers": "const",
          "description": "Return the [MultiMesh] that is used for instancing.",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "set_multimesh",
          "description": "Set the [MultiMesh] to be instance.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "multimesh",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Mutex": {
      "name": "Mutex",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "A synchronization Mutex.",
      "description": "A synchronization Mutex. Element used in multi-threadding. Basically a binary [Semaphore]. Guarantees that only one thread has this lock, can be used to protect a critical section.",
      "methods": [
        {
          "name": "lock",
          "description": "Lock this [Mutex], blocks until it is unlocked by the current owner.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "try_lock",
          "description": "Try locking this [Mutex], does not block. Returns [OK] on success else [ERR_BUSY].",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unlock",
          "description": "Unlock this [Mutex], leaving it to others threads.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Navigation": {
      "name": "Navigation",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_closest_point",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_normal",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_owner",
          "description": "",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "use_collision",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_simple_path",
          "description": "",
          "return_type": "Vector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "optimize",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_up_vector",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "navmesh_create",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "NavigationMesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "owner",
              "type": "Object",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "navmesh_remove",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "navmesh_set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_up_vector",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Navigation2D": {
      "name": "Navigation2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_closest_point",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_owner",
          "description": "",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_simple_path",
          "description": "",
          "return_type": "Vector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "optimize",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "navpoly_create",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "NavigationPolygon",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "owner",
              "type": "Object",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "navpoly_remove",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "navpoly_set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NavigationMesh": {
      "name": "NavigationMesh",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_polygon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_polygons",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_from_mesh",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_polygon",
          "description": "",
          "return_type": "IntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_polygon_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertices",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3Array",
          "arguments": []
        },
        {
          "name": "set_vertices",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertices",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NavigationMeshInstance": {
      "name": "NavigationMeshInstance",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_navigation_mesh",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_enabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_navigation_mesh",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "navmesh",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NavigationPolygon": {
      "name": "NavigationPolygon",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_outline",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "outline",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_outline_at_index",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "outline",
              "type": "Vector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_polygon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_outlines",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_polygons",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_outline",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_outline_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "description": "",
          "return_type": "IntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_polygon_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertices",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "make_polygons_from_outlines",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_outline",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_outline",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "outline",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertices",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertices",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NavigationPolygonInstance": {
      "name": "NavigationPolygonInstance",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_navigation_polygon",
          "qualifiers": "const",
          "description": "",
          "return_type": "NavigationPolygon",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_enabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_navigation_polygon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "navpoly",
              "type": "NavigationPolygon",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Nil": {
      "name": "Nil",
      "category": "Built-In Types",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "ColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Matrix3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Node": {
      "name": "Node",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Base class for all the [i]scene[/i] elements.",
      "description": "Nodes are the base bricks with which Godot games are developed. They can be set as children of other nodes, resulting in a tree arrangement. A given node can contain any number of nodes as children (but there is only one scene tree root node) with the requirement that all siblings (direct children of a node) should have unique names.\n\t\tAny tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of the projects. Nodes can optionally be added to groups. This makes it easy to reach a number of nodes from the code (for example an \"enemies\" group) to perform grouped actions.\n\t\t[b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Children nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's.\n\t\tOnce all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, from the children up to the parent nodes.\n\t\tIt means that when adding a scene to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (and that recursively for the whole scene).\n\t\t[b]Processing:[/b] Nodes can be set to the \"process\" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is variable. Fixed processing (callback [method _fixed_process], toggled with [method set_fixed_process]) happens a fixed amount of times per second (by default 60) and is useful to link itself to the physics.\n\t\tNodes can also process input events. When set, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it.\n\t\tTo keep track of the scene hierarchy (especially when instancing scenes into other scenes), an \"owner\" can be set for the node with [method set_owner]. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.\n\t\tFinally, when a node is freed with [method free] or [method queue_free], it will also free all its children.",
      "methods": [
        {
          "name": "_enter_tree",
          "qualifiers": "virtual",
          "description": "Called when the node enters the [SceneTree] (e.g. upon instancing, scene changing or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children.\n\t\t\t\tCorresponds to the NOTIFICATION_ENTER_TREE notification in [method Object._notification].",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "_exit_tree",
          "qualifiers": "virtual",
          "description": "Called when the node leaves the [SceneTree] (e.g. upon freeing, scene changing or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree.\n\t\t\t\tCorresponds to the NOTIFICATION_EXIT_TREE notification in [method Object._notification].",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "_fixed_process",
          "qualifiers": "virtual",
          "description": "Called during the fixed processing step of the main loop. Fixed processing means that the frame rate is synced to the physics, i.e. the [code]delta[/code] variable should be constant.\n\t\t\t\tIt is only called if fixed processing has been enabled with [method set_fixed_process].\n\t\t\t\tCorresponds to the NOTIFICATION_FIXED_PROCESS notification in [method Object._notification].",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_input",
          "qualifiers": "virtual",
          "description": "Called for every input event.\n\t\t\t\tIt has to be enabled with [method set_process_input] or the corresponding property in the inspector.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_process",
          "qualifiers": "virtual",
          "description": "Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [code]delta[/code] time since the previous frame is not constant.\n\t\t\t\tIt is only called if processing has been enabled with [method set_process].\n\t\t\t\tCorresponds to the NOTIFICATION_PROCESS notification in [method Object._notification].",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_ready",
          "qualifiers": "virtual",
          "description": "Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callback gets triggered first, and the node will receive the ready notification only afterwards.\n\t\t\t\tCorresponds to the NOTIFICATION_READY notification in [method Object._notification].",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "_unhandled_input",
          "qualifiers": "virtual",
          "description": "Called for every input event that has not already been handled by another node.\n\t\t\t\tIt has to be enabled with [method set_process_unhandled_input] or the corresponding property in the inspector.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_unhandled_key_input",
          "qualifiers": "virtual",
          "description": "Called for every [i]key[/i] input event that has not already been handled by another node.\n\t\t\t\tIt has to be enabled with [method set_process_unhandled_key_input] or the corresponding property in the inspector.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "key_event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_child",
          "description": "Add a child [Node]. Nodes can have as many children as they want, but every child must have a unique name. Children nodes are automatically deleted when the parent node is deleted, so deleting a whole scene is performed by deleting its topmost node.\n\t\t\t\tThe optional boolean argument enforces creating child nodes with human-readable names, based on the name of the node being instanced instead of its type only.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "legible_unique_name",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_to_group",
          "description": "Add a node to a group. Groups are helpers to name and organize a subset of nodes, like for example \"enemies\" or \"collectables\". A [Node] can be in any number of groups. Nodes can be assigned a group at any time, but will not be added to it until they are inside the scene tree (see [method is_inside_tree]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "persistent",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "can_process",
          "qualifiers": "const",
          "description": "Return true if the node can process, i.e. whether its pause mode allows processing while the scene tree is paused (see [method set_pause_mode]). Always returns true if the scene tree is not paused, and false if the node is not in the tree. FIXME: Why FAIL_COND?",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "duplicate",
          "qualifiers": "const",
          "description": "Duplicate the node, returning a new [Node]. If [code]use_instancing[/code] is true, the duplicated node will be a new instance of the original [PackedScene], if not it will be an independent node.\n\t\t\t\tThe flags are used to define what attributes (groups, signals, scripts) should be duplicated, as specified by the DUPLICATE_* constants. The default value is all of them.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "use_instancing",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "find_node",
          "qualifiers": "const",
          "description": "Find a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "recursive",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "2",
              "name": "owned",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_child",
          "qualifiers": "const",
          "description": "Return a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_child_count",
          "qualifiers": "const",
          "description": "Return the amount of child nodes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_children",
          "qualifiers": "const",
          "description": "Return an array of references ([Node]) to the child nodes.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_filename",
          "qualifiers": "const",
          "description": "Return a filename that may be contained by the node. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded (see [method set_filename]).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_fixed_process_delta_time",
          "qualifiers": "const",
          "description": "Return the time elapsed since the last fixed frame (see [method _fixed_process]). This is always the same in fixed processing unless the frames per second is changed in [OS].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_groups",
          "qualifiers": "const",
          "description": "Return an array listing the groups that the node is part of.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_index",
          "qualifiers": "const",
          "description": "Get the node index, i.e. its position among the siblings of its parent.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Return the name of the node. This name is unique among the siblings (other child nodes from the same parent).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_node",
          "qualifiers": "const",
          "description": "Fetch a node. The [NodePath] must be valid (or else an error will be raised) and can be either the path to child node, a relative path (from the current node to another node), or an absolute path to a node.\n\t\t\t\tNote: fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]).\n\t\t\t\t[i]Example:[/i] Assume your current node is Character and the following tree:\n\t\t\t\t[codeblock]\n\t\t\t\t/root\n\t\t\t\t/root/Character\n\t\t\t\t/root/Character/Sword\n\t\t\t\t/root/Character/Backpack/Dagger\n\t\t\t\t/root/MyGame\n\t\t\t\t/root/Swamp/Alligator\n\t\t\t\t/root/Swamp/Mosquito\n\t\t\t\t/root/Swamp/Goblin\n\t\t\t\t[/codeblock]\n\t\t\t\tPossible paths are:\n\t\t\t\t[codeblock]\n\t\t\t\tget_node(\"Sword\")\n\t\t\t\tget_node(\"Backpack/Dagger\")\n\t\t\t\tget_node(\"../Swamp/Alligator\")\n\t\t\t\tget_node(\"/root/MyGame\")\n\t\t\t\t[/codeblock]",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_and_resource",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_owner",
          "qualifiers": "const",
          "description": "Get the node owner (see [method set_owner]).",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_parent",
          "qualifiers": "const",
          "description": "Return the parent node of the current node, or an empty [Node] if the node lacks a parent.",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_path",
          "qualifiers": "const",
          "description": "Return the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree]).",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_path_to",
          "qualifiers": "const",
          "description": "Return the relative path from the current node to the specified node in \"node\" argument. Both nodes must be in the same scene, or else the function will fail.",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pause_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_position_in_parent",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_process_delta_time",
          "qualifiers": "const",
          "description": "Return the time elapsed (in seconds) since the last process callback. This is almost always different each time.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_scene_instance_load_placeholder",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_tree",
          "qualifiers": "const",
          "description": "",
          "return_type": "SceneTree",
          "arguments": []
        },
        {
          "name": "get_viewport",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "has_node",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_node_and_resource",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_a_parent_of",
          "qualifiers": "const",
          "description": "Return [i]true[/i] if the \"node\" argument is a direct or indirect child of the current node, otherwise return [i]false[/i].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_displayed_folded",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_fixed_processing",
          "qualifiers": "const",
          "description": "Return true if fixed processing is enabled (see [method set_fixed_process]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_greater_than",
          "qualifiers": "const",
          "description": "Return [i]true[/i] if \"node\" occurs later in the scene hierarchy than the current node, otherwise return [i]false[/i].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_in_group",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_inside_tree",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing",
          "qualifiers": "const",
          "description": "Return whether processing is enabled in the current node (see [method set_process]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_input",
          "qualifiers": "const",
          "description": "Return true if the node is processing input (see [method set_process_input]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_unhandled_input",
          "qualifiers": "const",
          "description": "Return true if the node is processing unhandled input (see [method set_process_unhandled_input]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_unhandled_key_input",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "move_child",
          "description": "Move a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child_node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print_stray_nodes",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "print_tree",
          "description": "Print the scene to stdout. Used mainly for debugging purposes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "propagate_notification",
          "description": "Notify the current node and all its children recursively by calling notification() in all of them.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_free",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "raise",
          "description": "Move this node to the top of the array of nodes of the parent node. This is often useful on GUIs ([Control]), because their order of drawing fully depends on their order in the tree.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_and_skip",
          "description": "Remove a node and set all its children as children of the parent node (if exists). All even subscriptions that pass by the removed node will be unsubscribed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_child",
          "description": "Remove a child [Node]. Node is NOT deleted and will have to be deleted manually.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_from_group",
          "description": "Remove a node from a group.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "replace_by",
          "description": "Replace a node in a scene by a given one. Subscriptions that pass through this node will be lost.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "keep_data",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_display_folded",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fold",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_filename",
          "description": "A node can contain a filename. This filename should not be changed by the user, unless writing editors and tools. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filename",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fixed_process",
          "description": "Enables or disables node fixed framerate processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS at a fixed (usually 60 fps, check [OS] to change that) interval (and the [method _fixed_process] callback will be called if exists). It is common to check how much time was elapsed since the previous frame by calling [method get_fixed_process_delta_time].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_name",
          "description": "Set the name of the [Node]. Name must be unique within parent, and setting an already existing name will cause for the node to be automatically renamed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_owner",
          "description": "Set the node owner. A node can have any other node as owner (as long as a valid parent, grandparent, etc ascending in the tree). When saving a node (using SceneSaver) all the nodes it owns will be saved with it. This allows to create complex SceneTrees, with instancing and subinstancing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pause_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process",
          "description": "Enables or disables node processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). It is common to check how much time was elapsed since the previous frame by calling [method get_process_delta_time].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_input",
          "description": "Enable input processing for node. This is not required for GUI controls! It hooks up the node to receive all input (see [method _input]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_unhandled_input",
          "description": "Enable unhandled input processing for node. This is not required for GUI controls! It hooks up the node to receive all input that was not previously handled before (usually by a [Control]). (see [method _unhandled_input]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_unhandled_key_input",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scene_instance_load_placeholder",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "load_placeholder",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "enter_tree",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "exit_tree",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "renamed",
          "description": "Emitted when the node is renamed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_ENTER_TREE",
          "value": "10",
          "description": ""
        },
        {
          "name": "NOTIFICATION_EXIT_TREE",
          "value": "11",
          "description": ""
        },
        {
          "name": "NOTIFICATION_MOVED_IN_PARENT",
          "value": "12",
          "description": ""
        },
        {
          "name": "NOTIFICATION_READY",
          "value": "13",
          "description": ""
        },
        {
          "name": "NOTIFICATION_FIXED_PROCESS",
          "value": "16",
          "description": ""
        },
        {
          "name": "NOTIFICATION_PROCESS",
          "value": "17",
          "description": "Notification received every frame when the process flag is set (see [method set_process])."
        },
        {
          "name": "NOTIFICATION_PARENTED",
          "value": "18",
          "description": "Notification received when a node is set as a child of another node. Note that this doesn't mean that a node entered the Scene Tree."
        },
        {
          "name": "NOTIFICATION_UNPARENTED",
          "value": "19",
          "description": "Notification received when a node is unparented (parent removed it from the list of children)."
        },
        {
          "name": "NOTIFICATION_PAUSED",
          "value": "14",
          "description": ""
        },
        {
          "name": "NOTIFICATION_UNPAUSED",
          "value": "15",
          "description": ""
        },
        {
          "name": "NOTIFICATION_INSTANCED",
          "value": "20",
          "description": ""
        },
        {
          "name": "NOTIFICATION_DRAG_BEGIN",
          "value": "21",
          "description": ""
        },
        {
          "name": "NOTIFICATION_DRAG_END",
          "value": "22",
          "description": ""
        },
        {
          "name": "PAUSE_MODE_INHERIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "PAUSE_MODE_STOP",
          "value": "1",
          "description": ""
        },
        {
          "name": "PAUSE_MODE_PROCESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "DUPLICATE_SIGNALS",
          "value": "1",
          "description": ""
        },
        {
          "name": "DUPLICATE_GROUPS",
          "value": "2",
          "description": ""
        },
        {
          "name": "DUPLICATE_SCRIPTS",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Node2D": {
      "name": "Node2D",
      "inherits": "CanvasItem",
      "category": "Core",
      "brief_description": "Base node for 2D system.",
      "description": "Base node for 2D system. Node2D contains a position, rotation and scale, which is used to position and animate. It can alternatively be used with a custom 2D transform ([Matrix32]). A tree of Node2Ds allows complex hierarchies for animation and positioning.",
      "methods": [
        {
          "name": "edit_set_pivot",
          "description": "Set the pivot position of the 2D node to 'pivot' value. This method is implemented only in some nodes that inherit Node2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pivot",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_angle_to",
          "qualifiers": "const",
          "description": "Return the rotation angle in radians needed for the 2d node to point at 'point' position.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_global_pos",
          "qualifiers": "const",
          "description": "Return the global position of the 2D node.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_global_rot",
          "qualifiers": "const",
          "description": "Return the global rotation in radians of the 2D node.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_global_rotd",
          "qualifiers": "const",
          "description": "Return the global rotation in degrees of the 2D node.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_global_scale",
          "qualifiers": "const",
          "description": "Return the global scale of the 2D node.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_pos",
          "qualifiers": "const",
          "description": "Return the position of the 2D node.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_relative_transform_to_parent",
          "qualifiers": "const",
          "description": "Return the transform [Matrix32] calculated relatively to the parent of this 2D node.",
          "return_type": "Matrix32",
          "arguments": [
            {
              "index": "0",
              "name": "parent",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_rot",
          "qualifiers": "const",
          "description": "Return the rotation of the 2D node.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rotd",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_scale",
          "qualifiers": "const",
          "description": "Return the scale of the 2D node.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_z",
          "qualifiers": "const",
          "description": "Return the Z-index of the 2D node.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "global_translate",
          "description": "Apply a global translation of 'offset' to the 2D node, starting from its current global position.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_z_relative",
          "qualifiers": "const",
          "description": "Return true if the Z-index value of this 2D node is relative to its parent's. Else, return false.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "look_at",
          "description": "Rotate the 2d node so it points at 'point' position.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_local_x",
          "description": "Apply a local translation on X axis to the 2D node according to the 'delta' of the process. If 'scaled' is false, the movement is normalized.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scaled",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "move_local_y",
          "description": "Apply a local translation on Y axis to the 2D node according to the 'delta' of the process. If 'scaled' is false, the movement is normalized.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scaled",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "rotate",
          "description": "Apply a 'radians' rotation to the 2D node, starting from its current rotation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scale",
          "description": "Apply the 'ratio' scale to the 2D node, according to its current scale value.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_pos",
          "description": "Set the global position of the 2D node to 'pos'.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_rot",
          "description": "Set the global rotation in radians of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_rotd",
          "description": "Set the global rotation in degrees of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_scale",
          "description": "Set the global scale of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_transform",
          "description": "Set the global transform [Matrix32] of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pos",
          "description": "Set the position of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rot",
          "description": "Set the rotation of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotd",
          "description": "Set the rotation of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scale",
          "description": "Set the scale of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Set the local transform [Matrix32] of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_z",
          "description": "Set the Z-index value of the 2D node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_z_as_relative",
          "description": "Set the Z-index value as relative to the parent node of this 2D node. Thus, if this 2D node's Z-index value is 2 and its parent's effective Z-index is 3, then the effective Z-index value of this 2D node would be 3 + 2 = 5.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translate",
          "description": "Apply a local translation of 'offset' to the 2D node, starting from its current local position.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NodePath": {
      "name": "NodePath",
      "category": "Built-In Types",
      "brief_description": "Pre-parsed scene tree path.",
      "description": "A pre-parsed relative or absolute path in a scene tree, for use with [method Node.get_node] and similar functions. It can reference a node, a resource within a node, or a property of a node or resource. For instance, [code]\"Path2D/PathFollow2D/Sprite:texture:size\"[/code] would refer to the size property of the texture resource on the node named \"Sprite\" which is a child of the other named nodes in the path. Note that if you want to get a resource, you must end the path with a colon, otherwise the last element will be used as a property name.\n\t\tYou will usually just pass a string to [method Node.get_node] and it will be automatically converted, but you may occasionally want to parse a path ahead of time with [NodePath] or the literal syntax [code]@\"path\"[/code]. Exporting a [NodePath] variable will give you a node selection widget in the properties panel of the editor, which can often be useful.\n\t\tA [NodePath] is made up of a list of node names, a list of \"subnode\" (resource) names, and the name of a property in the final node or resource.",
      "methods": [
        {
          "name": "NodePath",
          "description": "Create a NodePath from a string, e.g. \"Path2D/PathFollow2D/Sprite:texture:size\". A path is absolute if it starts with a slash. Absolute paths are only valid in the global scene tree, not within individual scenes. In a relative path, [code]\".\"[/code] and [code]\"..\"[/code] indicate the current node and its parent.",
          "return_type": "NodePath",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_name",
          "description": "Get the node name indicated by [code]idx[/code] (0 to [method get_name_count])",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_name_count",
          "description": "Get the number of node names which make up the path.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_property",
          "description": "Get the path's property name, or an empty string if the path doesn't have a property.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_subname",
          "description": "Get the resource name indicated by [code]idx[/code] (0 to [method get_subname_count])",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_subname_count",
          "description": "Get the number of resource names in the path.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_absolute",
          "description": "Return true if the node path is absolute (not relative).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_empty",
          "description": "Return true if the node path is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "OS": {
      "name": "OS",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Operating System functions.",
      "description": "Operating System functions. OS Wraps the most common functionality to communicate with the host Operating System, such as: mouse grabbing, mouse cursors, clipboard, video mode, date and time, timers, environment variables, execution of binaries, command line, etc.",
      "methods": [
        {
          "name": "alert",
          "description": "Displays a modal dialog box utilizing the host OS.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": "\"Alert!\""
            }
          ]
        },
        {
          "name": "can_draw",
          "qualifiers": "const",
          "description": "Return true if the host OS allows drawing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "can_use_threads",
          "qualifiers": "const",
          "description": "Returns if the current host platform is using multiple threads.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "delay_msec",
          "qualifiers": "const",
          "description": "Delay executing of the current thread by given milliseconds.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "msec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "delay_usec",
          "qualifiers": "const",
          "description": "Delay executing of the current thread by given microseconds.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "usec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dump_memory_to_file",
          "description": "Dumps the memory allocation ringlist to a file (only works in debug).\n\t\t\t\tEntry format per line: \"Address - Size - Description\"",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dump_resources_to_file",
          "description": "Dumps all used resources to file (only works in debug).\n\t\t\t\tEntry format per line: \"Resource Type : Resource Location\"\n\t\t\t\tAt the end of the file is a statistic of all used Resource Types.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "execute",
          "description": "Execute the binary file in given path, optionally blocking until it returns. A process ID is returned.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arguments",
              "type": "StringArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "blocking",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "output",
              "type": "Array",
              "default_value": "Array()"
            }
          ]
        },
        {
          "name": "find_scancode_from_string",
          "qualifiers": "const",
          "description": "Returns the scancode of the given string (e.g. \"Escape\")",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_borderless_window",
          "qualifiers": "const",
          "description": "Returns true if the current window is borderless.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_clipboard",
          "qualifiers": "const",
          "description": "Get clipboard from the host OS.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_cmdline_args",
          "description": "Return the commandline passed to the engine.",
          "return_type": "StringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_current_screen",
          "qualifiers": "const",
          "description": "Returns the current screen index (0 padded).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_custom_level",
          "qualifiers": "const",
          "description": "Returns the value of the commandline argument \"-level\".",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_data_dir",
          "qualifiers": "const",
          "description": "Return the absolute directory path of user data path([user://]).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_date",
          "qualifiers": "const",
          "description": "Returns current date as a dictionary of keys: year, month, day, weekday, dst (daylight savings time).",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "utc",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_datetime",
          "qualifiers": "const",
          "description": "Returns current datetime as a dictionary of keys: year, month, day, weekday, dst (daylight savings time), hour, minute, second.",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "utc",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_datetime_from_unix_time",
          "qualifiers": "const",
          "description": "Get a dictionary of time values when given epoch time.\n\t\t\t\tDictionary Time values will be a union of values from [method get_time] and [method get_date] dictionaries (with the exception of dst = day light standard time, as it cannot be determined from epoch).",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "unix_time_val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_dynamic_memory_usage",
          "qualifiers": "const",
          "description": "Return the total amount of dynamic memory used (only works in debug).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_engine_version",
          "qualifiers": "const",
          "description": "Returns the current engine version information in a Dictionary.\n\n\t\t\t\t\"major\"    - Holds the major version number as a String\n\t\t\t\t\"minor\"    - Holds the minor version number as a String\n\t\t\t\t\"patch\"    - Holds the patch version number as a String\n\t\t\t\t\"status\"   - Holds the status (e.g. \"beta\", \"rc1\", \"rc2\", ... \"stable\") as a String\n\t\t\t\t\"revision\" - Holds the revision (e.g. \"custom-build\") as a String\n\t\t\t\t\"string\"   - major + minor + patch + status + revision in a single String",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_environment",
          "qualifiers": "const",
          "description": "Return an environment variable.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "environment",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_executable_path",
          "qualifiers": "const",
          "description": "Return the path to the current engine executable.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_exit_code",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_frames_drawn",
          "description": "Return the total amount of frames drawn.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_frames_per_second",
          "qualifiers": "const",
          "description": "Returns the frames per second of the running game.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fullscreen_mode_list",
          "qualifiers": "const",
          "description": "Return the list of fullscreen modes.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_iterations_per_second",
          "qualifiers": "const",
          "description": "Return the amount of fixed iterations per second (for fixed process and physics).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_latin_keyboard_variant",
          "qualifiers": "const",
          "description": "Returns the current latin keyboard variant as a String.\n\t\t\t\tPossible return values are: \"QWERTY\", \"AZERTY\", \"QZERTY\", \"DVORAK\", \"NEO\" or \"ERROR\"",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_locale",
          "qualifiers": "const",
          "description": "Return the host OS locale.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_main_loop",
          "qualifiers": "const",
          "description": "Return the main loop object (see [MainLoop]).",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_model_name",
          "qualifiers": "const",
          "description": "Returns the model name of the current device.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Return the name of the host OS. Possible values are: \"Android\", \"BlackBerry 10\", \"Flash\", \"Haiku\", \"iOS\", \"HTML5\", \"OSX\", \"Server\", \"Windows\", \"WinRT\", \"X11\"",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_process_ID",
          "qualifiers": "const",
          "description": "Returns the game process ID",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_processor_count",
          "qualifiers": "const",
          "description": "Returns the number of cores available in the host machine.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_scancode_string",
          "qualifiers": "const",
          "description": "Returns the given scancode as a string (e.g. Return values: \"Escape\", \"Shift+Escape\").",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_screen_count",
          "qualifiers": "const",
          "description": "Returns the number of displays attached to the host machine",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_screen_dpi",
          "qualifiers": "const",
          "description": "Returns the dots per inch density of the specified screen.\n\n\t\t\t\tOn Android Devices, the actual screen densities are grouped into six generalized densities:\n\t\t\t\t\tldpi    - 120 dpi\n\t\t\t\t\tmdpi    - 160 dpi\n\t\t\t\t\thdpi    - 240 dpi\n\t\t\t\t\txhdpi   - 320 dpi\n\t\t\t\t\txxhdpi  - 480 dpi\n\t\t\t\t\txxxhdpi - 640 dpi",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_screen_orientation",
          "qualifiers": "const",
          "description": "Returns the current screen orientation, the return value will be one of the SCREEN_ORIENTATION constants in this class.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_screen_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_screen_size",
          "qualifiers": "const",
          "description": "Returns the dimensions in pixels of the specified screen.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_splash_tick_msec",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_static_memory_peak_usage",
          "qualifiers": "const",
          "description": "Return the max amount of static memory used (only works in debug).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_static_memory_usage",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_system_dir",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_system_time_secs",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_target_fps",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ticks_msec",
          "qualifiers": "const",
          "description": "Return the amount of time passed in milliseconds since the engine started.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_time",
          "qualifiers": "const",
          "description": "Returns current time as a dictionary of keys: hour, minute, second",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "utc",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_time_scale",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_time_zone_info",
          "qualifiers": "const",
          "description": "",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_unique_ID",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_unix_time",
          "qualifiers": "const",
          "description": "Return\tthe current unix timestamp.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_unix_time_from_datetime",
          "qualifiers": "const",
          "description": "Get an epoch time value from a dictionary of time values.\n\t\t\t\t[code]datetime[/code] must be populated with the following keys: year, month, day, hour, minute, second.\n\t\t\t\tYou can pass the output from [method get_datetime_from_unix_time] directly into this function. Daylight savings time (dst), if present, is ignored.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "datetime",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_video_mode_size",
          "qualifiers": "const",
          "description": "Return the current video mode size.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_window_position",
          "qualifiers": "const",
          "description": "Returns the window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_window_size",
          "qualifiers": "const",
          "description": "Returns the size of the window (without counting window manager decorations).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "has_environment",
          "qualifiers": "const",
          "description": "Return true if an environment variable exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "environment",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_touchscreen_ui_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_virtual_keyboard",
          "qualifiers": "const",
          "description": "Returns true if the platform has a virtual keyboard, false otherwise.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "hide_virtual_keyboard",
          "description": "Hides the virtual keyboard if it is shown, does nothing otherwise.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_debug_build",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_in_low_processor_usage_mode",
          "qualifiers": "const",
          "description": "Return true if low cpu usage mode is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_keep_screen_on",
          "qualifiers": "const",
          "description": "Returns whether the screen is being kept on or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_ok_left_and_cancel_right",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_scancode_unicode",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_stdout_verbose",
          "qualifiers": "const",
          "description": "Return true if the engine was executed with -v (verbose stdout).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_video_mode_fullscreen",
          "qualifiers": "const",
          "description": "Return true if the current video mode is fullscreen.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "is_video_mode_resizable",
          "qualifiers": "const",
          "description": "Return true if the window is resizable.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "is_vsync_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_window_fullscreen",
          "qualifiers": "const",
          "description": "Returns whether the window is in fullscreen mode or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_window_maximized",
          "qualifiers": "const",
          "description": "Return true if the window is maximized.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_window_minimized",
          "qualifiers": "const",
          "description": "Return true if the window is minimized.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_window_resizable",
          "qualifiers": "const",
          "description": "Returns whether the window is resizable or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "kill",
          "description": "Kill a process ID (this method can be used to kill processes that were not spawned by the game).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pid",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "native_video_is_playing",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "native_video_pause",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "native_video_play",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "volume",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "audio_track",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "subtitle_track",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "native_video_stop",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "native_video_unpause",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "print_all_resources",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tofile",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "print_all_textures_by_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "print_resources_by_type",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "types",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print_resources_in_use",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "short",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "request_attention",
          "description": "Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_borderless_window",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "borderless",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clipboard",
          "description": "Set clipboard to the OS.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "clipboard",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_screen",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_exit_code",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "icon",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_iterations_per_second",
          "description": "Set the amount of fixed iterations per second (for fixed process and physics).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "iterations_per_second",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_keep_screen_on",
          "description": "Set keep screen on if true, or goes to sleep by device setting if false. (for Android/iOS)",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_low_processor_usage_mode",
          "description": "Set to true to enable the low cpu usage mode. In this mode, the screen only redraws when there are changes, and a considerable sleep time is inserted between frames. This way, editors using the engine UI only use very little cpu.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_screen_orientation",
          "description": "Sets the current screen orientation, the argument value must be one of the SCREEN_ORIENTATION constants in this class.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "orientation",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_target_fps",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target_fps",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_thread_name",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_time_scale",
          "description": "Speeds up or slows down the physics by changing the delta variable. (delta * time_scale)",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_file_access_save_and_swap",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_vsync",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_video_mode",
          "description": "Change the video mode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "fullscreen",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "resizable",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "screen",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_window_fullscreen",
          "description": "Sets window fullscreen mode to the [i]enabled[/i] argument, [i]enabled[/i] is a toggle for the fullscreen mode, calling the function with [i]enabled[/i] true when the screen is not on fullscreen mode will cause the screen to go to fullscreen mode, calling the function with [i]enabled[/i] false when the screen is in fullscreen mode will cause the window to exit the fullscreen mode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_maximized",
          "description": "Set the window size to maximized.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_minimized",
          "description": "Set whether the window is minimized.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_position",
          "description": "Sets the position of the window to the specified position (this function could be restricted by the window manager, meaning that there could be some unreachable areas of the screen).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_resizable",
          "description": "Set the window resizable state, if the window is not resizable it will preserve the dimensions specified in the project settings.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_size",
          "description": "Sets the window size to the specified size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_title",
          "description": "Sets the window title to the specified string.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shell_open",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uri",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show_virtual_keyboard",
          "description": "Shows the virtual keyboard if the platform has one. The [i]existing_text[/i] parameter is useful for implementing your own LineEdit, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing_text",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "DAY_SUNDAY",
          "value": "0",
          "description": ""
        },
        {
          "name": "DAY_MONDAY",
          "value": "1",
          "description": ""
        },
        {
          "name": "DAY_TUESDAY",
          "value": "2",
          "description": ""
        },
        {
          "name": "DAY_WEDNESDAY",
          "value": "3",
          "description": ""
        },
        {
          "name": "DAY_THURSDAY",
          "value": "4",
          "description": ""
        },
        {
          "name": "DAY_FRIDAY",
          "value": "5",
          "description": ""
        },
        {
          "name": "DAY_SATURDAY",
          "value": "6",
          "description": ""
        },
        {
          "name": "MONTH_JANUARY",
          "value": "1",
          "description": ""
        },
        {
          "name": "MONTH_FEBRUARY",
          "value": "2",
          "description": ""
        },
        {
          "name": "MONTH_MARCH",
          "value": "3",
          "description": ""
        },
        {
          "name": "MONTH_APRIL",
          "value": "4",
          "description": ""
        },
        {
          "name": "MONTH_MAY",
          "value": "5",
          "description": ""
        },
        {
          "name": "MONTH_JUNE",
          "value": "6",
          "description": ""
        },
        {
          "name": "MONTH_JULY",
          "value": "7",
          "description": ""
        },
        {
          "name": "MONTH_AUGUST",
          "value": "8",
          "description": ""
        },
        {
          "name": "MONTH_SEPTEMBER",
          "value": "9",
          "description": ""
        },
        {
          "name": "MONTH_OCTOBER",
          "value": "10",
          "description": ""
        },
        {
          "name": "MONTH_NOVEMBER",
          "value": "11",
          "description": ""
        },
        {
          "name": "MONTH_DECEMBER",
          "value": "12",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_LANDSCAPE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_PORTRAIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_REVERSE_LANDSCAPE",
          "value": "2",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_REVERSE_PORTRAIT",
          "value": "3",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_SENSOR_LANDSCAPE",
          "value": "4",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_SENSOR_PORTRAIT",
          "value": "5",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_SENSOR",
          "value": "6",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DESKTOP",
          "value": "0",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DCIM",
          "value": "1",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DOCUMENTS",
          "value": "2",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DOWNLOADS",
          "value": "3",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_MOVIES",
          "value": "4",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_MUSIC",
          "value": "5",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_PICTURES",
          "value": "6",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_RINGTONES",
          "value": "7",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Object": {
      "name": "Object",
      "category": "Core",
      "brief_description": "Base class for all non built-in types.",
      "description": "Base class for all non built-in types. Everything not a built-in type starts the inheritance chain from this class.\n\t\tObjects do not manage memory, if inheriting from one the object will most likely have to be deleted manually (call the [method free] function from the script or delete from C++).\n\t\tSome derivates add memory management, such as [Reference] (which keeps a reference count and deletes itself automatically when no longer referenced) and [Node], which deletes the children tree when deleted.\n\t\tObjects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in [method _get_property_list] and handled in [method _get] and [method _set]. However, scripting languages and C++ have simpler means to export them.\n\t\tObjects also receive notifications ([method _notification]). Notifications are a simple way to notify the object about simple events, so they can all be handled together.",
      "methods": [
        {
          "name": "XL_MESSAGE",
          "qualifiers": "const",
          "description": "Deprecated, will go away.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get",
          "qualifiers": "virtual",
          "description": "Return a property, return null if the property does not exist.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_property_list",
          "qualifiers": "virtual",
          "description": "Return the property list, array of dictionaries, dictionaries must contain: name:String, type:int (see TYPE_* enum in globals) and optionally: hint:int (see PROPERTY_HINT_* in globals), hint_string:String, usage:int (see PROPERTY_USAGE_* in globals).",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "_init",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "_notification",
          "qualifiers": "virtual",
          "description": "Notification request, the notification id is received.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_set",
          "qualifiers": "virtual",
          "description": "Set a property. Return true if the property was found.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_user_signal",
          "description": "Add a user signal (can be added anytime). Arguments are optional, but can be added as an array of dictionaries, each containing \"name\" and \"type\" (from [@Global Scope] TYPE_*).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arguments",
              "type": "Array",
              "default_value": "Array()"
            }
          ]
        },
        {
          "name": "call",
          "description": "Call a function in the object, result is returned.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg0",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "2",
              "name": "arg1",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "3",
              "name": "arg2",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "arg3",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "5",
              "name": "arg4",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "6",
              "name": "arg5",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "7",
              "name": "arg6",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "8",
              "name": "arg7",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "9",
              "name": "arg8",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "10",
              "name": "arg9",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "call_deferred",
          "description": "Create and store a function in the object. The call will take place on idle time.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg0",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "2",
              "name": "arg1",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "3",
              "name": "arg2",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "arg3",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "5",
              "name": "arg4",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "callv",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg_array",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "can_translate_messages",
          "qualifiers": "const",
          "description": "Return true if this object can translate strings.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "connect",
          "description": "Connect a signal to a method at a target (member function). Binds are optional and are passed as extra arguments to the call. Flags specify optional deferred or one shot connections, see enum CONNECT_*. A signal can only be connected once to a method, and it will throw an error if already connected. If you want to avoid this, use [method is_connected] to check.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "binds",
              "type": "Array",
              "default_value": "Array()"
            },
            {
              "index": "4",
              "name": "flags",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "disconnect",
          "description": "Disconnect a signal from a method.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "emit_signal",
          "description": "Emit a signal. Arguments are passed in an array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg0",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "2",
              "name": "arg1",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "3",
              "name": "arg2",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "arg3",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "5",
              "name": "arg4",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "free",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get",
          "qualifiers": "const",
          "description": "Get a property from the object.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_instance_ID",
          "qualifiers": "const",
          "description": "Return the instance ID. All objects have a unique instance ID.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_meta",
          "qualifiers": "const",
          "description": "Return a metadata from the object.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_meta_list",
          "qualifiers": "const",
          "description": "Return the list of metadata in the object.",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "get_method_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_property_list",
          "qualifiers": "const",
          "description": "Return the list of properties as an array of dictionaries, dictionaries contain: name:String, type:int (see TYPE_* enum in globals) and optionally: hint:int (see PROPERTY_HINT_* in globals), hint_string:String, usage:int (see PROPERTY_USAGE_* in globals).",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_script",
          "qualifiers": "const",
          "description": "Return the object script (or null if it doesn't have one).",
          "return_type": "Script",
          "arguments": []
        },
        {
          "name": "get_signal_connection_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_signal_list",
          "qualifiers": "const",
          "description": "Return the list of signals as an array of dictionaries.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_type",
          "qualifiers": "const",
          "description": "Return the type of the object as a string.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "has_meta",
          "qualifiers": "const",
          "description": "Return true if a metadata is found with the requested name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_method",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_user_signal",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_blocking_signals",
          "qualifiers": "const",
          "description": "Return true if signal emission blocking is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_connected",
          "qualifiers": "const",
          "description": "Return true if a connection exists for a given signal and target/method.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_queued_for_deletion",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_type",
          "qualifiers": "const",
          "description": "Check the type of the object against a string (including inheritance).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "notification",
          "description": "Notify the object of something.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "reversed",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "property_list_changed_notify",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set",
          "description": "Set property into the object.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_block_signals",
          "description": "If set to true, signal emission is blocked.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_message_translation",
          "description": "Set true if this object can translate strings (in calls to tr() ). Default is true.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_meta",
          "description": "Set a metadata into the object. Metadata is serialized. Metadata can be [i]anything[/i].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_script",
          "description": "Set a script into the object, scripts extend the object functionality.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "script",
              "type": "Script",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tr",
          "qualifiers": "const",
          "description": "Translate a message. Only works in message translation is enabled (which is by default). See [method set_message_translation].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "message",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "script_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_POSTINITIALIZE",
          "value": "0",
          "description": "Called right when the object is initialized. Not available in script."
        },
        {
          "name": "NOTIFICATION_PREDELETE",
          "value": "1",
          "description": "Called before the object is about to be deleted."
        },
        {
          "name": "CONNECT_DEFERRED",
          "value": "1",
          "description": "Connect a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time."
        },
        {
          "name": "CONNECT_PERSIST",
          "value": "2",
          "description": "Persisting connections are saved when the object is serialized to file."
        },
        {
          "name": "CONNECT_ONESHOT",
          "value": "4",
          "description": "One shot connections disconnect themselves after emission."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "OccluderPolygon2D": {
      "name": "OccluderPolygon2D",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_cull_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "is_closed",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_closed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "closed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cull_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cull_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_polygon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CULL_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "CULL_CLOCKWISE",
          "value": "1",
          "description": ""
        },
        {
          "name": "CULL_COUNTER_CLOCKWISE",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "OmniLight": {
      "name": "OmniLight",
      "inherits": "Light",
      "category": "Core",
      "brief_description": "OmniDirectional Light, such as a light bulb or a candle.",
      "description": "An OmniDirectional light is a type of [Light] node that emits lights in all directions. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light]. TODO: Image of an omnilight.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "OptionButton": {
      "name": "OptionButton",
      "inherits": "Button",
      "category": "Core",
      "brief_description": "Button control that provides selectable options when pressed.",
      "description": "OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the \"current\" item and is displayed as the button text.",
      "methods": [
        {
          "name": "add_icon_item",
          "description": "Add an item, with a \"texture\" icon, text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_item",
          "description": "Add an item, with text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_separator",
          "description": "Add a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear",
          "description": "Clear all the items in the [OptionButton].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_item_ID",
          "qualifiers": "const",
          "description": "Return the ID of the item at index \"idx\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_count",
          "qualifiers": "const",
          "description": "Return the amount of items in the OptionButton.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_icon",
          "qualifiers": "const",
          "description": "Return the icon of the item at index \"idx\".",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_text",
          "qualifiers": "const",
          "description": "Return the text of the item at index \"idx\".",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_selected",
          "qualifiers": "const",
          "description": "Return the current item index",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selected_ID",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selected_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": []
        },
        {
          "name": "is_item_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_item",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Select an item by index and make it the current item.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_ID",
          "description": "Set the ID of an item at index \"idx\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_disabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon",
          "description": "Set the icon of an item at index \"idx\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_metadata",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_text",
          "description": "Set the text of an item at index \"idx\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "item_selected",
          "description": "This signal is emitted when the current item was changed by the user. ID of the item selected is passed as argument (if no IDs were added, ID will be just the item index).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ID",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "arrow",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "arrow_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "PCKPacker": {
      "name": "PCKPacker",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_file",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pck_path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "source_path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "flush",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "verbose",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pck_start",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pck_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "alignment",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PHashTranslation": {
      "name": "PHashTranslation",
      "inherits": "Translation",
      "category": "Core",
      "brief_description": "Optimized translation.",
      "description": "Optimized translation. Uses real-time compressed translations, which results in very small dictionaries.",
      "methods": [
        {
          "name": "generate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Translation",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PackedDataContainer": {
      "name": "PackedDataContainer",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "pack",
          "description": "",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PackedDataContainerRef": {
      "name": "PackedDataContainerRef",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PackedScene": {
      "name": "PackedScene",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "TODO: explain ownership, and that node does not need to own itself",
      "methods": [
        {
          "name": "can_instance",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_state",
          "description": "",
          "return_type": "SceneState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "instance",
          "qualifiers": "const",
          "description": "",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "gen_edit_state",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "pack",
          "description": "Pack will ignore any sub-nodes not owned by given node. See [method Node.set_owner].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PacketPeer": {
      "name": "PacketPeer",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Abstraction and base class for packet-based protocols.",
      "description": "PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low level bytes or having to worry about network ordering.",
      "methods": [
        {
          "name": "get_available_packet_count",
          "qualifiers": "const",
          "description": "Return the number of packets currently available in the ring-buffer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_packet",
          "qualifiers": "const",
          "description": "Get a raw packet.",
          "return_type": "RawArray",
          "arguments": []
        },
        {
          "name": "get_packet_error",
          "qualifiers": "const",
          "description": "Return the error state of the last packet received (via [method get_packet] and [method get_var]).",
          "return_type": "Error",
          "arguments": []
        },
        {
          "name": "get_var",
          "qualifiers": "const",
          "description": "Get a Variant.",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "put_packet",
          "description": "Send a raw packet.",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_var",
          "description": "Send a Variant as a packet.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PacketPeerStream": {
      "name": "PacketPeerStream",
      "inherits": "PacketPeer",
      "category": "Core",
      "brief_description": "Wrapper to use a PacketPeer over a StreamPeer.",
      "description": "PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.",
      "methods": [
        {
          "name": "set_stream_peer",
          "description": "Set the StreamPeer object to be wrapped",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "peer",
              "type": "StreamPeer",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PacketPeerUDP": {
      "name": "PacketPeerUDP",
      "inherits": "PacketPeer",
      "category": "Core",
      "brief_description": "UDP packet peer.",
      "description": "UDP packet peer. Can be used to send raw UDP packets as well as [Variant]\\ s.",
      "methods": [
        {
          "name": "close",
          "description": "Close the UDP socket the [PacketPeerUDP] is currently listening on.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_packet_ip",
          "qualifiers": "const",
          "description": "Return the IP of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_packet_port",
          "qualifiers": "const",
          "description": "Return the port of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_listening",
          "qualifiers": "const",
          "description": "Return whether this [PacketPeerUDP] is listening.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "listen",
          "description": "Make this [PacketPeerUDP] listen on the \"port\" binding to \"bind_address\" with a buffer size \"recv_buf_size\".\n\t\t\t\tIf \"bind_address\" is set as \"*\" (default), the peer will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf \"bind_address\" is set as \"0.0.0.0\" (for IPv4) or \"::\" (for IPv6), the peer will listen on all available addresses matching that IP type.\n\t\t\t\tIf \"bind_address\" is set to any valid address (e.g. \"192.168.1.101\", \"::1\", etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bind_address",
              "type": "String",
              "default_value": "\"*\""
            },
            {
              "index": "2",
              "name": "recv_buf_size",
              "type": "int",
              "default_value": "65536"
            }
          ]
        },
        {
          "name": "set_send_address",
          "description": "Set the destination address and port for sending packets and variables, a hostname will be resolved using if valid.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "wait",
          "description": "Wait for a packet to arrive on the listening port, see [method listen].",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Panel": {
      "name": "Panel",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Provides an opaque background for [Control] children.",
      "description": "Panel is a [Control] that displays an opaque background. It's commonly used as a parent and container for other types of [Control] nodes.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "panelf",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "panelnc",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "PanelContainer": {
      "name": "PanelContainer",
      "inherits": "Container",
      "category": "Core",
      "brief_description": "Panel container type.",
      "description": "Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ParallaxBackground": {
      "name": "ParallaxBackground",
      "inherits": "CanvasLayer",
      "category": "Core",
      "brief_description": "A node used to create a parallax scrolling background.",
      "description": "A ParallaxBackground will use one or more [ParallaxLayer] nodes to create a parallax scrolling background. Each [ParallaxLayer] can be set to move at different speeds relative to the camera movement, this can be used to create an illusion of depth in a 2D game.",
      "methods": [
        {
          "name": "get_limit_begin",
          "qualifiers": "const",
          "description": "Return the beginning limit.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_limit_end",
          "qualifiers": "const",
          "description": "Return the ending limit.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_scroll_base_offset",
          "qualifiers": "const",
          "description": "Return the base offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_scroll_base_scale",
          "qualifiers": "const",
          "description": "Return the base motion scale.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_scroll_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "is_ignore_camera_zoom",
          "description": "Return ignoring camera zoom.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_ignore_camera_zoom",
          "description": "Set to true for all child [ParallaxLayer] nodes to not be affected by the zoom level of the camera.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ignore",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_limit_begin",
          "description": "Set the left and top limits in pixels for scrolling to begin. If the camera is outside of this limit the background will not continue to scroll. If an axis is greater than or equal to the corresponding axis of limit_end, then it will not limit scrolling for that axis.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_limit_end",
          "description": "Set the right and bottom limits in pixels for scrolling to end. If the camera is outside of this limit the background will not continue to scroll. If an axis is less than or equal to the corresponding axis of limit_begin, then it will not limit scrolling for that axis.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_base_offset",
          "description": "Set the base offset in pixels of all children [ParallaxLayer] nodes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_base_scale",
          "description": "Set the base motion scale of all children [ParallaxLayer] nodes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_offset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ParallaxLayer": {
      "name": "ParallaxLayer",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "A parallax scrolling layer to be used with [ParallaxBackground].",
      "description": "A ParallaxLayer must be the child of a [ParallaxBackground] node. All child nodes will be affected by the parallax scrolling of this layer.",
      "methods": [
        {
          "name": "get_mirroring",
          "qualifiers": "const",
          "description": "Return the mirroring of the ParallaxLayer.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_motion_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_motion_scale",
          "qualifiers": "const",
          "description": "Return the motion scale of the ParallaxLayer.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_mirroring",
          "description": "Set the mirroring of the ParallaxLayer. If an axis is set to 0 then that axis will have no mirroring.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mirror",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_motion_offset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_motion_scale",
          "description": "Set the motion scale of the ParallaxLayer. If an axis is set to 0 then it will not move at all, it will stick with the camera.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ParticleAttractor2D": {
      "name": "ParticleAttractor2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_absorption",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_disable_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_particles_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_absorption",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "absorption",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disable_radius",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gravity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_particles_path",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radius",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Particles": {
      "name": "Particles",
      "inherits": "GeometryInstance",
      "category": "Core",
      "brief_description": "Particle system 3D Node",
      "description": "Particles is a particle system 3D [Node] that is used to simulate several types of particle effects, such as explosions, rain, snow, fireflies, or other magical-like shinny sparkles. Particles are drawn using impostors, and given their dynamic behavior, the user must provide a visibility AABB (although helpers to create one automatically exist).",
      "methods": [
        {
          "name": "get_amount",
          "qualifiers": "const",
          "description": "Return the total amount of particles in the system.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_color_phase_color",
          "qualifiers": "const",
          "description": "Return the color of a color phase.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "phase",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color_phase_pos",
          "qualifiers": "const",
          "description": "Return the position of a color phase (0 to 1).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "phase",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color_phases",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_emission_base_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_emission_half_extents",
          "qualifiers": "const",
          "description": "Return the half extents for the emission box.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_emission_points",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3Array",
          "arguments": []
        },
        {
          "name": "get_emit_timeout",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_normal",
          "qualifiers": "const",
          "description": "Return the normal vector towards where gravity is pulling (by default, negative Y).",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_material",
          "qualifiers": "const",
          "description": "Return the material used to draw particles.",
          "return_type": "Material",
          "arguments": []
        },
        {
          "name": "get_randomness",
          "qualifiers": "const",
          "description": "Return the randomness for a specific variable of the particle system. Randomness produces small changes from the default each time a particle is emitted.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "variable",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_variable",
          "qualifiers": "const",
          "description": "Return a specific variable for the particle system (see VAR_* enum).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "variable",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_visibility_aabb",
          "qualifiers": "const",
          "description": "Return the current visibility AABB.",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "has_height_from_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_emitting",
          "qualifiers": "const",
          "description": "Return the \"emitting\" property state (see [method set_emitting]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_local_coordinates",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_amount",
          "description": "Set total amount of particles in the system.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color_phase_color",
          "description": "Set the color of a color phase.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phase",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color_phase_pos",
          "description": "Set the position of a color phase (0 to 1).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phase",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color_phases",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "count",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_base_velocity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_half_extents",
          "description": "Set the half extents for the emission box.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "half_extents",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_points",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emit_timeout",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "timeout",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emitting",
          "description": "Set the \"emitting\" property state. When emitting, the particle system generates new particles at constant rate.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_normal",
          "description": "Set the normal vector towards where gravity is pulling (by default, negative Y).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_height_from_velocity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_material",
          "description": "Set the material used to draw particles.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_randomness",
          "description": "Set the randomness for a specific variable of the particle system. Randomness produces small changes from the default each time a particle is emitted.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "variable",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "randomness",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_local_coordinates",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_variable",
          "description": "Set a specific variable for the particle system (see VAR_* enum).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "variable",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visibility_aabb",
          "description": "Set the visibility AABB for the particle system, since the default one will not work properly most of the time.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "aabb",
              "type": "AABB",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "VAR_LIFETIME",
          "value": "0",
          "description": ""
        },
        {
          "name": "VAR_SPREAD",
          "value": "1",
          "description": ""
        },
        {
          "name": "VAR_GRAVITY",
          "value": "2",
          "description": ""
        },
        {
          "name": "VAR_LINEAR_VELOCITY",
          "value": "3",
          "description": ""
        },
        {
          "name": "VAR_ANGULAR_VELOCITY",
          "value": "4",
          "description": ""
        },
        {
          "name": "VAR_LINEAR_ACCELERATION",
          "value": "5",
          "description": ""
        },
        {
          "name": "VAR_DRAG",
          "value": "6",
          "description": ""
        },
        {
          "name": "VAR_TANGENTIAL_ACCELERATION",
          "value": "7",
          "description": ""
        },
        {
          "name": "VAR_INITIAL_SIZE",
          "value": "9",
          "description": ""
        },
        {
          "name": "VAR_FINAL_SIZE",
          "value": "10",
          "description": ""
        },
        {
          "name": "VAR_INITIAL_ANGLE",
          "value": "11",
          "description": ""
        },
        {
          "name": "VAR_HEIGHT",
          "value": "12",
          "description": ""
        },
        {
          "name": "VAR_HEIGHT_SPEED_SCALE",
          "value": "13",
          "description": ""
        },
        {
          "name": "VAR_MAX",
          "value": "14",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Particles2D": {
      "name": "Particles2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "2D Particle emitter",
      "description": "Particles2D is a particle system 2D [Node] that is used to simulate several types of particle effects, such as explosions, rain, snow, fireflies, or other magical-like shinny sparkles. Particles are drawn using impostors, and given their dynamic behavior, the user must provide a visibility AABB (although helpers to create one automatically exist).",
      "methods": [
        {
          "name": "get_amount",
          "qualifiers": "const",
          "description": "Returns the amount of particles spawned at each emission",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Returns the tint color for each particle.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_color_phase_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "phase",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color_phase_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "phase",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color_phases",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_color_ramp",
          "qualifiers": "const",
          "description": "Returns the [ColorRamp] used to tint each particle",
          "return_type": "ColorRamp",
          "arguments": []
        },
        {
          "name": "get_emission_half_extents",
          "qualifiers": "const",
          "description": "Returns the half extents of the emission box.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_emission_points",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "get_emissor_offset",
          "qualifiers": "const",
          "description": "Returns the particle spawn origin position relative to the emitter.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_emit_timeout",
          "qualifiers": "const",
          "description": "Returns the amount of seconds during which the emitter will spawn particles",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_explosiveness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_h_frames",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_initial_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_lifetime",
          "qualifiers": "const",
          "description": "Gets the amount of seconds that each particle will be visible.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "Returns the value of the specified emitter parameter",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pre_process_time",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_process_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_randomness",
          "qualifiers": "const",
          "description": "Returns the randomness value of the specified emitter parameter",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Returns the texture for emitted particles",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_time_scale",
          "qualifiers": "const",
          "description": "Returns the emitter time scale",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_v_frames",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_emitting",
          "qualifiers": "const",
          "description": "Returns whether this emitter is currently emitting or not",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_h",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_v",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_local_space",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "pre_process",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_amount",
          "description": "Sets the amount of particles spawned at each emission",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color",
          "description": "Set the tint color for each particle.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color_phase_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phase",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color_phase_pos",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phase",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color_phases",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phases",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color_ramp",
          "description": "Sets the [ColorRamp] used to tint each particle. Particle will be tinted according to their lifetimes.",
          "return_type": "ColorRamp",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color_ramp",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_half_extents",
          "description": "Sets the half extents of the emission box, particles will be spawned at random inside this box.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_points",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emissor_offset",
          "description": "Sets the particle spawn origin position relative to the emitter center. for example if this value is set to (50, 50), the particle will spawn 50 units to the right and  50 units to the bottom of the emitter center.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emit_timeout",
          "description": "Sets the amount of seconds during which the emitter will spawn particles, after the specified seconds the emitter state will be set to non emitting, so calling [method is_emitting] will return false. If the timeout is 0 the emitter will spawn forever.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emitting",
          "description": "If this is set to true then the particle emitter will emit particles, if its false it will not.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_explosiveness",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_h",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_v",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_frames",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_initial_velocity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lifetime",
          "description": "Sets the amount of seconds that each particle will be visible.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lifetime",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "Sets the value of the specified emitter parameter (see the constants secction for the list of parameters)",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pre_process_time",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_randomness",
          "description": "Sets the randomness value of the specified emitter parameter (see the constants secction for the list of parameters), 0 means no randomness, so every particle will have the parameters specified, 1 means that the parameter will be choosen at random, the closer the randomness value gets to 0 the more conservative the variation of the parameter will be.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "Sets the texture for each particle",
          "return_type": "Texture",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_time_scale",
          "description": "Sets the increment or decrement for the particle lifetime. for example: if the time scale is set to 2, the particles will die and move twice as fast.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_local_space",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_frames",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_DIRECTION",
          "value": "0",
          "description": "Direction in degrees at which the particles will be launched, Notice that when the direction is set to 0 the particles will be launched to the negative"
        },
        {
          "name": "PARAM_SPREAD",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_VELOCITY",
          "value": "2",
          "description": "Velocity at which the particles will be launched."
        },
        {
          "name": "PARAM_SPIN_VELOCITY",
          "value": "3",
          "description": "The speed at which particles will spin around its own center."
        },
        {
          "name": "PARAM_ORBIT_VELOCITY",
          "value": "4",
          "description": "Velocity at which the particles will orbit around the emitter center"
        },
        {
          "name": "PARAM_GRAVITY_DIRECTION",
          "value": "5",
          "description": "Direction in degrees at which the particles will be attracted"
        },
        {
          "name": "PARAM_GRAVITY_STRENGTH",
          "value": "6",
          "description": "Strength of the gravitation attraction for each particle"
        },
        {
          "name": "PARAM_RADIAL_ACCEL",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARAM_TANGENTIAL_ACCEL",
          "value": "8",
          "description": ""
        },
        {
          "name": "PARAM_DAMPING",
          "value": "9",
          "description": "Amount of damping for each particle"
        },
        {
          "name": "PARAM_INITIAL_ANGLE",
          "value": "10",
          "description": "Initial angle in radians at which each particle will be spawned"
        },
        {
          "name": "PARAM_INITIAL_SIZE",
          "value": "11",
          "description": "Initial size of each particle"
        },
        {
          "name": "PARAM_FINAL_SIZE",
          "value": "12",
          "description": "Final size of each particle, the particle size will interpolate to this value during its lifetime."
        },
        {
          "name": "PARAM_HUE_VARIATION",
          "value": "13",
          "description": ""
        },
        {
          "name": "PARAM_ANIM_SPEED_SCALE",
          "value": "14",
          "description": ""
        },
        {
          "name": "PARAM_ANIM_INITIAL_POS",
          "value": "15",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "16",
          "description": ""
        },
        {
          "name": "MAX_COLOR_PHASES",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Patch9Frame": {
      "name": "Patch9Frame",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_draw_center",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_patch_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_region_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "set_draw_center",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "draw_center",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "modulate",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_patch_margin",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_rect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "texture_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Path": {
      "name": "Path",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "Container for a [Curve3D].",
      "description": "This class is a container/Node-ification of a [Curve3D], so it can have [Spatial] properties and [Node] info.",
      "methods": [
        {
          "name": "get_curve",
          "qualifiers": "const",
          "description": "Returns the [Curve3D] contained.",
          "return_type": "Curve3D",
          "arguments": []
        },
        {
          "name": "set_curve",
          "description": "Sets the [Curve3D].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "Curve3D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Path2D": {
      "name": "Path2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Container for a [Curve2D].",
      "description": "This class is a container/Node-ification of a [Curve2D], so it can have [Node2D] properties and [Node] info.",
      "methods": [
        {
          "name": "get_curve",
          "qualifiers": "const",
          "description": "Returns the [Curve2D] contained.",
          "return_type": "Curve2D",
          "arguments": []
        },
        {
          "name": "set_curve",
          "description": "Sets the [Curve2D].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "Curve2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PathFollow": {
      "name": "PathFollow",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "Point sampler for a [Path].",
      "description": "This node takes its parent [Path], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.",
      "methods": [
        {
          "name": "get_cubic_interpolation",
          "qualifiers": "const",
          "description": "This method returns whether the position between two cached points (see [method set_cubic_interpolation]) is interpolated linearly, or cubicly.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_h_offset",
          "qualifiers": "const",
          "description": "Returns the X displacement this node has from its parent [Path].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Returns the distance along the path in 3D units.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rotation_mode",
          "qualifiers": "const",
          "description": "Returns the rotation mode. The constants below list which axes are allowed to rotate for each mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_unit_offset",
          "qualifiers": "const",
          "description": "Returns the distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_v_offset",
          "qualifiers": "const",
          "description": "Returns the Y displacement this node has from its parent [Path].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "Returns whether this node wraps its offsets around, or truncates them to the path ends.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_cubic_interpolation",
          "description": "The points along the [Curve3D] of the [Path] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\t\tThere are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.\n\t\t\t\tThis method controls whether the position between two cached points is interpolated linearly, or cubicly.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_offset",
          "description": "Moves this node in the X axis. As this node's position will be set every time its offset is set, this allows many PathFollow to share the same curve (and thus the same movement pattern), yet not return the same position for a given path offset.\n\t\t\t\tA similar effect may be achieved moving the this node's descendants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "h_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "If set, any offset outside the path's length (whether set by [method set_offset] or [method set_unit_offset] will wrap around, instead of stopping at the ends. Set it for cyclic paths.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "loop",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Sets the distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation_mode",
          "description": "Allows or forbids rotation on one or more axes, per the constants below.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotation_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_unit_offset",
          "description": "Sets the distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "unit_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_offset",
          "description": "Moves this node in the Y axis, for the same reasons of [method set_h_offset].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ROTATION_NONE",
          "value": "0",
          "description": "Forbids the PathFollow to rotate."
        },
        {
          "name": "ROTATION_Y",
          "value": "1",
          "description": "Allows the PathFollow to rotate in the Y axis only."
        },
        {
          "name": "ROTATION_XY",
          "value": "2",
          "description": "Allows the PathFollow to rotate in both the X, and Y axes."
        },
        {
          "name": "ROTATION_XYZ",
          "value": "3",
          "description": "Allows the PathFollow to rotate in any axis."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "PathFollow2D": {
      "name": "PathFollow2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Point sampler for a [Path2D].",
      "description": "This node takes its parent [Path2D], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.",
      "methods": [
        {
          "name": "get_cubic_interpolation",
          "qualifiers": "const",
          "description": "This method returns whether the position between two cached points (see [method set_cubic_interpolation]) is interpolated linearly, or cubicly.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_h_offset",
          "qualifiers": "const",
          "description": "Returns the horizontal displacement this node has from its parent [Path2D].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Returns the distance along the path in pixels.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_unit_offset",
          "qualifiers": "const",
          "description": "Returns the distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_v_offset",
          "qualifiers": "const",
          "description": "Returns the vertical displacement this node has from its parent [Path2D].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "Returns whether this node wraps its offsets around, or truncates them to the path ends.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_rotating",
          "qualifiers": "const",
          "description": "Returns whether this node rotates to follow the path.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_cubic_interpolation",
          "description": "The points along the [Curve2D] of the [Path2D] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\t\tThere are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.\n\t\t\t\tThis method controls whether the position between two cached points is interpolated linearly, or cubicly.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_offset",
          "description": "Moves this node horizontally. As this node's position will be set every time its offset is set, this allows many PathFollow2D to share the same curve (and thus the same movement pattern), yet not return the same position for a given path offset.\n\t\t\t\tA similar effect may be achieved moving this node's descendants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "h_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "If set, any offset outside the path's length (whether set by [method set_offset] or [method set_unit_offset] will wrap around, instead of stopping at the ends. Set it for cyclic paths.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "loop",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Sets the distance from the first vertex, measured in pixels along the path. This sets this node's position to a point within the path.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotate",
          "description": "If set, this node rotates to follow the path, making its descendants rotate.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_unit_offset",
          "description": "Sets the distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "unit_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_offset",
          "description": "Moves the PathFollow2D vertically, for the same reasons of [method set_h_offset].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PathRemap": {
      "name": "PathRemap",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Singleton containing the list of remapped resources.",
      "description": "When exporting, the types of some resources may change internally so they are converted to more optimized versions. While it's not usually necessary to access to this directly (path remapping happens automatically when opening a file), it's exported just for information.",
      "methods": [
        {
          "name": "add_remap",
          "description": "Add a remap from a file to another.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "locale",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "clear_remaps",
          "description": "Clear all remaps.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "erase_remap",
          "description": "Erase a remap.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_remap",
          "qualifiers": "const",
          "description": "Return the remapped new path of a file.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_remap",
          "qualifiers": "const",
          "description": "Return true if a file is being remapped.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Performance": {
      "name": "Performance",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_monitor",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "monitor",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TIME_FPS",
          "value": "0",
          "description": ""
        },
        {
          "name": "TIME_PROCESS",
          "value": "1",
          "description": ""
        },
        {
          "name": "TIME_FIXED_PROCESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "MEMORY_STATIC",
          "value": "3",
          "description": ""
        },
        {
          "name": "MEMORY_DYNAMIC",
          "value": "4",
          "description": ""
        },
        {
          "name": "MEMORY_STATIC_MAX",
          "value": "5",
          "description": ""
        },
        {
          "name": "MEMORY_DYNAMIC_MAX",
          "value": "6",
          "description": ""
        },
        {
          "name": "MEMORY_MESSAGE_BUFFER_MAX",
          "value": "7",
          "description": ""
        },
        {
          "name": "OBJECT_COUNT",
          "value": "8",
          "description": ""
        },
        {
          "name": "OBJECT_RESOURCE_COUNT",
          "value": "9",
          "description": ""
        },
        {
          "name": "OBJECT_NODE_COUNT",
          "value": "10",
          "description": ""
        },
        {
          "name": "RENDER_OBJECTS_IN_FRAME",
          "value": "11",
          "description": ""
        },
        {
          "name": "RENDER_VERTICES_IN_FRAME",
          "value": "12",
          "description": ""
        },
        {
          "name": "RENDER_MATERIAL_CHANGES_IN_FRAME",
          "value": "13",
          "description": ""
        },
        {
          "name": "RENDER_SHADER_CHANGES_IN_FRAME",
          "value": "14",
          "description": ""
        },
        {
          "name": "RENDER_SURFACE_CHANGES_IN_FRAME",
          "value": "15",
          "description": ""
        },
        {
          "name": "RENDER_DRAW_CALLS_IN_FRAME",
          "value": "16",
          "description": ""
        },
        {
          "name": "RENDER_USAGE_VIDEO_MEM_TOTAL",
          "value": "20",
          "description": ""
        },
        {
          "name": "RENDER_VIDEO_MEM_USED",
          "value": "17",
          "description": ""
        },
        {
          "name": "RENDER_TEXTURE_MEM_USED",
          "value": "18",
          "description": ""
        },
        {
          "name": "RENDER_VERTEX_MEM_USED",
          "value": "19",
          "description": ""
        },
        {
          "name": "PHYSICS_2D_ACTIVE_OBJECTS",
          "value": "21",
          "description": ""
        },
        {
          "name": "PHYSICS_2D_COLLISION_PAIRS",
          "value": "22",
          "description": ""
        },
        {
          "name": "PHYSICS_2D_ISLAND_COUNT",
          "value": "23",
          "description": ""
        },
        {
          "name": "PHYSICS_3D_ACTIVE_OBJECTS",
          "value": "24",
          "description": ""
        },
        {
          "name": "PHYSICS_3D_COLLISION_PAIRS",
          "value": "25",
          "description": ""
        },
        {
          "name": "PHYSICS_3D_ISLAND_COUNT",
          "value": "26",
          "description": ""
        },
        {
          "name": "MONITOR_MAX",
          "value": "27",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DDirectBodyState": {
      "name": "Physics2DDirectBodyState",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Direct access object to a physics body in the [Physics2DServer].",
      "description": "Direct access object to a physics body in the [Physics2DServer]. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body.",
      "methods": [
        {
          "name": "get_angular_velocity",
          "qualifiers": "const",
          "description": "Return the angular velocity of the body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_contact_collider",
          "qualifiers": "const",
          "description": "Return the [RID] of the collider.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_id",
          "qualifiers": "const",
          "description": "Return the object id of the collider.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_object",
          "qualifiers": "const",
          "description": "Return the collider object, this depends on how it was created (will return a scene node if such was used to create it).",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_pos",
          "qualifiers": "const",
          "description": "Return the contact position in the collider.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_shape",
          "qualifiers": "const",
          "description": "Return the collider shape index.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_shape_metadata",
          "qualifiers": "const",
          "description": "Return the metadata of the collided shape. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_velocity_at_pos",
          "qualifiers": "const",
          "description": "Return the linear velocity vector at contact point of the collider.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_count",
          "qualifiers": "const",
          "description": "Return the amount of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_contact_local_normal",
          "qualifiers": "const",
          "description": "Return the local normal (of this body) of the contact point.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_pos",
          "qualifiers": "const",
          "description": "Return the local position (of this body) of the contact point.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_shape",
          "qualifiers": "const",
          "description": "Return the local shape index of the collision.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_inverse_inertia",
          "qualifiers": "const",
          "description": "Return the inverse of the inertia of the body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_inverse_mass",
          "qualifiers": "const",
          "description": "Return the inverse of the mass of the body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "Return the current linear velocity of the body.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_space_state",
          "description": "Return the current state of space, useful for queries.",
          "return_type": "Physics2DDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_step",
          "qualifiers": "const",
          "description": "Return the timestep (delta) used for the simulation.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_total_angular_damp",
          "qualifiers": "const",
          "description": "Return the rate at which the body stops rotating, if there are not any other forces moving it.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_total_gravity",
          "qualifiers": "const",
          "description": "Return the total gravity vector being currently applied to this body.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_total_linear_damp",
          "qualifiers": "const",
          "description": "Return the rate at which the body stops moving, if there are not any other forces moving it.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix of the body.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "integrate_forces",
          "description": "Call the built-in force integration code.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_sleeping",
          "qualifiers": "const",
          "description": "Return true if this body is currently sleeping (not active).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_angular_velocity",
          "description": "Change the angular velocity of the body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "velocity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_velocity",
          "description": "Change the linear velocity of the body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sleep_state",
          "description": "Set the sleeping state of the body, only affects character/rigid bodies.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Change the transform matrix of the body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DDirectBodyStateSW": {
      "name": "Physics2DDirectBodyStateSW",
      "inherits": "Physics2DDirectBodyState",
      "category": "Core",
      "brief_description": "Software implementation of [Physics2DDirectBodyState].",
      "description": "Software implementation of [Physics2DDirectBodyState]. This object exposes no new methods or properties and should not be used, as [Physics2DDirectBodyState] selects the best implementation available.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DDirectSpaceState": {
      "name": "Physics2DDirectSpaceState",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Direct access object to a space in the [Physics2DServer].",
      "description": "Direct access object to a space in the [Physics2DServer]. It's used mainly to do queries against objects and areas residing in a given space.",
      "methods": [
        {
          "name": "cast_motion",
          "description": "Check whether the shape can travel to a point. If it can, the method will return an array with two floats: The first is the distance the shape can move in that direction without colliding, and the second is the distance at which it will collide.\n\tIf the shape can not move, the array will be empty.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_shape",
          "description": "Check the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        },
        {
          "name": "get_rest_info",
          "description": "Check the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. If it collides with more than a shape, the nearest one is selected. The returned object is a dictionary containing the following fields:\n\t\t\t\tpointo: Place where the shapes intersect.\n\t\t\t\tnormal: Normal of the object at the point where the shapes intersect.\n\t\t\t\tshape: Shape index within the object against which the shape intersected.\n\t\t\t\tmetadata: Metadata of the shape against which the shape intersected. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\tcollider_id: Id of the object against which the shape intersected.\n\t\t\t\tcollider: Object against which the shape intersected.\n\t\t\t\trid: [RID] of the object against which the shape intersected.\n\t\t\t\tlinear_velocity: The movement vector of the object the shape intersected, if it was a body. If it was an area, it is (0,0).\n\t\t\t\tIf the shape did not intersect anything, then an empty dictionary (dir.empty()==true) is returned instead.",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersect_point",
          "description": "Check whether a point is inside any shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:\n\t\t\t\tshape: Shape index within the object the point is in.\n\t\t\t\tmetadata: Metadata of the shape the point is in. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\tcollider_id: Id of the object the point is in.\n\t\t\t\tcollider: Object the point is inside of.\n\t\t\t\trid: [RID] of the object the point is in.\n\t\t\t\tAdditionally, the method can take an array of objects or [RID]\\ s that are to be excluded from collisions, a bitmask representing the physics layers to check in, and another bitmask for the types of objects to check (see TYPE_MASK_* constants).",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            },
            {
              "index": "2",
              "name": "exclude",
              "type": "Array",
              "default_value": "Array()"
            },
            {
              "index": "3",
              "name": "layer_mask",
              "type": "int",
              "default_value": "2147483647"
            },
            {
              "index": "4",
              "name": "type_mask",
              "type": "int",
              "default_value": "15"
            }
          ]
        },
        {
          "name": "intersect_ray",
          "description": "Intersect a ray in a given space. The returned object is a dictionary with the following fields:\n\t\t\t\tposition: Place where ray is stopped.\n\t\t\t\tnormal: Normal of the object at the point where the ray was stopped.\n\t\t\t\tshape: Shape index within the object against which the ray was stopped.\n\t\t\t\tmetadata: Metadata of the shape against which the ray was stopped. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\tcollider_id: Id of the object against which the ray was stopped.\n\t\t\t\tcollider: Object against which the ray was stopped.\n\t\t\t\trid: [RID] of the object against which the ray was stopped.\n\t\t\t\tIf the ray did not intersect anything, then an empty dictionary (dir.empty()==true) is returned instead.\n\t\t\t\tAdditionally, the method can take an array of objects or [RID]\\ s that are to be excluded from collisions, a bitmask representing the physics layers to check in, and another bitmask for the types of objects to check (see TYPE_MASK_* constants).",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "exclude",
              "type": "Array",
              "default_value": "Array()"
            },
            {
              "index": "3",
              "name": "layer_mask",
              "type": "int",
              "default_value": "2147483647"
            },
            {
              "index": "4",
              "name": "type_mask",
              "type": "int",
              "default_value": "15"
            }
          ]
        },
        {
          "name": "intersect_shape",
          "description": "Check the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:\n\t\t\t\tshape: Shape index within the object the shape intersected.\n\t\t\t\tmetadata: Metadata of the shape intersected by the shape given through the [Physics2DShapeQueryParameters]. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\tcollider_id: Id of the object the shape intersected.\n\t\t\t\tcollider: Object the shape intersected.\n\t\t\t\trid: [RID] of the object the shape intersected.\n\t\t\t\tThe number of intersections can be limited with the second paramater, to reduce the processing time.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TYPE_MASK_STATIC_BODY",
          "value": "1",
          "description": "Check for collisions with static bodies."
        },
        {
          "name": "TYPE_MASK_KINEMATIC_BODY",
          "value": "2",
          "description": "Check for collisions with kinematic bodies."
        },
        {
          "name": "TYPE_MASK_RIGID_BODY",
          "value": "4",
          "description": "Check for collisions with rigid bodies."
        },
        {
          "name": "TYPE_MASK_CHARACTER_BODY",
          "value": "8",
          "description": "Check for collisions with rigid bodies in character mode."
        },
        {
          "name": "TYPE_MASK_AREA",
          "value": "16",
          "description": "Check for collisions with areas."
        },
        {
          "name": "TYPE_MASK_COLLISION",
          "value": "15",
          "description": "Check for collisions with any kind of bodies (but not areas)."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DServer": {
      "name": "Physics2DServer",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Physics 2D Server.",
      "description": "Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.",
      "methods": [
        {
          "name": "area_add_shape",
          "description": "Add a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Matrix32",
              "default_value": "((1, 0), (0, 1), (0, 0))"
            }
          ]
        },
        {
          "name": "area_attach_object_instance_ID",
          "description": "Assign the area to a descendant of [Object], so it can exist in the node tree.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_clear_shapes",
          "description": "Remove all shapes from an area. It does not delete the shapes, so they can be reassigned later.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_create",
          "description": "Create an [Area2D].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "area_get_object_instance_ID",
          "qualifiers": "const",
          "description": "Get the instance ID of the object the area is assigned to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_param",
          "qualifiers": "const",
          "description": "Return an area parameter value.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape",
          "qualifiers": "const",
          "description": "Return the [RID] of the nth shape of an area.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_count",
          "qualifiers": "const",
          "description": "Return the number of shapes assigned to an area.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix of a shape within an area.",
          "return_type": "Matrix32",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space",
          "qualifiers": "const",
          "description": "Return the space assigned to the area.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space_override_mode",
          "qualifiers": "const",
          "description": "Return the space override mode for the area.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix for an area.",
          "return_type": "Matrix32",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_remove_shape",
          "description": "Remove a shape from an area. It does not delete the shape, so it can be reassigned later.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_mask",
          "description": "Set which physics layers the area will monitor.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_layer_mask",
          "description": "Assign the area to one or many physics layers.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_monitor_callback",
          "description": "Set the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:\n\t\t\t\t1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.\n\t\t\t\t2: [RID] of the object that entered/exited the area.\n\t\t\t\t3: Instance ID of the object that entered/exited the area.\n\t\t\t\t4: The shape index of the object that entered/exited the area.\n\t\t\t\t5: The shape index of the area where the object entered/exited.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_param",
          "description": "Set the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape",
          "description": "Substitute a given area shape by another. The old shape is selected by its index, the new one by its [RID].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape_transform",
          "description": "Set the transform matrix for an area shape.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space",
          "description": "Assign a space to the area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space_override_mode",
          "description": "Set the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_transform",
          "description": "Set the transform matrix for an area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_collision_exception",
          "description": "Add a body to the list of bodies exempt from collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_force",
          "description": "Add a positioned force to the applied force and torque. As with [method body_apply_impulse], both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "force",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_shape",
          "description": "Add a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Matrix32",
              "default_value": "((1, 0), (0, 1), (0, 0))"
            }
          ]
        },
        {
          "name": "body_apply_impulse",
          "description": "Add a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "impulse",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_attach_object_instance_ID",
          "description": "Assign the area to a descendant of [Object], so it can exist in the node tree.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_clear_shapes",
          "description": "Remove all shapes from a body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_create",
          "description": "Create a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": "2"
            },
            {
              "index": "1",
              "name": "init_sleeping",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "body_get_collision_mask",
          "qualifiers": "const",
          "description": "Return the physics layer or layers a body can collide with.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_continuous_collision_detection_mode",
          "qualifiers": "const",
          "description": "Return the continuous collision detection mode.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_layer_mask",
          "qualifiers": "const",
          "description": "Return the physics layer or layers a body belongs to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_max_contacts_reported",
          "qualifiers": "const",
          "description": "Return the maximum contacts that can be reported. See [method body_set_max_contacts_reported].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_mode",
          "qualifiers": "const",
          "description": "Return the body mode.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_object_instance_ID",
          "qualifiers": "const",
          "description": "Get the instance ID of the object the area is assigned to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_one_way_collision_direction",
          "qualifiers": "const",
          "description": "Return the direction used for one-way collision detection.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_one_way_collision_max_depth",
          "qualifiers": "const",
          "description": "Return how far a body can go through the given one, when it allows one-way collisions.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_param",
          "qualifiers": "const",
          "description": "Return the value of a body parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape",
          "qualifiers": "const",
          "description": "Return the [RID] of the nth shape of a body.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_count",
          "qualifiers": "const",
          "description": "Return the number of shapes assigned to a body.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_metadata",
          "qualifiers": "const",
          "description": "Return the metadata of a shape of a body.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix of a body shape.",
          "return_type": "Matrix32",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_space",
          "qualifiers": "const",
          "description": "Return the [RID] of the space assigned to a body.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_state",
          "qualifiers": "const",
          "description": "Return a body state.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_omitting_force_integration",
          "qualifiers": "const",
          "description": "Return whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_shape_set_as_trigger",
          "qualifiers": "const",
          "description": "Return whether a body's shape is marked as a trigger.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_collision_exception",
          "description": "Remove a body from the list of bodies exempt from collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_shape",
          "description": "Remove a shape from a body. The shape is not deleted, so it can be reused afterwards.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_axis_velocity",
          "description": "Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis_velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_mask",
          "description": "Set the physics layer or layers a body can collide with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_continuous_collision_detection_mode",
          "description": "Set the continuous collision detection mode from any of the CCD_MODE_* constants.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_force_integration_callback",
          "description": "Set the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force integration]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "body_set_layer_mask",
          "description": "Set the physics layer or layers a body belongs to.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_max_contacts_reported",
          "description": "Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_mode",
          "description": "Set the body mode, from one of the constants BODY_MODE*.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_omit_force_integration",
          "description": "Set whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_one_way_collision_direction",
          "description": "Set a direction from which bodies can go through the given one; that is, the passed vector is the normal of the pass-through side of the surface. If this value is different from (0,0), any movement within 90 degrees of the opposite of this vector is considered an valid movement. Set this direction to (0,0) to disable one-way collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "normal",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_one_way_collision_max_depth",
          "description": "Set how deep at most a body can be with respect to the given one for the physics server to force it to a non-overlapping position, if it allows one-way collisions (see [method body_set_one_way_collision_direction]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "depth",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_param",
          "description": "Set a body parameter (see BODY_PARAM* constants).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape",
          "description": "Substitute a given body shape by another. The old shape is selected by its index, the new one by its [RID].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_as_trigger",
          "description": "Mark a body's shape as a trigger. A trigger shape cannot affect other bodies, but detects other shapes entering and exiting it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_metadata",
          "description": "Set metadata of a shape within a body. This metadata is different from [method Object.set_meta], and can be retrieved on shape queries.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_transform",
          "description": "Set the transform matrix for a body shape.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_space",
          "description": "Assign a space to the body (see [method create_space]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_state",
          "description": "Set a body state (see BODY_STATE* constants).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_test_motion",
          "description": "Return whether a body can move in a given direction. Apart from the boolean return value, a [Physics2DTestMotionResult] can be passed to return additional information in.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "margin",
              "type": "float",
              "default_value": "0.08"
            },
            {
              "index": "3",
              "name": "result",
              "type": "Physics2DTestMotionResult",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "body_test_motion_from",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "margin",
              "type": "float",
              "default_value": "0.08"
            },
            {
              "index": "4",
              "name": "result",
              "type": "Physics2DTestMotionResult",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "damped_spring_joint_create",
          "description": "Create a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anchor_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anchor_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_a",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body_b",
              "type": "RID",
              "default_value": "RID()"
            }
          ]
        },
        {
          "name": "damped_string_joint_get_param",
          "qualifiers": "const",
          "description": "Return the value of a damped spring joint parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "damped_string_joint_set_param",
          "description": "Set a damped spring joint parameter. Parameters are explained in the DAMPED_STRING* constants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "free_rid",
          "description": "Destroy any of the objects created by Physics2DServer. If the [RID] passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_process_info",
          "description": "Return information about the current state of the 2D physics engine. The states are listed under the INFO_* constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "process_info",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "groove_joint_create",
          "description": "Create a groove joint between two bodies. If not specified, the bodyies are assumed to be the joint itself.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "groove1_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "groove2_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "anchor_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body_a",
              "type": "RID",
              "default_value": "RID()"
            },
            {
              "index": "4",
              "name": "body_b",
              "type": "RID",
              "default_value": "RID()"
            }
          ]
        },
        {
          "name": "joint_get_param",
          "qualifiers": "const",
          "description": "Return the value of a joint parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_type",
          "qualifiers": "const",
          "description": "Return the type of a joint (see JOINT_* constants).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_set_param",
          "description": "Set a joint parameter. Parameters are explained in the JOINT_PARAM* constants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_create",
          "description": "Create a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anchor",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body_a",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_b",
              "type": "RID",
              "default_value": "RID()"
            }
          ]
        },
        {
          "name": "set_active",
          "description": "Activate or deactivate the 2D physics engine.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_create",
          "description": "Create a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_data",
          "qualifiers": "const",
          "description": "Return the shape data.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_type",
          "qualifiers": "const",
          "description": "Return the type of shape (see SHAPE_* constants).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_set_data",
          "description": "Set the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_create",
          "description": "Create a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "space_get_direct_state",
          "description": "Return the state of a space, a [Physics2DDirectSpaceState]. This object can be used to make collision/intersection queries.",
          "return_type": "Physics2DDirectSpaceState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_get_param",
          "qualifiers": "const",
          "description": "Return the value of a space parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_is_active",
          "qualifiers": "const",
          "description": "Return whether the space is active.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_active",
          "description": "Mark a space as active. It will not have an effect, unless it is assigned to an area or body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_param",
          "description": "Set the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SPACE_PARAM_CONTACT_RECYCLE_RADIUS",
          "value": "0",
          "description": "Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated."
        },
        {
          "name": "SPACE_PARAM_CONTACT_MAX_SEPARATION",
          "value": "1",
          "description": "Constant to set/get the maximum distance a shape can be from another before they are considered separated."
        },
        {
          "name": "SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION",
          "value": "2",
          "description": "Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision."
        },
        {
          "name": "SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_TRESHOLD",
          "value": "3",
          "description": "Constant to set/get the linear velocity threshold. Bodies slower than this will be marked as potentially inactive."
        },
        {
          "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_TRESHOLD",
          "value": "4",
          "description": "Constant to set/get the angular velocity threshold. Bodies slower than this will be marked as potentially inactive."
        },
        {
          "name": "SPACE_PARAM_BODY_TIME_TO_SLEEP",
          "value": "5",
          "description": "Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time."
        },
        {
          "name": "SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS",
          "value": "6",
          "description": "Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects \"rebound\", after violating a constraint, to avoid leaving them in that state because of numerical imprecision."
        },
        {
          "name": "SHAPE_LINE",
          "value": "0",
          "description": "This is the constant for creating line shapes. A line shape is an infinite line with an origin point, and a normal. Thus, it can be used for front/behind checks."
        },
        {
          "name": "SHAPE_SEGMENT",
          "value": "2",
          "description": "This is the constant for creating segment shapes. A segment shape is a line from a point A to a point B. It can be checked for intersections."
        },
        {
          "name": "SHAPE_CIRCLE",
          "value": "3",
          "description": "This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks."
        },
        {
          "name": "SHAPE_RECTANGLE",
          "value": "4",
          "description": "This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks."
        },
        {
          "name": "SHAPE_CAPSULE",
          "value": "5",
          "description": "This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks."
        },
        {
          "name": "SHAPE_CONVEX_POLYGON",
          "value": "6",
          "description": "This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks. Unlike the method [method CollisionPolygon2D.set_polygon], polygons modified with [method shape_set_data] do not verify that the points supplied form, in fact, a convex polygon."
        },
        {
          "name": "SHAPE_CONCAVE_POLYGON",
          "value": "7",
          "description": "This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks."
        },
        {
          "name": "SHAPE_CUSTOM",
          "value": "8",
          "description": "This constant is used internally by the engine. Any attempt to create this kind of shape results in an error."
        },
        {
          "name": "AREA_PARAM_GRAVITY",
          "value": "0",
          "description": "Constant to set/get gravity strength in an area."
        },
        {
          "name": "AREA_PARAM_GRAVITY_VECTOR",
          "value": "1",
          "description": "Constant to set/get gravity vector/center in an area."
        },
        {
          "name": "AREA_PARAM_GRAVITY_IS_POINT",
          "value": "2",
          "description": "Constant to set/get whether the gravity vector of an area is a direction, or a center point."
        },
        {
          "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE",
          "value": "3",
          "description": "Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance."
        },
        {
          "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION",
          "value": "4",
          "description": "This constant was used to set/get the falloff factor for point gravity. It has been superseded by AREA_PARAM_GRAVITY_DISTANCE_SCALE."
        },
        {
          "name": "AREA_PARAM_LINEAR_DAMP",
          "value": "5",
          "description": "Constant to set/get the linear dampening factor of an area."
        },
        {
          "name": "AREA_PARAM_ANGULAR_DAMP",
          "value": "6",
          "description": "Constant to set/get the angular dampening factor of an area."
        },
        {
          "name": "AREA_PARAM_PRIORITY",
          "value": "7",
          "description": "Constant to set/get the priority (order of processing) of an area."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "description": "This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "description": "This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "description": "This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one."
        },
        {
          "name": "BODY_MODE_STATIC",
          "value": "0",
          "description": "Constant for static bodies."
        },
        {
          "name": "BODY_MODE_KINEMATIC",
          "value": "1",
          "description": "Constant for kinematic bodies."
        },
        {
          "name": "BODY_MODE_RIGID",
          "value": "2",
          "description": "Constant for rigid bodies."
        },
        {
          "name": "BODY_MODE_CHARACTER",
          "value": "3",
          "description": "Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics."
        },
        {
          "name": "BODY_PARAM_BOUNCE",
          "value": "0",
          "description": "Constant to set/get a body's bounce factor."
        },
        {
          "name": "BODY_PARAM_FRICTION",
          "value": "1",
          "description": "Constant to set/get a body's friction."
        },
        {
          "name": "BODY_PARAM_MASS",
          "value": "2",
          "description": "Constant to set/get a body's mass."
        },
        {
          "name": "BODY_PARAM_INERTIA",
          "value": "3",
          "description": "Constant to set/get a body's inertia."
        },
        {
          "name": "BODY_PARAM_GRAVITY_SCALE",
          "value": "4",
          "description": "Constant to set/get a body's gravity multiplier."
        },
        {
          "name": "BODY_PARAM_LINEAR_DAMP",
          "value": "5",
          "description": "Constant to set/get a body's linear dampening factor."
        },
        {
          "name": "BODY_PARAM_ANGULAR_DAMP",
          "value": "6",
          "description": "Constant to set/get a body's angular dampening factor."
        },
        {
          "name": "BODY_PARAM_MAX",
          "value": "7",
          "description": "This is the last ID for body parameters. Any attempt to set this property is ignored. Any attempt to get it returns 0."
        },
        {
          "name": "BODY_STATE_TRANSFORM",
          "value": "0",
          "description": "Constant to set/get the current transform matrix of the body."
        },
        {
          "name": "BODY_STATE_LINEAR_VELOCITY",
          "value": "1",
          "description": "Constant to set/get the current linear velocity of the body."
        },
        {
          "name": "BODY_STATE_ANGULAR_VELOCITY",
          "value": "2",
          "description": "Constant to set/get the current angular velocity of the body."
        },
        {
          "name": "BODY_STATE_SLEEPING",
          "value": "3",
          "description": "Constant to sleep/wake up a body, or to get whether it is sleeping."
        },
        {
          "name": "BODY_STATE_CAN_SLEEP",
          "value": "4",
          "description": "Constant to set/get whether the body can sleep."
        },
        {
          "name": "JOINT_PIN",
          "value": "0",
          "description": "Constant to create pin joints."
        },
        {
          "name": "JOINT_GROOVE",
          "value": "1",
          "description": "Constant to create groove joints."
        },
        {
          "name": "JOINT_DAMPED_SPRING",
          "value": "2",
          "description": "Constant to create damped spring joints."
        },
        {
          "name": "DAMPED_STRING_REST_LENGTH",
          "value": "0",
          "description": "Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart."
        },
        {
          "name": "DAMPED_STRING_STIFFNESS",
          "value": "1",
          "description": "Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length."
        },
        {
          "name": "DAMPED_STRING_DAMPING",
          "value": "2",
          "description": "Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping)."
        },
        {
          "name": "CCD_MODE_DISABLED",
          "value": "0",
          "description": "Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects."
        },
        {
          "name": "CCD_MODE_CAST_RAY",
          "value": "1",
          "description": "Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise."
        },
        {
          "name": "CCD_MODE_CAST_SHAPE",
          "value": "2",
          "description": "Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise."
        },
        {
          "name": "AREA_BODY_ADDED",
          "value": "0",
          "description": "The value of the first parameter and area callback function receives, when an object enters one of its shapes."
        },
        {
          "name": "AREA_BODY_REMOVED",
          "value": "1",
          "description": "The value of the first parameter and area callback function receives, when an object exits one of its shapes."
        },
        {
          "name": "INFO_ACTIVE_OBJECTS",
          "value": "0",
          "description": "Constant to get the number of objects that are not sleeping."
        },
        {
          "name": "INFO_COLLISION_PAIRS",
          "value": "1",
          "description": "Constant to get the number of possible collisions."
        },
        {
          "name": "INFO_ISLAND_COUNT",
          "value": "2",
          "description": "Constant to get the number of space regions where a collision could occur."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DServerSW": {
      "name": "Physics2DServerSW",
      "inherits": "Physics2DServer",
      "category": "Core",
      "brief_description": "Software implementation of [Physics2DServer].",
      "description": "Software implementation of [Physics2DServer]. This class exposes no new methods or properties and should not be used, as [Physics2DServer] automatically selects the best implementation available.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DShapeQueryParameters": {
      "name": "Physics2DShapeQueryParameters",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Parameters to be sent to a 2D shape physics query.",
      "description": "This class contains the shape and other parameters for intersection/collision queries.",
      "methods": [
        {
          "name": "get_exclude",
          "qualifiers": "const",
          "description": "Return the list of objects, or object [RID]\\ s, that will be excluded from collisions.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "Return the physics layer(s) the shape belongs to.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "Return the collision margin for the shape.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_motion",
          "qualifiers": "const",
          "description": "Return the current movement speed of the shape.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_object_type_mask",
          "qualifiers": "const",
          "description": "Return the type of object the shape belongs to.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shape_rid",
          "qualifiers": "const",
          "description": "Return the [RID] of the shape queried.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix of the shape queried.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "set_exclude",
          "description": "Set the list of objects, or object [RID]\\ s, that will be excluded from collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exclude",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "Set the physics layer(s) the shape belongs to.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin",
          "description": "Set the collision margin for the shape. A collision margin is an amount (in pixels) that the shape will grow when computing collisions, to account for numerical imprecision.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_motion",
          "description": "Set the current movement speed of the shape.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "motion",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_object_type_mask",
          "description": "Set the type of object the shape belongs to (see Physics2DDirectSpaceState.TYPE_MASK_*).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object_type_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "Set the [Shape2D] that will be used for collision/intersection queries.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_rid",
          "description": "Set the [RID] of the shape to be used in queries.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Set the transormation matrix of the shape. This is necessary to set its position/rotation/scale.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DShapeQueryResult": {
      "name": "Physics2DShapeQueryResult",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_result_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_result_object",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DTestMotionResult": {
      "name": "Physics2DTestMotionResult",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collision_point",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_motion",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_motion_remainder",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsBody": {
      "name": "PhysicsBody",
      "inherits": "CollisionObject",
      "category": "Core",
      "brief_description": "Base class for different types of Physics bodies.",
      "description": "PhysicsBody is an abstract base class for implementing a physics body. All PhysicsBody types inherit from it.",
      "methods": [
        {
          "name": "add_collision_exception_with",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "PhysicsBody",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_layer_mask_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_collision_exception_with",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "PhysicsBody",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask_bit",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsBody2D": {
      "name": "PhysicsBody2D",
      "inherits": "CollisionObject2D",
      "category": "Core",
      "brief_description": "Base class for all objects affected by physics.",
      "description": "PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it.",
      "methods": [
        {
          "name": "add_collision_exception_with",
          "description": "Adds a body to the collision exception list. This list contains bodies that this body will not collide with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "PhysicsBody2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "Return the physics layers this area can scan for collisions.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "Return the physics layer this area is in.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_layer_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_one_way_collision_direction",
          "qualifiers": "const",
          "description": "Return the direction used for one-way collision detection.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_one_way_collision_max_depth",
          "qualifiers": "const",
          "description": "Return how far a body can go through this one, when it allows one-way collisions.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "remove_collision_exception_with",
          "description": "Removes a body from the collision exception list.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "PhysicsBody2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "Set the physics layers this area can scan for collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "Set the physics layers this area is in.\n\t\t\t\tCollidable objects can exist in any of 32 different layers. These layers are not visual, but more of a tagging system instead. A collidable can use these layers/tags to select with which objects it can collide, using [method set_collision_mask].\n\t\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask_bit",
          "description": "Set/clear individual bits on the layer mask. This makes getting a body in/out of only one layer easier.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_one_way_collision_direction",
          "description": "Set a direction from which bodies can go through this one; that is, the passed vector is the normal of the pass-through side of the surface. If this value is different from (0,0), any movement within 90 degrees of the opposite of this vector is considered an valid movement. Set this direction to (0,0) to disable one-way collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_one_way_collision_max_depth",
          "description": "Set how deep at most a body can be with respect to this one for the physics server to force it to a non-overlapping position, if it allows one-way collisions (see [method body_set_one_way_collision_direction]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "depth",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsDirectBodyState": {
      "name": "PhysicsDirectBodyState",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_force",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "force",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_impulse",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "j",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_angular_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_contact_collider",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_object",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_velocity_at_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_contact_local_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_inverse_inertia",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_inverse_mass",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_space_state",
          "description": "",
          "return_type": "PhysicsDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_step",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_total_angular_damp",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_total_gravity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_total_linear_damp",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "integrate_forces",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_sleeping",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_angular_velocity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_velocity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sleep_state",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsDirectBodyStateSW": {
      "name": "PhysicsDirectBodyStateSW",
      "inherits": "PhysicsDirectBodyState",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsDirectSpaceState": {
      "name": "PhysicsDirectSpaceState",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "cast_motion",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "motion",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_shape",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        },
        {
          "name": "get_rest_info",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersect_ray",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "exclude",
              "type": "Array",
              "default_value": "Array()"
            },
            {
              "index": "3",
              "name": "layer_mask",
              "type": "int",
              "default_value": "2147483647"
            },
            {
              "index": "4",
              "name": "type_mask",
              "type": "int",
              "default_value": "15"
            }
          ]
        },
        {
          "name": "intersect_shape",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TYPE_MASK_STATIC_BODY",
          "value": "1",
          "description": ""
        },
        {
          "name": "TYPE_MASK_KINEMATIC_BODY",
          "value": "2",
          "description": ""
        },
        {
          "name": "TYPE_MASK_RIGID_BODY",
          "value": "4",
          "description": ""
        },
        {
          "name": "TYPE_MASK_CHARACTER_BODY",
          "value": "8",
          "description": ""
        },
        {
          "name": "TYPE_MASK_AREA",
          "value": "16",
          "description": ""
        },
        {
          "name": "TYPE_MASK_COLLISION",
          "value": "15",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsServer": {
      "name": "PhysicsServer",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "area_add_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": "Transform()"
            }
          ]
        },
        {
          "name": "area_attach_object_instance_ID",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_clear_shapes",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "area_get_object_instance_ID",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space_override_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_is_ray_pickable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_remove_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_layer_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_monitor_callback",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_ray_pickable",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space_override_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_collision_exception",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": "Transform()"
            }
          ]
        },
        {
          "name": "body_apply_impulse",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "impulse",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_attach_object_instance_ID",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_clear_shapes",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": "2"
            },
            {
              "index": "1",
              "name": "init_sleeping",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "body_get_axis_lock",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_collision_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_layer_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_max_contacts_reported",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_object_instance_ID",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_space",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_state",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_continuous_collision_detection_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_omitting_force_integration",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_ray_pickable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_collision_exception",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_axis_lock",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_axis_velocity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_enable_continuous_collision_detection",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_force_integration_callback",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "body_set_layer_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_max_contacts_reported",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_omit_force_integration",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_ray_pickable",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_space",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_state",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cone_twist_joint_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cone_twist_joint_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "free_rid",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_get_flag",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_get_param",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_set_flag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_process_info",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "process_info",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_get_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_set_flag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_cone_twist",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ref_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_ref_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_generic_6dof",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ref_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_ref_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_hinge",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "hinge_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "hinge_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_pin",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_A",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_B",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_slider",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ref_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_ref_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_solver_priority",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_set_solver_priority",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "priority",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_get_local_A",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_get_local_B",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_set_local_A",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_A",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_set_local_B",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_B",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_active",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_set_data",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slider_joint_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slider_joint_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "space_get_direct_state",
          "description": "",
          "return_type": "PhysicsDirectSpaceState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_is_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_active",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "JOINT_PIN",
          "value": "0",
          "description": ""
        },
        {
          "name": "JOINT_HINGE",
          "value": "1",
          "description": ""
        },
        {
          "name": "JOINT_SLIDER",
          "value": "2",
          "description": ""
        },
        {
          "name": "JOINT_CONE_TWIST",
          "value": "3",
          "description": ""
        },
        {
          "name": "JOINT_6DOF",
          "value": "4",
          "description": ""
        },
        {
          "name": "PIN_JOINT_BIAS",
          "value": "0",
          "description": ""
        },
        {
          "name": "PIN_JOINT_DAMPING",
          "value": "1",
          "description": ""
        },
        {
          "name": "PIN_JOINT_IMPULSE_CLAMP",
          "value": "2",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_BIAS",
          "value": "0",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_UPPER",
          "value": "1",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_LOWER",
          "value": "2",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_BIAS",
          "value": "3",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_SOFTNESS",
          "value": "4",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_RELAXATION",
          "value": "5",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_MOTOR_TARGET_VELOCITY",
          "value": "6",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_MOTOR_MAX_IMPULSE",
          "value": "7",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_FLAG_USE_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_FLAG_ENABLE_MOTOR",
          "value": "1",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_UPPER",
          "value": "0",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_LOWER",
          "value": "1",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION",
          "value": "3",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_DAMPING",
          "value": "4",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_MOTION_SOFTNESS",
          "value": "5",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_MOTION_RESTITUTION",
          "value": "6",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_MOTION_DAMPING",
          "value": "7",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS",
          "value": "8",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION",
          "value": "9",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING",
          "value": "10",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_UPPER",
          "value": "11",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_LOWER",
          "value": "12",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS",
          "value": "13",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION",
          "value": "14",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_DAMPING",
          "value": "15",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS",
          "value": "16",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION",
          "value": "17",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_MOTION_DAMPING",
          "value": "18",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS",
          "value": "19",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION",
          "value": "20",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING",
          "value": "21",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_MAX",
          "value": "22",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_SWING_SPAN",
          "value": "0",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_TWIST_SPAN",
          "value": "1",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_BIAS",
          "value": "2",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_SOFTNESS",
          "value": "3",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_RELAXATION",
          "value": "4",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_LOWER_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_UPPER_LIMIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_RESTITUTION",
          "value": "3",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_DAMPING",
          "value": "4",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_LOWER_LIMIT",
          "value": "5",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_UPPER_LIMIT",
          "value": "6",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS",
          "value": "7",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_DAMPING",
          "value": "8",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_RESTITUTION",
          "value": "9",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_FORCE_LIMIT",
          "value": "10",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_ERP",
          "value": "11",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY",
          "value": "12",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT",
          "value": "13",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_FLAG_ENABLE_MOTOR",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHAPE_PLANE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHAPE_RAY",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHAPE_SPHERE",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHAPE_BOX",
          "value": "3",
          "description": ""
        },
        {
          "name": "SHAPE_CAPSULE",
          "value": "4",
          "description": ""
        },
        {
          "name": "SHAPE_CONVEX_POLYGON",
          "value": "5",
          "description": ""
        },
        {
          "name": "SHAPE_CONCAVE_POLYGON",
          "value": "6",
          "description": ""
        },
        {
          "name": "SHAPE_HEIGHTMAP",
          "value": "7",
          "description": ""
        },
        {
          "name": "SHAPE_CUSTOM",
          "value": "8",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY",
          "value": "0",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY_VECTOR",
          "value": "1",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY_IS_POINT",
          "value": "2",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE",
          "value": "3",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION",
          "value": "4",
          "description": ""
        },
        {
          "name": "AREA_PARAM_LINEAR_DAMP",
          "value": "5",
          "description": ""
        },
        {
          "name": "AREA_PARAM_ANGULAR_DAMP",
          "value": "6",
          "description": ""
        },
        {
          "name": "AREA_PARAM_PRIORITY",
          "value": "7",
          "description": ""
        },
        {
          "name": "AREA_SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "description": "This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "description": "This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "description": "This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one."
        },
        {
          "name": "BODY_MODE_STATIC",
          "value": "0",
          "description": ""
        },
        {
          "name": "BODY_MODE_KINEMATIC",
          "value": "1",
          "description": ""
        },
        {
          "name": "BODY_MODE_RIGID",
          "value": "2",
          "description": ""
        },
        {
          "name": "BODY_MODE_CHARACTER",
          "value": "3",
          "description": ""
        },
        {
          "name": "BODY_PARAM_BOUNCE",
          "value": "0",
          "description": ""
        },
        {
          "name": "BODY_PARAM_FRICTION",
          "value": "1",
          "description": ""
        },
        {
          "name": "BODY_PARAM_MASS",
          "value": "2",
          "description": ""
        },
        {
          "name": "BODY_PARAM_GRAVITY_SCALE",
          "value": "3",
          "description": ""
        },
        {
          "name": "BODY_PARAM_ANGULAR_DAMP",
          "value": "5",
          "description": ""
        },
        {
          "name": "BODY_PARAM_LINEAR_DAMP",
          "value": "4",
          "description": ""
        },
        {
          "name": "BODY_PARAM_MAX",
          "value": "6",
          "description": ""
        },
        {
          "name": "BODY_STATE_TRANSFORM",
          "value": "0",
          "description": ""
        },
        {
          "name": "BODY_STATE_LINEAR_VELOCITY",
          "value": "1",
          "description": ""
        },
        {
          "name": "BODY_STATE_ANGULAR_VELOCITY",
          "value": "2",
          "description": ""
        },
        {
          "name": "BODY_STATE_SLEEPING",
          "value": "3",
          "description": ""
        },
        {
          "name": "BODY_STATE_CAN_SLEEP",
          "value": "4",
          "description": ""
        },
        {
          "name": "AREA_BODY_ADDED",
          "value": "0",
          "description": ""
        },
        {
          "name": "AREA_BODY_REMOVED",
          "value": "1",
          "description": ""
        },
        {
          "name": "INFO_ACTIVE_OBJECTS",
          "value": "0",
          "description": ""
        },
        {
          "name": "INFO_COLLISION_PAIRS",
          "value": "1",
          "description": ""
        },
        {
          "name": "INFO_ISLAND_COUNT",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsServerSW": {
      "name": "PhysicsServerSW",
      "inherits": "PhysicsServer",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsShapeQueryParameters": {
      "name": "PhysicsShapeQueryParameters",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_exclude",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_object_type_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shape_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "set_exclude",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exclude",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_object_type_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object_type_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Shape",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_rid",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsShapeQueryResult": {
      "name": "PhysicsShapeQueryResult",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Result of a shape query in Physics2DServer.",
      "description": "",
      "methods": [
        {
          "name": "get_result_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_result_object",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PinJoint": {
      "name": "PinJoint",
      "inherits": "Joint",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_BIAS",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_DAMPING",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_IMPULSE_CLAMP",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "PinJoint2D": {
      "name": "PinJoint2D",
      "inherits": "Joint2D",
      "category": "Core",
      "brief_description": "Pin Joint for 2D Shapes.",
      "description": "Pin Joint for 2D Rigid Bodies. It pins 2 bodies (rigid or static) together, or a single body to a fixed position in space.",
      "methods": [
        {
          "name": "get_softness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_softness",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "softness",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Plane": {
      "name": "Plane",
      "category": "Built-In Types",
      "brief_description": "Plane in hessian form.",
      "description": "Plane represents a normalized plane equation. Basically, \"normal\" is the normal of the plane (a,b,c normalized), and \"d\" is the distance from the origin to the plane (in the direction of \"normal\"). \"Over\" or \"Above\" the plane is considered the side of the plane towards where the normal is pointing.",
      "methods": [
        {
          "name": "Plane",
          "description": "Creates a plane from the three parameters \"a\", \"b\", \"c\" and \"d\".",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "b",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "c",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "d",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Plane",
          "description": "Creates a plane from three points.",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "v2",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "v3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Plane",
          "description": "Creates a plane from the normal and the plane's distance to the origin.",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "d",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "center",
          "description": "Returns the center of the plane.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "distance_to",
          "description": "Returns the shortest distance from the plane to the position \"point\".",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_any_point",
          "description": "Returns a point on the plane.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "description": "Returns true if \"point\" is inside the plane (by a very minimum threshold).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "epsilon",
              "type": "float",
              "default_value": "0.00001"
            }
          ]
        },
        {
          "name": "intersect_3",
          "description": "Returns the intersection point of the three planes \"b\", \"c\" and this plane. If no intersection is found null is returned.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Plane",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "c",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_ray",
          "description": "Returns the intersection point of a ray consisting of the position \"from\" and the direction normal \"dir\" with this plane. If no intersection is found null is returned.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dir",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_segment",
          "description": "Returns the intersection point of a segment from position \"begin\" to position \"end\" with this plane. If no intersection is found null is returned.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "begin",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_point_over",
          "description": "Returns true if \"point\" is located above the plane.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "normalized",
          "description": "Returns a copy of the plane, normalized.",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "project",
          "description": "Returns the orthogonal projection of point \"p\" into a point in the plane.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "d",
          "type": "float",
          "description": ""
        },
        {
          "name": "normal",
          "type": "Vector3",
          "description": ""
        },
        {
          "name": "x",
          "type": "float",
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "description": ""
        },
        {
          "name": "z",
          "type": "float",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PlaneShape": {
      "name": "PlaneShape",
      "inherits": "Shape",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_plane",
          "qualifiers": "const",
          "description": "",
          "return_type": "Plane",
          "arguments": []
        },
        {
          "name": "set_plane",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plane",
              "type": "Plane",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Polygon2D": {
      "name": "Polygon2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "2D polygon representation",
      "description": "A Polygon2D is defined by a set of n vertices connected together by line segments, meaning that the vertex 1 will be connected with vertex 2, vertex 2 with vertex 3 ..., vertex n-1 with vertex n and vertex n with vertex 1 in order to close the loop and define a polygon.",
      "methods": [
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Return the polygon fill color.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_invert",
          "qualifiers": "const",
          "description": "Return whether this polygon is inverted or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_invert_border",
          "qualifiers": "const",
          "description": "Return the added padding around the bounding box.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the offset for the polygon vertices.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "qualifiers": "const",
          "description": "Return the set of vertices that defines this polygon.",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Return the polygon texture",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_texture_offset",
          "qualifiers": "const",
          "description": "Return the polygon texture offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_texture_rotation",
          "qualifiers": "const",
          "description": "Return the rotation in radians of the texture polygon.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_texture_scale",
          "qualifiers": "const",
          "description": "Return the uv coordinate multiplier.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_uv",
          "qualifiers": "const",
          "description": "Return the texture coordinates associated with every vertex of the polygon.",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "get_vertex_colors",
          "qualifiers": "const",
          "description": "Return the list of vertex colors.",
          "return_type": "ColorArray",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "Set the polygon fill color. If the polygon has a texture defined, the defined texture will be multiplied by the polygon fill color. This, also, is the default color for those vertices that are not defined by [method get_vertex_colors].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_invert",
          "description": "Set the polygon as the defined polygon bounding box minus the defined polygon (the defined polygon will appear as a hole on the square that contains the defined polygon).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "invert",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_invert_border",
          "description": "Add extra padding around the bounding box, making it bigger. Too small a value can make the polygon triangulate strangely, due to numerical imprecision.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "invert_border",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the an offset that will be added to the vertices' position. E.g. if the offset is set to (10,10) then all the polygon points will move 10 units to the right and 10 units to the bottom.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_polygon",
          "description": "Define the set of vertices that will represent the polygon.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "Set the polygon texture.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_offset",
          "description": "Set the offset of the polygon texture. Initially the texture will appear anchored to the polygon position, the offset is used to move the texture location away from that point (notice that the texture origin is set to its top left corner, so when offset is 0,0 the top left corner of the texture is at the polygon position), for example setting the offset to 10, 10 will move the texture 10 units to the left and 10 units to the top.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_rotation",
          "description": "Set the amount of rotation of the polygon texture, [code]texture_rotation[/code] is specified in radians and clockwise rotation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_rotation",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_scale",
          "description": "Set the value that will multiply the uv coordinates ([method get_uv]) when applying the texture. Larger values make the texture smaller, and vice versa.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv",
          "description": "Set the texture coordinates for every vertex of the polygon. There should be one uv vertex for every vertex in the polygon. If there are less, the undefined ones will be assumed to be (0,0). Extra uv vertices are ignored.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_colors",
          "description": "Set the color for each vertex of the polygon. There should be one color for every vertex in the polygon. If there are less, the undefined ones will be assumed to be [method get_color]. Extra color entries are ignored.\n\tColors are interpolated between vertices, resulting in smooth gradients when they differ.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertex_colors",
              "type": "ColorArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PolygonPathFinder": {
      "name": "PolygonPathFinder",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "find_path",
          "description": "",
          "return_type": "Vector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bounds",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_closest_point",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_intersections",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_penalty",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_point_inside",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_penalty",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "penalty",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "setup",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "Vector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "connections",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Popup": {
      "name": "Popup",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Base container control for popups and dialogs.",
      "description": "Popup is a base [Control] used to show dialogs and popups. It's a subwindow and modal by default (see [Control]) and has helpers for custom popup behavior.",
      "methods": [
        {
          "name": "is_exclusive",
          "qualifiers": "const",
          "description": "Returns whether the popup will hide other popups when shown on the screen.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "popup",
          "description": "Popup (show the control in modal form).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "popup_centered",
          "description": "Popup (show the control in modal form) in the center of the screen, at the current size, or at a size determined by \"size\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            }
          ]
        },
        {
          "name": "popup_centered_minsize",
          "description": "Popup (show the control in modal form) in the center of the screen, ensuring the size is never smaller than [code]minsize[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "minsize",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            }
          ]
        },
        {
          "name": "popup_centered_ratio",
          "description": "Popup (show the control in modal form) in the center of the screen, scaled at a ratio of size of the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": "0.75"
            }
          ]
        },
        {
          "name": "set_exclusive",
          "description": "Make the popup hide other popups when shown on the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "about_to_show",
          "description": "This signal is emitted when a popup is about to be shown. (often used in [PopupMenu] for clearing the list of options and creating a new one according to the current context).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "popup_hide",
          "description": "This signal is emitted when a popup is hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_POST_POPUP",
          "value": "80",
          "description": "Notification sent right after the popup is shown."
        },
        {
          "name": "NOTIFICATION_POPUP_HIDE",
          "value": "81",
          "description": "Notification sent right after the popup is hidden."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "PopupDialog": {
      "name": "PopupDialog",
      "inherits": "Popup",
      "category": "Core",
      "brief_description": "Base class for Popup Dialogs.",
      "description": "PopupDialog is a base class for popup dialogs, along with [WindowDialog].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PopupMenu": {
      "name": "PopupMenu",
      "inherits": "Popup",
      "category": "Core",
      "brief_description": "PopupMenu displays a list of options.",
      "description": "PopupMenu is the typical Control that displays a list of options. They are popular in toolbars or context menus.",
      "methods": [
        {
          "name": "add_check_item",
          "description": "Add a new checkable item with text \"label\". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_check_shortcut",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_icon_check_item",
          "description": "Add a new checkable item with text \"label\" and icon \"texture\". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_icon_check_shortcut",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_icon_item",
          "description": "Add a new item with text \"label\" and icon \"texture\". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_icon_shortcut",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_item",
          "description": "Add a new item with text \"label\". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_separator",
          "description": "Add a separator between items. Separators also occupy an index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "add_shortcut",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_submenu_item",
          "description": "Adds an item with a submenu. The submenu is the name of a child PopupMenu node that would be shown when the item is clicked. An id can optionally be provided, but if is isn't provided, one will be created from the index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "submenu",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the popup menu, in effect removing all items.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_item_ID",
          "qualifiers": "const",
          "description": "Return the id of the item at index \"idx\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_accelerator",
          "qualifiers": "const",
          "description": "Return the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_count",
          "qualifiers": "const",
          "description": "Return the amount of items.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_icon",
          "qualifiers": "const",
          "description": "Return the icon of the item at index \"idx\".",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_index",
          "qualifiers": "const",
          "description": "Find and return the index of the item containing a given id.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_metadata",
          "qualifiers": "const",
          "description": "Return the metadata of an item, which might be of any type. You can set it with [method set_item_metadata], which provides a simple way of assigning context data to items.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_shortcut",
          "qualifiers": "const",
          "description": "",
          "return_type": "ShortCut",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_submenu",
          "qualifiers": "const",
          "description": "Return the submenu name of the item at index \"idx\".",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_text",
          "qualifiers": "const",
          "description": "Return the text of the item at index \"idx\".",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_tooltip",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_hide_on_item_selection",
          "description": "Returns a boolean that indicates whether or not the PopupMenu will hide on item selection.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_item_checkable",
          "qualifiers": "const",
          "description": "Return whether the item at index \"idx\" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_checked",
          "qualifiers": "const",
          "description": "Return the checkstate status of the item at index \"idx\".",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_disabled",
          "qualifiers": "const",
          "description": "Return whether the item at index \"idx\" is disabled. When it is disabled it can't be selected, or its action invoked.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_separator",
          "qualifiers": "const",
          "description": "Return whether the item is a seperator. If it is, it would be displayed as a line.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_item",
          "description": "Removes the item at index \"idx\" from the menu. Note that the indexes of items after the removed item are going to be shifted by one.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hide_on_item_selection",
          "description": "Sets whether or not the PopupMenu will hide on item selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_ID",
          "description": "Set the id of the item at index \"idx\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_accelerator",
          "description": "Set the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "accel",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_as_checkable",
          "description": "Set whether the item at index \"idx\" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_as_separator",
          "description": "Mark the item at index \"idx\" as a seperator, which means that it would be displayed as a mere line.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_checked",
          "description": "Set the checkstate status of the item at index \"idx\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "checked",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_disabled",
          "description": "Sets whether the item at index \"idx\" is disabled or not. When it is disabled it can't be selected, or its action invoked.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon",
          "description": "Set the icon of the item at index \"idx\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_metadata",
          "description": "Sets the metadata of an item, which might be of any type. You can later get it with [method get_item_metadata], which provides a simple way of assigning context data to items.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_shortcut",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_submenu",
          "description": "Sets the submenu of the item at index \"idx\". The submenu is the name of a child PopupMenu node that would be shown when the item is clicked.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "submenu",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_text",
          "description": "Set the text of the item at index \"idx\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_tooltip",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "toggle_item_checked",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "item_pressed",
          "description": "This even is emitted when an item is pressed or its accelerator is activated. The id of the item is returned if it exists, else the index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ID",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_accel",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "panel_disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "separator",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "submenu",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "unchecked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "PopupPanel": {
      "name": "PopupPanel",
      "inherits": "Popup",
      "category": "Core",
      "brief_description": "Class for displaying popups with a panel background.",
      "description": "Class for displaying popups with a panel background. In some cases it might be simpler to use than [Popup], since it provides a configurable background. If you are making windows, better check [WindowDialog].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "Portal": {
      "name": "Portal",
      "inherits": "VisualInstance",
      "category": "Core",
      "brief_description": "Portals provide virtual openings to rooms.",
      "description": "Portals provide virtual openings to [VisualInstance] nodes, so cameras can look at them from the outside. Note that portals are a visibility optimization technique, and are in no way related to the game of the same name (as in, they are not used for teleportation). For more information on how rooms and portals work, see [VisualInstance]. Portals are represented as 2D convex polygon shapes (in the X,Y local plane), and are placed on the surface of the areas occupied by a [VisualInstance], to indicate that the room can be accessed or looked-at through them. If two rooms are next to each other, and two similar portals in each of them share the same world position (and are parallel and opposed to each other), they will automatically \"connect\" and form \"doors\" (for example, the portals that connect a kitchen to a living room are placed in the door they share). Portals must always have a [VisualInstance] node as a parent, grandparent or far parent, or else they will not be active.",
      "methods": [
        {
          "name": "get_connect_range",
          "qualifiers": "const",
          "description": "Return the range for auto-connecting two portals from different rooms sharing the same space.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_disable_distance",
          "qualifiers": "const",
          "description": "Return the distance threshold for disabling the portal. Every time that the portal goes beyond \"distance\", it disables itself, becoming the opaque color (see [method set_disabled_color]).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_disabled_color",
          "qualifiers": "const",
          "description": "Return the color for when the portal goes beyond the disable distance (see [method set_disable_distance]) and becomes disabled.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_shape",
          "qualifiers": "const",
          "description": "Return the portal shape. The shape is an array of [Vector2] points, representing a convex polygon in the X,Y plane.",
          "return_type": "Vector2Array",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "Return whether the portal is active. When disabled it causes the parent [VisualInstance] to not be visible any longer when looking through the portal.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_connect_range",
          "description": "Set the range for auto-connecting two portals from different rooms sharing the same space.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "range",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disable_distance",
          "description": "Set the distance threshold for disabling the portal. Every time that the portal goes beyond \"distance\", it disables itself, becoming the opaque color (see [method set_disabled_color]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disabled_color",
          "description": "When the portal goes beyond the disable distance (see [method set_disable_distance]), it becomes opaque and displayed with color \"color\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled",
          "description": "Enable the portal (it is enabled by default though), disabling it will cause the parent [VisualInstance] to not be visible any longer when looking through the portal.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "Set the portal shape. The shape is an array of [Vector2] points, representing a convex polygon in the X,Y plane.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Position2D": {
      "name": "Position2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Generic 2D Position hint for editing.",
      "description": "Generic 2D Position hint for editing. It's just like a plain [Node2D] but displays as a cross in the 2D-Editor at all times.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Position3D": {
      "name": "Position3D",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "Generic 3D Position hint for editing",
      "description": "Generic 3D Position hint for editing. It's just like a plain [Spatial] but displays as a cross in the 3D-Editor at all times.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ProgressBar": {
      "name": "ProgressBar",
      "inherits": "Range",
      "category": "Core",
      "brief_description": "General purpose progress bar.",
      "description": "General purpose progress bar. Shows fill percentage from right to left.",
      "methods": [
        {
          "name": "is_percent_visible",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_percent_visible",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "fg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_shadow",
          "type": "Color",
          "description": ""
        }
      ]
    },
    "ProximityGroup": {
      "name": "ProximityGroup",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "General purpose proximity-detection node.",
      "description": "General purpose proximity-detection node.",
      "methods": [
        {
          "name": "broadcast",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parameters",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_grid_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "set_dispatch_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_grid_radius",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_group_name",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "broadcast",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parameters",
              "type": "Array",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Quad": {
      "name": "Quad",
      "inherits": "GeometryInstance",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_axis",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "is_centered",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_axis",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_centered",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "centered",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Quat": {
      "name": "Quat",
      "category": "Built-In Types",
      "brief_description": "Quaternion.",
      "description": "Quaternion is a 4 dimensional vector that is used to represent a rotation. It mainly exists to perform SLERP (spherical-linear interpolation) between to rotations obtained by a Matrix3 cheaply. Adding quaternions also cheaply adds the rotations, however quaternions need to be often normalized, or else they suffer from precision issues.",
      "methods": [
        {
          "name": "Quat",
          "description": "",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "w",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Quat",
          "description": "",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "angle",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Quat",
          "description": "",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Matrix3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubic_slerp",
          "description": "",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pre_a",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "post_b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dot",
          "description": "Returns the dot product between two quaternions.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the quaternion (applies to the inverse rotation too).",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length",
          "description": "Returns the length of the quaternion.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length_squared",
          "description": "Returns the length of the quaternion, squared.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "normalized",
          "description": "Returns a copy of the quaternion, normalized to unit length.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "slerp",
          "description": "Perform a spherical-linear interpolation with another quaternion.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slerpni",
          "description": "",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "w",
          "type": "float",
          "description": ""
        },
        {
          "name": "x",
          "type": "float",
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "description": ""
        },
        {
          "name": "z",
          "type": "float",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "RID": {
      "name": "RID",
      "category": "Built-In Types",
      "brief_description": "Handle for a [Resource]'s unique ID.",
      "description": "The RID type is used to access the unique integer ID of a resource.  They are opaque, so they do not grant access to the associated resource by themselves. They are used by and with the low-level Server classes such as [VisualServer].",
      "methods": [
        {
          "name": "RID",
          "description": "Create a new RID instance with the ID of a given resource. When not handed a valid resource, silently stores the unused ID 0.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_id",
          "description": "Retrieve the ID of the referenced resource.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Range": {
      "name": "Range",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Abstract base class for range-based controls.",
      "description": "Range is a base class for [Control] nodes that change a floating point [i]value[/i] between a [i]minimum[/i] and a [i]maximum[/i], using [i]step[/i] and [i]page[/i], for example a [ScrollBar].",
      "methods": [
        {
          "name": "get_max",
          "qualifiers": "const",
          "description": "Return the maximum value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_min",
          "qualifiers": "const",
          "description": "Return the minimum value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_page",
          "qualifiers": "const",
          "description": "Return the page size, if page is 0, paging is disabled.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_step",
          "qualifiers": "const",
          "description": "Return the stepping, if step is 0, stepping is disabled.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_unit_value",
          "qualifiers": "const",
          "description": "Return value mapped to 0 to 1 (unit) range.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_val",
          "qualifiers": "const",
          "description": "Return the current value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_rounded_values",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_unit_value_exp",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_exp_unit_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "maximum",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_min",
          "description": "Set minimum value, clamped range value to it if it's less.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "minimum",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_page",
          "description": "Set page size. Page is mainly used for scrollbars or anything that controls text scrolling.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pagesize",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rounded_values",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_step",
          "description": "Set step value. If step is 0, stepping will be disabled.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_unit_value",
          "description": "Set value mapped to 0 to 1 (unit) range, it will then be converted to the actual value within min and max.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_val",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "share",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unshare",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "changed",
          "description": "This signal is emitted when min, max, range or step change.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "value_changed",
          "description": "This signal is emitted when value changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RawArray": {
      "name": "RawArray",
      "category": "Built-In Types",
      "brief_description": "Raw byte array.",
      "description": "Raw byte array. Contains bytes. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "RawArray",
          "description": "Create from a generic array.",
          "return_type": "RawArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [RawArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_string_from_ascii",
          "description": "Returns a copy of the array's contents formatted as String. Fast alternative to get_string_from_utf8(), assuming the content is ASCII-only (unlike the UTF-8 function, this function maps every byte to a character in the string, so any multibyte sequence will be torn apart).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_string_from_utf8",
          "description": "Returns a copy of the array's contents formatted as String, assuming the array is formatted as UTF-8. Slower than get_string_from_ascii(), but works for UTF-8. Usually you should prefer this function over get_string_from_ascii() to support international input.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append an element at the end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the [RawArray]. If larger than the current size it will reserve some space beforehand, and if it is smaller it will cut off the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the byte at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RayCast": {
      "name": "RayCast",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "Query the closest object intersecting a ray.",
      "description": "A RayCast represents a line from its origin to its destination position [code]cast_to[/code], it is used to query the 3D space in order to find the closest object intersecting with the ray.\n\n\t\tRayCast can ignore some objects by adding them to the exception list via [code]add_exception[/code], setting proper filtering with layers, or by filtering object types with type masks.\n\n\t\tOnly enabled raycasts will be able to query the space and report collisions!\n\n\t\tRayCast calculates intersection every fixed frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between fixed frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.",
      "methods": [
        {
          "name": "add_exception",
          "description": "Adds a collision exception so the ray does not report collisions with the specified [code]node[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_exception_rid",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_exceptions",
          "description": "Removes all collision exception for this ray.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_raycast_update",
          "description": "Updates the collision information in case if this object's properties changed during the current frame (for example position, rotation or the cast_point). Note, [code]set_enabled[/code] is not required for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cast_to",
          "qualifiers": "const",
          "description": "Return the destination point of this ray object.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "Return the closest object the ray is pointing to. Note that this does not consider the length of the vector, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "Returns the collision shape of the closest object the ray is pointing to.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "Returns the normal of the intersecting object shape face containing the collision point.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_collision_point",
          "qualifiers": "const",
          "description": "Returns collision point. This point is in [b]global[/b] coordinate system.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "Returns the layer mask for this ray.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_type_mask",
          "qualifiers": "const",
          "description": "Returns the type mask (types of objects to detect) for this ray. The value is a sum (bitwise OR'd) of constants available for [PhysicsDirectSpaceState].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_colliding",
          "qualifiers": "const",
          "description": "Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "Returns whether this raycast is enabled or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove_exception",
          "description": "Removes a collision exception so the ray does report collisions with the specified [code]node[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_exception_rid",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cast_to",
          "description": "Sets to which point ray should be casted. This point is in [b]local[/b] coordinate system.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled",
          "description": "Enables the RayCast2D. Only enabled raycasts will be able to query the space and report collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "Set the mask to filter objects. Only objects with at least the same mask element set will be detected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_type_mask",
          "description": "Set the types of objects to detect. For [code]mask[/code] use a logic sum (OR operation) of constants defined in [PhysicsDirectSpaceState], eg. [code]PhysicsDirectSpaceState.TYPE_MASK_STATIC_BODY | PhysicsDirectSpaceState.TYPE_MASK_KINEMATIC_BODY[/code] to detect only those two types.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RayCast2D": {
      "name": "RayCast2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Query the closest object intersecting a ray.",
      "description": "A RayCast2D represents a line from its origin to its destination position [code]cast_to[/code], it is used to query the 2D space in order to find the closest object intersecting with the ray.\n\n\t\tRayCast2D can ignore some objects by adding them to the exception list via [code]add_exception[/code], setting proper filtering with layers, or by filtering object types with type masks.\n\n\t\tOnly enabled raycasts will be able to query the space and report collisions!\n\n\t\tRayCast2D calculates intersection every fixed frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between fixed frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.",
      "methods": [
        {
          "name": "add_exception",
          "description": "Adds a collision exception so the ray does not report collisions with the specified [code]node[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_exception_rid",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_exceptions",
          "description": "Removes all collision exception for this ray.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_raycast_update",
          "description": "Updates the collision information in case if this object's properties changed during the current frame (for example position, rotation or the cast_point). Note, [code]set_enabled[/code] is not required for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cast_to",
          "qualifiers": "const",
          "description": "Return the destination point of this ray object.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "Return the closest object the ray is pointing to. Note that this does not consider the length of the vector, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "Returns the collision shape of the closest object the ray is pointing to.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "Returns the normal of the intersecting object shape face containing the collision point.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collision_point",
          "qualifiers": "const",
          "description": "Returns the collision point in which the ray intersects the closest object. This point is in [b]global[/b] coordinate system.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "Returns the layer mask for this ray.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_type_mask",
          "qualifiers": "const",
          "description": "Returns the type mask (types of objects to detect) for this ray. The value is a sum (bitwise OR'd) of constants available for [Physics2DDirectSpaceState].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_colliding",
          "qualifiers": "const",
          "description": "Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "Returns whether this raycast is enabled or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove_exception",
          "description": "Removes a collision exception so the ray does report collisions with the specified [code]node[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_exception_rid",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cast_to",
          "description": "Sets the ray destination point, so that the ray will test from the ray's origin to [code]local_point[/code]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled",
          "description": "Enables the RayCast2D. Only enabled raycasts will be able to query the space and report collisions.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "Set the mask to filter objects. Only objects with at least the same mask element set will be detected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_type_mask",
          "description": "Set the types of objects to detect. For [code]mask[/code] use a logic sum (OR operation) of constants defined in [Physics2DDirectSpaceState], eg. [code]Physics2DDirectSpaceState.TYPE_MASK_STATIC_BODY | Physics2DDirectSpaceState.TYPE_MASK_KINEMATIC_BODY[/code] to detect only those two types.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RayShape": {
      "name": "RayShape",
      "inherits": "Shape",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_length",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RayShape2D": {
      "name": "RayShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "brief_description": "Ray 2D shape resource for physics.",
      "description": "Ray 2D shape resource for physics. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.",
      "methods": [
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the length of the ray.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_length",
          "description": "Set the length of the ray.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RealArray": {
      "name": "RealArray",
      "category": "Built-In Types",
      "brief_description": "Real Array .",
      "description": "Real Array. Array of floating point values. Can only contain floats. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "RealArray",
          "description": "Create from a generic array.",
          "return_type": "RealArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [RealArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "RealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append an element at the end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the [RealArray]. If larger than the current size it will reserve some space beforehand, and if it is smaller it will cut off the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the float at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Rect2": {
      "name": "Rect2",
      "category": "Built-In Types",
      "brief_description": "2D Axis-aligned bounding box.",
      "description": "Rect2 provides an 2D Axis-Aligned Bounding Box. It consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.",
      "methods": [
        {
          "name": "Rect2",
          "description": "Construct a [Rect2] by position and size.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Rect2",
          "description": "Construct a [Rect2] by x, y, width and height.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "width",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clip",
          "description": "Returns the intersection of this [Rect2] and b.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "encloses",
          "description": "Returns true if this [Rect2] completely encloses another one.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "expand",
          "description": "Return this [Rect2] expanded to include a given point.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_area",
          "description": "Get the area of the [Rect2].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "grow",
          "description": "Return a copy of the [Rect2] grown a given amount of units towards all the sides.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "grow_individual",
          "description": "",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "top",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "right",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": " bottom",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "grow_margin",
          "description": "",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_no_area",
          "description": "Return true if the [Rect2] is flat or empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "description": "Return true if the [Rect2] contains a point.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects",
          "description": "Return true if the [Rect2] overlaps with another.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "merge",
          "description": "Combine this [Rect2] with another, a larger one is returned that contains both.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "end",
          "type": "Vector2",
          "description": "Ending corner."
        },
        {
          "name": "pos",
          "type": "Vector2",
          "description": "Position (starting corner)."
        },
        {
          "name": "size",
          "type": "Vector2",
          "description": "Size from position to end."
        }
      ],
      "theme_properties": []
    },
    "RectangleShape2D": {
      "name": "RectangleShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "brief_description": "Rectangle Shape for 2D Physics.",
      "description": "Rectangle Shape for 2D Physics. This shape is useful for modeling box-like 2D objects.",
      "methods": [
        {
          "name": "get_extents",
          "qualifiers": "const",
          "description": "Return the half extents, the actual width and height of this shape is twice the half extents.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_extents",
          "description": "Set the half extents, the actual width and height of this shape is twice the half extents.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Reference": {
      "name": "Reference",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Base class for anything that keeps a reference count.",
      "description": "Base class for anything that keeps a reference count. Resource and many other helper objects inherit this. References keep an internal reference counter so they are only released when no longer in use.",
      "methods": [
        {
          "name": "init_ref",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reference",
          "description": "Increase the internal reference counter. Use this only if you really know what you are doing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unreference",
          "description": "Decrease the internal reference counter. Use this only if you really know what you are doing.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ReferenceFrame": {
      "name": "ReferenceFrame",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Reference frame for GUI.",
      "description": "Reference frame for GUI. It's just like an empty control, except a red box is displayed while editing around its size at all times.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "border",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "RegEx": {
      "name": "RegEx",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Simple regular expression matcher.",
      "description": "Class for finding text patterns in a string using regular expressions. It can not perform replacements. Regular expressions are a way to define patterns of text to be searched. Details on writing patterns are too long to explain here but the Internet is full of tutorials and detailed explanations.\n\t\tOnce created, the RegEx object needs to be compiled with the pattern before it can be used. The pattern must be escaped first for gdscript before it is escaped for the expression. For example:\n\t\t[code]var exp = RegEx.new()[/code]\n\t\t[code]exp.compile(\"\\\\d+\")[/code]\n\t\twould be read by RegEx as [code]\\d+[/code]\n\t\tSimilarly:\n\t\t[code]exp.compile(\"\\\"(?:\\\\\\\\.|[^\\\"])*\\\"\")[/code]\n\t\twould be read as [code]\"(?:\\\\.|[^\"])*\"[/code]\n\t\tCurrently supported features:\n\t\t* Capturing [code]()[/code] and non-capturing [code](?:)[/code] groups\n\t\t* Any character [code].[/code]\n\t\t* Shorthand character classes [code]\\w \\W \\s \\S \\d \\D[/code]\n\t\t* User-defined character classes such as [code][A-Za-z][/code]\n\t\t* Simple quantifiers [code]?[/code], [code]*[/code] and [code]+[/code]\n\t\t* Range quantifiers [code]{x,y}[/code]\n\t\t* Lazy (non-greedy) quantifiers [code]*?[/code]\n\t\t* Beginning [code]^[/code] and end [code]$[/code] anchors\n\t\t* Alternation [code]|[/code]\n\t\t* Backreferences [code]\\1[/code] and [code]\\g{1}[/code]\n\t\t* POSIX character classes [code][[:alnum:]][/code]\n\t\t* Lookahead [code](?=)[/code], [code](?!)[/code] and lookbehind [code](?<=)[/code], [code](?<!)[/code]\n\t\t* ASCII [code]\\xFF[/code] and Unicode [code]\\uFFFF[/code] code points (in a style similar to Python)\n\t\t* Word boundaries [code]\\b[/code], [code]\\B[/code]",
      "methods": [
        {
          "name": "clear",
          "description": "This method resets the state of the object, as it was freshly created. Namely, it unassigns the regular expression of this object, and forgets all captures made by the last [method find].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "compile",
          "description": "Compiles and assign the regular expression pattern to use. The limit on the number of capturing groups can be specified or made unlimited if negative.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pattern",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "capture",
              "type": "int",
              "default_value": "9"
            }
          ]
        },
        {
          "name": "find",
          "qualifiers": "const",
          "description": "This method tries to find the pattern within the string, and returns the position where it was found. It also stores any capturing group (see [method get_capture]) for further retrieval.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "start",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "end",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_capture",
          "qualifiers": "const",
          "description": "Returns a captured group. A captured group is the part of a string that matches a part of the pattern delimited by parentheses (unless they are non-capturing parentheses [i](?:)[/i]).",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "capture",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_capture_count",
          "qualifiers": "const",
          "description": "Returns the number of capturing groups. A captured group is the part of a string that matches a part of the pattern delimited by parentheses (unless they are non-capturing parentheses [i](?:)[/i]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_capture_start",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "capture",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_captures",
          "qualifiers": "const",
          "description": "Return a list of all the captures made by the regular expression.",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "Returns whether this object has a valid regular expression assigned.",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RemoteTransform2D": {
      "name": "RemoteTransform2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_remote_node",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "set_remote_node",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RenderTargetTexture": {
      "name": "RenderTargetTexture",
      "inherits": "Texture",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Resource": {
      "name": "Resource",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Base class for all resources.",
      "description": "Resource is the base class for all resource types. Resources are primarily data containers. They are reference counted and freed when no longer in use. They are also loaded only once from disk, and further attempts to load the resource will return the same reference (all this in contrast to a [Node], which is not reference counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a [Node] or another resource.",
      "methods": [
        {
          "name": "duplicate",
          "description": "",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "subresources",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_import_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Return the name of the resources, any name is valid (it doesn't have to be unique). Name is for descriptive purposes only.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_path",
          "qualifiers": "const",
          "description": "Return the path of the resource. This is useful mainly for editors when saving/loading, and shouldn't be changed by anything else.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "Return the RID of the resource (or an empty RID). Many resources (such as [Texture], [Mesh], etc) are high level abstractions of resources stored in a server, so this function will return the original RID.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "set_import_metadata",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "metadata",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_name",
          "description": "Set the name of the resources, any name is valid (it doesn't have to be unique). Name is for descriptive purposes only.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_path",
          "description": "Set the path of the resource. This is useful mainly for editors when saving/loading, and shouldn't be changed by anything else. Fails if another [Resource] already has path \"path\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "take_over_path",
          "description": "Set the path of the resource. Differs from set_path(), if another [Resource] exists with \"path\" it over-takes it, instead of failing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ResourceImportMetadata": {
      "name": "ResourceImportMetadata",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_source",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "md5",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_editor",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_option",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_options",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "get_source_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_source_md5",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_source_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_source",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editor",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_option",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_source_md5",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "md5",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ResourceInteractiveLoader": {
      "name": "ResourceInteractiveLoader",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Interactive Resource Loader.",
      "description": "Interactive Resource Loader. This object is returned by ResourceLoader when performing an interactive load. It allows to load with high granularity, so this is mainly useful for displaying load bars/percentages.",
      "methods": [
        {
          "name": "get_resource",
          "description": "Return the loaded resource (only if loaded). Otherwise, returns null.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_stage",
          "qualifiers": "const",
          "description": "Return the load stage. The total amount of stages can be queried with [method get_stage_count]",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_stage_count",
          "qualifiers": "const",
          "description": "Return the total amount of stages (calls to [method poll]) needed to completely load this resource.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "poll",
          "description": "Poll the load. If OK is returned, this means poll will have to be called again. If ERR_FILE_EOF is returned, them the load has finished and the resource can be obtained by calling [method get_resource].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "wait",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ResourceLoader": {
      "name": "ResourceLoader",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Resource Loader.",
      "description": "Resource Loader. This is a static object accessible as [ResourceLoader]. GDScript has a simplified load() function, though.",
      "methods": [
        {
          "name": "get_dependencies",
          "description": "",
          "return_type": "StringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_recognized_extensions_for_type",
          "description": "Return the list of recognized extensions for a resource type.",
          "return_type": "StringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load",
          "description": "",
          "return_type": "Resource",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type_hint",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "2",
              "name": "p_no_cache",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "load_import_metadata",
          "description": "",
          "return_type": "ResourceImportMetadata",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load_interactive",
          "description": "Load a resource interactively, the returned object allows to load with high granularity.",
          "return_type": "ResourceInteractiveLoader",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type_hint",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "set_abort_on_missing_resources",
          "description": "Change the behavior on missing sub-resources. Default is to abort load.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "abort",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ResourcePreloader": {
      "name": "ResourcePreloader",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Resource Preloader Node.",
      "description": "Resource Preloader Node. This node is used to preload sub-resources inside a scene, so when the scene is loaded all the resources are ready to use and be retrieved from here.",
      "methods": [
        {
          "name": "add_resource",
          "description": "Add a resource to the preloader. Set the text-id that will be used to identify it (retrieve it/erase it/etc).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resource",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resource",
          "qualifiers": "const",
          "description": "Return the resource given a text-id.",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resource_list",
          "qualifiers": "const",
          "description": "Return the list of resources inside the preloader.",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "has_resource",
          "qualifiers": "const",
          "description": "Return true if the preloader has a given resource.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_resource",
          "description": "Remove a resource from the preloader by text id.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_resource",
          "description": "Rename a resource inside the preloader, from a text-id to a new text-id.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "newname",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ResourceSaver": {
      "name": "ResourceSaver",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Resource Saving Interface.",
      "description": "Resource Saving Interface. This interface is used for saving resources to disk.",
      "methods": [
        {
          "name": "get_recognized_extensions",
          "description": "Return the list of extensions available for saving a resource of a given type.",
          "return_type": "StringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save",
          "description": "Save a resource to disk, to a given path.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flags",
              "type": "int",
              "default_value": "0"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_RELATIVE_PATHS",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_BUNDLE_RESOURCES",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_CHANGE_PATH",
          "value": "4",
          "description": ""
        },
        {
          "name": "FLAG_OMIT_EDITOR_PROPERTIES",
          "value": "8",
          "description": ""
        },
        {
          "name": "FLAG_SAVE_BIG_ENDIAN",
          "value": "16",
          "description": ""
        },
        {
          "name": "FLAG_COMPRESS",
          "value": "32",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "RichTextLabel": {
      "name": "RichTextLabel",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Label that displays rich text.",
      "description": "Label that displays rich text. Rich text can contain custom text, fonts, images and some basic formatting. It also adapts itself to given width/heights.",
      "methods": [
        {
          "name": "add_image",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_text",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_bbcode",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bbcode",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_bbcode",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_percent_visible",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tab_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_text",
          "description": "Returns the raw text, stripping out the formatting information.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_total_character_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_v_scroll",
          "description": "",
          "return_type": "VScrollBar",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_visible_characters",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_meta_underlined",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_scroll_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_scroll_following",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_selection_enabled",
          "qualifiers": "const",
          "description": "Return true if selecting the text inside this richtext is allowed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_bbcode",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "newline",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "parse_bbcode",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bbcode",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pop",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_align",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_cell",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_font",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_indent",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "level",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_list",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_meta",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_table",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "columns",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_underline",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_line",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scroll_to_line",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bbcode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_meta_underline",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_percent_visible",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "percent_visible",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_active",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_follow",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "follow",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_selection_enabled",
          "description": "Set to true if selecting the text inside this richtext is allowed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "spaces",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_table_column_expand",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "expand",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "ratio",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_bbcode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visible_characters",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "meta_clicked",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "meta",
              "type": "Nil",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": ""
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": ""
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": ""
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "description": ""
        },
        {
          "name": "LIST_NUMBERS",
          "value": "0",
          "description": ""
        },
        {
          "name": "LIST_LETTERS",
          "value": "1",
          "description": ""
        },
        {
          "name": "LIST_DOTS",
          "value": "2",
          "description": ""
        },
        {
          "name": "ITEM_FRAME",
          "value": "0",
          "description": ""
        },
        {
          "name": "ITEM_TEXT",
          "value": "1",
          "description": ""
        },
        {
          "name": "ITEM_IMAGE",
          "value": "2",
          "description": ""
        },
        {
          "name": "ITEM_NEWLINE",
          "value": "3",
          "description": ""
        },
        {
          "name": "ITEM_FONT",
          "value": "4",
          "description": ""
        },
        {
          "name": "ITEM_COLOR",
          "value": "5",
          "description": ""
        },
        {
          "name": "ITEM_UNDERLINE",
          "value": "6",
          "description": ""
        },
        {
          "name": "ITEM_ALIGN",
          "value": "7",
          "description": ""
        },
        {
          "name": "ITEM_INDENT",
          "value": "8",
          "description": ""
        },
        {
          "name": "ITEM_LIST",
          "value": "9",
          "description": ""
        },
        {
          "name": "ITEM_META",
          "value": "11",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "bold_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "bold_italics_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "default_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "italics_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "line_separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "mono_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "normal_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "table_hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "table_vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "RigidBody": {
      "name": "RigidBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "brief_description": "Rigid body node.",
      "description": "Rigid body node. This node is used for placing rigid bodies in the scene. It can contain a number of shapes, and also shift mode between regular Rigid body, Kinematic, Character or Static.",
      "methods": [
        {
          "name": "_integrate_forces",
          "qualifiers": "virtual",
          "description": "Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default it works in addition to the usual physics behavior, but [method set_use_custom_integrator] allows you to disable the default behavior and do fully custom force integration for a body.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "PhysicsDirectBodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_impulse",
          "description": "Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the offset from the body origin are in global coordinates.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "impulse",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_angular_damp",
          "qualifiers": "const",
          "description": "Return the current body angular damp. Default is -1.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_angular_velocity",
          "qualifiers": "const",
          "description": "Return the current body angular velocity.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_axis_lock",
          "qualifiers": "const",
          "description": "Return the current axis lock of the body. One of AXIS_LOCK_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bounce",
          "qualifiers": "const",
          "description": "Return the current body bounciness.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_colliding_bodies",
          "qualifiers": "const",
          "description": "Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "Return the current body friction, from 0 (frictionless) to 1 (max friction).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_scale",
          "qualifiers": "const",
          "description": "Return the current body gravity scale.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_damp",
          "qualifiers": "const",
          "description": "Return the current body linear damp. Default is -1.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "Return the current body linear velocity.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_mass",
          "qualifiers": "const",
          "description": "Return the current body mass.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_max_contacts_reported",
          "qualifiers": "const",
          "description": "Return the maximum contacts that can be reported. See [method set_max_contacts_reported].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Return the current body mode, see [method set_mode].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_weight",
          "qualifiers": "const",
          "description": "Return the current body weight, given standard earth-weight (gravity 9.8).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_able_to_sleep",
          "qualifiers": "const",
          "description": "Return whether the body has the ability to fall asleep when not moving. See [method set_can_sleep].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_contact_monitor_enabled",
          "qualifiers": "const",
          "description": "Return whether contact monitoring is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_sleeping",
          "qualifiers": "const",
          "description": "Return whether the body is sleeping.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_continuous_collision_detection",
          "qualifiers": "const",
          "description": "Return whether this body is using continuous collision detection.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_custom_integrator",
          "description": "Return whether the body is using a custom integrator.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_angular_damp",
          "description": "Set the angular damp for this body. Default of -1, cannot be less than -1. If this value is different from -1, any angular damp derived from the world or areas will be overridden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_angular_velocity",
          "description": "Set the body angular velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_axis_lock",
          "description": "Set the axis lock of the body, from the AXIS_LOCK_* enum. Axis lock stops the body from moving along the specified axis(X/Y/Z) and rotating along the other two axes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_lock",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_axis_velocity",
          "description": "Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bounce",
          "description": "Set the body bounciness, from 0 (no bounciness) to 1 (max bounciness).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounce",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_can_sleep",
          "description": "Set the body ability to fall asleep when not moving. This saves an enormous amount of processor time when there are plenty of rigid bodies (non static) in a scene.\n\t\t\t\tSleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "able_to_sleep",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_contact_monitor",
          "description": "Enable contact monitoring. This allows the body to emit signals when it collides with another.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "Set the body friction, from 0 (frictionless) to 1 (max friction).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_scale",
          "description": "Set the gravity factor. This factor multiplies gravity intensity just for this body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gravity_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_damp",
          "description": "Set the linear damp for this body. Default of -1, cannot be less than -1. If this value is different from -1, any linear damp derived from the world or areas will be overridden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_velocity",
          "description": "Set the body linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mass",
          "description": "Set the body mass.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mass",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_contacts_reported",
          "description": "Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the body mode, from the MODE_* enum. This allows to change to a static body or a character body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sleeping",
          "description": "Set whether a body is sleeping or not. Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] wakes them up. Until then, they behave like a static body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sleeping",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_continuous_collision_detection",
          "description": "Set the continuous collision detection mode from the enum CCD_MODE_*.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. The first is more precise, and misses less impacts by small, fast-moving objects. The second is faster to compute, but can miss small, fast-moving objects.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_custom_integrator",
          "description": "Pass true to disable the internal force integration (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_weight",
          "description": "Set the body weight given standard earth-weight (gravity 9.8).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "body_enter",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_enter_shape",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that collided with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body collided with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exit",
          "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exit_shape",
          "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that stopped colliding with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body stopped colliding with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sleeping_state_changed",
          "description": "Emitted when the body changes its sleeping state. Either by sleeping or waking up.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "MODE_STATIC",
          "value": "1",
          "description": "Static mode. The body behaves like a [StaticBody], and can only move by user code."
        },
        {
          "name": "MODE_KINEMATIC",
          "value": "3",
          "description": "Kinematic body. The body behaves like a [KinematicBody], and can only move by user code."
        },
        {
          "name": "MODE_RIGID",
          "value": "0",
          "description": "Rigid body. This is the \"natural\" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code."
        },
        {
          "name": "MODE_CHARACTER",
          "value": "2",
          "description": "Character body. This behaves like a rigid body, but can not rotate."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "RigidBody2D": {
      "name": "RigidBody2D",
      "inherits": "PhysicsBody2D",
      "category": "Core",
      "brief_description": "Rigid body 2D node.",
      "description": "Rigid body 2D node. This node is used for placing rigid bodies in the scene. It can contain a number of shapes, and also shift state between regular Rigid body, Kinematic, Character or Static.\n\t\tCharacter mode forbids the node from being rotated. This node can have a custom force integrator function, for writing complex physics motion behavior per node.\n\t\tAs a warning, don't change this node position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior.",
      "methods": [
        {
          "name": "_integrate_forces",
          "qualifiers": "virtual",
          "description": "Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default it works in addition to the usual physics behavior, but [method set_use_custom_integrator] allows you to disable the default behavior and do fully custom force integration for a body.",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "Physics2DDirectBodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_force",
          "description": "Add a positioned force to the applied force and torque. As with [method apply_impulse], both the force and the offset from the body origin are in global coordinates.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "force",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_impulse",
          "description": "Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the offset from the body origin are in global coordinates.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "impulse",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_angular_damp",
          "qualifiers": "const",
          "description": "Return the angular damp for this body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_angular_velocity",
          "qualifiers": "const",
          "description": "Return the body angular velocity. This changes by physics granularity. See [method set_angular_velocity].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_applied_force",
          "qualifiers": "const",
          "description": "Return the applied force vector.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_applied_torque",
          "qualifiers": "const",
          "description": "Return the torque which is being applied to this body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_bounce",
          "qualifiers": "const",
          "description": "Return the body bounciness.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_colliding_bodies",
          "qualifiers": "const",
          "description": "Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it. You must also enable contact monitor, see [method set_contact_monitor]",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_continuous_collision_detection_mode",
          "qualifiers": "const",
          "description": "Return whether this body is using continuous collision detection.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "Return the body friction.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_scale",
          "qualifiers": "const",
          "description": "Return the gravity factor.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_inertia",
          "qualifiers": "const",
          "description": "Return the body's moment of inertia. This is usually automatically computed from the mass and the shapes. Note that this doesn't seem to work in a [code]_ready[/code] function: it apparently has not been auto-computed yet.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_damp",
          "qualifiers": "const",
          "description": "Return the linear damp for this body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "Return the body linear velocity. This changes by physics granularity. See [method set_linear_velocity].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_mass",
          "qualifiers": "const",
          "description": "Return the body mass.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_max_contacts_reported",
          "qualifiers": "const",
          "description": "Return the maximum contacts that can be reported. See [method set_max_contacts_reported].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Return the current body mode, see [method set_mode].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_weight",
          "qualifiers": "const",
          "description": "Return the body weight given standard earth-weight (gravity 9.8).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_able_to_sleep",
          "qualifiers": "const",
          "description": "Return true if the body has the ability to fall asleep when not moving. See [method set_can_sleep].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_contact_monitor_enabled",
          "qualifiers": "const",
          "description": "Return whether contact monitoring is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_sleeping",
          "qualifiers": "const",
          "description": "Return whether the body is sleeping.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_custom_integrator",
          "description": "Return true if the body is not doing any built-in force integration.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_angular_damp",
          "description": "Set the angular damp for this body. If this value is different from -1, any angular damp derived from the world or areas will be overridden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_angular_velocity",
          "description": "Set the body angular velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_velocity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_applied_force",
          "description": "Set the applied force vector. This is the equivalent of pushing a box over the ground: the force applied is applied constantly.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "force",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_applied_torque",
          "description": "Set a constant torque which will be applied to this body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "torque",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_axis_velocity",
          "description": "Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bounce",
          "description": "Set the body bounciness, from 0 (no bounce) to 1 (full bounce).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounce",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_can_sleep",
          "description": "Set the body ability to fall asleep when not moving. This saves an enormous amount of processor time when there are plenty of rigid bodies (non static) in a scene.\n\t\t\t\tSleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "able_to_sleep",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_contact_monitor",
          "description": "Enable contact monitoring. This allows the body to emit signals when it collides with another.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_continuous_collision_detection_mode",
          "description": "Set the continuous collision detection mode from the enum CCD_MODE_*.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. The first is more precise, and misses less impacts by small, fast-moving objects. The second is faster to compute, but can miss small, fast-moving objects.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "Set the body friction, from 0 (frictionless) to 1 (full friction).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_scale",
          "description": "Set the gravity factor. This factor multiplies gravity intensity just for this body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gravity_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_inertia",
          "description": "Set the body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 (or negative) inertia to return to automatically computing it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "inertia",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_damp",
          "description": "Set the linear damp for this body. If this value is different from -1, any linear damp derived from the world or areas will be overridden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_velocity",
          "description": "Set the body linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mass",
          "description": "Set the body mass.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mass",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_contacts_reported",
          "description": "Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the body mode, from the MODE_* enum. This allows to change to a static body or a character body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sleeping",
          "description": "Set whether a body is sleeping or not. Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sleeping",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_custom_integrator",
          "description": "Pass true to disable the internal force integration (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_weight",
          "description": "Set the body weight given standard earth-weight (gravity 9.8). Not really useful for 2D since most measures for this node are in pixels.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "test_motion",
          "description": "Return whether the body would collide, if it tried to move in the given vector. This method allows two extra parameters: A margin, which increases slightly the size of the shapes involved in the collision detection, and an object of type [Physics2DTestMotionResult], which will store additional information about the collision (should there be one).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "margin",
              "type": "float",
              "default_value": "0.08"
            },
            {
              "index": "2",
              "name": "result",
              "type": "Physics2DTestMotionResult",
              "default_value": "NULL"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "body_enter",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_enter_shape",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that collided with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body collided with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exit",
          "description": "Emitted when a body exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exit_shape",
          "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that stopped colliding with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body stopped colliding with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sleeping_state_changed",
          "description": "Emitted when the body changes its sleeping state. Either by sleeping or waking up.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "MODE_STATIC",
          "value": "1",
          "description": "Static mode. The body behaves like a [StaticBody2D], and can only move by user code."
        },
        {
          "name": "MODE_KINEMATIC",
          "value": "3",
          "description": "Kinematic body. The body behaves like a [KinematicBody2D], and can only move by user code."
        },
        {
          "name": "MODE_RIGID",
          "value": "0",
          "description": "Rigid body. This is the \"natural\" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code."
        },
        {
          "name": "MODE_CHARACTER",
          "value": "2",
          "description": "Character body. This behaves like a rigid body, but can not rotate."
        },
        {
          "name": "CCD_MODE_DISABLED",
          "value": "0",
          "description": "Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects."
        },
        {
          "name": "CCD_MODE_CAST_RAY",
          "value": "1",
          "description": "Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise."
        },
        {
          "name": "CCD_MODE_CAST_SHAPE",
          "value": "2",
          "description": "Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Room": {
      "name": "Room",
      "inherits": "VisualInstance",
      "category": "Core",
      "brief_description": "Room data resource.",
      "description": "Room contains the data to define the bounds of a scene (using a BSP Tree). It is instanced by a [VisualInstance] node to create rooms. See that class documentation for more information about rooms.",
      "methods": [
        {
          "name": "compute_room_from_subtree",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_room",
          "qualifiers": "const",
          "description": "",
          "return_type": "Room",
          "arguments": []
        },
        {
          "name": "is_simulating_acoustics",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_room",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "room",
              "type": "Room",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_simulate_acoustics",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RoomBounds": {
      "name": "RoomBounds",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_bounds",
          "qualifiers": "const",
          "description": "",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_geometry_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3Array",
          "arguments": []
        },
        {
          "name": "regenerate_bsp",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "regenerate_bsp_cubic",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_bounds",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bsp_tree",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_geometry_hint",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "triangles",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Sample": {
      "name": "Sample",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Audio sample (sound) class.",
      "description": "Sample provides an audio sample class, containing audio data, together with some information for playback, such as format, mix rate and loop. It is used by sound playback routines.",
      "methods": [
        {
          "name": "create",
          "description": "Create new data for the sample, with format (see FORMAT_* constants), stereo hint, and length in samples (not bytes).\n\t\t\t\tCalling this method overrides previously existing data. Stereo samples are interleaved pairs of left and right points (in that order), but count as one sample for length purposes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "stereo",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "length",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_data",
          "qualifiers": "const",
          "description": "Return sample data as little endian.",
          "return_type": "RawArray",
          "arguments": []
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "Return the sample format.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the sample length in samples. Stereo samples count as one, even if they are made of a left and a right sample.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_loop_begin",
          "qualifiers": "const",
          "description": "Return the loop begin position.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_loop_end",
          "qualifiers": "const",
          "description": "Return the loop end position.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_loop_format",
          "qualifiers": "const",
          "description": "Return the loop format.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mix_rate",
          "qualifiers": "const",
          "description": "Return the mix rate for the sample.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_stereo",
          "qualifiers": "const",
          "description": "Return whether the current sample was created as stereo.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_data",
          "description": "Set sample data. Data must be little endian, no matter the host platform, and exactly as long as to fit all samples. The length of this array can be calculated as follows:\n\t\t\t\tGet the sample length ([method get_length]). If the sample format is FORMAT_PCM16, multiply it by 2. If the sample format is FORMAT_IMA_ADPCM, divide it by 2 (rounding any fraction up), then add 4. If the sample is stereo ([method is_stereo]), multiply it by 2.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop_begin",
          "description": "Set the loop begin position. It must be a valid frame and less than the loop end position.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop_end",
          "description": "Set the loop end position. It must be a valid frame and greater than the loop begin position.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop_format",
          "description": "Set the loop format (use LOOP_* constants as argument).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mix_rate",
          "description": "Set the mix rate for the sample (expected playback frequency).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hz",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FORMAT_PCM8",
          "value": "0",
          "description": "8-bits signed PCM audio."
        },
        {
          "name": "FORMAT_PCM16",
          "value": "1",
          "description": "16-bits signed little endian PCM audio."
        },
        {
          "name": "FORMAT_IMA_ADPCM",
          "value": "2",
          "description": "IMA-ADPCM Audio."
        },
        {
          "name": "LOOP_NONE",
          "value": "0",
          "description": "No loop enabled."
        },
        {
          "name": "LOOP_FORWARD",
          "value": "1",
          "description": "Forward looping (when playback reaches loop end, goes back to loop begin)."
        },
        {
          "name": "LOOP_PING_PONG",
          "value": "2",
          "description": "Ping-pong looping (when playback reaches loop end, plays backward until loop begin). Not available in all platforms."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SampleLibrary": {
      "name": "SampleLibrary",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Library that contains a collection of samples.",
      "description": "Library that contains a collection of [Sample], each identified by a text ID. This is used as a data container for the majority of the SamplePlayer classes and derivatives.\n\t\tSample players will never yield an active (currently playing) voice for a new playback request when there are no inactive voices available if the priority of the sample requested to be played is lower than that of every currently played samples.",
      "methods": [
        {
          "name": "add_sample",
          "description": "Add a sample to the library, with a given text ID.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "sample",
              "type": "Sample",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_sample",
          "qualifiers": "const",
          "description": "Return the sample from the library matching the given text ID. Return null if the sample is not found.",
          "return_type": "Sample",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_sample_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "has_sample",
          "qualifiers": "const",
          "description": "Return true if the sample text ID exists in the library.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_sample",
          "description": "Remove the sample matching the given text ID.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_pitch_scale",
          "qualifiers": "const",
          "description": "Return the pitch scale for the given sample.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_priority",
          "qualifiers": "const",
          "description": "Return the priority for the given sample.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_get_volume_db",
          "qualifiers": "const",
          "description": "Return the volume (in dB) for the given sample.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_pitch_scale",
          "description": "Set the pitch scale for the given sample.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pitch",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_priority",
          "description": "Set the priority for the given sample.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "priority",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sample_set_volume_db",
          "description": "Set the volume (in dB) for the given sample.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SamplePlayer": {
      "name": "SamplePlayer",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Sample Player node.",
      "description": "SamplePlayer is a [Node] meant for simple sample playback. A library of samples is loaded and played back \"as is\", without positioning or anything.",
      "methods": [
        {
          "name": "get_chorus",
          "qualifiers": "const",
          "description": "Return the current chorus send level for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_default_chorus",
          "qualifiers": "const",
          "description": "Return the default chorus send level of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_filter_cutoff",
          "qualifiers": "const",
          "description": "Return the default filter cutoff frequency of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_filter_gain",
          "qualifiers": "const",
          "description": "Return the default filter gain of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_filter_resonance",
          "qualifiers": "const",
          "description": "Return the default filter resonance of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_filter_type",
          "qualifiers": "const",
          "description": "Return the default filter type in use (see FILTER_* constants) for the player.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_default_pan",
          "qualifiers": "const",
          "description": "Return the default panning of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_pan_depth",
          "qualifiers": "const",
          "description": "Return the default pan depth of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_pan_height",
          "qualifiers": "const",
          "description": "Return the default pan height of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_pitch_scale",
          "qualifiers": "const",
          "description": "Return the default pitch scale of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_reverb",
          "qualifiers": "const",
          "description": "Return the default reverberation send level of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_reverb_room",
          "qualifiers": "const",
          "description": "Return the default reverberation room type of the player (see REVERB_* enum).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_default_volume",
          "qualifiers": "const",
          "description": "Return the default volume (on a linear scale) of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_volume_db",
          "qualifiers": "const",
          "description": "Return the default volume (in dB) of the player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_filter_cutoff",
          "qualifiers": "const",
          "description": "Return the current filter cutoff frequency for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_filter_gain",
          "qualifiers": "const",
          "description": "Return the current filter gain for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_filter_resonance",
          "qualifiers": "const",
          "description": "Return the current filter resonance for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_filter_type",
          "qualifiers": "const",
          "description": "Return the current filter type in use (see FILTER_* constants) for a given voice.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_mix_rate",
          "qualifiers": "const",
          "description": "Return the current mix rate for a given voice.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pan",
          "qualifiers": "const",
          "description": "Return the current panning for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pan_depth",
          "qualifiers": "const",
          "description": "Return the current pan depth for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pan_height",
          "qualifiers": "const",
          "description": "Return the current pan height for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pitch_scale",
          "qualifiers": "const",
          "description": "Return the current pitch scale for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_polyphony",
          "qualifiers": "const",
          "description": "Return the polyphony of the player.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_reverb",
          "qualifiers": "const",
          "description": "Return the current reverberation send level for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_reverb_room",
          "qualifiers": "const",
          "description": "Return the current reverberation room type for a given voice (see REVERB_* enum).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_sample_library",
          "qualifiers": "const",
          "description": "Return the sample library used by the player.",
          "return_type": "SampleLibrary",
          "arguments": []
        },
        {
          "name": "get_volume",
          "qualifiers": "const",
          "description": "Return the current volume (on a linear scale) for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_volume_db",
          "qualifiers": "const",
          "description": "Return the current volume (in dB) for a given voice.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Return whether the player is currently active.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_voice_active",
          "qualifiers": "const",
          "description": "Return whether the given voice is currently active.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "play",
          "description": "Play a sample referenced by its name.\n\t\t\t\tOptionally, the playback can be made \"unique\" to force stopping all other samples currently played. The voices allocated for playback will then be returned.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "unique",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_chorus",
          "description": "Set the chorus send level of a voice (from 0 to 1.0). For setting chorus parameters, see [AudioServer].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "send",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_chorus",
          "description": "Set the default chorus send level of the player (from 0 to 1.0). For setting chorus parameters, see [AudioServer].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "send",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_filter",
          "description": "Set the default filter for the player, using the given type (see FILTER_* constants), cutoff frequency (from 20 to 16,384 Hz) and resonance (from 0 to 4.0).\n\t\t\tOptionally, a gain can also be given (from 0 to 2.0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cutoff_hz",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "resonance",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "gain",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_default_pan",
          "description": "Set the default panning of the player. Panning goes from -1.0 (left) to +1.0 (right).\n\t\t\t\tOptionally, for hardware than support 3D sound, one can also set depth and height (also in range -1.0 to +1.0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pan",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "depth",
              "type": "float",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "height",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_default_pitch_scale",
          "description": "Set the default pitch scale of the player. A ratio of 1.0 is the normal scale.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_reverb",
          "description": "Set the default reverberation type (see REVERB_* constants) and send level (from 0 to 1.0) of the player.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "room_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "send",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_volume",
          "description": "Set the default volume of the player using a linear scale.\n\t\t\t\tThe \"volume\" argument should be a positive factor ranging from 0.0 (mute) up to 16.0 (i.e. 24 dB).\n\t\t\t\tA factor of 1.0 means that the voice will be played at normal system volume. Factors above 1.0 might be limited by the platform's audio output.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "volume",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_volume_db",
          "description": "Set the default volume of the player in dB.\n\t\t\t\tThe \"dB\" argument can range from -80 to 24 dB, 0 dB being the maximum volume. Every 6 dB (resp. -6 dB), the volume is increased (resp. reduced) by half.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_filter",
          "description": "Set the filter for a given voice, using the given type (see FILTER_* constants), cutoff frequency (from 20 to 16,384 Hz) and resonance (from 0 to 4.0).\n\t\t\t\tOptionally, a gain can also be given (from 0 to 2.0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "cutoff_hz",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "resonance",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "gain",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_mix_rate",
          "description": "Set the mix rate (in Hz) of a given voice.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "hz",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pan",
          "description": "Set the panning of a voice. Panning goes from -1.0 (left) to +1.0 (right).\n\t\t\t\tOptionally, for hardware than support 3D sound, one can also set depth and height (also in range -1.0 to +1.0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pan",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "depth",
              "type": "float",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "height",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_pitch_scale",
          "description": "Set the pitch scale of a given voice. A ratio of 1.0 is the normal scale.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_polyphony",
          "description": "Set the polyphony of the player (maximum amount of simultaneous voices).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max_voices",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_reverb",
          "description": "Set the reverberation type (see REVERB_* constants) and send level (from 0 to 1.0) of a voice.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "room_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "send",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sample_library",
          "description": "Set the sample library for the player.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "library",
              "type": "SampleLibrary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume",
          "description": "Set the volume of a given voice using a linear scale.\n\t\t\t\tThe \"volume\" argument should be a positive factor ranging from 0.0 (mute) up to 16.0 (i.e. 24 dB).\n\t\t\t\tA factor of 1.0 means that the voice will be played at normal system volume. Factors above 1.0 might be limited by the platform's audio output.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "volume",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume_db",
          "description": "Set the volume of a given voice in dB.\n\t\t\t\tThe \"dB\" argument can range from -80 to 24 dB, 0 dB being the maximum volume. Every 6 dB (resp. -6 dB), the volume is increased (resp. reduced) by half.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop a given voice.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop_all",
          "description": "Stop all playing voices.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FILTER_NONE",
          "value": "0",
          "description": "Filter is disabled for voice."
        },
        {
          "name": "FILTER_LOWPASS",
          "value": "1",
          "description": "Low-pass filter is used for voice."
        },
        {
          "name": "FILTER_BANDPASS",
          "value": "2",
          "description": "Band-pass filter is used for voice."
        },
        {
          "name": "FILTER_HIPASS",
          "value": "3",
          "description": "High-pass filter is used for voice."
        },
        {
          "name": "FILTER_NOTCH",
          "value": "4",
          "description": "Notch (band reject) filter is used for voice."
        },
        {
          "name": "FILTER_PEAK",
          "value": "5",
          "description": "Peak (exclusive band) filter is used for voice."
        },
        {
          "name": "FILTER_BANDLIMIT",
          "value": "6",
          "description": "Band-limit filter is used for voice, in this case resonance is the high-pass cutoff. A band-limit filter has a different frequency response than a notch filter, but otherwise both are band-rejecting filters."
        },
        {
          "name": "FILTER_LOW_SHELF",
          "value": "7",
          "description": "Low-shelf filter is used for voice."
        },
        {
          "name": "FILTER_HIGH_SHELF",
          "value": "8",
          "description": "High-shelf filter is used for voice."
        },
        {
          "name": "REVERB_SMALL",
          "value": "0",
          "description": "Small reverberation room (house room)."
        },
        {
          "name": "REVERB_MEDIUM",
          "value": "1",
          "description": "Medium reverberation room (street)"
        },
        {
          "name": "REVERB_LARGE",
          "value": "2",
          "description": "Large reverberation room (theatre)"
        },
        {
          "name": "REVERB_HALL",
          "value": "3",
          "description": "Huge reverberation room (cathedral, warehouse)."
        },
        {
          "name": "INVALID_VOICE_ID",
          "value": "-1",
          "description": "Value returned if the voice ID is invalid."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SamplePlayer2D": {
      "name": "SamplePlayer2D",
      "inherits": "SoundPlayer2D",
      "category": "Core",
      "brief_description": "Sample player for positional 2D Sound.",
      "description": "Sample player for positional 2D Sound. Plays sound samples positionally, left and right depending on the distance/place on the screen.",
      "methods": [
        {
          "name": "get_polyphony",
          "qualifiers": "const",
          "description": "Return the polyphony of the player.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_random_pitch_scale",
          "qualifiers": "const",
          "description": "Return the amplitude used for random pitch scale variations.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sample_library",
          "qualifiers": "const",
          "description": "Return the sample library used by the player.",
          "return_type": "SampleLibrary",
          "arguments": []
        },
        {
          "name": "is_voice_active",
          "qualifiers": "const",
          "description": "Return whether a voice is still active or has stopped playing.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "play",
          "description": "Play a sample. An internal polyphony ID can optionally be passed, or defaults to NEXT_VOICE.\n\t\t\t\tReturn a voice ID which can be used to modify the voice parameters, or INVALID_VOICE if the voice or sample are invalid.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "voice",
              "type": "int",
              "default_value": "-2"
            }
          ]
        },
        {
          "name": "set_polyphony",
          "description": "Set the polyphony of the player (maximum amount of simultaneous voices).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max_voices",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_random_pitch_scale",
          "description": "Set the amplitude for random pitch scale variations. If different from zero, the pitch scale will vary randomly around 1.0 in a range defined by val.\n\t\t\t\tThe actual pitch scale will be, with \"variation\" ranging from -val to val:\n\t\t\t\t* variation > 0: 1.0 + variation\n\t\t\t\t* variation < 0: 1.0/(1.0 - variation)",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sample_library",
          "description": "Set the sample library for the player.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "library",
              "type": "SampleLibrary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop_all",
          "description": "Stop all playing voices.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "stop_voice",
          "description": "Stop a given voice.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_set_pitch_scale",
          "description": "Change the pitch scale of a currently playing voice.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_set_volume_scale_db",
          "description": "Change the volume scale (in dB) of a currently playing voice.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "INVALID_VOICE",
          "value": "-1",
          "description": "Value returned if the voice or sample are invalid."
        },
        {
          "name": "NEXT_VOICE",
          "value": "-2",
          "description": "Default voice for the play method. Corresponds to the first voice following the last used voice."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SceneState": {
      "name": "SceneState",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_connection_binds",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_connection_flags",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_method",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_signal",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_source",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_target",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node_groups",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_instance",
          "qualifiers": "const",
          "description": "",
          "return_type": "PackedScene",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_instance_placeholder",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_owner_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "for_parent",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_node_property_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_property_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "prop_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_property_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "prop_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_node_instance_placeholder",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SceneTree": {
      "name": "SceneTree",
      "inherits": "MainLoop",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "call_group",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg0",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "arg1",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "5",
              "name": "arg2",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "6",
              "name": "arg3",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "7",
              "name": "arg4",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "change_scene",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "change_scene_to",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "packed_scene",
              "type": "PackedScene",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_scene",
          "qualifiers": "const",
          "description": "",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_edited_scene_root",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_nodes_in_group",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_root",
          "qualifiers": "const",
          "description": "",
          "return_type": "Viewport",
          "arguments": []
        },
        {
          "name": "has_group",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_debugging_collisions_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_debugging_navigation_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_editor_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_input_handled",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_paused",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "notify_group",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "call_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "notification",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_delete",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "quit",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reload_current_scene",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_auto_accept_quit",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_scene",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child_node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_debug_collisions_hint",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_debug_navigation_hint",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edited_scene_root",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editor_hint",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_group",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "call_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_input_as_handled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_pause",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_screen_stretch",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "aspect",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "minsize",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "files_dropped",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "files",
              "type": "StringArray",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "screen",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fixed_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "idle_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "node_configuration_warning_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_removed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "screen_resized",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tree_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "GROUP_CALL_DEFAULT",
          "value": "0",
          "description": ""
        },
        {
          "name": "GROUP_CALL_REVERSE",
          "value": "1",
          "description": ""
        },
        {
          "name": "GROUP_CALL_REALTIME",
          "value": "2",
          "description": ""
        },
        {
          "name": "GROUP_CALL_UNIQUE",
          "value": "4",
          "description": ""
        },
        {
          "name": "STRETCH_MODE_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "STRETCH_MODE_2D",
          "value": "1",
          "description": ""
        },
        {
          "name": "STRETCH_MODE_VIEWPORT",
          "value": "2",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_IGNORE",
          "value": "0",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_KEEP",
          "value": "1",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_KEEP_WIDTH",
          "value": "2",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_KEEP_HEIGHT",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Script": {
      "name": "Script",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Base class for scripts.",
      "description": "Base class for scripts. Any script that is loaded becomes one of these resources, which can then create instances.",
      "methods": [
        {
          "name": "can_instance",
          "qualifiers": "const",
          "description": "Return true if this script can be instance (ie not a library).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_source_code",
          "qualifiers": "const",
          "description": "Return the script source code (if available).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "has_source_code",
          "qualifiers": "const",
          "description": "Return true if the script contains source code.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "instance_has",
          "qualifiers": "const",
          "description": "Return true if a given object uses an instance of this script.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "base_object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reload",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keep_state",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_source_code",
          "description": "Set the script source code.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "source",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ScrollBar": {
      "name": "ScrollBar",
      "inherits": "Range",
      "category": "Core",
      "brief_description": "Base class for scroll bars.",
      "description": "Scrollbars are a [Range] based [Control], that display a draggable area (the size of the page). Horizontal ([HScrollBar]) and Vertical ([VScrollBar]) versions are available.",
      "methods": [
        {
          "name": "get_custom_step",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_custom_step",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ScrollContainer": {
      "name": "ScrollContainer",
      "inherits": "Container",
      "category": "Core",
      "brief_description": "A helper node for displaying scrollable elements (e.g. lists).",
      "description": "A ScrollContainer node with a [Control] child and scrollbar child ([HScrollbar], [VScrollBar], or both) will only draw the Control within the ScrollContainer area.  Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer.  Scrollbars will also automatically resize the grabber based on the minimum_size of the Control relative to the ScrollContainer.  Works great with a [Panel] control.  You can set EXPAND on children size flags, so they will upscale to ScrollContainer size if ScrollContainer size is bigger (scroll is invisible for chosen dimension).",
      "methods": [
        {
          "name": "get_h_scroll",
          "qualifiers": "const",
          "description": "Return current horizontal scroll value.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_v_scroll",
          "qualifiers": "const",
          "description": "Return current vertical scroll value.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_h_scroll_enabled",
          "qualifiers": "const",
          "description": "Return true if horizontal scroll is allowed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_v_scroll_enabled",
          "qualifiers": "const",
          "description": "Return true if vertical scroll is allowed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_enable_h_scroll",
          "description": "Set allows horizontal scroll.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enable_v_scroll",
          "description": "Set allows vertical scroll.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_scroll",
          "description": "Set horizontal scroll value.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_scroll",
          "description": "Set vertical scroll value.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SegmentShape2D": {
      "name": "SegmentShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "brief_description": "Segment Shape for 2D Collision Detection.",
      "description": "Segment Shape for 2D Collision Detection, consists of two points, 'a' and 'b'.",
      "methods": [
        {
          "name": "get_a",
          "qualifiers": "const",
          "description": "Return the first point's position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_b",
          "qualifiers": "const",
          "description": "Return the second point's position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_a",
          "description": "Set the first point's position.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_b",
          "description": "Set the second point's position.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Semaphore": {
      "name": "Semaphore",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "A synchronization Semaphore.",
      "description": "A synchronization Semaphore. Element used in multi-threadding. Initialized to zero on creation.",
      "methods": [
        {
          "name": "post",
          "description": "Lowers the [Semaphore], allowing one more thread in.",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "wait",
          "description": "Tries to wait for the [Semaphore], if its value is zero, blocks until non-zero.",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Separator": {
      "name": "Separator",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Base class for separators.",
      "description": "Separator is a [Control] used for separating other controls. It's purely a visual decoration. Horizontal ([HSeparator]) and Vertical ([VSeparator]) versions are available.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Shader": {
      "name": "Shader",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "To be changed, ignore.",
      "description": "To be changed, ignore.",
      "methods": [
        {
          "name": "get_default_texture_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_fragment_code",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_light_code",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertex_code",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "has_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_code",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vcode",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "fcode",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "lcode",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "fofs",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "4",
              "name": "lofs",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_default_texture_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MODE_MATERIAL",
          "value": "0",
          "description": ""
        },
        {
          "name": "MODE_CANVAS_ITEM",
          "value": "1",
          "description": ""
        },
        {
          "name": "MODE_POST_PROCESS",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ShaderGraph": {
      "name": "ShaderGraph",
      "inherits": "Shader",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "color_ramp_node_get_colors",
          "qualifiers": "const",
          "description": "",
          "return_type": "ColorArray",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "color_ramp_node_get_offsets",
          "qualifiers": "const",
          "description": "",
          "return_type": "RealArray",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "color_ramp_node_set_ramp",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "colors",
              "type": "ColorArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "offsets",
              "type": "RealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "comment_node_get_text",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "comment_node_set_text",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "connect_node",
          "description": "",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "src_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "dst_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "dst_slot",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubemap_input_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "CubeMap",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubemap_input_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "CubeMap",
              "default_value": ""
            }
          ]
        },
        {
          "name": "curve_map_node_get_points",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "curve_map_node_set_points",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "points",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "default_get_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "param_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "default_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "param_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect_node",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "src_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "dst_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "dst_slot",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_connections",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "input_node_get_name",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "input_node_set_name",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_node_connected",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "src_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "dst_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "dst_slot",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_add",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "node_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_state",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_remove",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_set_pos",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_set_state",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "state",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rgb_const_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rgb_const_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rgb_input_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rgb_input_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rgb_op_node_get_op",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rgb_op_node_set_op",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "op",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scalar_const_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scalar_const_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scalar_func_node_get_function",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scalar_func_node_set_function",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "func",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scalar_input_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scalar_input_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scalar_op_node_get_op",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scalar_op_node_set_op",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "op",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_input_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_input_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_node_get_filter_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_node_get_filter_strength",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_node_set_filter_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "filter_size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_node_set_filter_strength",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "filter_strength",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_const_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_const_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_func_node_get_function",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_func_node_set_function",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "func",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_input_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_input_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_op_node_get_op",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_op_node_set_op",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "op",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_scalar_op_node_get_op",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "vec_scalar_op_node_set_op",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "op",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_const_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_const_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_input_node_get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_input_node_set_value",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_vec_mult_node_get_no_translation",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_vec_mult_node_set_no_translation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "updated",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NODE_INPUT",
          "value": "0",
          "description": ""
        },
        {
          "name": "NODE_SCALAR_CONST",
          "value": "1",
          "description": ""
        },
        {
          "name": "NODE_VEC_CONST",
          "value": "2",
          "description": ""
        },
        {
          "name": "NODE_RGB_CONST",
          "value": "3",
          "description": ""
        },
        {
          "name": "NODE_XFORM_CONST",
          "value": "4",
          "description": ""
        },
        {
          "name": "NODE_TIME",
          "value": "5",
          "description": ""
        },
        {
          "name": "NODE_SCREEN_TEX",
          "value": "6",
          "description": ""
        },
        {
          "name": "NODE_SCALAR_OP",
          "value": "7",
          "description": ""
        },
        {
          "name": "NODE_VEC_OP",
          "value": "8",
          "description": ""
        },
        {
          "name": "NODE_VEC_SCALAR_OP",
          "value": "9",
          "description": ""
        },
        {
          "name": "NODE_RGB_OP",
          "value": "10",
          "description": ""
        },
        {
          "name": "NODE_XFORM_MULT",
          "value": "11",
          "description": ""
        },
        {
          "name": "NODE_XFORM_VEC_MULT",
          "value": "12",
          "description": ""
        },
        {
          "name": "NODE_XFORM_VEC_INV_MULT",
          "value": "13",
          "description": ""
        },
        {
          "name": "NODE_SCALAR_FUNC",
          "value": "14",
          "description": ""
        },
        {
          "name": "NODE_VEC_FUNC",
          "value": "15",
          "description": ""
        },
        {
          "name": "NODE_VEC_LEN",
          "value": "16",
          "description": ""
        },
        {
          "name": "NODE_DOT_PROD",
          "value": "17",
          "description": ""
        },
        {
          "name": "NODE_VEC_TO_SCALAR",
          "value": "18",
          "description": ""
        },
        {
          "name": "NODE_SCALAR_TO_VEC",
          "value": "19",
          "description": ""
        },
        {
          "name": "NODE_VEC_TO_XFORM",
          "value": "21",
          "description": ""
        },
        {
          "name": "NODE_XFORM_TO_VEC",
          "value": "20",
          "description": ""
        },
        {
          "name": "NODE_SCALAR_INTERP",
          "value": "22",
          "description": ""
        },
        {
          "name": "NODE_VEC_INTERP",
          "value": "23",
          "description": ""
        },
        {
          "name": "NODE_COLOR_RAMP",
          "value": "24",
          "description": ""
        },
        {
          "name": "NODE_CURVE_MAP",
          "value": "25",
          "description": ""
        },
        {
          "name": "NODE_SCALAR_INPUT",
          "value": "26",
          "description": ""
        },
        {
          "name": "NODE_VEC_INPUT",
          "value": "27",
          "description": ""
        },
        {
          "name": "NODE_RGB_INPUT",
          "value": "28",
          "description": ""
        },
        {
          "name": "NODE_XFORM_INPUT",
          "value": "29",
          "description": ""
        },
        {
          "name": "NODE_TEXTURE_INPUT",
          "value": "30",
          "description": ""
        },
        {
          "name": "NODE_CUBEMAP_INPUT",
          "value": "31",
          "description": ""
        },
        {
          "name": "NODE_DEFAULT_TEXTURE",
          "value": "32",
          "description": ""
        },
        {
          "name": "NODE_OUTPUT",
          "value": "33",
          "description": ""
        },
        {
          "name": "NODE_COMMENT",
          "value": "34",
          "description": ""
        },
        {
          "name": "NODE_TYPE_MAX",
          "value": "35",
          "description": ""
        },
        {
          "name": "SLOT_TYPE_SCALAR",
          "value": "0",
          "description": ""
        },
        {
          "name": "SLOT_TYPE_VEC",
          "value": "1",
          "description": ""
        },
        {
          "name": "SLOT_TYPE_XFORM",
          "value": "2",
          "description": ""
        },
        {
          "name": "SLOT_TYPE_TEXTURE",
          "value": "3",
          "description": ""
        },
        {
          "name": "SLOT_MAX",
          "value": "4",
          "description": ""
        },
        {
          "name": "SHADER_TYPE_VERTEX",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADER_TYPE_FRAGMENT",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHADER_TYPE_LIGHT",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHADER_TYPE_MAX",
          "value": "3",
          "description": ""
        },
        {
          "name": "SLOT_IN",
          "value": "0",
          "description": ""
        },
        {
          "name": "SLOT_OUT",
          "value": "1",
          "description": ""
        },
        {
          "name": "GRAPH_OK",
          "value": "0",
          "description": ""
        },
        {
          "name": "GRAPH_ERROR_CYCLIC",
          "value": "1",
          "description": ""
        },
        {
          "name": "GRAPH_ERROR_MISSING_CONNECTIONS",
          "value": "2",
          "description": ""
        },
        {
          "name": "SCALAR_OP_ADD",
          "value": "0",
          "description": ""
        },
        {
          "name": "SCALAR_OP_SUB",
          "value": "1",
          "description": ""
        },
        {
          "name": "SCALAR_OP_MUL",
          "value": "2",
          "description": ""
        },
        {
          "name": "SCALAR_OP_DIV",
          "value": "3",
          "description": ""
        },
        {
          "name": "SCALAR_OP_MOD",
          "value": "4",
          "description": ""
        },
        {
          "name": "SCALAR_OP_POW",
          "value": "5",
          "description": ""
        },
        {
          "name": "SCALAR_OP_MAX",
          "value": "6",
          "description": ""
        },
        {
          "name": "SCALAR_OP_MIN",
          "value": "7",
          "description": ""
        },
        {
          "name": "SCALAR_OP_ATAN2",
          "value": "8",
          "description": ""
        },
        {
          "name": "SCALAR_MAX_OP",
          "value": "9",
          "description": ""
        },
        {
          "name": "VEC_OP_ADD",
          "value": "0",
          "description": ""
        },
        {
          "name": "VEC_OP_SUB",
          "value": "1",
          "description": ""
        },
        {
          "name": "VEC_OP_MUL",
          "value": "2",
          "description": ""
        },
        {
          "name": "VEC_OP_DIV",
          "value": "3",
          "description": ""
        },
        {
          "name": "VEC_OP_MOD",
          "value": "4",
          "description": ""
        },
        {
          "name": "VEC_OP_POW",
          "value": "5",
          "description": ""
        },
        {
          "name": "VEC_OP_MAX",
          "value": "6",
          "description": ""
        },
        {
          "name": "VEC_OP_MIN",
          "value": "7",
          "description": ""
        },
        {
          "name": "VEC_OP_CROSS",
          "value": "8",
          "description": ""
        },
        {
          "name": "VEC_MAX_OP",
          "value": "9",
          "description": ""
        },
        {
          "name": "VEC_SCALAR_OP_MUL",
          "value": "0",
          "description": ""
        },
        {
          "name": "VEC_SCALAR_OP_DIV",
          "value": "1",
          "description": ""
        },
        {
          "name": "VEC_SCALAR_OP_POW",
          "value": "2",
          "description": ""
        },
        {
          "name": "VEC_SCALAR_MAX_OP",
          "value": "3",
          "description": ""
        },
        {
          "name": "RGB_OP_SCREEN",
          "value": "0",
          "description": ""
        },
        {
          "name": "RGB_OP_DIFFERENCE",
          "value": "1",
          "description": ""
        },
        {
          "name": "RGB_OP_DARKEN",
          "value": "2",
          "description": ""
        },
        {
          "name": "RGB_OP_LIGHTEN",
          "value": "3",
          "description": ""
        },
        {
          "name": "RGB_OP_OVERLAY",
          "value": "4",
          "description": ""
        },
        {
          "name": "RGB_OP_DODGE",
          "value": "5",
          "description": ""
        },
        {
          "name": "RGB_OP_BURN",
          "value": "6",
          "description": ""
        },
        {
          "name": "RGB_OP_SOFT_LIGHT",
          "value": "7",
          "description": ""
        },
        {
          "name": "RGB_OP_HARD_LIGHT",
          "value": "8",
          "description": ""
        },
        {
          "name": "RGB_MAX_OP",
          "value": "9",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_SIN",
          "value": "0",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_COS",
          "value": "1",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_TAN",
          "value": "2",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_ASIN",
          "value": "3",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_ACOS",
          "value": "4",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_ATAN",
          "value": "5",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_SINH",
          "value": "6",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_COSH",
          "value": "7",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_TANH",
          "value": "8",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_LOG",
          "value": "9",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_EXP",
          "value": "10",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_SQRT",
          "value": "11",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_ABS",
          "value": "12",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_SIGN",
          "value": "13",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_FLOOR",
          "value": "14",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_ROUND",
          "value": "15",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_CEIL",
          "value": "16",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_FRAC",
          "value": "17",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_SATURATE",
          "value": "18",
          "description": ""
        },
        {
          "name": "SCALAR_FUNC_NEGATE",
          "value": "19",
          "description": ""
        },
        {
          "name": "SCALAR_MAX_FUNC",
          "value": "20",
          "description": ""
        },
        {
          "name": "VEC_FUNC_NORMALIZE",
          "value": "0",
          "description": ""
        },
        {
          "name": "VEC_FUNC_SATURATE",
          "value": "1",
          "description": ""
        },
        {
          "name": "VEC_FUNC_NEGATE",
          "value": "2",
          "description": ""
        },
        {
          "name": "VEC_FUNC_RECIPROCAL",
          "value": "3",
          "description": ""
        },
        {
          "name": "VEC_FUNC_RGB2HSV",
          "value": "4",
          "description": ""
        },
        {
          "name": "VEC_FUNC_HSV2RGB",
          "value": "5",
          "description": ""
        },
        {
          "name": "VEC_MAX_FUNC",
          "value": "6",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ShaderMaterial": {
      "name": "ShaderMaterial",
      "inherits": "Material",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_shader",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shader",
          "arguments": []
        },
        {
          "name": "get_shader_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shader",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "Shader",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shader_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Shape": {
      "name": "Shape",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Shape2D": {
      "name": "Shape2D",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Base class for all 2D Shapes.",
      "description": "Base class for all 2D Shapes. All 2D shape types inherit from this.",
      "methods": [
        {
          "name": "collide",
          "description": "Return whether this shape is colliding with another.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_xform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_and_get_contacts",
          "description": "Return a list of the points where this shape touches another. If there are no collisions, the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_xform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_with_motion",
          "description": "Return whether this shape would collide with another, if a given movement was applied.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "shape_xform",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_motion",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_with_motion_and_get_contacts",
          "description": "Return a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions, the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "shape_xform",
              "type": "Matrix32",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_motion",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_custom_solver_bias",
          "qualifiers": "const",
          "description": "Return the custom solver bias.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_custom_solver_bias",
          "description": "Use a custom solver bias. No need to change this unless you really know what you are doing.\n\t\t\t\tThe solver bias is a factor controlling how much two objects \"rebound\" off each other, when colliding, to avoid them getting into each other because of numerical imprecision.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bias",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ShortCut": {
      "name": "ShortCut",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_as_text",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_shortcut",
          "qualifiers": "const",
          "description": "",
          "return_type": "InputEvent",
          "arguments": []
        },
        {
          "name": "is_shortcut",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_shortcut",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Skeleton": {
      "name": "Skeleton",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "Skeleton for characters and animated objects.",
      "description": "Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see [Animation]). Skeleton will support rag doll dynamics in the future.",
      "methods": [
        {
          "name": "add_bone",
          "description": "Add a bone, with name \"name\". [method get_bone_count] will become the bone index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bind_child_node_to_bone",
          "description": "Deprecated soon.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_bones",
          "description": "Clear all the bones in this skeleton.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "find_bone",
          "qualifiers": "const",
          "description": "Return the bone index that matches \"name\" as its name.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_count",
          "qualifiers": "const",
          "description": "Return the amount of bones in the skeleton.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bone_custom_pose",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_global_pose",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_name",
          "qualifiers": "const",
          "description": "Return the name of the bone at index \"index\"",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_parent",
          "qualifiers": "const",
          "description": "Return the bone index which is the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note that the parent bone returned will always be less than \"bone_idx\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_pose",
          "qualifiers": "const",
          "description": "Return the pose transform for bone \"bone_idx\".",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_rest",
          "qualifiers": "const",
          "description": "Return the rest transform for a bone \"bone_idx\".",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bound_child_nodes_to_bone",
          "qualifiers": "const",
          "description": "Deprecated soon.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_bone_rest_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_custom_pose",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "custom_pose",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_disable_rest",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_global_pose",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pose",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_parent",
          "description": "Set the bone index \"parent_idx\" as the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note: \"parent_idx\" must be less than \"bone_idx\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parent_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_pose",
          "description": "Return the pose transform for bone \"bone_idx\".",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pose",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_rest",
          "description": "Set the rest transform for bone \"bone_idx\"",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rest",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unbind_child_node_from_bone",
          "description": "Deprecated soon.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unparent_bone_and_rest",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NOTIFICATION_UPDATE_SKELETON",
          "value": "50",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Slider": {
      "name": "Slider",
      "inherits": "Range",
      "category": "Core",
      "brief_description": "Base class for GUI Sliders.",
      "description": "Base class for GUI Sliders.",
      "methods": [
        {
          "name": "get_ticks",
          "qualifiers": "const",
          "description": "Return amounts of ticks to display on slider.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_ticks_on_borders",
          "qualifiers": "const",
          "description": "Return true if ticks are visible on borders.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_ticks",
          "description": "Set amount of ticks to display in slider.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "count",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ticks_on_borders",
          "description": "Set true if ticks are visible on borders.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ticks_on_border",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SliderJoint": {
      "name": "SliderJoint",
      "inherits": "Joint",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_LINEAR_LIMIT_UPPER",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_LOWER",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_RESTITUTION",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_DAMPING",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_MOTION_SOFTNESS",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_MOTION_RESTITUTION",
          "value": "6",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_MOTION_DAMPING",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_ORTHOGONAL_SOFTNESS",
          "value": "8",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_ORTHOGONAL_RESTITUTION",
          "value": "9",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_ORTHOGONAL_DAMPING",
          "value": "10",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_UPPER",
          "value": "11",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_LOWER",
          "value": "12",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_SOFTNESS",
          "value": "13",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_RESTITUTION",
          "value": "14",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_DAMPING",
          "value": "15",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTION_SOFTNESS",
          "value": "16",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTION_RESTITUTION",
          "value": "17",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTION_DAMPING",
          "value": "18",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_ORTHOGONAL_SOFTNESS",
          "value": "19",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_ORTHOGONAL_RESTITUTION",
          "value": "20",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_ORTHOGONAL_DAMPING",
          "value": "21",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "22",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SoundPlayer2D": {
      "name": "SoundPlayer2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Base class for playing spatial 2D sound.",
      "description": "Base class for playing spatial 2D sound.",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_VOLUME_DB",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_PITCH_SCALE",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION_MIN_DISTANCE",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION_MAX_DISTANCE",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION_DISTANCE_EXP",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "5",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SoundRoomParams": {
      "name": "SoundRoomParams",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_reverb_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_forcing_params_to_all_sources",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_force_params_to_all_sources",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_reverb_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "reverb_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Spatial": {
      "name": "Spatial",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Base class for all 3D nodes.",
      "description": "Spatial is the base for every type of 3D [Node]. It contains a 3D [Transform] which can be set or get as local or global. If a Spatial [Node] has Spatial children, their transforms will be relative to the parent.",
      "methods": [
        {
          "name": "get_gizmo",
          "qualifiers": "const",
          "description": "",
          "return_type": "SpatialGizmo",
          "arguments": []
        },
        {
          "name": "get_global_transform",
          "qualifiers": "const",
          "description": "Return the global transform, relative to worldspace.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "get_parent_spatial",
          "qualifiers": "const",
          "description": "Return the parent [Spatial], or an empty [Object] if no parent exists or parent is not of type [Spatial].",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_rotation_deg",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Return the local transform, relative to the bone parent.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "get_translation",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_world",
          "qualifiers": "const",
          "description": "",
          "return_type": "World",
          "arguments": []
        },
        {
          "name": "global_rotate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "global_translate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hide",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_hidden",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_local_transform_notification_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_set_as_toplevel",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_visible",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "look_at",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "look_at_from_pos",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "orthonormalize",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_x",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_y",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_z",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_as_toplevel",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gizmo",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gizmo",
              "type": "SpatialGizmo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_transform",
          "description": "Set the transform globally, relative to worldspace.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "global",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hidden",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hidden",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_identity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_ignore_transform_notification",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_notify_local_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotation_rad",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation_deg",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotation_deg",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scale",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Set the transform locally, relative to the parent spatial node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_translation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "translation",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "translate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_gizmo",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "visibility_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_TRANSFORM_CHANGED",
          "value": "29",
          "description": "Spatial nodes receive this notification with their global transform changes. This means that either the current or a parent node changed its transform."
        },
        {
          "name": "NOTIFICATION_ENTER_WORLD",
          "value": "41",
          "description": ""
        },
        {
          "name": "NOTIFICATION_EXIT_WORLD",
          "value": "42",
          "description": ""
        },
        {
          "name": "NOTIFICATION_VISIBILITY_CHANGED",
          "value": "43",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SpatialGizmo": {
      "name": "SpatialGizmo",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpatialPlayer": {
      "name": "SpatialPlayer",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_VOLUME_DB",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_PITCH_SCALE",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION_MIN_DISTANCE",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION_MAX_DISTANCE",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION_DISTANCE_EXP",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_EMISSION_CONE_DEGREES",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARAM_EMISSION_CONE_ATTENUATION_DB",
          "value": "6",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "7",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SpatialSamplePlayer": {
      "name": "SpatialSamplePlayer",
      "inherits": "SpatialPlayer",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_polyphony",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_sample_library",
          "qualifiers": "const",
          "description": "",
          "return_type": "SampleLibrary",
          "arguments": []
        },
        {
          "name": "is_voice_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "play",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "voice",
              "type": "int",
              "default_value": "-2"
            }
          ]
        },
        {
          "name": "set_polyphony",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voices",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sample_library",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "library",
              "type": "SampleLibrary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop_all",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "stop_voice",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_set_pitch_scale",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "voice_set_volume_scale_db",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "INVALID_VOICE",
          "value": "-1",
          "description": ""
        },
        {
          "name": "NEXT_VOICE",
          "value": "-2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SpatialSound2DServer": {
      "name": "SpatialSound2DServer",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Server for Spatial 2D Sound.",
      "description": "Server for Spatial 2D Sound.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpatialSound2DServerSW": {
      "name": "SpatialSound2DServerSW",
      "inherits": "SpatialSound2DServer",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpatialSoundServer": {
      "name": "SpatialSoundServer",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpatialSoundServerSW": {
      "name": "SpatialSoundServerSW",
      "inherits": "SpatialSoundServer",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpatialStreamPlayer": {
      "name": "SpatialStreamPlayer",
      "inherits": "SpatialPlayer",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_buffering_msec",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_loop_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_loop_restart_time",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_stream",
          "qualifiers": "const",
          "description": "",
          "return_type": "AudioStream",
          "arguments": []
        },
        {
          "name": "get_stream_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_volume",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_volume_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_autoplay",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_paused",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "seek_pos",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_buffering_msec",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "msec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop_restart_time",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "secs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_paused",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paused",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "AudioStream",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "volume",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume_db",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SphereShape": {
      "name": "SphereShape",
      "inherits": "Shape",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_radius",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpinBox": {
      "name": "SpinBox",
      "inherits": "Range",
      "category": "Core",
      "brief_description": "Numerical input text field.",
      "description": "SpinBox is a numerical input text field. It allows entering integers and floats.",
      "methods": [
        {
          "name": "get_line_edit",
          "description": "",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_prefix",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_suffix",
          "qualifiers": "const",
          "description": "Return the specific suffix.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_editable",
          "qualifiers": "const",
          "description": "Return if the spinbox is editable.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_editable",
          "description": "Set whether the spinbox is editable.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "editable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_prefix",
          "description": "Set a prefix.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "prefix",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suffix",
          "description": "Set a specific suffix.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "suffix",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "updown",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "SplitContainer": {
      "name": "SplitContainer",
      "inherits": "Container",
      "category": "Core",
      "brief_description": "Container for splitting and adjusting.",
      "description": "Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.",
      "methods": [
        {
          "name": "get_dragger_visibility",
          "qualifiers": "const",
          "description": "Return visibility of the split dragger(One of [DRAGGER_VISIBLE], [DRAGGER_HIDDEN] or [DRAGGER_HIDDEN_COLLAPSED]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_split_offset",
          "qualifiers": "const",
          "description": "Return the split offset.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_collapsed",
          "qualifiers": "const",
          "description": "Return true if the split is collapsed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_collapsed",
          "description": "Set if the split must be collapsed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collapsed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dragger_visibility",
          "description": "Set visibility of the split dragger([i]mode[/i] must be one of [DRAGGER_VISIBLE], [DRAGGER_HIDDEN] or [DRAGGER_HIDDEN_COLLAPSED]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_split_offset",
          "description": "Set the split offset.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "dragged",
          "description": "Emmited when the dragger is gragged by user.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "DRAGGER_VISIBLE",
          "value": "0",
          "description": "The split dragger is visible."
        },
        {
          "name": "DRAGGER_HIDDEN",
          "value": "1",
          "description": "The split dragger is invisible."
        },
        {
          "name": "DRAGGER_HIDDEN_COLLAPSED",
          "value": "2",
          "description": "The split dragger is invisible and collapsed."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SpotLight": {
      "name": "SpotLight",
      "inherits": "Light",
      "category": "Core",
      "brief_description": "Spotlight [Light], such as a reflector spotlight or a lantern.",
      "description": "A SpotLight light is a type of [Light] node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light]. TODO: Image of a spotlight.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Sprite": {
      "name": "Sprite",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "General purpose Sprite node.",
      "description": "General purpose Sprite node. This Sprite node can show any texture as a sprite. The texture can be used as a spritesheet for animation, or only a region from a bigger texture can referenced, like an atlas.",
      "methods": [
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "Return the texture frame for a sprite-sheet, works when vframes or hframes are greater than 1.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_hframes",
          "qualifiers": "const",
          "description": "Return the amount of horizontal frames. See [method set_hframes].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "Return color modulation for the sprite. All sprite pixels are multiplied by this color.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return sprite draw offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_region_rect",
          "qualifiers": "const",
          "description": "Return the region rect to read from.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Return the base texture for the sprite.",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_vframes",
          "qualifiers": "const",
          "description": "Return the amount of vertical frames. See [method set_vframes].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_centered",
          "qualifiers": "const",
          "description": "Return if the sprite is centered at the local origin.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_h",
          "qualifiers": "const",
          "description": "Return true if the sprite is flipped horizontally.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_v",
          "qualifiers": "const",
          "description": "Return true if the sprite is flipped vertically.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_region",
          "qualifiers": "const",
          "description": "Return if the sprite reads from a region.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_centered",
          "description": "Set whether the sprite should be centered on the origin.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "centered",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_h",
          "description": "Set true to flip the sprite horizontally.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_h",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_v",
          "description": "Set true to flip the sprite vertically.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_v",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_frame",
          "description": "Set the texture frame for a sprite-sheet, works when vframes or hframes are greater than 1.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frame",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hframes",
          "description": "Set the amount of horizontal frames and converts the sprite into a sprite-sheet. This is useful for animation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hframes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "Set color modulation for the sprite. All sprite pixels are multiplied by this color.  Color may contain rgb values above 1 to achieve a highlight effect.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "modulate",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the sprite draw offset, useful for setting rotation pivots.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region",
          "description": "Set the sprite as a sub-region of a bigger texture. Useful for texture-atlases.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_rect",
          "description": "Set the region rect to read from.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "Set the base texture for the sprite.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vframes",
          "description": "Set the amount of vertical frames and converts the sprite into a sprite-sheet. This is useful for animation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vframes",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "frame_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "texture_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Sprite3D": {
      "name": "Sprite3D",
      "inherits": "SpriteBase3D",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_hframes",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_region_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_vframes",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frame",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hframes",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hframes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_rect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vframes",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vframes",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "frame_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpriteBase3D": {
      "name": "SpriteBase3D",
      "inherits": "GeometryInstance",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_alpha_cut_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_axis",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_draw_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_opacity",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_pixel_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_centered",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_h",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_v",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_alpha_cut_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_axis",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_centered",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "centered",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_flag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_h",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_h",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_v",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_v",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "modulate",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_opacity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "opacity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pixel_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pixel_size",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_TRANSPARENT",
          "value": "0",
          "description": ""
        },
        {
          "name": "FLAG_SHADED",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_DOUBLE_SIDED",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_ONTOP",
          "value": "3",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "4",
          "description": ""
        },
        {
          "name": "ALPHA_CUT_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "ALPHA_CUT_DISCARD",
          "value": "1",
          "description": ""
        },
        {
          "name": "ALPHA_CUT_OPAQUE_PREPASS",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SpriteFrames": {
      "name": "SpriteFrames",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Sprite frame library for AnimatedSprite.",
      "description": "Sprite frame library for [AnimatedSprite].",
      "methods": [
        {
          "name": "add_animation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "frame",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "atpos",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_all",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_animation_loop",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation_speed",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_frame_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_animation",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_animation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_animation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "newname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_loop",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "loop",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_speed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "txt",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StaticBody": {
      "name": "StaticBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "brief_description": "Static body for 3D Physics.",
      "description": "Static body for 3D Physics. A static body is a simple body that is not intended to move. They don't consume any CPU resources in contrast to a [RigidBody3D] so they are great for scenario collision.\n\t\tA static body can also be animated by using simulated motion mode. This is useful for implementing functionalities such as moving platforms. When this mode is active the body can be animated and automatically computes linear and angular velocity to apply in that frame and to influence other bodies.\n\t\tAlternatively, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).",
      "methods": [
        {
          "name": "get_bounce",
          "qualifiers": "const",
          "description": "Return the body bounciness.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_constant_angular_velocity",
          "qualifiers": "const",
          "description": "Return the constant angular velocity for the body.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_constant_linear_velocity",
          "qualifiers": "const",
          "description": "Return the constant linear velocity for the body.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "Return the body friction.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_bounce",
          "description": "Set the body bounciness, from 0 (not bouncy) to 1 (bouncy).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounce",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant_angular_velocity",
          "description": "Set a constant angular velocity for the body. This does not rotate the body, but affects other bodies touching it, as if it was rotating.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vel",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant_linear_velocity",
          "description": "Set a constant linear velocity for the body. This does not move the body, but affects other bodies touching it, as if it was moving.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vel",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "Set the body friction, from 0 (frictionless) to 1 (full friction).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StaticBody2D": {
      "name": "StaticBody2D",
      "inherits": "PhysicsBody2D",
      "category": "Core",
      "brief_description": "Static body for 2D Physics.",
      "description": "Static body for 2D Physics. A static body is a simple body that is not intended to move. They don't consume any CPU resources in contrast to a [RigidBody2D] so they are great for scenario collision.\n\t\tA static body can also be animated by using simulated motion mode. This is useful for implementing functionalities such as moving platforms. When this mode is active the body can be animated and automatically computes linear and angular velocity to apply in that frame and to influence other bodies.\n\t\tAlternatively, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).",
      "methods": [
        {
          "name": "get_bounce",
          "qualifiers": "const",
          "description": "Return the body bounciness.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_constant_angular_velocity",
          "qualifiers": "const",
          "description": "Return the constant angular velocity for the body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_constant_linear_velocity",
          "qualifiers": "const",
          "description": "Return the constant linear velocity for the body.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "Return the body friction.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_bounce",
          "description": "Set the body bounciness, from 0 (not bouncy) to 1 (bouncy).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounce",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant_angular_velocity",
          "description": "Set a constant angular velocity for the body. This does not rotate the body, but affects other bodies touching it, as if it was rotating.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vel",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant_linear_velocity",
          "description": "Set a constant linear velocity for the body. This does not move the body, but affects other bodies touching it, as if it was moving.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vel",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "Set the body friction, from 0 (frictionless) to 1 (full friction).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StreamPeer": {
      "name": "StreamPeer",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Abstraction and base class for stream-based protocols.",
      "description": "StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or Unix Sockets). It provides an API for sending and receiving data through streams as raw data or strings.",
      "methods": [
        {
          "name": "get_16",
          "description": "Get a signed 16 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_32",
          "description": "Get a signed 32 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_64",
          "description": "Get a signed 64 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_8",
          "description": "Get a signed byte from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_available_bytes",
          "qualifiers": "const",
          "description": "Return the amount of bytes this [StreamPeer] has available.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_data",
          "description": "Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an Error code and a data array.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_double",
          "description": "Get a double-precision float from the stream.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_float",
          "description": "Get a single-precision float from the stream.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_partial_data",
          "description": "Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an Error code, and a data array.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_string",
          "description": "Get a string with byte-length \"bytes\" from the stream.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_u16",
          "description": "Get an unsigned 16 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_u32",
          "description": "Get an unsigned 32 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_u64",
          "description": "Get an unsigned 16 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_u8",
          "description": "Get an unsigned byte from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_utf8_string",
          "description": "Get an utf8 string with byte-length \"bytes\" from the stream (this decodes the string sent as utf8).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_var",
          "description": "Get a Variant from the stream.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_big_endian_enabled",
          "qualifiers": "const",
          "description": "Return whether this [StreamPeer] is using big-endian format.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "put_16",
          "description": "Put a signed 16 bit value into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_32",
          "description": "Put a signed 32 bit value into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_64",
          "description": "Put a signed 64 bit value into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_8",
          "description": "Put a signed byte into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_data",
          "description": "Send a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an Error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_double",
          "description": "Put a double-precision float into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_float",
          "description": "Put a single-precision float into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_partial_data",
          "description": "Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an Error code and an integer, describing how much data was actually sent.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u16",
          "description": "Put an unsigned 16 bit value into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u32",
          "description": "Put an unsigned 32 bit value into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u64",
          "description": "Put an unsigned 64 bit value into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u8",
          "description": "Put an unsigned byte into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_utf8_string",
          "description": "Put a zero-terminated utf8 string into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_var",
          "description": "Put a Variant into the stream.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_big_endian",
          "description": "Set this [StreamPeer] to use big-endian format. Default is false.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StreamPeerBuffer": {
      "name": "StreamPeerBuffer",
      "inherits": "StreamPeer",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "duplicate",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_data_array",
          "qualifiers": "const",
          "description": "",
          "return_type": "RawArray",
          "arguments": []
        },
        {
          "name": "get_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "resize",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_data_array",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StreamPeerSSL": {
      "name": "StreamPeerSSL",
      "inherits": "StreamPeer",
      "category": "Core",
      "brief_description": "SSL Stream peer.",
      "description": "SSL Stream peer. This object can be used to connect to SSL servers.",
      "methods": [
        {
          "name": "accept",
          "description": "",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "StreamPeer",
              "default_value": ""
            }
          ]
        },
        {
          "name": "connect",
          "description": "Connect to a peer using an underlying [StreamPeer] \"stream\", when \"validate_certs\" is true, [StreamPeerSSL] will validate that the certificate presented by the peer matches the \"for_hostname\".",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "StreamPeer",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "validate_certs",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "for_hostname",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "disconnect",
          "description": "Disconnect from host.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_status",
          "qualifiers": "const",
          "description": "Return the status of the connection, one of STATUS_* enum.",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STATUS_DISCONNECTED",
          "value": "0",
          "description": "A status representing a [StreamPeerSSL] that is disconnected."
        },
        {
          "name": "STATUS_CONNECTED",
          "value": "1",
          "description": "A status representing a [StreamPeerSSL] that is connected to a host."
        },
        {
          "name": "STATUS_ERROR_NO_CERTIFICATE",
          "value": "2",
          "description": "An errot status that shows the peer did not present a SSL certificate and validation was requested."
        },
        {
          "name": "STATUS_ERROR_HOSTNAME_MISMATCH",
          "value": "3",
          "description": "An error status that shows a mismatch in the SSL certificate domain presented by the host and the domain requested for validation."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "StreamPeerTCP": {
      "name": "StreamPeerTCP",
      "inherits": "StreamPeer",
      "category": "Core",
      "brief_description": "TCP Stream peer.",
      "description": "TCP Stream peer. This object can be used to connect to TCP servers, or also is returned by a tcp server.",
      "methods": [
        {
          "name": "connect",
          "description": "Connect to the specified host:port pair. A hostname will be resolved if valid. Returns [OK] on success or [FAILED] on failure.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect",
          "description": "Disconnect from host.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connected_host",
          "qualifiers": "const",
          "description": "Return the IP of this peer.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_connected_port",
          "qualifiers": "const",
          "description": "Return the port of this peer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_status",
          "qualifiers": "const",
          "description": "Return the status of the connection, one of STATUS_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_connected",
          "qualifiers": "const",
          "description": "Return whether this peer is connected. Returns true while connecting and connected.",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STATUS_NONE",
          "value": "0",
          "description": "The initial status of the [StreamPeerTCP], also the status after a disconnect."
        },
        {
          "name": "STATUS_CONNECTING",
          "value": "1",
          "description": "A status representing a [StreamPeerTCP] that is connecting to a host."
        },
        {
          "name": "STATUS_CONNECTED",
          "value": "2",
          "description": "A status representing a [StreamPeerTCP] that is connected to a host."
        },
        {
          "name": "STATUS_ERROR",
          "value": "3",
          "description": "A staus representing a [StreamPeerTCP] in error state."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "StreamPlayer": {
      "name": "StreamPlayer",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Base class for audio stream playback.",
      "description": "Base class for audio stream playback. Audio stream players inherit from it.",
      "methods": [
        {
          "name": "get_buffering_msec",
          "qualifiers": "const",
          "description": "Return the size of the audio buffer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the length of the stream, in seconds.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_loop_count",
          "qualifiers": "const",
          "description": "Return the number of times the playback has looped.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_loop_restart_time",
          "qualifiers": "const",
          "description": "Return the point in time the stream will rewind to, when looping.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_pos",
          "qualifiers": "const",
          "description": "Return the playback position, in seconds.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_stream",
          "qualifiers": "const",
          "description": "Return the currently assigned stream.",
          "return_type": "AudioStream",
          "arguments": []
        },
        {
          "name": "get_stream_name",
          "qualifiers": "const",
          "description": "Return the name of the currently assigned stream. This is not the file name, but a field inside the file. If no stream is assigned, if returns \"<No Stream>\".",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_volume",
          "qualifiers": "const",
          "description": "Return the playback volume for this player.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_volume_db",
          "qualifiers": "const",
          "description": "Return the playback volume for this player, in decibels.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_autoplay",
          "qualifiers": "const",
          "description": "Return whether this player will start playing as soon as it enters the scene tree.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "Return whether the stream will be restarted at the end.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_paused",
          "qualifiers": "const",
          "description": "Return whether the playback is currently paused.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return whether this player is playing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play the currently assigned stream, starting from a given position (in seconds).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "seek_pos",
          "description": "Set the playback position, in seconds.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "Set whether this player will start playing as soon as it enters the scene tree.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_buffering_msec",
          "description": "Set the size (in milliseconds) of the audio buffer. A long audio buffer protects better against slowdowns, but responds worse to changes (in volume, stream played...). A shorter buffer takes less time to respond to changes, but may stutter if the application suffers some slowdown.\n\t\t\t\tDefault is 500 milliseconds.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "msec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "Set whether the stream will be restarted at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop_restart_time",
          "description": "Set the point in time the stream will rewind to, when looping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "secs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_paused",
          "description": "Pause stream playback.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paused",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream",
          "description": "Set the [EventStream] this player will play.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "AudioStream",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume",
          "description": "Set the playback volume for this player. This is a float between 0.0 (silent) and 1.0 (full volume). Values over 1.0 will amplify sound even more, but may introduce distortion. Negative values will just invert the output waveform, which produces no audible difference.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "volume",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume_db",
          "description": "Set the playback volume for this player, in decibels. This is a float between -80.0 (silent) and 0.0 (full volume). Values under -79.0 get truncated to -80, but values over 0.0 do not, so the warnings for overamplifying (see [method set_volume]) still apply.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the playback.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "finished",
          "description": "This signal triggers when the player stops playing. It will not trigger on each loop.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "String": {
      "name": "String",
      "category": "Built-In Types",
      "brief_description": "Built-in string class.",
      "description": "This is the built-in string class (and the one used by GDScript). It supports Unicode and provides all necessary means for string handling. Strings are reference counted and use a copy-on-write approach, so passing them around is cheap in resources.",
      "methods": [
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Matrix3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "ColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "basename",
          "description": "If the string is a path to a file, return the path to the file without the extension.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "begins_with",
          "description": "Return true if the strings begins with the given string.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bigrams",
          "description": "Return the bigrams (pairs of consecutive letters) of this string.",
          "return_type": "StringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "c_escape",
          "description": "Return a copy of the string with special characters escaped using the C language standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "c_unescape",
          "description": "Return a copy of the string with escaped characters replaced by their meanings according to the C language standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "capitalize",
          "description": "Change the case of some letters. Replace underscores with spaces, convert all letters to lowercase then capitalize first and every letter following the space character. For [code]capitalize camelCase mixed_with_underscores[/code] it will return [code]Capitalize Camelcase Mixed With Underscores[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "casecmp_to",
          "description": "Perform a case-sensitive comparison to another string, return -1 if less, 0 if equal and +1 if greater.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "empty",
          "description": "Return true if the string is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "ends_with",
          "description": "Return true if the strings ends with the given string.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase",
          "description": "Erase [code]chars[/code] characters from the string starting from [code]pos[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "chars",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "extension",
          "description": "If the string is a path to a file, return the extension.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "find",
          "description": "Find the first occurrence of a substring, return the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "find_last",
          "description": "Find the last occurrence of a substring, return the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "findn",
          "description": "Find the first occurrence of a substring but search as case-insensitive, return the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "format",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "values",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "placeholder",
              "type": "String",
              "default_value": "{_}"
            }
          ]
        },
        {
          "name": "get_base_dir",
          "description": "If the string is a path to a file, return the base directory.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_file",
          "description": "If the string is a path to a file, return the file and ignore the base directory.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "hash",
          "description": "Hash the string and return a 32 bits integer.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "hex_to_int",
          "description": "Convert a string containing an hexadecimal number into an int.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "insert",
          "description": "Insert a substring at a given position.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "what",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_abs_path",
          "description": "If the string is a path to a file or directory, return true if the path is absolute.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_rel_path",
          "description": "If the string is a path to a file or directory, return true if the path is relative.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_subsequence_of",
          "description": "Check whether this string is a subsequence of the given string.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_subsequence_ofi",
          "description": "Check whether this string is a subsequence of the given string, without considering case.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_valid_float",
          "description": "Check whether the string contains a valid float.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_html_color",
          "description": "Check whether the string contains a valid color in HTML notation.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_identifier",
          "description": "Check whether the string is a valid identifier. As is common in programming languages, a valid identifier may contain only letters, digits and underscores (_) and the first character may not be a digit.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_integer",
          "description": "Check whether the string contains a valid integer.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_ip_address",
          "description": "Check whether the string contains a valid IP address.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "json_escape",
          "description": "Return a copy of the string with special characters escaped using the JSON standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "left",
          "description": "Return an amount of characters from the left of the string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "length",
          "description": "Return the length of the string in characters.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "match",
          "description": "Do a simple expression match, where '*' matches zero or more arbitrary characters and '?' matches any single character except '.'.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "expr",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "matchn",
          "description": "Do a simple case insensitive expression match, using ? and * wildcards (see [method match]).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "expr",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "md5_buffer",
          "description": "Return the MD5 hash of the string as an array of bytes.",
          "return_type": "RawArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "md5_text",
          "description": "Return the MD5 hash of the string as a string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "nocasecmp_to",
          "description": "Perform a case-insensitive comparison to another string, return -1 if less, 0 if equal and +1 if greater.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ord_at",
          "description": "Return the character code at position [code]at[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "at",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pad_decimals",
          "description": "Format a number to have an exact number of [code]digits[/code] after the decimal point.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "digits",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pad_zeros",
          "description": "Format a number to have an exact number of [code]digits[/code] before the decimal point.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "digits",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "percent_decode",
          "description": "Decode a percent-encoded string. See [method percent_encode].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "percent_encode",
          "description": "Percent-encode a string. This is meant to encode parameters in a URL when sending a HTTP GET request and bodies of form-urlencoded POST request.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "plus_file",
          "description": "If the string is a path, this concatenates [code]file[/code] at the end of the string as a subpath. E.g. [code]\"this/is\".plus_file(\"path\") == \"this/is/path\"[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "replace",
          "description": "Replace occurrences of a substring for different ones inside the string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "forwhat",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "replacen",
          "description": "Replace occurrences of a substring for different ones inside the string, but search case-insensitive.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "forwhat",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rfind",
          "description": "Perform a search for a substring, but start from the end of the string instead of the beginning.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "rfindn",
          "description": "Perform a search for a substring, but start from the end of the string instead of the beginning. Also search case-insensitive.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "right",
          "description": "Return the right side of the string from a given position.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sha256_buffer",
          "description": "",
          "return_type": "RawArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sha256_text",
          "description": "Return the SHA-256 hash of the string as a string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "similarity",
          "description": "Return the similarity index of the text compared to this string. 1 means totally similar and 0 means totally dissimilar.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "split",
          "description": "Split the string by a divisor string, return an array of the substrings. Example \"One,Two,Three\" will return [\"One\",\"Two\",\"Three\"] if split by \",\".",
          "return_type": "StringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "divisor",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "allow_empty",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "split_floats",
          "description": "Split the string in floats by using a divisor string, return an array of the substrings. Example \"1,2.5,3\" will return [1,2.5,3] if split by \",\".",
          "return_type": "RealArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "divisor",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "allow_empty",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "strip_edges",
          "description": "Return a copy of the string stripped of any non-printable character at the beginning and the end. The optional arguments are used to toggle stripping on the left and right edges respectively.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "bool",
              "default_value": "True"
            },
            {
              "index": "1",
              "name": "right",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "substr",
          "description": "Return part of the string from the position [code]from[/code], with length [code]len[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "len",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_ascii",
          "description": "Convert the String (which is a character array) to RawArray (which is an array of bytes). The conversion is speeded up in comparison to to_utf8() with the assumption that all the characters the String contains are only ASCII characters.",
          "return_type": "RawArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_float",
          "description": "Convert a string, containing a decimal number, into a [code]float[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_int",
          "description": "Convert a string, containing an integer number, into an [code]int[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_lower",
          "description": "Return the string converted to lowercase.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_upper",
          "description": "Return the string converted to uppercase.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_utf8",
          "description": "Convert the String (which is an array of characters) to RawArray (which is an array of bytes). The conversion is a bit slower than to_ascii(), but supports all UTF-8 characters. Therefore, you should prefer this function over to_ascii().",
          "return_type": "RawArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "xml_escape",
          "description": "Return a copy of the string with special characters escaped using the XML standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "xml_unescape",
          "description": "Return a copy of the string with escaped characters replaced by their meanings according to the XML standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StringArray": {
      "name": "StringArray",
      "category": "Built-In Types",
      "brief_description": "String Array.",
      "description": "String Array. Array of strings. Can only contain strings. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "StringArray",
          "description": "Create from a generic array.",
          "return_type": "StringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [StringArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "StringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append a string element at end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the [StringArray]. If larger than the current size it will reserve some space beforehand, and if it is smaller it will cut off the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [String] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StyleBox": {
      "name": "StyleBox",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Base class for drawing stylized boxes for the UI.",
      "description": "StyleBox is [Resource] that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.",
      "methods": [
        {
          "name": "draw",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_center_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_default_margin",
          "qualifiers": "const",
          "description": "Return the default offset of the margin \"margin\" (see MARGIN_* enum) of a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "Return the offset of margin \"margin\" (see MARGIN_* enum).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_minimum_size",
          "qualifiers": "const",
          "description": "Return the minimum size that this stylebox can be shrunk to.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the \"offset\" of a stylebox, this is a helper function, like writing [code]Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))[/code].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_default_margin",
          "description": "Set the default offset \"offset\" of the margin \"margin\" (see MARGIN_* enum) for a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "test_mask",
          "qualifiers": "const",
          "description": "Test a position in a rectangle, return whether it passes the mask test.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StyleBoxEmpty": {
      "name": "StyleBoxEmpty",
      "inherits": "StyleBox",
      "category": "Core",
      "brief_description": "Empty stylebox (does not display anything).",
      "description": "Empty stylebox (really does not display anything).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StyleBoxFlat": {
      "name": "StyleBoxFlat",
      "inherits": "StyleBox",
      "category": "Core",
      "brief_description": "Stylebox of a single color.",
      "description": "Stylebox of a single color. Displays the stylebox of a single color, alternatively a border with light/dark colors can be assigned.",
      "methods": [
        {
          "name": "get_bg_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_border_blend",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_border_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_dark_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_draw_center",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_light_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "set_bg_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_border_blend",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "blend",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_border_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dark_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_center",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_light_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StyleBoxImageMask": {
      "name": "StyleBoxImageMask",
      "inherits": "StyleBox",
      "category": "Core",
      "brief_description": "Image mask based StyleBox, for mask test.",
      "description": "This StyleBox is similar to [StyleBoxTexture], but only meant to be used for mask testing. It takes an image and applies stretch rules to determine if the point clicked is masked or not.",
      "methods": [
        {
          "name": "get_expand",
          "qualifiers": "const",
          "description": "Return whether the expand property is set(default). When expanding, the image will use the same rules as [StyleBoxTexture] for expand. If not expanding, the image will always be tested at its original size.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_expand_margin_size",
          "qualifiers": "const",
          "description": "Return the expand margin size (from enum MARGIN_*). Parts of the image below the size of the margin (and in the direction of the margin) will not expand.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_image",
          "qualifiers": "const",
          "description": "Return the image used for mask testing. (see [method set_image]).",
          "return_type": "Image",
          "arguments": []
        },
        {
          "name": "set_expand",
          "description": "Set the expand property (default). When expanding, the image will use the same rules as [StyleBoxTexture] for expand. If not expanding, the image will always be tested at its original size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "expand",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_size",
          "description": "Set an expand margin size (from enum MARGIN_*). Parts of the image below the size of the margin (and in the direction of the margin) will not expand.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_image",
          "description": "Set the image used for mask testing. Pixels (converted to grey) that have a value, less than 0.5 will fail the test.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StyleBoxTexture": {
      "name": "StyleBoxTexture",
      "inherits": "StyleBox",
      "category": "Core",
      "brief_description": "Texture Based 3x3 scale style.",
      "description": "Texture Based 3x3 scale style. This stylebox performs a 3x3 scaling of a texture, where only the center cell is fully stretched. This allows for the easy creation of bordered styles.",
      "methods": [
        {
          "name": "get_draw_center",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_expand_margin_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_margin_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_region_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "set_draw_center",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin_size",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_rect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "texture_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SurfaceTool": {
      "name": "SurfaceTool",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Helper tool to create geometry.",
      "description": "The [SurfaceTool] is used to construct a [Mesh] by specifying vertex attributes individually. It can be used to construct a [Mesh] from script. All properties except index need to be added before a call to [method add_vertex]. For example adding vertex colors and UVs looks like\n\t\t[codeblock]\n\t\tvar st = SurfaceTool.new()\n\t\tst.begin(Mesh.PRIMITIVE_TRIANGLES)\n\t\tst.add_color(Color(1, 0, 0))\n\t\tst.add_uv(Vector2(0, 0))\n\t\tst.add_vertex(Vector3(0, 0, 0))\n\t\t[/codeblock]\n\t\tThe [SurfaceTool] now contains one vertex of a triangle which has a UV coordinate and a specified [Color]. If another vertex were added without calls to [method add_uv] or [method add_color] then the last values would be used.\n\t\tIt is very important that vertex attributes are passed [b]before[/b] the call to [method add_vertex], failure to do this will result in an error when committing the vertex information to a mesh.",
      "methods": [
        {
          "name": "add_bones",
          "description": "Add an array of bones for the next Vertex to use.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bones",
              "type": "IntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_color",
          "description": "Specify a [Color] for the next Vertex to use.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_index",
          "description": "Adds an index to index array if you are using indexed Vertices. Does not need to be called before adding Vertex.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_normal",
          "description": "Specify a normal for the next Vertex to use.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_smooth_group",
          "description": "Specify whether current Vertex (if using only Vertex arrays) or current index (if also using index arrays) should utilize smooth normals for normal calculation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "smooth",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_tangent",
          "description": "Specify a Tangent for the next Vertex to use.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tangent",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_to_format",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_triangle_fan",
          "description": "Insert a triangle fan made of array data into [Mesh] being constructed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertexes",
              "type": "Vector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "uvs",
              "type": "Vector2Array",
              "default_value": "Vector2Array([])"
            },
            {
              "index": "2",
              "name": "colors",
              "type": "ColorArray",
              "default_value": "ColorArray([ColorArray])"
            },
            {
              "index": "3",
              "name": "uv2s",
              "type": "Vector2Array",
              "default_value": "Vector2Array([])"
            },
            {
              "index": "4",
              "name": "normals",
              "type": "Vector3Array",
              "default_value": "Vector3Array([])"
            },
            {
              "index": "5",
              "name": "tangents",
              "type": "Array",
              "default_value": "Array()"
            }
          ]
        },
        {
          "name": "add_uv",
          "description": "Specify UV Coordinate for next Vertex to use.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_uv2",
          "description": "Specify an optional second set of UV coordinates for next Vertex to use.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_vertex",
          "description": "Specify position of current Vertex. Should be called after specifying other vertex properties (e.g. Color, UV).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertex",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_weights",
          "description": "Specify weight value for next Vertex to use.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "weights",
              "type": "RealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_from",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing",
              "type": "Mesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "begin",
          "description": "Called before adding any Vertices. Takes the primitive type as an argument (e.g. Mesh.PRIMITIVE_TRIANGLES).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "primitive",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear all information passed into the surface tool so far.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit",
          "description": "Returns a constructed [Mesh] from current information passed in. If an existing [Mesh] is passed in as an argument, will add an extra surface to the existing [Mesh].",
          "return_type": "Mesh",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing",
              "type": "Mesh",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "create_from",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing",
              "type": "Mesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "deindex",
          "description": "Removes index array by expanding Vertex array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "generate_normals",
          "description": "Generates normals from Vertices so you do not have to do it manually.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "generate_tangents",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "index",
          "description": "Shrinks Vertex array by creating an index array. Avoids reusing Vertices.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_material",
          "description": "Sets [Material] to be used by the [Mesh] you are constructing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "TCP_Server": {
      "name": "TCP_Server",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "TCP Server.",
      "description": "TCP Server class. Listens to connections on a port and returns a [StreamPeerTCP] when got a connection.",
      "methods": [
        {
          "name": "is_connection_available",
          "qualifiers": "const",
          "description": "Return true if a connection is available for taking.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "listen",
          "description": "Listen on the \"port\" binding to \"bind_address\".\n\t\t\t\tIf \"bind_address\" is set as \"*\" (default), the server will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf \"bind_address\" is set as \"0.0.0.0\" (for IPv4) or \"::\" (for IPv6), the server will listen on all available addresses matching that IP type.\n\t\t\t\tIf \"bind_address\" is set to any valid address (e.g. \"192.168.1.101\", \"::1\", etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bind_address",
              "type": "String",
              "default_value": "\"*\""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop listening.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "take_connection",
          "description": "If a connection is available, return a StreamPeerTCP with the connection/",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "TabContainer": {
      "name": "TabContainer",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Tabbed Container.",
      "description": "Tabbed Container. Contains several children controls, but shows only one at the same time. Clicking on the top tabs allows to change the currently visible one.\n\t\tChildren controls of this one automatically.",
      "methods": [
        {
          "name": "are_tabs_visible",
          "qualifiers": "const",
          "description": "Return whether the tabs should be visible or hidden.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_current_tab",
          "qualifiers": "const",
          "description": "Return the current tab index that is being shown.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_current_tab_control",
          "qualifiers": "const",
          "description": "Return the current tab control that is being shown.",
          "return_type": "Control",
          "arguments": []
        },
        {
          "name": "get_popup",
          "qualifiers": "const",
          "description": "",
          "return_type": "Popup",
          "arguments": []
        },
        {
          "name": "get_previous_tab",
          "qualifiers": "const",
          "description": "Return the previous tab index that was being shown.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_align",
          "qualifiers": "const",
          "description": "Return tab alignment, from the ALIGN_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_control",
          "qualifiers": "const",
          "description": "",
          "return_type": "Control",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_count",
          "qualifiers": "const",
          "description": "Return the amount of tabs.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_title",
          "qualifiers": "const",
          "description": "Return the title for the tab. Tab titles are by default the children node name, but this can be overridden.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_tab",
          "description": "Bring a tab (and the Control it represents) to the front, and hide the rest.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_popup",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "popup",
              "type": "Popup",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_align",
          "description": "Set tab alignment, from the ALIGN_* enum. Moves tabs to the left, right or center.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_icon",
          "description": "Set an icon for a tab.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_title",
          "description": "Set a title for the tab. Tab titles are by default the children node name, but this can be overridden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tabs_visible",
          "description": "Set whether the tabs should be visible or hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "pre_popup_pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tab_changed",
          "description": "Emitted when a tab gets selected. Same behavior as [tab_selected] signal for backward compatibility. Note: In Godot v3.0+ this will change to be only emitted when tab gets changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_selected",
          "description": "Emitted when a tab is being selected, even if it is the same tab.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color_bg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_fg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "label_valign_bg",
          "type": "int",
          "description": ""
        },
        {
          "name": "label_valign_fg",
          "type": "int",
          "description": ""
        },
        {
          "name": "menu",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "menu_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "side_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "tab_bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tab_fg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "top_margin",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Tabs": {
      "name": "Tabs",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Tabs Control.",
      "description": "Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interact with children.",
      "methods": [
        {
          "name": "add_tab",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "ensure_tab_visible",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_tab",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_align",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_title",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_tab",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_tab",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_align",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_icon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_title",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "right_button_pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_close",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": ""
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": ""
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_SHOW_ACTIVE_ONLY",
          "value": "1",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_SHOW_ALWAYS",
          "value": "2",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_SHOW_NEVER",
          "value": "0",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "button",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "close",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color_bg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_fg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "label_valign_bg",
          "type": "int",
          "description": ""
        },
        {
          "name": "label_valign_fg",
          "type": "int",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tab_bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tab_fg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "top_margin",
          "type": "int",
          "description": ""
        }
      ]
    },
    "TestCube": {
      "name": "TestCube",
      "inherits": "GeometryInstance",
      "category": "Core",
      "brief_description": "A simple cube used for testing in 3D.",
      "description": "The TestCube is a simple 2x2x2 cube with a basic texture. It can be used as a placeholder, to verify how the lighting looks, to test shaders, or any other task you may need a textured model to test with.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "TextEdit": {
      "name": "TextEdit",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Multiline text editing control.",
      "description": "TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.",
      "methods": [
        {
          "name": "add_color_region",
          "description": "Add color region (given the delimiters) and its colors.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "begin_key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end_key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "line_only",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_keyword_color",
          "description": "Add a keyword and its color.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keyword",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_colors",
          "description": "Clear all the syntax coloring information.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_undo_history",
          "description": "Clear the undo history.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "copy",
          "description": "Copy the current selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "cursor_get_blink_enabled",
          "qualifiers": "const",
          "description": "Gets whether the text editor caret is blinking.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "cursor_get_blink_speed",
          "qualifiers": "const",
          "description": "Gets the text editor caret blink speed.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "cursor_get_column",
          "qualifiers": "const",
          "description": "Return the column the editing cursor is at.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "cursor_get_line",
          "qualifiers": "const",
          "description": "Return the line the editing cursor is at.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "cursor_is_block_mode",
          "qualifiers": "const",
          "description": "Gets whether the text editor caret is in block mode.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "cursor_set_blink_enabled",
          "description": "Set the text editor caret to blink.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_blink_speed",
          "description": "Set the text editor caret blink speed. Cannot be less then or equal to 0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "blink_speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_block_mode",
          "description": "Set the text editor caret to block mode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_column",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "adjust_viewport",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "cursor_set_line",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "adjust_viewport",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "cut",
          "description": "Cut the current selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_line",
          "qualifiers": "const",
          "description": "Return the text of a specific line.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_line_count",
          "qualifiers": "const",
          "description": "Return the amount of total lines in the text.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_menu",
          "qualifiers": "const",
          "description": "",
          "return_type": "PopupMenu",
          "arguments": []
        },
        {
          "name": "get_selection_from_column",
          "qualifiers": "const",
          "description": "Return the selection begin column.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selection_from_line",
          "qualifiers": "const",
          "description": "Return the selection begin line.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selection_text",
          "qualifiers": "const",
          "description": "Return the text inside the selection.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_selection_to_column",
          "qualifiers": "const",
          "description": "Return the selection end column.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selection_to_line",
          "qualifiers": "const",
          "description": "Return the selection end line.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_text",
          "description": "Return the whole text.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_word_under_cursor",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "insert_text_at_cursor",
          "description": "Insert a given text at the cursor position.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_highlight_all_occurrences_enabled",
          "qualifiers": "const",
          "description": "Returns true if highlight all occurrences is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_selection_active",
          "qualifiers": "const",
          "description": "Return true if the selection is active.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_show_line_numbers_enabled",
          "qualifiers": "const",
          "description": "Returns true if line numbers are enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_syntax_coloring_enabled",
          "qualifiers": "const",
          "description": "Return true if the syntax coloring is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "menu_option",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "paste",
          "description": "Paste the current selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "redo",
          "description": "Perform redo operation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "search",
          "qualifiers": "const",
          "description": "Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.",
          "return_type": "IntArray",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Perform selection, from line/column to line/column.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to_line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select_all",
          "description": "Select all the text.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_custom_bg_color",
          "description": "Set a custom background color. A background color with alpha==0 disables this.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_highlight_all_occurrences",
          "description": "Set to enable highlighting all occurrences of the current selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_chars",
          "description": "Set the maximum amount of characters editable.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_readonly",
          "description": "Set the text editor as read-only. Text can be displayed but not edited.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_show_line_numbers",
          "description": "Set to enable showing line numbers.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_symbol_color",
          "description": "Set the color for symbols.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_syntax_coloring",
          "description": "Set to enable the syntax coloring.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "Set the entire text.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_wrap",
          "description": "Enable text wrapping when it goes beyond he edge of what is visible.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "undo",
          "description": "Perform undo operation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "breakpoint_toggled",
          "description": "Emitted when a breakpoint is placed via the breakpoint gutter.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "row",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_changed",
          "description": "Emitted when the cursor changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "request_completion",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "text_changed",
          "description": "Emitted when the text changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "SEARCH_MATCH_CASE",
          "value": "1",
          "description": "Match case when searching."
        },
        {
          "name": "SEARCH_WHOLE_WORDS",
          "value": "2",
          "description": "Match whole words when searching."
        },
        {
          "name": "SEARCH_BACKWARDS",
          "value": "4",
          "description": "Search from end to beginning."
        },
        {
          "name": "MENU_CUT",
          "value": "0",
          "description": ""
        },
        {
          "name": "MENU_COPY",
          "value": "1",
          "description": ""
        },
        {
          "name": "MENU_PASTE",
          "value": "2",
          "description": ""
        },
        {
          "name": "MENU_CLEAR",
          "value": "3",
          "description": ""
        },
        {
          "name": "MENU_SELECT_ALL",
          "value": "4",
          "description": ""
        },
        {
          "name": "MENU_UNDO",
          "value": "5",
          "description": ""
        },
        {
          "name": "MENU_MAX",
          "value": "6",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "brace_mismatch_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "breakpoint_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "caret_background_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "caret_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "completion_background_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_existing_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_lines",
          "type": "int",
          "description": ""
        },
        {
          "name": "completion_max_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "completion_scroll_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_scroll_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "completion_selected_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "current_line_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "function_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "line_number_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "line_spacing",
          "type": "int",
          "description": ""
        },
        {
          "name": "mark_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "member_variable_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "number_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "symbol_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "tab",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "word_highlighted_color",
          "type": "Color",
          "description": ""
        }
      ]
    },
    "Texture": {
      "name": "Texture",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Texture for 2D and 3D.",
      "description": "A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D [Sprite] or GUI [Control].",
      "methods": [
        {
          "name": "draw",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            },
            {
              "index": "3",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tile",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_rect_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_flags",
          "qualifiers": "const",
          "description": "Return the current texture flags.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the texture height.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "Return the texture RID as used in the [VisualServer].",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Return the texture size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_width",
          "qualifiers": "const",
          "description": "Return the texture width.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_alpha",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_flags",
          "description": "Change the texture flags.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_MIPMAPS",
          "value": "1",
          "description": "Generate mipmaps, to enable smooth zooming out of the texture."
        },
        {
          "name": "FLAG_REPEAT",
          "value": "2",
          "description": "Repeat (instead of clamp to edge)."
        },
        {
          "name": "FLAG_FILTER",
          "value": "4",
          "description": "Turn on magnifying filter, to enable smooth zooming in of the texture."
        },
        {
          "name": "FLAG_VIDEO_SURFACE",
          "value": "4096",
          "description": "Texture is a video surface."
        },
        {
          "name": "FLAGS_DEFAULT",
          "value": "7",
          "description": "Default flags. Generate mipmaps, repeat, and filter are enabled."
        },
        {
          "name": "FLAG_ANISOTROPIC_FILTER",
          "value": "8",
          "description": ""
        },
        {
          "name": "FLAG_CONVERT_TO_LINEAR",
          "value": "16",
          "description": ""
        },
        {
          "name": "FLAG_MIRRORED_REPEAT",
          "value": "32",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "TextureButton": {
      "name": "TextureButton",
      "inherits": "BaseButton",
      "category": "Core",
      "brief_description": "Button that can be themed with textures.",
      "description": "Button that can be themed with textures. This is like a regular [Button] but can be themed by assigning textures to it. This button is intended to be easy to theme, however a regular button can expand (that uses styleboxes) and still be better if the interface is expect to have internationalization of texts.\n\t\tOnly the normal texture is required, the others are optional.",
      "methods": [
        {
          "name": "get_click_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "BitMap",
          "arguments": []
        },
        {
          "name": "get_disabled_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_focused_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_hover_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_normal_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_pressed_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_resize_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_stretch_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_texture_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_click_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "BitMap",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disabled_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_focused_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hover_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressed_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_resize_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stretch_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_scale",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "RESIZE_SCALE",
          "value": "0",
          "description": ""
        },
        {
          "name": "RESIZE_STRETCH",
          "value": "1",
          "description": ""
        },
        {
          "name": "STRETCH_SCALE_ON_EXPAND",
          "value": "0",
          "description": ""
        },
        {
          "name": "STRETCH_SCALE",
          "value": "1",
          "description": ""
        },
        {
          "name": "STRETCH_TILE",
          "value": "2",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP",
          "value": "3",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP_CENTERED",
          "value": "4",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP_ASPECT",
          "value": "5",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP_ASPECT_CENTERED",
          "value": "6",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP_ASPECT_COVERED",
          "value": "7",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "TextureFrame": {
      "name": "TextureFrame",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Control Frame that draws a texture.",
      "description": "Control frame that simply draws an assigned texture. It can stretch or not. It's a simple way to just show an image in a UI.",
      "methods": [
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_stretch_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "has_expand",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_expand",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "modulate",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stretch_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stretch_mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STRETCH_SCALE_ON_EXPAND",
          "value": "0",
          "description": ""
        },
        {
          "name": "STRETCH_SCALE",
          "value": "1",
          "description": ""
        },
        {
          "name": "STRETCH_TILE",
          "value": "2",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP",
          "value": "3",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP_CENTERED",
          "value": "4",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP_ASPECT",
          "value": "5",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP_ASPECT_CENTERED",
          "value": "6",
          "description": ""
        },
        {
          "name": "STRETCH_KEEP_ASPECT_COVERED",
          "value": "7",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "TextureProgress": {
      "name": "TextureProgress",
      "inherits": "Range",
      "category": "Core",
      "brief_description": "Textured progress bar implementation.",
      "description": "[ProgressBar] implementation that is easier to theme (by just passing a few textures).",
      "methods": [
        {
          "name": "get_fill_degrees",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_fill_mode",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_over_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_progress_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_radial_center_offset",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_radial_initial_angle",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_under_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "set_fill_degrees",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fill_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_over_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tex",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_progress_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tex",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radial_center_offset",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radial_initial_angle",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_under_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tex",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FILL_LEFT_TO_RIGHT",
          "value": "0",
          "description": ""
        },
        {
          "name": "FILL_RIGHT_TO_LEFT",
          "value": "1",
          "description": ""
        },
        {
          "name": "FILL_TOP_TO_BOTTOM",
          "value": "2",
          "description": ""
        },
        {
          "name": "FILL_BOTTOM_TO_TOP",
          "value": "3",
          "description": ""
        },
        {
          "name": "FILL_CLOCKWISE",
          "value": "4",
          "description": ""
        },
        {
          "name": "FILL_COUNTER_CLOCKWISE",
          "value": "5",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Theme": {
      "name": "Theme",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Theme for controls.",
      "description": "Theme for skinning controls. Controls can be skinned individually, but for complex applications it's more efficient to just create a global theme that defines everything. This theme can be applied to any [Control], and it and its children will automatically use it.\n\t\tTheme resources can be alternatively loaded by writing them in a .theme file, see docs for more info.",
      "methods": [
        {
          "name": "clear_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_constant",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_font",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_icon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_stylebox",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "copy_default_theme",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_constant_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_default_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "Font",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_font_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "StyleBox",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_stylebox_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_stylebox_types",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "get_type_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "StringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "constant",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_font",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_font",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stylebox",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "StyleBox",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Thread": {
      "name": "Thread",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "A unit of execution in a process.",
      "description": "A unit of execution in a process. Can run methods on [Object]\\ s simultaneously. The use of synchronization via [Mutex], [Semaphore] is advised if working with shared objects.",
      "methods": [
        {
          "name": "get_id",
          "qualifiers": "const",
          "description": "Return the id of the thread, uniquely identifying it among all threads.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Whether this thread is currently active, an active Thread cannot start work on a new method but can be joined with [method wait_to_finish].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "start",
          "description": "Start a new [Thread], it will run \"method\" on object \"instance\" using \"userdata\" as an argument and running with \"priority\", one of PRIORITY_* enum.\n\t\t\t\tReturns OK on success, or ERR_CANT_CREATE on failure.",
          "return_type": "Error",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "userdata",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "3",
              "name": "priority",
              "type": "int",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "wait_to_finish",
          "description": "Joins the [Thread] and waits for it to finish. Returns what the method called returned.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PRIORITY_LOW",
          "value": "0",
          "description": ""
        },
        {
          "name": "PRIORITY_NORMAL",
          "value": "1",
          "description": ""
        },
        {
          "name": "PRIORITY_HIGH",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "TileMap": {
      "name": "TileMap",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Node for 2D tile-based games.",
      "description": "Node for 2D tile-based games. Tilemaps use a [TileSet] which contain a list of tiles (textures, their rect and a collision) and are used to create complex grid-based maps.\n\t\tTo optimize drawing and culling (sort of like [GridMap]), you can specify a quadrant size, so chunks of the map will be batched together at drawing time.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear all cells.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cell",
          "qualifiers": "const",
          "description": "Return the tile index of the referenced cell.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_size",
          "qualifiers": "const",
          "description": "Return the cell size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_cellv",
          "qualifiers": "const",
          "description": "Return the tile index of the cell referenced by a Vector2.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_center_x",
          "qualifiers": "const",
          "description": "Return true if tiles are to be centered in x coordinate (by default this is false and they are drawn from upper left cell corner).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_center_y",
          "qualifiers": "const",
          "description": "Return true if tiles are to be centered in y coordinate (by default this is false and they are drawn from upper left cell corner).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_collision_bounce",
          "qualifiers": "const",
          "description": "Return the collision bounce parameter.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_collision_friction",
          "qualifiers": "const",
          "description": "Return the collision friction parameter.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "Return the collision layer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "Return the collision mask.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_use_kinematic",
          "qualifiers": "const",
          "description": "Return whether the tilemap handles collisions as a kinematic body.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_custom_transform",
          "qualifiers": "const",
          "description": "Return the custom transform matrix.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_half_offset",
          "qualifiers": "const",
          "description": "Return the current half offset configuration.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Return the orientation mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_occluder_light_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_quadrant_size",
          "qualifiers": "const",
          "description": "Return the quadrant size.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tile_origin",
          "qualifiers": "const",
          "description": "Return the tile origin configuration.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tileset",
          "qualifiers": "const",
          "description": "Return the current tileset.",
          "return_type": "TileSet",
          "arguments": []
        },
        {
          "name": "get_used_cells",
          "qualifiers": "const",
          "description": "Return an array of all cells containing a tile from the tileset (i.e. a tile index different from -1).",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_used_cells_by_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_used_rect",
          "description": "",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_cell_transposed",
          "qualifiers": "const",
          "description": "Return whether the referenced cell is transposed, i.e. the X and Y axes are swapped (mirroring with regard to the (1,1) vector).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_cell_x_flipped",
          "qualifiers": "const",
          "description": "Return whether the referenced cell is flipped over the X axis.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_cell_y_flipped",
          "qualifiers": "const",
          "description": "Return whether the referenced cell is flipped over the Y axis.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_y_sort_mode_enabled",
          "qualifiers": "const",
          "description": "Return the Y sort mode.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "map_to_world",
          "qualifiers": "const",
          "description": "Return the absolute world position corresponding to the tilemap (grid-based) coordinates given as an argument.\n\t\t\t\tOptionally, the tilemap's potential half offset can be ignored.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "mappos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ignore_half_ofs",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_cell",
          "description": "Set the tile index for the cell referenced by its grid-based X and Y coordinates.\n\t\t\t\tA tile index of -1 clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped over the X and Y coordinates or transposed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tile",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "flip_x",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "flip_y",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_cell_size",
          "description": "Set the cell size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cellv",
          "description": "Set the tile index for the cell referenced by a Vector2 of grid-based coordinates.\n\t\t\t\tA tile index of -1 clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped over the X and Y axes or transposed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tile",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flip_x",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "flip_y",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_center_x",
          "description": "Set tiles to be centered in x coordinate. (by default this is false and they are drawn from upper left cell corner).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_center_y",
          "description": "Set tiles to be centered in y coordinate. (by default this is false and they are drawn from upper left cell corner).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_bounce",
          "description": "Set the collision bounce parameter. Allowable values range from 0 to 1.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_friction",
          "description": "Set the collision friction parameter. Allowable values range from 0 to 1.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer",
          "description": "Set the collision layer.\n\t\t\t\tLayers are referenced by binary indexes, so allowable values to describe the 20 available layers range from 0 to 2^20-1.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "Set the collision masks.\n\t\t\t\tMasks are referenced by binary indexes, so allowable values to describe the 20 available masks range from 0 to 2^20-1.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_use_kinematic",
          "description": "Set the tilemap to handle collisions as a kinematic body (enabled) or a static body (disabled).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "use_kinematic",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_transform",
          "description": "Set custom transform matrix, to use in combination with the custom orientation mode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "custom_transform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_half_offset",
          "description": "Set an half offset on the X coordinate, Y coordinate, or none (use HALF_OFFSET_* constants as argument).\n\t\t\t\tHalf offset sets every other tile off by a half tile size in the specified direction.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "half_offset",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the orientation mode as square, isometric or custom (use MODE_* constants as argument).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_occluder_light_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_quadrant_size",
          "description": "Set the quadrant size, this optimizes drawing by batching chunks of map at draw/cull time.\n\t\t\t\tAllowed values are integers ranging from 1 to 128.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tile_origin",
          "description": "Set the tile origin to the tile center or its top-left corner (use TILE_ORIGIN_* constants as argument).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "origin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tileset",
          "description": "Set the current tileset.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tileset",
              "type": "TileSet",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_y_sort_mode",
          "description": "Set the Y sort mode. Enabled Y sort mode means that children of the tilemap will be drawn in the order defined by their Y coordinate.\n\t\t\t\tA tile with a higher Y coordinate will therefore be drawn later, potentially covering up the tile(s) above it if its sprite is higher than its cell size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "world_to_map",
          "qualifiers": "const",
          "description": "Return the tilemap (grid-based) coordinates corresponding to the absolute world position given as an argument.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "worldpos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "settings_changed",
          "description": "Signal indicating that a tilemap setting has changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "INVALID_CELL",
          "value": "-1",
          "description": "Returned when a cell doesn't exist."
        },
        {
          "name": "MODE_SQUARE",
          "value": "0",
          "description": "Orthogonal orientation mode."
        },
        {
          "name": "MODE_ISOMETRIC",
          "value": "1",
          "description": "Isometric orientation mode."
        },
        {
          "name": "MODE_CUSTOM",
          "value": "2",
          "description": "Custom orientation mode."
        },
        {
          "name": "HALF_OFFSET_X",
          "value": "0",
          "description": "Half offset on the X coordinate."
        },
        {
          "name": "HALF_OFFSET_Y",
          "value": "1",
          "description": "Half offset on the Y coordinate."
        },
        {
          "name": "HALF_OFFSET_DISABLED",
          "value": "2",
          "description": "Half offset disabled."
        },
        {
          "name": "TILE_ORIGIN_TOP_LEFT",
          "value": "0",
          "description": "Tile origin at its top-left corner."
        },
        {
          "name": "TILE_ORIGIN_CENTER",
          "value": "1",
          "description": "Tile origin at its center."
        },
        {
          "name": "TILE_ORIGIN_BOTTOM_LEFT",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "TileSet": {
      "name": "TileSet",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Tile library for tilemaps.",
      "description": "A TileSet is a library of tiles for a [TileMap]. It contains a list of tiles, each consisting of a sprite and optional collision shapes.\n\t\tTiles are referenced by a unique integer ID.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear all tiles.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_tile",
          "description": "Create a new tile which will be referenced by the given ID.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_tile_by_name",
          "qualifiers": "const",
          "description": "Find the first tile matching the given name.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_last_unused_tile_id",
          "qualifiers": "const",
          "description": "Return the ID following the last currently used ID, useful when creating a new tile.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tiles_ids",
          "qualifiers": "const",
          "description": "Return an array of all currently used tile IDs.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "remove_tile",
          "description": "Remove the tile referenced by the given ID.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_light_occluder",
          "qualifiers": "const",
          "description": "Return the light occluder of the tile.",
          "return_type": "OccluderPolygon2D",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_material",
          "qualifiers": "const",
          "description": "Return the material of the tile.",
          "return_type": "CanvasItemMaterial",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_name",
          "qualifiers": "const",
          "description": "Return the name of the tile.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_navigation_polygon",
          "qualifiers": "const",
          "description": "Return the navigation polygon of the tile.",
          "return_type": "NavigationPolygon",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_navigation_polygon_offset",
          "qualifiers": "const",
          "description": "Return the offset of the tile's navigation polygon.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_occluder_offset",
          "qualifiers": "const",
          "description": "Return the offset of the tile's light occluder.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_region",
          "qualifiers": "const",
          "description": "Return the tile sub-region in the texture.",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape",
          "qualifiers": "const",
          "description": "Return the shape of the tile.",
          "return_type": "Shape2D",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape_offset",
          "qualifiers": "const",
          "description": "Return the shape offset of the tile.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shapes",
          "qualifiers": "const",
          "description": "Return the array of shapes of the tile.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_texture",
          "qualifiers": "const",
          "description": "Return the texture of the tile.",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_texture_offset",
          "qualifiers": "const",
          "description": "Return the texture offset of the tile.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_light_occluder",
          "description": "Set a light occluder for the tile.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "light_occluder",
              "type": "OccluderPolygon2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_material",
          "description": "Set the material of the tile.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "CanvasItemMaterial",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_name",
          "description": "Set the name of the tile, for descriptive purposes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_navigation_polygon",
          "description": "Set a navigation polygon for the tile.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "navigation_polygon",
              "type": "NavigationPolygon",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_navigation_polygon_offset",
          "description": "Set an offset for the tile's navigation polygon.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "navigation_polygon_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_occluder_offset",
          "description": "Set an offset for the tile's light occluder.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "occluder_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_region",
          "description": "Set the tile sub-region in the texture. This is common in texture atlases.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shape",
          "description": "Set a shape for the tile, enabling physics to collide with it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shape_offset",
          "description": "Set the shape offset of the tile.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shapes",
          "description": "Set an array of shapes for the tile, enabling physics to collide with it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shapes",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_texture",
          "description": "Set the texture of the tile.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_texture_offset",
          "description": "Set the texture offset of the tile.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Timer": {
      "name": "Timer",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "A simple Timer node.",
      "description": "Timer node. This is a simple node that will emit a timeout callback when the timer runs out. It can optionally be set to loop.",
      "methods": [
        {
          "name": "get_time_left",
          "qualifiers": "const",
          "description": "Return the time left for timeout in seconds if the timer is active, 0 otherwise.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_timer_process_mode",
          "qualifiers": "const",
          "description": "Return the timer's processing mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_wait_time",
          "qualifiers": "const",
          "description": "Return the wait time in seconds.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_autostart",
          "qualifiers": "const",
          "description": "Return true if set to automatically start when entering the scene.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Return if the timer is active or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_one_shot",
          "qualifiers": "const",
          "description": "Return true if configured as one-shot.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_active",
          "description": "Set whether the timer is active or not. An inactive timer will be paused until it is activated again.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autostart",
          "description": "Set to automatically start when entering the scene.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_one_shot",
          "description": "Set as one-shot. If enabled, the timer will stop after timeout, otherwise it will automatically restart.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_timer_process_mode",
          "description": "Set the timer's processing mode (fixed or idle, use TIMER_PROCESS_* constants as argument).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_wait_time",
          "description": "Set wait time in seconds. When the time is over, it will emit the timeout signal.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "start",
          "description": "Start the timer.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "stop",
          "description": "Stop (cancel) the timer.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "timeout",
          "description": "Emitted when the time runs out.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "TIMER_PROCESS_FIXED",
          "value": "0",
          "description": "Update the timer at fixed intervals (framerate processing)."
        },
        {
          "name": "TIMER_PROCESS_IDLE",
          "value": "1",
          "description": "Update the timer during the idle time at each frame."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ToolButton": {
      "name": "ToolButton",
      "inherits": "Button",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "TouchScreenButton": {
      "name": "TouchScreenButton",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_action",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_bitmask",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_texture_pressed",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_visibility_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_passby_press_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shape_centered",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shape_visible",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_action",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bitmask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bitmask",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_passby_press",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_centered",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bool",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_visible",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bool",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_pressed",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visibility_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "released",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Transform": {
      "name": "Transform",
      "category": "Built-In Types",
      "brief_description": "3D Transformation.",
      "description": "Transform is used to store transformations, including translations. It consists of a Matrix3 \"basis\" and Vector3 \"origin\". Transform is used to represent transformations of any object in space. It is similar to a 4x3 matrix.",
      "methods": [
        {
          "name": "Transform",
          "description": "Construct the Transform from four Vector3. Each axis creates the basis.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "origin",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Construct the Transform from a Matrix3 and Vector3.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "basis",
              "type": "Matrix3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "origin",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Construct the Transform from a Matrix32.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Construct the Transform from a Quat. The origin will be Vector3(0, 0, 0)",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Construct the Transform from a Matrix3. The origin will be Vector3(0, 0, 0)",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Matrix3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "affine_inverse",
          "description": "Returns the inverse of the transfrom, even if the transform has scale or the axis vectors are not orthogonal.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the transform.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "looking_at",
          "description": "Rotate the transform around the up vector to face the target.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "orthonormalized",
          "description": "Returns a transfrom with the basis orthogonal (90 degrees), and normalized axis vectors.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotated",
          "description": "Rotate the transform locally.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scaled",
          "description": "Scale the transform locally.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translated",
          "description": "Translate the transform locally.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform",
          "description": "Transforms vector \"v\" by this transform.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_inv",
          "description": "Inverse-transforms vector \"v\" by this transform.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "basis",
          "type": "Matrix3",
          "description": "The basis contains 3 [Vector3]. X axis, Y axis, and Z axis."
        },
        {
          "name": "origin",
          "type": "Vector3",
          "description": "The origin of the transform. Which is the translation offset."
        }
      ],
      "theme_properties": []
    },
    "Translation": {
      "name": "Translation",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Language Translation.",
      "description": "Translations are resources that can be loaded/unloaded on demand. They map a string to another string.",
      "methods": [
        {
          "name": "add_message",
          "description": "Add a message for translation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src_message",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xlated_message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_message",
          "description": "Erase a message.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src_message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_locale",
          "qualifiers": "const",
          "description": "Return the locale of the translation.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_message",
          "qualifiers": "const",
          "description": "Return a message for translation.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "src_message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_message_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_message_list",
          "qualifiers": "const",
          "description": "Return all the messages (keys).",
          "return_type": "StringArray",
          "arguments": []
        },
        {
          "name": "set_locale",
          "description": "Set the locale of the translation.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "locale",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "TranslationServer": {
      "name": "TranslationServer",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Server that manages all translations. Translations can be set to it and removed from it.",
      "description": "",
      "methods": [
        {
          "name": "add_translation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "translation",
              "type": "Translation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_locale",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "remove_translation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "translation",
              "type": "Translation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_locale",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "locale",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translate",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "message",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Tree": {
      "name": "Tree",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Control to show a tree of items.",
      "description": "This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structural displaying and interactions.\n\t\tTrees are built via code, using [TreeItem] objects to create the structure. They have a single root but multiple root can be simulated if a dummy hidden root is added.\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t    var tree = Tree.new()\n\t\t    var root = tree.create_item()\n\t\t    tree.set_hide_root(true)\n\t\t    var child1 = tree.create_item(root)\n\t\t    var child2 = tree.create_item(root)\n\t\t    var subchild1 = tree.create_item(child1)\n\t\t    subchild1.set_text(0, \"Subchild1\")\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "are_column_titles_visible",
          "qualifiers": "const",
          "description": "Get whether the column titles are being shown.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "clear",
          "description": "Clear the tree. This erases all of the items.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_item",
          "description": "Create an item in the tree and add it as the last child of [code]parent[/code]. If parent is not given, it will be added as the last child of the root, or it'll the be the root itself if the tree is empty.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "parent",
              "type": "TreeItem",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "ensure_cursor_is_visible",
          "description": "Make the current selected item visible. This will scroll the tree to make sure the selected item is in sight.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_allow_rmb_select",
          "qualifiers": "const",
          "description": "Get whether a right click can select items.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_column_at_pos",
          "qualifiers": "const",
          "description": "Get the column index under the given point.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_column_title",
          "qualifiers": "const",
          "description": "Get the title of the given column.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_column_width",
          "qualifiers": "const",
          "description": "Get the width of the given column in pixels.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_columns",
          "qualifiers": "const",
          "description": "Get the amount of columns.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_custom_popup_rect",
          "qualifiers": "const",
          "description": "Get the rectangle for custom popups. Helper to create custom cell controls that display a popup. See [method TreeItem.set_cell_mode].",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_drop_mode_flags",
          "qualifiers": "const",
          "description": "Get the flags of the current drop mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_edited",
          "qualifiers": "const",
          "description": "Get the current edited item. This is only available for custom cell mode.",
          "return_type": "TreeItem",
          "arguments": []
        },
        {
          "name": "get_edited_column",
          "qualifiers": "const",
          "description": "Get the column of the cell for the current edited icon. This is only available for custom cell mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_area_rect",
          "qualifiers": "const",
          "description": "Get the rectangle area of the the specified item. If column is specified, only get the position and size of that column, otherwise get the rectangle containing all columns.",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "TreeItem",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "column",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_item_at_pos",
          "qualifiers": "const",
          "description": "Get the tree item at the specified position (relative to the tree origin position).",
          "return_type": "TreeItem",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_next_selected",
          "description": "Get the next selected item after the given one.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "TreeItem",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pressed_button",
          "qualifiers": "const",
          "description": "Get the index of the last pressed button.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_root",
          "description": "Get the root item of the tree.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scroll",
          "qualifiers": "const",
          "description": "Get the current scrolling position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_selected",
          "qualifiers": "const",
          "description": "Get the currently selected item.",
          "return_type": "TreeItem",
          "arguments": []
        },
        {
          "name": "get_selected_column",
          "qualifiers": "const",
          "description": "Get the column number of the current selection.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_single_select_cell_editing_only_when_already_selected",
          "qualifiers": "const",
          "description": "Get whether the editing of a cell should only happen when it is already selected.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_folding_hidden",
          "qualifiers": "const",
          "description": "Get whether the folding arrow is hidden.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_allow_rmb_select",
          "description": "Set whether or not a right mouse button click can select items.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "allow",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_expand",
          "description": "Set whether a column will have the \"Expand\" flag of [Control].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "expand",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_min_width",
          "description": "Set the minimum width of a column.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min_width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_title",
          "description": "Set the title of a column.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_titles_visible",
          "description": "Set whether the column titles visibility.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_columns",
          "description": "Set the amount of columns.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drop_mode_flags",
          "description": "Set the drop mode as an OR combination of flags. See [code]DROP_MODE_*[/code] constants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hide_folding",
          "description": "Set whether the folding arrow should be hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hide",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hide_root",
          "description": "Set whether the root of the tree should be hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_select_mode",
          "description": "Set the selection mode. Use one of the [code]SELECT_*[/code] constants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_single_select_cell_editing_only_when_already_selected",
          "description": "Set whether the editing of a cell should only happen when it is already selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "button_pressed",
          "description": "Emitted when a button on the tree was pressed (see [method TreeItem.add_button]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cell_selected",
          "description": "Emitted when a cell is selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "column_title_pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_popup_edited",
          "description": "Emitted when a cell with the [code]CELL_MODE_CUSTOM[/code] is clicked to be edited.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arrow_clicked",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "empty_tree_rmb_selected",
          "description": "Emitted when the right mouse button is pressed if RMB selection is active and the tree is empty.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_activated",
          "description": "Emitted when an item is activated (double-clicked).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_collapsed",
          "description": "Emitted when an item is collapsed by a click on the folding arrow.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_edited",
          "description": "Emitted when an item is editted.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_rmb_selected",
          "description": "Emitted when an item is selected with right mouse button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_selected",
          "description": "Emitted when an item is selected with right mouse button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "multi_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "selected",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "SELECT_SINGLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SELECT_ROW",
          "value": "1",
          "description": ""
        },
        {
          "name": "SELECT_MULTI",
          "value": "2",
          "description": ""
        },
        {
          "name": "DROP_MODE_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "DROP_MODE_ON_ITEM",
          "value": "1",
          "description": ""
        },
        {
          "name": "DROP_MODE_INBETWEEN",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "arrow",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "arrow_collapsed",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "bg_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "button_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "cursor",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "cursor_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "cursor_unfocused",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "draw_relationship_lines",
          "type": "int",
          "description": ""
        },
        {
          "name": "drop_position_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "guide_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "guide_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "item_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "relationship_line_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "scroll_border",
          "type": "int",
          "description": ""
        },
        {
          "name": "scroll_speed",
          "type": "int",
          "description": ""
        },
        {
          "name": "select_arrow",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "selected",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selected_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_button_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_button_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "title_button_hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "title_button_normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "title_button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "unchecked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "updown",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "TreeItem": {
      "name": "TreeItem",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_button",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "button_idx",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "disabled",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "tooltip",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "clear_custom_bg_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_custom_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "deselect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_button",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_button",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_button_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_children",
          "description": "",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_custom_bg_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon_max_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_next",
          "description": "",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_next_visible",
          "description": "",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_parent",
          "description": "",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_prev",
          "description": "",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_prev_visible",
          "description": "",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_range",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_range_config",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tooltip",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_button_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_checked",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_collapsed",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_editable",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_selectable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_selected",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_to_bottom",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "move_to_top",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_child",
          "description": "",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_button",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "button",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_checked",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "checked",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collapsed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_bg_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "just_outline",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_custom_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_draw",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "callback",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editable",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_max_width",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_region",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_metadata",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_range",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_range_config",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "step",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "expr",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_selectable",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selectable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tooltip",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CELL_MODE_STRING",
          "value": "0",
          "description": ""
        },
        {
          "name": "CELL_MODE_CHECK",
          "value": "1",
          "description": ""
        },
        {
          "name": "CELL_MODE_RANGE",
          "value": "2",
          "description": ""
        },
        {
          "name": "CELL_MODE_RANGE_EXPRESSION",
          "value": "3",
          "description": ""
        },
        {
          "name": "CELL_MODE_ICON",
          "value": "4",
          "description": ""
        },
        {
          "name": "CELL_MODE_CUSTOM",
          "value": "5",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Tween": {
      "name": "Tween",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Node useful for animations with unknown start and end points.",
      "description": "Node useful for animations with unknown start and end points, procedural animations, making one node follow another, and other simple behavior.\n\t\tBecause it is easy to get it wrong, here is a quick usage example:\n\t\t[codeblock]\n\t\tvar tween = get_node(\"Tween\")\n\t\ttween.interpolate_property(get_node(\"Node2D_to_move\"), \"transform/pos\", Vector2(0,0), Vector2(100,100), 1, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)\n\t\ttween.start()\n\t\t[/codeblock]\n\t\tSome of the methods of this class require a property name. You can get the property name by hovering over the property in the inspector of the editor.\n\t\tMany of the methods accept [code]trans_type[/code] and [code]ease_type[/code]. The first accepts an TRANS_* constant, and refers to the way the timing of the animation is handled (you might want to see [code]http://easings.net/[/code] for some examples). The second accepts an EASE_* constant, and controls the where [code]trans_type[/code] is applied to the interpolation (in the begining, the end, or both). If you don't know which transision and easing to pick, you can try different TRANS_* constants with EASE_IN_OUT, and use the one that looks best.",
      "methods": [
        {
          "name": "follow_method",
          "description": "Follow [code]method[/code] of [code]object[/code] and apply the returned value on [code]target_method[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]times_in_sec[/code] seconds, [code]delay[/code] later. Methods are animated by calling them with consequitive values.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the begining, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "target_method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "times_in_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "follow_property",
          "description": "Follow [code]property[/code] of [code]object[/code] and apply it on [code]target_property[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]times_in_sec[/code] seconds, [code]delay[/code] seconds later. Note that [code]target:target_property[/code] would equal [code]object:property[/code] at the end of the tween.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the begining, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "target_property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "times_in_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_runtime",
          "qualifiers": "const",
          "description": "Returns the time needed for all tweens to end in seconds, measured from the start. Thus, if you have two tweens, one ending 10 seconds after the start and the other - 20 seconds, it would return 20 seconds, as by that time all tweens would have finished.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_speed",
          "qualifiers": "const",
          "description": "Returns the speed that has been set from editor GUI or [method set_repeat].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tween_process_mode",
          "qualifiers": "const",
          "description": "Returns the process mode that has been set from editor GUI or [method set_tween_process_mode]",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "interpolate_callback",
          "description": "Call [code]callback[/code] of [code]object[/code] after [code]times_in_sec[/code]. [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "times_in_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "callback",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg1",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "arg2",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "5",
              "name": "arg3",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "6",
              "name": "arg4",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "7",
              "name": "arg5",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "interpolate_deferred_callback",
          "description": "Call [code]callback[/code] of [code]object[/code] after [code]times_in_sec[/code] on the main thread (similar to [methog Object.call_deferred). [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "times_in_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "callback",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg1",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "arg2",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "5",
              "name": "arg3",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "6",
              "name": "arg4",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "7",
              "name": "arg5",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "interpolate_method",
          "description": "Animate [code]method[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]times_in_sec[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecuitive values.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the begining, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "times_in_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "trans_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "ease_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "interpolate_property",
          "description": "Animate [code]property[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]times_in_sec[/code] seconds, [code]delay[/code] seconds later.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the begining, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "times_in_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "trans_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "ease_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Returns true if any tweens are currently running, and false otherwise. Note that this method doesn't consider tweens that have ended.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_repeat",
          "qualifiers": "const",
          "description": "Returns true if repeat has been set from editor GUI or [method set_repeat].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove",
          "description": "Stop animating and completely remove a tween, given its object and property/method pair.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_all",
          "description": "Stop animating and completely remove all tweens.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reset",
          "description": "Resets a tween to the initial value (the one given, not the one before the tween), given its object and property/method pair.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reset_all",
          "description": "Resets all tweens to their initial values (the ones given, not those before the tween).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resume",
          "description": "Continue animating a stopped tween, given its object and property/method pair.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resume_all",
          "description": "Continue animating all stopped tweens.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "seek",
          "description": "Seek the animation to the given [code]time[/code] in seconds.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_active",
          "description": "Activate/deactivate the tween. You can use this for pausing animations, though [method stop_all] and [method resume_all] might be more fit for this.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_repeat",
          "description": "Make the tween repeat after all tweens have finished.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "repeat",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed",
          "description": "Set the speed multiplier of the tween. Set it to 1 for normal speed, 2 for two times nromal speed, and 0.5 for half of the normal speed. Setting it to 0 would pause the animation, but you might consider using [method set_active] or [method stop_all] and [method resume_all] for this.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tween_process_mode",
          "description": "Set whether the Tween uses [code]_process[/code] or [code]_fixed_process[/code] (accepts TWEEN_PROCESS_IDLE and TWEEN_PROCESS_FIXED constants, respectively).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "start",
          "description": "Start the tween node. You can define tweens both before and after this.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "stop",
          "description": "Stop animating a tween, given its object and property/method pair.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop_all",
          "description": "Stop animating all tweens.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "targeting_method",
          "description": "Animate [code]method[/code] of [code]object[/code] from the value returned by [code]initial.initial_method[/code] to [code]final_val[/code] for [code]times_in_sec[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecuitive values.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the begining, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "initial_method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "times_in_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "targeting_property",
          "description": "Animate [code]property[/code] of [code]object[/code] from the current value of the [code]initial_val[/code] property of [code]initial[/code] to [code]final_val[/code] for [code]times_in_sec[/code] seconds, [code]delay[/code] seconds later.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the begining, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "initial_val",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "times_in_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "tell",
          "qualifiers": "const",
          "description": "Returns the current time of the tween.",
          "return_type": "float",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "tween_complete",
          "description": "This signal is emitted when a tween ends.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tween_start",
          "description": "This signal is emitted when a tween starts.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tween_step",
          "description": "This signal is emitted each step of the tweening.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "elapsed",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "TWEEN_PROCESS_FIXED",
          "value": "0",
          "description": "The [Tween] should use [code]_fixed_process[/code] for timekeeping when this is enabled."
        },
        {
          "name": "TWEEN_PROCESS_IDLE",
          "value": "1",
          "description": "The [Tween] should use [code]_process[/code] for timekeeping when this is enabled (default)."
        },
        {
          "name": "TRANS_LINEAR",
          "value": "0",
          "description": "Means that the animation is interpolated linearly."
        },
        {
          "name": "TRANS_SINE",
          "value": "1",
          "description": "Means that the animation is interpolated using a sine wave."
        },
        {
          "name": "TRANS_QUINT",
          "value": "2",
          "description": "Means that the animation is interpolated with a quinary (to the power of 5) function."
        },
        {
          "name": "TRANS_QUART",
          "value": "3",
          "description": "Means that the animation is interpolated with a quartic (to the power of 4) function."
        },
        {
          "name": "TRANS_QUAD",
          "value": "4",
          "description": "Means that the animation is interpolated with a quadratic (to the power of 2) function."
        },
        {
          "name": "TRANS_EXPO",
          "value": "5",
          "description": "Means that the animation is interpolated with a exponential (some number to the power of x) function."
        },
        {
          "name": "TRANS_ELASTIC",
          "value": "6",
          "description": "Means that the animation is interpolated with elasticity, wiggling around the edges."
        },
        {
          "name": "TRANS_CUBIC",
          "value": "7",
          "description": "Means that the animation is interpolated with a cubic (to the power of 3) function."
        },
        {
          "name": "TRANS_CIRC",
          "value": "8",
          "description": "Means that the animation is interpolated with a function using square roots."
        },
        {
          "name": "TRANS_BOUNCE",
          "value": "9",
          "description": "Means that the animation is interpolated by bouncing at, but never surpassing, the end."
        },
        {
          "name": "TRANS_BACK",
          "value": "10",
          "description": "Means that the animation is interpolated backing out at edges."
        },
        {
          "name": "EASE_IN",
          "value": "0",
          "description": "Signifies that the interpolation should be focused in the beginning."
        },
        {
          "name": "EASE_OUT",
          "value": "1",
          "description": "Signifies that the interpolation should be focused in the end."
        },
        {
          "name": "EASE_IN_OUT",
          "value": "2",
          "description": "Signifies that the interpolation should be focused in both ends."
        },
        {
          "name": "EASE_OUT_IN",
          "value": "3",
          "description": "Signifies that the interpolation should be focused in both ends, but they should be switched (a bit hard to explain, try it for yourself to be sure)."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "UndoRedo": {
      "name": "UndoRedo",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Helper to manage UndoRedo in the editor or custom tools.",
      "description": "Helper to maange UndoRedo in the editor or custom tools. It works by storing calls to functions in both 'do' an 'undo' lists.\n\t\tCommon behavior is to create an action, then add do/undo calls to functions or property changes, then commiting the action.",
      "methods": [
        {
          "name": "add_do_method",
          "description": "Add a call to a method in a given object with custom\n\t\t\targuments.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg0",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "3",
              "name": "arg1",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "arg2",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "5",
              "name": "arg3",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "6",
              "name": "arg4",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "add_do_property",
          "description": "Set a property with a custom value.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_do_reference",
          "description": "Add a 'do' reference that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_undo_method",
          "description": "Add a call to an undo method in a given object with custom arguments. Undo calls are used to revert 'do' calls.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg0",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "3",
              "name": "arg1",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "4",
              "name": "arg2",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "5",
              "name": "arg3",
              "type": "Variant",
              "default_value": "NULL"
            },
            {
              "index": "6",
              "name": "arg4",
              "type": "Variant",
              "default_value": "NULL"
            }
          ]
        },
        {
          "name": "add_undo_property",
          "description": "Undo setting of a property with a custom value.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_undo_reference",
          "description": "Add an 'undo' reference that will be erased if the 'undo' history is lost. This is useful mostly for nodes rmoved with the 'do' call (not the 'undo' call!).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_history",
          "description": "Clear the undo/redo history and associated\n\t\t\treferences.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit_action",
          "description": "Commit the action. All 'do' methods/properties are called/set when this function is called.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_action",
          "description": "Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property] and [method add_undo_property].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "merge_mode",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_current_action_name",
          "qualifiers": "const",
          "description": "Get the name of the current action.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_version",
          "qualifiers": "const",
          "description": "Get the version, each time a new action is commited, the version number of the UndoRedo is increased automatically.\n\t\t\t\tThis is useful mostly to check if something changed from a saved version.",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MERGE_DISABLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "MERGE_ENDS",
          "value": "1",
          "description": ""
        },
        {
          "name": "MERGE_ALL",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VBoxContainer": {
      "name": "VBoxContainer",
      "inherits": "BoxContainer",
      "category": "Core",
      "brief_description": "Vertical box container.",
      "description": "Vertical box container. See [BoxContainer].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "VButtonArray": {
      "name": "VButtonArray",
      "inherits": "ButtonArray",
      "category": "Core",
      "brief_description": "Vertical button array.",
      "description": "Vertical button array. See [ButtonArray].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "button_separator",
          "type": "int",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_selected",
          "type": "Font",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "icon_separator",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selected",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "VScrollBar": {
      "name": "VScrollBar",
      "inherits": "ScrollBar",
      "category": "Core",
      "brief_description": "Vertical version of [ScrollBar], which goes from left (min) to right (max).",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_hilite",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "scroll",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "scroll_focus",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "VSeparator": {
      "name": "VSeparator",
      "inherits": "Separator",
      "category": "Core",
      "brief_description": "Vertical version of [Separator].",
      "description": "Vertical version of [Separator]. It is used to separate objects horizontally, though (but it looks vertical!).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "separator",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "VSlider": {
      "name": "VSlider",
      "inherits": "Slider",
      "category": "Core",
      "brief_description": "Vertical slider.",
      "description": "Vertical slider. See [Slider]. This one goes from left (min) to right (max).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_hilite",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "slider",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tick",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "VSplitContainer": {
      "name": "VSplitContainer",
      "inherits": "SplitContainer",
      "category": "Core",
      "brief_description": "Vertical split container.",
      "description": "Vertical split container. See [SplitContainer]. This goes from left to right.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "autohide",
          "type": "int",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Variant": {
      "name": "Variant",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Vector2": {
      "name": "Vector2",
      "category": "Built-In Types",
      "brief_description": "Vector used for 2D Math.",
      "description": "2-element structure that can be used to represent positions in 2d-space, or any other pair of numeric values.",
      "methods": [
        {
          "name": "Vector2",
          "description": "Constructs a new Vector2 from the given x and y.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "Returns a new vector with all components in absolute values (i.e. positive).",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "angle",
          "description": "Returns the result of atan2 when called with the Vector's x and y as parameters (Math::atan2(x,y)).\n\t\t\t\tBe aware that it therefore returns an angle oriented clockwise with regard to the (0, 1) unit vector, and not an angle oriented counter-clockwise with regard to the (1, 0) unit vector (which would be the typical trigonometric representation of the angle when calling Math::atan2(y,x)).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "angle_to",
          "description": "Returns the angle in radians between the two vectors.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "angle_to_point",
          "description": "Returns the angle in radians between the line connecting the two points and the x coordinate.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clamped",
          "description": "Returns the vector with a maximum length.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubic_interpolate",
          "description": "Cubicly interpolates between this Vector and \"b\", using \"pre_a\" and \"post_b\" as handles, and returning the result at position \"t\".",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pre_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "post_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_squared_to",
          "description": "Returns the squared distance to vector \"b\". Prefer this function over \"distance_to\" if you need to sort vectors or need the squared distance for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_to",
          "description": "Returns the distance to vector \"b\".",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dot",
          "description": "Returns the dot product with vector \"b\".",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "floor",
          "description": "Remove the fractional part of x and y.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "floorf",
          "description": "Remove the fractional part of x and y.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_aspect",
          "description": "Returns the ratio of X to Y.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length",
          "description": "Returns the length of the vector.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length_squared",
          "description": "Returns the squared length of the vector. Prefer this function over \"length\" if you need to sort vectors or need the squared length for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "linear_interpolate",
          "description": "Returns the result of the linear interpolation between this vector and \"b\", by amount \"t\".",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "normalized",
          "description": "Returns a normalized vector to unit length.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reflect",
          "description": "Like \"slide\", but reflects the Vector instead of continuing along the wall.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vec",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotated",
          "description": "Rotates the vector by \"phi\" radians.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slide",
          "description": "Slides the vector by the other vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vec",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "snapped",
          "description": "Snaps the vector to a grid with the given size.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tangent",
          "description": "Returns a perpendicular vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "height",
          "type": "float",
          "description": "Height of the vector (Same as Y)."
        },
        {
          "name": "width",
          "type": "float",
          "description": "Width of the vector (Same as X)."
        },
        {
          "name": "x",
          "type": "float",
          "description": "X component of the vector."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Y component of the vector."
        }
      ],
      "theme_properties": []
    },
    "Vector2Array": {
      "name": "Vector2Array",
      "category": "Built-In Types",
      "brief_description": "An Array of Vector2.",
      "description": "An Array specifically designed to hold Vector2.",
      "methods": [
        {
          "name": "Vector2Array",
          "description": "Construct a new [Vector2Array]. Optionally, you can pass in an Array that will be converted.",
          "return_type": "Vector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [Vector2Array] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Insert a [Vector2] at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the Vector2Array. If larger than the current size it will reserve some space beforehand, and if it is smaller it will cut off the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [Vector2] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Vector3": {
      "name": "Vector3",
      "category": "Built-In Types",
      "brief_description": "Vector class, which performs basic 3D vector math operations.",
      "description": "Vector3 is one of the core classes of the engine, and includes several built-in helper functions to perform basic vector math operations.",
      "methods": [
        {
          "name": "Vector3",
          "description": "Returns a Vector3 with the given components.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "Returns a new vector with all components in absolute values (i.e. positive).",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "angle_to",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ceil",
          "description": "Returns a new vector with all components rounded up.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "cross",
          "description": "Return the cross product with b.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubic_interpolate",
          "description": "Perform a cubic interpolation between vectors pre_a, a, b, post_b (a is current), by the given amount (t).",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pre_a",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "post_b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_squared_to",
          "description": "Return the squared distance (distance minus the last square root) to b. Prefer this function over distance_to if you need to sort vectors or need the squared distance for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_to",
          "description": "Return the distance to b.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dot",
          "description": "Return the dot product with b.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "floor",
          "description": "Returns a new vector with all components rounded down.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the vector. This is the same as Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z )",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length",
          "description": "Return the length of the vector.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length_squared",
          "description": "Return the length of the vector, squared. Prefer this function over \"length\" if you need to sort vectors or need the squared length for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "linear_interpolate",
          "description": "Linearly interpolates the vector to a given one (b), by the given amount (t).",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "max_axis",
          "description": "Returns AXIS_X, AXIS_Y or AXIS_Z depending on which axis is the largest.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "min_axis",
          "description": "Returns AXIS_X, AXIS_Y or AXIS_Z depending on which axis is the smallest.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "normalized",
          "description": "Return a copy of the normalized vector to unit length. This is the same as v / v.length().",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reflect",
          "description": "Like \"slide\", but reflects the Vector instead of continuing along the wall.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotated",
          "description": "Rotates the vector around some axis by phi radians.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slide",
          "description": "Slides the vector along a wall.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "snapped",
          "description": "Return a copy of the vector, snapped to the lowest neared multiple.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "AXIS_X",
          "value": "0",
          "description": "Enumerated value for the X axis. Returned by functions like max_axis or min_axis."
        },
        {
          "name": "AXIS_Y",
          "value": "1",
          "description": "Enumerated value for the Y axis."
        },
        {
          "name": "AXIS_Z",
          "value": "2",
          "description": "Enumerated value for the Z axis."
        }
      ],
      "properties": [
        {
          "name": "x",
          "type": "float",
          "description": "X component of the vector."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Y component of the vector."
        },
        {
          "name": "z",
          "type": "float",
          "description": "Z component of the vector."
        }
      ],
      "theme_properties": []
    },
    "Vector3Array": {
      "name": "Vector3Array",
      "category": "Built-In Types",
      "brief_description": "An Array of Vector3.",
      "description": "An Array specifically designed to hold Vector3.",
      "methods": [
        {
          "name": "Vector3Array",
          "description": "Construct a new Vector3Array. Optionally, you can pass in an Array that will be converted.",
          "return_type": "Vector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [Vector3Array] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "Vector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Insert a Vector3 at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the Vector3Array. If larger than the current size it will reserve some space beforehand, and if it is smaller it will cut off the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [Vector3] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VehicleBody": {
      "name": "VehicleBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_brake",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_engine_force",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "Returns the VehicleBody's velocity vector. To get the absolute speed in scalar value, get the length of the return vector in pixels/second. Example:\n\t\t\t\t[codeblock]\n\t\t\t\t# vehicle is an instance of VehicleBody\n\t\t\t\tvar speed = vehicle.get_linear_velocity().length()\n\t\t\t\t[/codeblock]",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_mass",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_steering",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_brake",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "brake",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_engine_force",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "engine_force",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mass",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mass",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_steering",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "steering",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VehicleWheel": {
      "name": "VehicleWheel",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_damping_compression",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_damping_relaxation",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_friction_slip",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_roll_influence",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_suspension_max_force",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_suspension_rest_length",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_suspension_stiffness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_suspension_travel",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_in_contact",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_used_as_steering",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_used_as_traction",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_damping_compression",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_damping_relaxation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction_slip",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radius",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_roll_influence",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "roll_influence",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suspension_max_force",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suspension_rest_length",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suspension_stiffness",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suspension_travel",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_as_steering",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_as_traction",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VideoPlayer": {
      "name": "VideoPlayer",
      "inherits": "Control",
      "category": "Core",
      "brief_description": "Control to play video files.",
      "description": "This control has the ability to play video streams. The only format accepted is the OGV Theora, so any other format must be converted before using in a project.",
      "methods": [
        {
          "name": "get_audio_track",
          "qualifiers": "const",
          "description": "Get the selected audio track (for multitrack videos).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_buffering_msec",
          "qualifiers": "const",
          "description": "Get the amount of miliseconds to store in buffer while playing.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_stream",
          "qualifiers": "const",
          "description": "Get the video stream.",
          "return_type": "VideoStream",
          "arguments": []
        },
        {
          "name": "get_stream_name",
          "qualifiers": "const",
          "description": "Get the name of the video stream.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_stream_pos",
          "qualifiers": "const",
          "description": "Get the current position of the stream, in seconds.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_video_texture",
          "description": "Get the current frame of the video as a [Texture].",
          "return_type": "Texture",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_volume",
          "qualifiers": "const",
          "description": "Get the volume of the audio track as a linear value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_volume_db",
          "qualifiers": "const",
          "description": "Get the volume of the audio track in decibels.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_autoplay",
          "qualifiers": "const",
          "description": "Get whether or not the video is set as autoplay.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_expand",
          "qualifiers": "const",
          "description": "Get whether or not the expand property is set.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_paused",
          "qualifiers": "const",
          "description": "Get whether or not the video is paused.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Get whether or not the video is playing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Start the video playback.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_audio_track",
          "description": "Set the audio track (for multitrack videos).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "track",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "Set whether this node should start playing automatically.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_buffering_msec",
          "description": "Set the amount of miliseconds to buffer during playback.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "msec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand",
          "description": "Set the expand property. If enabled, the video will grow or shrink to fit the player size, otherwise it will play at the stream resolution.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_paused",
          "description": "Set whether the video should pause the playback.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paused",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream",
          "description": "Set the video stream for this player.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "VideoStream",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume",
          "description": "Set the audio volume as a linear value.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "volume",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume_db",
          "description": "Set the audio volume in decibels.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the video playback.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VideoStream": {
      "name": "VideoStream",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VideoStreamTheora": {
      "name": "VideoStreamTheora",
      "inherits": "VideoStream",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Viewport": {
      "name": "Viewport",
      "inherits": "Node",
      "category": "Core",
      "brief_description": "Creates a sub-view into the screen.",
      "description": "A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.\n\t\tOptionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.\n\t\tIf a viewport is a child of a [Control], it will automatically take up its same rect and position, otherwise they must be set manually.\n\t\tViewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.\n\t\tAlso, viewports can be assigned to different screens in case the devices have multiple screens.\n\t\tFinally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.",
      "methods": [
        {
          "name": "find_world",
          "qualifiers": "const",
          "description": "Return the 3D world of the viewport, or if no such present, the one of the parent viewport.",
          "return_type": "World",
          "arguments": []
        },
        {
          "name": "find_world_2d",
          "qualifiers": "const",
          "description": "Return the 2D world of the viewport.",
          "return_type": "World2D",
          "arguments": []
        },
        {
          "name": "get_camera",
          "qualifiers": "const",
          "description": "Return the active 3D camera.",
          "return_type": "Camera",
          "arguments": []
        },
        {
          "name": "get_canvas_transform",
          "qualifiers": "const",
          "description": "Get the canvas transform of the viewport.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_final_transform",
          "qualifiers": "const",
          "description": "Get the total transform of the viewport.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_global_canvas_transform",
          "qualifiers": "const",
          "description": "Get the global canvas transform of the viewport.",
          "return_type": "Matrix32",
          "arguments": []
        },
        {
          "name": "get_mouse_pos",
          "qualifiers": "const",
          "description": "Get the mouse position, relative to the viewport.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_physics_object_picking",
          "description": "Get whether picking for all physics objects inside the viewport is enabled.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Return the viewport rect. If the viewport is child of a control, it will use the same rect as the parent. Otherwise, if the rect is empty, the viewport will use all the allowed space.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_render_target_clear_on_new_frame",
          "qualifiers": "const",
          "description": "Return whether automatic clearing of the render target on each frame is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_render_target_filter",
          "qualifiers": "const",
          "description": "Get whether the rendered texture has filters enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_render_target_gen_mipmaps",
          "qualifiers": "const",
          "description": "Get whether the rendered texture will have mipmaps generated.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_render_target_texture",
          "qualifiers": "const",
          "description": "Get the render target's texture, for use with various objects that you want to texture with the viewport.",
          "return_type": "RenderTargetTexture",
          "arguments": []
        },
        {
          "name": "get_render_target_update_mode",
          "qualifiers": "const",
          "description": "Get when the render target would be updated, will be one of the [code]RENDER_TARGET_UPDATE_*[/code] constants.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_render_target_vflip",
          "qualifiers": "const",
          "description": "Set whether the render target is flipped on the Y axis.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_screen_capture",
          "qualifiers": "const",
          "description": "Return the captured screenshot after [method queue_screen_capture]. You might need to check more than one frame untill the right image is returned.",
          "return_type": "Image",
          "arguments": []
        },
        {
          "name": "get_size_override",
          "qualifiers": "const",
          "description": "Get the size override set with [method set_size_override].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_viewport",
          "qualifiers": "const",
          "description": "Get the viewport RID from the visual server.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_visible_rect",
          "qualifiers": "const",
          "description": "Return the final, visible rect in global screen coordinates.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_world",
          "qualifiers": "const",
          "description": "Return the 3D world of the viewport.",
          "return_type": "World",
          "arguments": []
        },
        {
          "name": "get_world_2d",
          "qualifiers": "const",
          "description": "",
          "return_type": "World2D",
          "arguments": []
        },
        {
          "name": "gui_get_drag_data",
          "qualifiers": "const",
          "description": "Returs the drag data from the GUI, that was previously returned by [method Control.get_drag_data].",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "gui_has_modal_stack",
          "qualifiers": "const",
          "description": "Returs whether there are shown modals on-screen.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_transparent_background",
          "qualifiers": "const",
          "description": "Return whether the viewport lets whatever is behind it to show.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "input",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_audio_listener",
          "qualifiers": "const",
          "description": "Returns whether the viewport sends sounds to the speakers.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_audio_listener_2d",
          "qualifiers": "const",
          "description": "Returns whether the viewport sends soundsfrom 2D emitters to the speakers.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_input_disabled",
          "qualifiers": "const",
          "description": "Return whether input to the viewport is disabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_set_as_render_target",
          "qualifiers": "const",
          "description": "Return whether the viewport is set as a render target by [method set_as_render_target].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_size_override_enabled",
          "qualifiers": "const",
          "description": "Get the enabled status of the size override set with [method set_size_override].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_size_override_stretch_enabled",
          "qualifiers": "const",
          "description": "Get the enabled status of the size strech override set with [method set_size_override_stretch].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_own_world",
          "qualifiers": "const",
          "description": "Return whether the viewport is using a world separate from the parent viewport's world.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "queue_screen_capture",
          "description": "Queue a multithreaded screenshot, you can retrive it at a later frame via [method get_screen_capture].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "render_target_clear",
          "description": "Clear the render target manually.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_as_audio_listener",
          "description": "Makes the viewport send sounds to the speakers.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_as_audio_listener_2d",
          "description": "Makes the viewport send sounds from 2D emitters to the speakers.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_as_render_target",
          "description": "Set the viewport's render target mode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_canvas_transform",
          "description": "Set the canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]\\ s. This is relative to the global canvas transform of the viewport.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disable_input",
          "description": "Set whether input to the viewport is disabled.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_canvas_transform",
          "description": "Set the global canvas transform of the viewport. The canvas transform is relative to this.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_physics_object_picking",
          "description": "Enable/disable picking for all physics objects inside the viewport.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rect",
          "description": "Set the viewport rect. If the viewport is child of a control, it will use the same rect as the parent.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_render_target_clear_on_new_frame",
          "description": "Enable/disable automatic clearing of the render target on each frame. You might find it better to disable this if you are using the viewport for rarely updated textures. To clear manually, check [method render_target_clear]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_render_target_filter",
          "description": "Set whether the rendered texture should have filters enabled. Disable if you want the texture's pixels be visible.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_render_target_gen_mipmaps",
          "description": "Set whether the rendered texture should have mipmaps generated. Mipmaps allow the texture to have better antialiasing from far away.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_render_target_to_screen_rect",
          "description": "Map a part of the screen to the render target directly.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_render_target_update_mode",
          "description": "Set when the render target should be updated, has to be one of the [code]RENDER_TARGET_UPDATE_*[/code] constants.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_render_target_vflip",
          "description": "Set whether the render target should be flipped on the Y axis.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size_override",
          "description": "Set the size of the viewport. If the enable parameter is true, it would use the override, otherwise it would use the default size. If the size parameter is equal to [code](-1, -1)[/code], it won't update the size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "Vector2",
              "default_value": "Vector2(-1, -1)"
            },
            {
              "index": "2",
              "name": "margin",
              "type": "Vector2",
              "default_value": "Vector2(0, 0)"
            }
          ]
        },
        {
          "name": "set_size_override_stretch",
          "description": "Set whether the size override affects stretch as well.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transparent_background",
          "description": "If this viewport is a child of another viewport, keep the previously drawn background visible.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_own_world",
          "description": "Make the viewport use a world separate from the parent viewport's world.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_world",
          "description": "Change the 3D world of the viewport.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "world",
              "type": "World",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_world_2d",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "world_2d",
              "type": "World2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unhandled_input",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_worlds",
          "description": "Force update of the 2D and 3D worlds.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "warp_mouse",
          "description": "Warp the mouse to a position, relative to the viewport.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_pos",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "size_changed",
          "description": "Emitted when the size of the viewport is changed, whether by [method set_size_override], resize of window, or some other means.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "RENDER_TARGET_UPDATE_DISABLED",
          "value": "0",
          "description": "Do not update the render target."
        },
        {
          "name": "RENDER_TARGET_UPDATE_ONCE",
          "value": "1",
          "description": "Update the render target once, then switch to [code]RENDER_TARGET_UPDATE_DISABLED[/code]"
        },
        {
          "name": "RENDER_TARGET_UPDATE_WHEN_VISIBLE",
          "value": "2",
          "description": "Update the render target only when it is visible. This is the default value."
        },
        {
          "name": "RENDER_TARGET_UPDATE_ALWAYS",
          "value": "3",
          "description": "Update the render target always."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ViewportSprite": {
      "name": "ViewportSprite",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Displays a viewport as a sprite.",
      "description": "Used to display a [Viewport] node at some position in the world, without having to mess with [RenderTargetTexture]\\ s.",
      "methods": [
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "Get color modulation for the texture. All texture pixels are multiplied by this color.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "get the offset to the origin of the texture.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_viewport_path",
          "qualifiers": "const",
          "description": "Return the path to the shown [Viewport] node.",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "is_centered",
          "qualifiers": "const",
          "description": "Return whether the viewport's texture is centered on the origin.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_centered",
          "description": "Set whether the viewport's texture should be centered on the origin.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "centered",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "Set color modulation for the texture. All texture pixels are multiplied by this color. Color may contain rgb values above 1 to achieve a highlight effect.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "modulate",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the offset to the origin of the texture.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_viewport_path",
          "description": "Set the path to the shown [Viewport] node.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisibilityEnabler": {
      "name": "VisibilityEnabler",
      "inherits": "VisibilityNotifier",
      "category": "Core",
      "brief_description": "Enable certain nodes only when visible.",
      "description": "The VisibilityEnabler will disable [RigidBody] and [AnimationPlayer] nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler itself.",
      "methods": [
        {
          "name": "is_enabler_enabled",
          "qualifiers": "const",
          "description": "Returns whether the specified enabler was set to true or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "enabler",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabler",
          "description": "Set an enabler to true for all nodes of its type to be disabled when the VisibilityEnabler is not in view. See the constants for enablers and what they affect.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabler",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ENABLER_FREEZE_BODIES",
          "value": "1",
          "description": "This enabler will freeze [RigidBody] nodes."
        },
        {
          "name": "ENABLER_PAUSE_ANIMATIONS",
          "value": "0",
          "description": "This enabler will pause [AnimationPlayer] nodes."
        },
        {
          "name": "ENABLER_MAX",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisibilityEnabler2D": {
      "name": "VisibilityEnabler2D",
      "inherits": "VisibilityNotifier2D",
      "category": "Core",
      "brief_description": "Enable certain nodes only when visible.",
      "description": "The VisibilityEnabler2D will disable [RigidBody2D], [AnimationPlayer], and other nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler2D itself.",
      "methods": [
        {
          "name": "is_enabler_enabled",
          "qualifiers": "const",
          "description": "Returns whether the specified enabler was set to true or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "enabler",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabler",
          "description": "Set an enabler to true for all nodes of its type to be disabled when the VisibilityEnabler2D is not in view. See the constants for enablers and what they affect.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabler",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ENABLER_FREEZE_BODIES",
          "value": "1",
          "description": "This enabler will freeze [RigidBody2D] nodes."
        },
        {
          "name": "ENABLER_PAUSE_ANIMATIONS",
          "value": "0",
          "description": "This enabler will pause [AnimationPlayer] nodes."
        },
        {
          "name": "ENABLER_PAUSE_PARTICLES",
          "value": "2",
          "description": "This enabler will stop [Particles2D] nodes."
        },
        {
          "name": "ENABLER_PAUSE_ANIMATED_SPRITES",
          "value": "5",
          "description": ""
        },
        {
          "name": "ENABLER_PARENT_PROCESS",
          "value": "3",
          "description": "This enabler will stop the parent's _process function."
        },
        {
          "name": "ENABLER_PARENT_FIXED_PROCESS",
          "value": "4",
          "description": "This enabler will stop the parent's _fixed_process function."
        },
        {
          "name": "ENABLER_MAX",
          "value": "6",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisibilityNotifier": {
      "name": "VisibilityNotifier",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "Detect when the node is visible on screen.",
      "description": "The VisibilityNotifier is used to notify when its bounding box enters the screen, is visible on the screen, or when it exits the screen.",
      "methods": [
        {
          "name": "get_aabb",
          "qualifiers": "const",
          "description": "Return the visibility bounding box of the VisibilityNotifier.",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "is_on_screen",
          "qualifiers": "const",
          "description": "Return true if any part of the bounding box is on the screen.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_aabb",
          "description": "Set the visibility bounding box of the VisibilityNotifier.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "AABB",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "enter_camera",
          "description": "Emitted when the VisibilityNotifier enters a [Camera]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "enter_screen",
          "description": "Emitted when the VisibilityNotifier enters the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "exit_camera",
          "description": "Emitted when the VisibilityNotifier exits a [Camera]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "exit_screen",
          "description": "Emitted when the VisibilityNotifier exits the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisibilityNotifier2D": {
      "name": "VisibilityNotifier2D",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Detect when the node is visible on screen.",
      "description": "The VisibilityNotifier2D is used to notify when its bounding rectangle enters the screen, is visible on the screen, or when it exits the screen.",
      "methods": [
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Return the visibility bounding rectangle of the VisibilityNotifier2D.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "is_on_screen",
          "qualifiers": "const",
          "description": "Return true if any part of the bounding rectangle is on the screen.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_rect",
          "description": "Set the visibility bounding rectangle of the VisibilityNotifier2D.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "enter_screen",
          "description": "Emitted when the VisibilityNotifier2D enters the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "enter_viewport",
          "description": "Emitted when the VisibilityNotifier2D enters a [Viewport].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "exit_screen",
          "description": "Emitted when the VisibilityNotifier2D exits the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "exit_viewport",
          "description": "Emitted when the VisibilityNotifier2D exits a [Viewport].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualInstance": {
      "name": "VisualInstance",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_transformed_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "set_base",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualServer": {
      "name": "VisualServer",
      "inherits": "Object",
      "category": "Core",
      "brief_description": "Server for anything visible.",
      "description": "Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.\n\t\tThe visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.",
      "methods": [
        {
          "name": "black_bars_set_images",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "top",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "right",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "bottom",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "black_bars_set_margins",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "top",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "right",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "bottom",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "camera_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "camera_set_orthogonal",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "camera_set_perspective",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "camera_set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "canvas_item_add_circle",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_line",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "arg4",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "canvas_item_add_rect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_style_box",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "arg4",
              "type": "RealArray",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "arg5",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            }
          ]
        },
        {
          "name": "canvas_item_add_texture_rect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "arg4",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            },
            {
              "index": "5",
              "name": "arg5",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "canvas_item_add_texture_rect_region",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "arg4",
              "type": "Color",
              "default_value": "Color(1,1,1,1)"
            },
            {
              "index": "5",
              "name": "arg5",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "canvas_item_clear",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "canvas_item_get_opacity",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_get_parent",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_get_self_opacity",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_raise",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_clip",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_custom_rect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_opacity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_parent",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_self_opacity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_sort_children_by_y",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_z",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_pos",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_rotation",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_texture",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_visible",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "free_rid",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_default_clear_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_render_info",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_test_cube",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "instance_attach_object_instance_ID",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_attach_skeleton",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "instance_geometry_get_material_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_geometry_override_material_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_get_base",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_get_base_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_get_object_instance_ID",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_get_room",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_get_skeleton",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_get_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_is_exterior",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_set_exterior",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_set_room",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instances_cull_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "AABB",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instances_cull_convex",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instances_cull_ray",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_get_projector",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_get_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_get_var",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_has_shadow",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_is_volumetric",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_set_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_set_projector",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_set_shadow",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_set_var",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "light_set_volumetric",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_sphere_mesh",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "material_get_blend_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_get_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_get_line_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_get_shader",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_blend_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_flag",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_line_width",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_param",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_shader",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_add_surface",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "Array",
              "default_value": "Array()"
            },
            {
              "index": "4",
              "name": "arg4",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "mesh_add_surface_from_planes",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mesh_get_surface_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_remove_surface",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_array_index_len",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_array_len",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_format",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_material",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_primitive_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_set_material",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg3",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "multimesh_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "multimesh_get_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "AABB",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multimesh_get_mesh",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multimesh_instance_get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multimesh_instance_get_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multimesh_instance_set_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multimesh_instance_set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multimesh_set_aabb",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multimesh_set_mesh",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "particles_get_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_get_attractor_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_get_attractor_strength",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_get_attractors",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_get_color_phase_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_get_color_phase_pos",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_get_color_phases",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_get_randomness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_get_variable",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_get_visibility_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "AABB",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_has_height_from_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_is_emitting",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_amount",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_attractor_pos",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_attractor_strength",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_attractors",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_color_phase_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_color_phase_pos",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_color_phases",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_emitting",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_height_from_velocity",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_material",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "particles_set_randomness",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_variable",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "particles_set_visibility_aabb",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "portal_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "portal_get_disable_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "portal_get_disabled_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "portal_get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "portal_is_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "portal_set_disable_distance",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "portal_set_disabled_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "portal_set_enabled",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "portal_set_shape",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Vector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "room_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "room_get_bounds",
          "qualifiers": "const",
          "description": "",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "room_set_bounds",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scenario_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "scenario_set_debug",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_clear_color",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_time_scale",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shader_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "shader_set_mode",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "skeleton_bone_get_transform",
          "description": "",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "skeleton_bone_set_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "skeleton_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "skeleton_get_bone_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "skeleton_resize",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sync",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "texture_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "texture_create_from_image",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "texture_get_flags",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_get_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_get_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_set_flags",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_set_shrink_all_x2_on_set_data",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shrink",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_attach_camera",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": "RID()"
            }
          ]
        },
        {
          "name": "viewport_attach_canvas",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "viewport_get_attached_camera",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_get_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_get_scenario",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_remove_canvas",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_canvas_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_global_canvas_transform",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Matrix32",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_rect",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg1",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NO_INDEX_ARRAY",
          "value": "-1",
          "description": ""
        },
        {
          "name": "CUSTOM_ARRAY_SIZE",
          "value": "8",
          "description": ""
        },
        {
          "name": "ARRAY_WEIGHTS_SIZE",
          "value": "4",
          "description": ""
        },
        {
          "name": "MAX_PARTICLE_COLOR_PHASES",
          "value": "4",
          "description": ""
        },
        {
          "name": "MAX_PARTICLE_ATTRACTORS",
          "value": "4",
          "description": ""
        },
        {
          "name": "MAX_CURSORS",
          "value": "8",
          "description": ""
        },
        {
          "name": "TEXTURE_FLAG_MIPMAPS",
          "value": "1",
          "description": ""
        },
        {
          "name": "TEXTURE_FLAG_REPEAT",
          "value": "2",
          "description": ""
        },
        {
          "name": "TEXTURE_FLAG_FILTER",
          "value": "4",
          "description": ""
        },
        {
          "name": "TEXTURE_FLAG_CUBEMAP",
          "value": "2048",
          "description": ""
        },
        {
          "name": "TEXTURE_FLAGS_DEFAULT",
          "value": "7",
          "description": ""
        },
        {
          "name": "CUBEMAP_LEFT",
          "value": "0",
          "description": ""
        },
        {
          "name": "CUBEMAP_RIGHT",
          "value": "1",
          "description": ""
        },
        {
          "name": "CUBEMAP_BOTTOM",
          "value": "2",
          "description": ""
        },
        {
          "name": "CUBEMAP_TOP",
          "value": "3",
          "description": ""
        },
        {
          "name": "CUBEMAP_FRONT",
          "value": "4",
          "description": ""
        },
        {
          "name": "CUBEMAP_BACK",
          "value": "5",
          "description": ""
        },
        {
          "name": "SHADER_MATERIAL",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADER_POST_PROCESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "MATERIAL_FLAG_VISIBLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "MATERIAL_FLAG_DOUBLE_SIDED",
          "value": "1",
          "description": ""
        },
        {
          "name": "MATERIAL_FLAG_INVERT_FACES",
          "value": "2",
          "description": ""
        },
        {
          "name": "MATERIAL_FLAG_UNSHADED",
          "value": "3",
          "description": ""
        },
        {
          "name": "MATERIAL_FLAG_ONTOP",
          "value": "4",
          "description": ""
        },
        {
          "name": "MATERIAL_FLAG_MAX",
          "value": "7",
          "description": ""
        },
        {
          "name": "MATERIAL_BLEND_MODE_MIX",
          "value": "0",
          "description": ""
        },
        {
          "name": "MATERIAL_BLEND_MODE_ADD",
          "value": "1",
          "description": ""
        },
        {
          "name": "MATERIAL_BLEND_MODE_SUB",
          "value": "2",
          "description": ""
        },
        {
          "name": "MATERIAL_BLEND_MODE_MUL",
          "value": "3",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_PARAM_DIFFUSE",
          "value": "0",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_PARAM_DETAIL",
          "value": "1",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_PARAM_SPECULAR",
          "value": "2",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_PARAM_EMISSION",
          "value": "3",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_PARAM_SPECULAR_EXP",
          "value": "4",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_PARAM_GLOW",
          "value": "5",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_PARAM_NORMAL",
          "value": "6",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_PARAM_SHADE_PARAM",
          "value": "7",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_PARAM_MAX",
          "value": "8",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_TEXCOORD_SPHERE",
          "value": "3",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_TEXCOORD_UV",
          "value": "0",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_TEXCOORD_UV_TRANSFORM",
          "value": "1",
          "description": ""
        },
        {
          "name": "FIXED_MATERIAL_TEXCOORD_UV2",
          "value": "2",
          "description": ""
        },
        {
          "name": "ARRAY_VERTEX",
          "value": "0",
          "description": ""
        },
        {
          "name": "ARRAY_NORMAL",
          "value": "1",
          "description": ""
        },
        {
          "name": "ARRAY_TANGENT",
          "value": "2",
          "description": ""
        },
        {
          "name": "ARRAY_COLOR",
          "value": "3",
          "description": ""
        },
        {
          "name": "ARRAY_TEX_UV",
          "value": "4",
          "description": ""
        },
        {
          "name": "ARRAY_BONES",
          "value": "6",
          "description": ""
        },
        {
          "name": "ARRAY_WEIGHTS",
          "value": "7",
          "description": ""
        },
        {
          "name": "ARRAY_INDEX",
          "value": "8",
          "description": ""
        },
        {
          "name": "ARRAY_MAX",
          "value": "9",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_VERTEX",
          "value": "1",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_NORMAL",
          "value": "2",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_TANGENT",
          "value": "4",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_COLOR",
          "value": "8",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV",
          "value": "16",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_BONES",
          "value": "64",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_WEIGHTS",
          "value": "128",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_INDEX",
          "value": "256",
          "description": ""
        },
        {
          "name": "PRIMITIVE_POINTS",
          "value": "0",
          "description": ""
        },
        {
          "name": "PRIMITIVE_LINES",
          "value": "1",
          "description": ""
        },
        {
          "name": "PRIMITIVE_LINE_STRIP",
          "value": "2",
          "description": ""
        },
        {
          "name": "PRIMITIVE_LINE_LOOP",
          "value": "3",
          "description": ""
        },
        {
          "name": "PRIMITIVE_TRIANGLES",
          "value": "4",
          "description": ""
        },
        {
          "name": "PRIMITIVE_TRIANGLE_STRIP",
          "value": "5",
          "description": ""
        },
        {
          "name": "PRIMITIVE_TRIANGLE_FAN",
          "value": "6",
          "description": ""
        },
        {
          "name": "PRIMITIVE_MAX",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARTICLE_LIFETIME",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARTICLE_SPREAD",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARTICLE_GRAVITY",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARTICLE_LINEAR_VELOCITY",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARTICLE_ANGULAR_VELOCITY",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARTICLE_LINEAR_ACCELERATION",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARTICLE_RADIAL_ACCELERATION",
          "value": "6",
          "description": ""
        },
        {
          "name": "PARTICLE_TANGENTIAL_ACCELERATION",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARTICLE_INITIAL_SIZE",
          "value": "9",
          "description": ""
        },
        {
          "name": "PARTICLE_FINAL_SIZE",
          "value": "10",
          "description": ""
        },
        {
          "name": "PARTICLE_INITIAL_ANGLE",
          "value": "11",
          "description": ""
        },
        {
          "name": "PARTICLE_HEIGHT",
          "value": "12",
          "description": ""
        },
        {
          "name": "PARTICLE_HEIGHT_SPEED_SCALE",
          "value": "13",
          "description": ""
        },
        {
          "name": "PARTICLE_VAR_MAX",
          "value": "14",
          "description": ""
        },
        {
          "name": "LIGHT_DIRECTIONAL",
          "value": "0",
          "description": ""
        },
        {
          "name": "LIGHT_OMNI",
          "value": "1",
          "description": ""
        },
        {
          "name": "LIGHT_SPOT",
          "value": "2",
          "description": ""
        },
        {
          "name": "LIGHT_COLOR_DIFFUSE",
          "value": "0",
          "description": ""
        },
        {
          "name": "LIGHT_COLOR_SPECULAR",
          "value": "1",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_SPOT_ATTENUATION",
          "value": "0",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_SPOT_ANGLE",
          "value": "1",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_RADIUS",
          "value": "2",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_ENERGY",
          "value": "3",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_ATTENUATION",
          "value": "4",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_MAX",
          "value": "10",
          "description": ""
        },
        {
          "name": "SCENARIO_DEBUG_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "SCENARIO_DEBUG_WIREFRAME",
          "value": "1",
          "description": ""
        },
        {
          "name": "SCENARIO_DEBUG_OVERDRAW",
          "value": "2",
          "description": ""
        },
        {
          "name": "INSTANCE_MESH",
          "value": "1",
          "description": ""
        },
        {
          "name": "INSTANCE_MULTIMESH",
          "value": "2",
          "description": ""
        },
        {
          "name": "INSTANCE_PARTICLES",
          "value": "4",
          "description": ""
        },
        {
          "name": "INSTANCE_LIGHT",
          "value": "5",
          "description": ""
        },
        {
          "name": "INSTANCE_ROOM",
          "value": "6",
          "description": ""
        },
        {
          "name": "INSTANCE_PORTAL",
          "value": "7",
          "description": ""
        },
        {
          "name": "INSTANCE_GEOMETRY_MASK",
          "value": "30",
          "description": ""
        },
        {
          "name": "INFO_OBJECTS_IN_FRAME",
          "value": "0",
          "description": ""
        },
        {
          "name": "INFO_VERTICES_IN_FRAME",
          "value": "1",
          "description": ""
        },
        {
          "name": "INFO_MATERIAL_CHANGES_IN_FRAME",
          "value": "2",
          "description": ""
        },
        {
          "name": "INFO_SHADER_CHANGES_IN_FRAME",
          "value": "3",
          "description": ""
        },
        {
          "name": "INFO_SURFACE_CHANGES_IN_FRAME",
          "value": "4",
          "description": ""
        },
        {
          "name": "INFO_DRAW_CALLS_IN_FRAME",
          "value": "5",
          "description": ""
        },
        {
          "name": "INFO_USAGE_VIDEO_MEM_TOTAL",
          "value": "6",
          "description": ""
        },
        {
          "name": "INFO_VIDEO_MEM_USED",
          "value": "7",
          "description": ""
        },
        {
          "name": "INFO_TEXTURE_MEM_USED",
          "value": "8",
          "description": ""
        },
        {
          "name": "INFO_VERTEX_MEM_USED",
          "value": "9",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "WeakRef": {
      "name": "WeakRef",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Holds an [Object], but does not contribute to the reference count if the object is a reference.",
      "description": "A weakref can hold a [Reference], without contributing to the reference counter. A weakref can be created from an [Object] using [method @GDScript.weakref]. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to eachother. Without weakrefs, using these classes could lead to memory leaks, since both references keep eachother from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.",
      "methods": [
        {
          "name": "get_ref",
          "qualifiers": "const",
          "description": "Returns the [Object] this weakref is referring to.",
          "return_type": "Object",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "WindowDialog": {
      "name": "WindowDialog",
      "inherits": "Popup",
      "category": "Core",
      "brief_description": "Base class for window dialogs.",
      "description": "Windowdialog is the base class for all window-based dialogs. It's a by-default toplevel [Control] that draws a window decoration and allows motion and resizing.",
      "methods": [
        {
          "name": "get_close_button",
          "description": "Return the close [TextureButton].",
          "return_type": "TextureButton",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_title",
          "qualifiers": "const",
          "description": "Return the title of the window.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_title",
          "description": "Set the title of the window.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "close",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "close_h_ofs",
          "type": "int",
          "description": ""
        },
        {
          "name": "close_hilite",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "close_v_ofs",
          "type": "int",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "title_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "title_height",
          "type": "int",
          "description": ""
        },
        {
          "name": "titlebar_height",
          "type": "int",
          "description": ""
        }
      ]
    },
    "World": {
      "name": "World",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Class that has everything pertaining to a world.",
      "description": "Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world.",
      "methods": [
        {
          "name": "get_direct_space_state",
          "description": "",
          "return_type": "PhysicsDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_environment",
          "qualifiers": "const",
          "description": "",
          "return_type": "Environment",
          "arguments": []
        },
        {
          "name": "get_scenario",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_sound_space",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_space",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "set_environment",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "env",
              "type": "Environment",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "World2D": {
      "name": "World2D",
      "inherits": "Resource",
      "category": "Core",
      "brief_description": "Class that has everything pertaining to a 2D world.",
      "description": "Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world.",
      "methods": [
        {
          "name": "get_canvas",
          "description": "Retrieve the [RID] of this world's canvas resource. Used by the [VisualServer] for 2D drawing.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_direct_space_state",
          "description": "Retrieve the state of this world's physics space. This allows arbitrary querying for collision.",
          "return_type": "Physics2DDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_sound_space",
          "description": "Retrieve the [RID] of this world's sound space resource. Used by the [SpatialSound2DServer] for 2D spatial audio.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_space",
          "description": "Retrieve the [RID] of this world's physics space resource. Used by the [Physics2DServer] for 2D physics, treating it as both a space and an area.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "WorldEnvironment": {
      "name": "WorldEnvironment",
      "inherits": "Spatial",
      "category": "Core",
      "brief_description": "Sets environment properties for the entire scene",
      "description": "The [WorldEnvironment] node can be added to a scene in order to set default [Environment] variables for the scene. The [WorldEnvironment] can be overridden by an [Environment] node set on the current [Camera]. Additionally, only one [WorldEnvironment] may be instanced in a given scene at a time. The [WorldEnvironment] allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox).",
      "methods": [
        {
          "name": "get_environment",
          "qualifiers": "const",
          "description": "Return the [Environment] currently bound.",
          "return_type": "Environment",
          "arguments": []
        },
        {
          "name": "set_environment",
          "description": "Set the currently bound [Environment] to the one specified.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "env",
              "type": "Environment",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "XMLParser": {
      "name": "XMLParser",
      "inherits": "Reference",
      "category": "Core",
      "brief_description": "Low-level class for creating parsers for XML files.",
      "description": "This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low level so it can be applied to any possible schema.",
      "methods": [
        {
          "name": "get_attribute_count",
          "qualifiers": "const",
          "description": "Get the amount of attributes in the current element.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_attribute_name",
          "qualifiers": "const",
          "description": "Get the name of the attribute specified by the index in [code]idx[/code] argument.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_attribute_value",
          "qualifiers": "const",
          "description": "Get the value of the attribute specified by the index in [code]idx[/code] argument.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_line",
          "qualifiers": "const",
          "description": "Get the current line in the parsed file (currently not implemented).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_named_attribute_value",
          "qualifiers": "const",
          "description": "Get the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_named_attribute_value_safe",
          "qualifiers": "const",
          "description": "Get the value of a certain attribute of the current element by name. This will return an empty [String] if the attribute is not found.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_data",
          "qualifiers": "const",
          "description": "Get the contents of a text node. This will raise an error in any other type of node.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_node_name",
          "qualifiers": "const",
          "description": "Get the name of the current element node. This will raise an error if the current node type is not [code]NODE_ELEMENT[/code] nor [code]NODE_ELEMENT_END[/code]",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_node_offset",
          "qualifiers": "const",
          "description": "Get the byte offset of the current node since the beginning of the file or buffer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node_type",
          "description": "Get the type of the current node. Compare with [code]NODE_*[/code] constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_attribute",
          "qualifiers": "const",
          "description": "Check whether or not the current element has a certain attribute.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_empty",
          "qualifiers": "const",
          "description": "Check whether the current element is empty (this only works for completely empty tags, e.g. <element \\>).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "open",
          "description": "Open a XML file for parsing. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_buffer",
          "description": "Open a XML raw buffer for parsing. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "RawArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "read",
          "description": "Read the next node of the file. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "seek",
          "description": "Move the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "skip_section",
          "description": "Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NODE_NONE",
          "value": "0",
          "description": "There's no node (no file or buffer opened)"
        },
        {
          "name": "NODE_ELEMENT",
          "value": "1",
          "description": "Element (tag)"
        },
        {
          "name": "NODE_ELEMENT_END",
          "value": "2",
          "description": "End of element"
        },
        {
          "name": "NODE_TEXT",
          "value": "3",
          "description": "Text node"
        },
        {
          "name": "NODE_COMMENT",
          "value": "4",
          "description": "Comment node"
        },
        {
          "name": "NODE_CDATA",
          "value": "5",
          "description": "CDATA content"
        },
        {
          "name": "NODE_UNKNOWN",
          "value": "6",
          "description": "Unknown node"
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "YSort": {
      "name": "YSort",
      "inherits": "Node2D",
      "category": "Core",
      "brief_description": "Sort all child nodes based on their Y positions.",
      "description": "Sort all child nodes based on their Y positions. The child node must inherit from [CanvasItem] for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.",
      "methods": [
        {
          "name": "is_sort_enabled",
          "qualifiers": "const",
          "description": "Returns true if the children nodes are being sorted.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_sort_enabled",
          "description": "Set whether the children nodes are sorted or not. (default true)",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "bool": {
      "name": "bool",
      "category": "Built-In Types",
      "brief_description": "Boolean built-in type",
      "description": "Boolean built-in type.",
      "methods": [
        {
          "name": "bool",
          "description": "Cast an [int] value to a boolean value, this method will return true if called with an integer value different to 0 and false in other case.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bool",
          "description": "Cast a [float] value to a boolean value, this method will return true if called with a floating point value different to 0 and false in other case.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bool",
          "description": "Cast a [String] value to a boolean value, this method will return true if called with a non empty string and false in other case. Examples: [code]bool('False')[/code] returns true, [code]bool('')[/code]. returns false",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "float": {
      "name": "float",
      "category": "Built-In Types",
      "brief_description": "Float built-in type",
      "description": "Float built-in type.",
      "methods": [
        {
          "name": "float",
          "description": "Cast a [bool] value to a floating point value, [code]float(true)[/code] will be equals to 1.0 and [code]float(false)[/code] will be equals to 0.0.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "float",
          "description": "Cast an [int] value to a floating point value, [code]float(1)[/code] will be equals to 1.0.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "float",
          "description": "Cast a [String] value to a floating point value. This method accepts float value strings like [code] '1.23' [/code] and exponential notation strings for its parameter so calling [code] float('1e3') [/code] will return 1000.0 and calling [code] float('1e-3') [/code] will return -0.001.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "int": {
      "name": "int",
      "category": "Built-In Types",
      "brief_description": "Integer built-in type.",
      "description": "Integer built-in type.",
      "methods": [
        {
          "name": "int",
          "description": "Cast a [bool] value to an integer value, [code]int(true)[/code] will be equals to 1 and [code]int(false)[/code] will be equals to 0.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "int",
          "description": "Cast a float value to an integer value, this method simply removes the number fractions, so for example [code]int(2.7)[/code] will be equals to 2, [code]int(.1)[/code] will be equals to 0 and [code]int(-2.7)[/code] will be equals to -2.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "int",
          "description": "Cast a [String] value to an integer value, this method is an integer parser from a string, so calling this method with an invalid integer string will return 0, a valid string will be something like [code]'1.7'[/code]. This method will ignore all non-number characters, so calling [code]int('1e3')[/code] will return 13.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    }
  },
  "version": "2.1.4"
}
