{
  "classes": {
    "Popup": {
      "name": "Popup",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base container control for popups and dialogs.",
      "description": "Popup is a base [Control] used to show dialogs and popups. It's a subwindow and modal by default (see [Control]) and has helpers for custom popup behavior.",
      "methods": [
        {
          "name": "popup",
          "description": "Popup (show the control in modal form).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounds",
              "type": "Rect2",
              "default_value": "Rect2( 0, 0, 0, 0 )"
            }
          ]
        },
        {
          "name": "popup_centered",
          "description": "Popup (show the control in modal form) in the center of the screen, at the current size, or at a size determined by \"size\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "popup_centered_minsize",
          "description": "Popup (show the control in modal form) in the center of the screen, ensuring the size is never smaller than [code]minsize[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "minsize",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "popup_centered_ratio",
          "description": "Popup (show the control in modal form) in the center of the screen, scaled at a ratio of size of the screen.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": "0.75"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "about_to_show",
          "description": "This signal is emitted when a popup is about to be shown. (often used in [PopupMenu] for clearing the list of options and creating a new one according to the current context).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "popup_hide",
          "description": "This signal is emitted when a popup is hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_POST_POPUP",
          "value": "80",
          "description": "Notification sent right after the popup is shown."
        },
        {
          "name": "NOTIFICATION_POPUP_HIDE",
          "value": "81",
          "description": "Notification sent right after the popup is hidden."
        }
      ],
      "properties": [
        {
          "name": "popup_exclusive",
          "type": "bool",
          "setter": "set_exclusive",
          "getter": "is_exclusive",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "RectangleShape2D": {
      "name": "RectangleShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Rectangle shape for 2D collisions.",
      "description": "Rectangle shape for 2D collisions. This shape is useful for modeling box-like 2D objects.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "extents",
          "type": "Vector2",
          "setter": "set_extents",
          "getter": "get_extents",
          "description": "The rectangle's half extents. The width and height of this shape is twice the half extents."
        }
      ],
      "theme_properties": []
    },
    "Mutex": {
      "name": "Mutex",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A synchronization Mutex.",
      "description": "A synchronization Mutex. Element used to synchronize multiple [Thread]s. Basically a binary [Semaphore]. Guarantees that only one thread can ever acquire this lock at a time. Can be used to protect a critical section. Be careful to avoid deadlocks.",
      "methods": [
        {
          "name": "lock",
          "description": "Lock this [code]Mutex[/code], blocks until it is unlocked by the current owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "try_lock",
          "description": "Try locking this [code]Mutex[/code], does not block. Returns [OK] on success, [ERR_BUSY] otherwise.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unlock",
          "description": "Unlock this [code]Mutex[/code], leaving it to other threads.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PlaneMesh": {
      "name": "PlaneMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class representing a planar [PrimitiveMesh].",
      "description": "Class representing a planar [PrimitiveMesh]. This flat mesh does not have a thickness.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "size",
          "type": "Vector2",
          "setter": "set_size",
          "getter": "get_size",
          "description": "Size of the generated plane. Defaults to (2.0, 2.0)."
        },
        {
          "name": "subdivide_depth",
          "type": "int",
          "setter": "set_subdivide_depth",
          "getter": "get_subdivide_depth",
          "description": "Number of subdivision along the z-axis. Defaults to 0."
        },
        {
          "name": "subdivide_width",
          "type": "int",
          "setter": "set_subdivide_width",
          "getter": "get_subdivide_width",
          "description": "Number of subdivision along the x-axis. Defaults to 0."
        }
      ],
      "theme_properties": []
    },
    "PrismMesh": {
      "name": "PrismMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class representing a prism-shaped [PrimitiveMesh].",
      "description": "Class representing a prism-shaped [PrimitiveMesh].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "left_to_right",
          "type": "float",
          "setter": "set_left_to_right",
          "getter": "get_left_to_right",
          "description": "Displacement of of the upper edge along the x-axis. 0.0 positions edge straight above the bottome left edge. Defaults to 0.5 (positioned on the midpoint)."
        },
        {
          "name": "size",
          "type": "Vector3",
          "setter": "set_size",
          "getter": "get_size",
          "description": "Size of the prism. Defaults to (2.0, 2.0, 2.0)."
        },
        {
          "name": "subdivide_depth",
          "type": "int",
          "setter": "set_subdivide_depth",
          "getter": "get_subdivide_depth",
          "description": "Number of added edge loops along the z-axis. Defaults to 0."
        },
        {
          "name": "subdivide_height",
          "type": "int",
          "setter": "set_subdivide_height",
          "getter": "get_subdivide_height",
          "description": "Number of added edge loops along the y-axis. Defaults to 0."
        },
        {
          "name": "subdivide_width",
          "type": "int",
          "setter": "set_subdivide_width",
          "getter": "get_subdivide_width",
          "description": "Number of added edge loops along the x-axis. Defaults to 0."
        }
      ],
      "theme_properties": []
    },
    "Material": {
      "name": "Material",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Abstract base [Resource] for coloring and shading geometry.",
      "description": "Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "RENDER_PRIORITY_MAX",
          "value": "127",
          "description": ""
        },
        {
          "name": "RENDER_PRIORITY_MIN",
          "value": "-128",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "next_pass",
          "type": "Material",
          "setter": "set_next_pass",
          "getter": "get_next_pass",
          "description": ""
        },
        {
          "name": "render_priority",
          "type": "int",
          "setter": "set_render_priority",
          "getter": "get_render_priority",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ProxyTexture": {
      "name": "ProxyTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "base",
          "type": "Texture",
          "setter": "set_base",
          "getter": "get_base",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Environment": {
      "name": "Environment",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Resource for environment nodes (like [WorldEnvironment]) that define multiple rendering options.",
      "description": "Resource for environment nodes (like [WorldEnvironment]) that define multiple environment operations (such as background [Sky] or [Color], ambient light, fog, depth-of-field...).\tThese parameters affect the final render of the scene. The order of these operations is:\n \t\t- DOF Blur\n\t\t- Motion Blur\n\t\t- Bloom\n\t\t- Tonemap (auto exposure)\n\t\t- Adjustments",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "BG_KEEP",
          "value": "5",
          "enum": "BGMode",
          "description": "Keep on screen every pixel drawn in the background."
        },
        {
          "name": "BG_CLEAR_COLOR",
          "value": "0",
          "enum": "BGMode",
          "description": "Clear the background using the project's clear color."
        },
        {
          "name": "BG_COLOR",
          "value": "1",
          "enum": "BGMode",
          "description": "Clear the background using a custom clear color."
        },
        {
          "name": "BG_SKY",
          "value": "2",
          "enum": "BGMode",
          "description": "Display a user-defined sky in the background."
        },
        {
          "name": "BG_COLOR_SKY",
          "value": "3",
          "enum": "BGMode",
          "description": "Clear the background using a custom clear color and allows defining a sky for shading and reflection."
        },
        {
          "name": "BG_CANVAS",
          "value": "4",
          "enum": "BGMode",
          "description": "Display a [CanvasLayer] in the background."
        },
        {
          "name": "BG_MAX",
          "value": "6",
          "enum": "BGMode",
          "description": "Helper constant keeping track of the enum's size, has no direct usage in API calls."
        },
        {
          "name": "GLOW_BLEND_MODE_ADDITIVE",
          "value": "0",
          "enum": "GlowBlendMode",
          "description": "Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources."
        },
        {
          "name": "GLOW_BLEND_MODE_SCREEN",
          "value": "1",
          "enum": "GlowBlendMode",
          "description": "Screen glow blending mode. Increases brightness, used frequently with bloom."
        },
        {
          "name": "GLOW_BLEND_MODE_SOFTLIGHT",
          "value": "2",
          "enum": "GlowBlendMode",
          "description": "Softlight glow blending mode. Modifies contrast, exposes shadows and highlights, vivid bloom."
        },
        {
          "name": "GLOW_BLEND_MODE_REPLACE",
          "value": "3",
          "enum": "GlowBlendMode",
          "description": "Replace glow blending mode. Replaces all pixels' color by the glow value."
        },
        {
          "name": "TONE_MAPPER_LINEAR",
          "value": "0",
          "enum": "ToneMapper",
          "description": "Linear tonemapper operator. Reads the linear data and performs an exposure adjustment."
        },
        {
          "name": "TONE_MAPPER_REINHARDT",
          "value": "1",
          "enum": "ToneMapper",
          "description": "Reinhardt tonemapper operator. Performs a variation on rendered pixels' colors by this formula: color = color / (1 + color)."
        },
        {
          "name": "TONE_MAPPER_FILMIC",
          "value": "2",
          "enum": "ToneMapper",
          "description": "Filmic tonemapper operator."
        },
        {
          "name": "TONE_MAPPER_ACES",
          "value": "3",
          "enum": "ToneMapper",
          "description": "Academy Color Encoding System tonemapper operator."
        },
        {
          "name": "DOF_BLUR_QUALITY_LOW",
          "value": "0",
          "enum": "DOFBlurQuality",
          "description": "Low depth-of-field blur quality."
        },
        {
          "name": "DOF_BLUR_QUALITY_MEDIUM",
          "value": "1",
          "enum": "DOFBlurQuality",
          "description": "Medium depth-of-field blur quality."
        },
        {
          "name": "DOF_BLUR_QUALITY_HIGH",
          "value": "2",
          "enum": "DOFBlurQuality",
          "description": "High depth-of-field blur quality."
        },
        {
          "name": "SSAO_BLUR_DISABLED",
          "value": "0",
          "enum": "SSAOBlur",
          "description": ""
        },
        {
          "name": "SSAO_BLUR_1x1",
          "value": "1",
          "enum": "SSAOBlur",
          "description": ""
        },
        {
          "name": "SSAO_BLUR_2x2",
          "value": "2",
          "enum": "SSAOBlur",
          "description": ""
        },
        {
          "name": "SSAO_BLUR_3x3",
          "value": "3",
          "enum": "SSAOBlur",
          "description": ""
        },
        {
          "name": "SSAO_QUALITY_LOW",
          "value": "0",
          "enum": "SSAOQuality",
          "description": ""
        },
        {
          "name": "SSAO_QUALITY_MEDIUM",
          "value": "1",
          "enum": "SSAOQuality",
          "description": ""
        },
        {
          "name": "SSAO_QUALITY_HIGH",
          "value": "2",
          "enum": "SSAOQuality",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "adjustment_brightness",
          "type": "float",
          "setter": "set_adjustment_brightness",
          "getter": "get_adjustment_brightness",
          "description": "Global brightness value of the rendered scene (default value is 1)."
        },
        {
          "name": "adjustment_color_correction",
          "type": "Texture",
          "setter": "set_adjustment_color_correction",
          "getter": "get_adjustment_color_correction",
          "description": "Applies the provided [Texture] resource to affect the global color aspect of the rendered scene."
        },
        {
          "name": "adjustment_contrast",
          "type": "float",
          "setter": "set_adjustment_contrast",
          "getter": "get_adjustment_contrast",
          "description": "Global contrast value of the rendered scene (default value is 1)."
        },
        {
          "name": "adjustment_enabled",
          "type": "bool",
          "setter": "set_adjustment_enable",
          "getter": "is_adjustment_enabled",
          "description": "Enables the adjustment_* options provided by this resource. If false, adjustments modifications will have no effect on the rendered scene."
        },
        {
          "name": "adjustment_saturation",
          "type": "float",
          "setter": "set_adjustment_saturation",
          "getter": "get_adjustment_saturation",
          "description": "Global color saturation value of the rendered scene (default value is 1)."
        },
        {
          "name": "ambient_light_color",
          "type": "Color",
          "setter": "set_ambient_light_color",
          "getter": "get_ambient_light_color",
          "description": "[Color] of the ambient light."
        },
        {
          "name": "ambient_light_energy",
          "type": "float",
          "setter": "set_ambient_light_energy",
          "getter": "get_ambient_light_energy",
          "description": "Energy of the ambient light. The higher the value, the stronger the light."
        },
        {
          "name": "ambient_light_sky_contribution",
          "type": "float",
          "setter": "set_ambient_light_sky_contribution",
          "getter": "get_ambient_light_sky_contribution",
          "description": "Defines the amount of light that the sky brings on the scene. A value of 0 means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of 1 means that all the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene."
        },
        {
          "name": "auto_exposure_enabled",
          "type": "bool",
          "setter": "set_tonemap_auto_exposure",
          "getter": "get_tonemap_auto_exposure",
          "description": "Enables the tonemapping auto exposure mode of the scene renderer. If activated, the renderer will automatically determine the exposure setting to adapt to the illumination of the scene and the observed light."
        },
        {
          "name": "auto_exposure_max_luma",
          "type": "float",
          "setter": "set_tonemap_auto_exposure_max",
          "getter": "get_tonemap_auto_exposure_max",
          "description": "Maximum luminance value for the auto exposure."
        },
        {
          "name": "auto_exposure_min_luma",
          "type": "float",
          "setter": "set_tonemap_auto_exposure_min",
          "getter": "get_tonemap_auto_exposure_min",
          "description": "Minimum luminance value for the auto exposure."
        },
        {
          "name": "auto_exposure_scale",
          "type": "float",
          "setter": "set_tonemap_auto_exposure_grey",
          "getter": "get_tonemap_auto_exposure_grey",
          "description": "Scale of the auto exposure effect. Affects the intensity of auto exposure."
        },
        {
          "name": "auto_exposure_speed",
          "type": "float",
          "setter": "set_tonemap_auto_exposure_speed",
          "getter": "get_tonemap_auto_exposure_speed",
          "description": "Speed of the auto exposure effect. Affects the time needed for the camera to perform auto exposure."
        },
        {
          "name": "background_canvas_max_layer",
          "type": "int",
          "setter": "set_canvas_max_layer",
          "getter": "get_canvas_max_layer",
          "description": "Maximum layer id (if using Layer background mode)."
        },
        {
          "name": "background_color",
          "type": "Color",
          "setter": "set_bg_color",
          "getter": "get_bg_color",
          "description": "Color displayed for clear areas of the scene (if using Custom color or Color+Sky background modes)."
        },
        {
          "name": "background_energy",
          "type": "float",
          "setter": "set_bg_energy",
          "getter": "get_bg_energy",
          "description": "Power of light emitted by the background."
        },
        {
          "name": "background_mode",
          "type": "int",
          "setter": "set_background",
          "getter": "get_background",
          "enum": "Environment.BGMode",
          "description": "Defines the mode of background."
        },
        {
          "name": "background_sky",
          "type": "Sky",
          "setter": "set_sky",
          "getter": "get_sky",
          "description": "[Sky] resource defined as background."
        },
        {
          "name": "background_sky_custom_fov",
          "type": "float",
          "setter": "set_sky_custom_fov",
          "getter": "get_sky_custom_fov",
          "description": "[Sky] resource's custom field of view."
        },
        {
          "name": "dof_blur_far_amount",
          "type": "float",
          "setter": "set_dof_blur_far_amount",
          "getter": "get_dof_blur_far_amount",
          "description": "Amount of far blur."
        },
        {
          "name": "dof_blur_far_distance",
          "type": "float",
          "setter": "set_dof_blur_far_distance",
          "getter": "get_dof_blur_far_distance",
          "description": "Distance from the camera where the far blur effect affects the rendering."
        },
        {
          "name": "dof_blur_far_enabled",
          "type": "bool",
          "setter": "set_dof_blur_far_enabled",
          "getter": "is_dof_blur_far_enabled",
          "description": "Enables the far blur effect."
        },
        {
          "name": "dof_blur_far_quality",
          "type": "int",
          "setter": "set_dof_blur_far_quality",
          "getter": "get_dof_blur_far_quality",
          "enum": "Environment.DOFBlurQuality",
          "description": "Quality of the far blur quality."
        },
        {
          "name": "dof_blur_far_transition",
          "type": "float",
          "setter": "set_dof_blur_far_transition",
          "getter": "get_dof_blur_far_transition",
          "description": "Transition between no-blur area and far blur."
        },
        {
          "name": "dof_blur_near_amount",
          "type": "float",
          "setter": "set_dof_blur_near_amount",
          "getter": "get_dof_blur_near_amount",
          "description": "Amount of near blur."
        },
        {
          "name": "dof_blur_near_distance",
          "type": "float",
          "setter": "set_dof_blur_near_distance",
          "getter": "get_dof_blur_near_distance",
          "description": "Distance from the camera where the near blur effect affects the rendering."
        },
        {
          "name": "dof_blur_near_enabled",
          "type": "bool",
          "setter": "set_dof_blur_near_enabled",
          "getter": "is_dof_blur_near_enabled",
          "description": "Enables the near blur effect."
        },
        {
          "name": "dof_blur_near_quality",
          "type": "int",
          "setter": "set_dof_blur_near_quality",
          "getter": "get_dof_blur_near_quality",
          "enum": "Environment.DOFBlurQuality",
          "description": "Quality of the near blur quality."
        },
        {
          "name": "dof_blur_near_transition",
          "type": "float",
          "setter": "set_dof_blur_near_transition",
          "getter": "get_dof_blur_near_transition",
          "description": "Transition between near blur and no-blur area."
        },
        {
          "name": "fog_color",
          "type": "Color",
          "setter": "set_fog_color",
          "getter": "get_fog_color",
          "description": "Fog's [Color]."
        },
        {
          "name": "fog_depth_begin",
          "type": "float",
          "setter": "set_fog_depth_begin",
          "getter": "get_fog_depth_begin",
          "description": "Fog's depth starting distance from the camera."
        },
        {
          "name": "fog_depth_curve",
          "type": "float",
          "setter": "set_fog_depth_curve",
          "getter": "get_fog_depth_curve",
          "description": "Value defining the fog depth intensity."
        },
        {
          "name": "fog_depth_enabled",
          "type": "bool",
          "setter": "set_fog_depth_enabled",
          "getter": "is_fog_depth_enabled",
          "description": "Enables the fog depth."
        },
        {
          "name": "fog_enabled",
          "type": "bool",
          "setter": "set_fog_enabled",
          "getter": "is_fog_enabled",
          "description": "Enables the fog. Needs fog_height_enabled and/or for_depth_enabled to actually display fog."
        },
        {
          "name": "fog_height_curve",
          "type": "float",
          "setter": "set_fog_height_curve",
          "getter": "get_fog_height_curve",
          "description": "Value defining the fog height intensity."
        },
        {
          "name": "fog_height_enabled",
          "type": "bool",
          "setter": "set_fog_height_enabled",
          "getter": "is_fog_height_enabled",
          "description": "Enables the fog height."
        },
        {
          "name": "fog_height_max",
          "type": "float",
          "setter": "set_fog_height_max",
          "getter": "get_fog_height_max",
          "description": "Maximum height of fog."
        },
        {
          "name": "fog_height_min",
          "type": "float",
          "setter": "set_fog_height_min",
          "getter": "get_fog_height_min",
          "description": "Minimum height of fog."
        },
        {
          "name": "fog_sun_amount",
          "type": "float",
          "setter": "set_fog_sun_amount",
          "getter": "get_fog_sun_amount",
          "description": "Amount of sun that affects the fog rendering."
        },
        {
          "name": "fog_sun_color",
          "type": "Color",
          "setter": "set_fog_sun_color",
          "getter": "get_fog_sun_color",
          "description": "Sun [Color]."
        },
        {
          "name": "fog_transmit_curve",
          "type": "float",
          "setter": "set_fog_transmit_curve",
          "getter": "get_fog_transmit_curve",
          "description": "Amount of light that the fog transmits."
        },
        {
          "name": "fog_transmit_enabled",
          "type": "bool",
          "setter": "set_fog_transmit_enabled",
          "getter": "is_fog_transmit_enabled",
          "description": "Enables fog's light transmission. If enabled, lets reflections light to be transmitted by the fog."
        },
        {
          "name": "glow_bicubic_upscale",
          "type": "bool",
          "setter": "set_glow_bicubic_upscale",
          "getter": "is_glow_bicubic_upscale_enabled",
          "description": ""
        },
        {
          "name": "glow_blend_mode",
          "type": "int",
          "setter": "set_glow_blend_mode",
          "getter": "get_glow_blend_mode",
          "enum": "Environment.GlowBlendMode",
          "description": "Glow blending mode."
        },
        {
          "name": "glow_bloom",
          "type": "float",
          "setter": "set_glow_bloom",
          "getter": "get_glow_bloom",
          "description": "Bloom value (global glow)."
        },
        {
          "name": "glow_enabled",
          "type": "bool",
          "setter": "set_glow_enabled",
          "getter": "is_glow_enabled",
          "description": "Enables glow rendering."
        },
        {
          "name": "glow_hdr_scale",
          "type": "float",
          "setter": "set_glow_hdr_bleed_scale",
          "getter": "get_glow_hdr_bleed_scale",
          "description": "Bleed scale of the HDR glow."
        },
        {
          "name": "glow_hdr_threshold",
          "type": "float",
          "setter": "set_glow_hdr_bleed_threshold",
          "getter": "get_glow_hdr_bleed_threshold",
          "description": "Bleed threshold of the HDR glow."
        },
        {
          "name": "glow_intensity",
          "type": "float",
          "setter": "set_glow_intensity",
          "getter": "get_glow_intensity",
          "description": "Glow intensity."
        },
        {
          "name": "glow_levels/1",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "First level of glow (most local)."
        },
        {
          "name": "glow_levels/2",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Second level of glow."
        },
        {
          "name": "glow_levels/3",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Third level of glow."
        },
        {
          "name": "glow_levels/4",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Fourth level of glow."
        },
        {
          "name": "glow_levels/5",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Fifth level of glow."
        },
        {
          "name": "glow_levels/6",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Sixth level of glow."
        },
        {
          "name": "glow_levels/7",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Seventh level of glow (most global)."
        },
        {
          "name": "glow_strength",
          "type": "float",
          "setter": "set_glow_strength",
          "getter": "get_glow_strength",
          "description": "Glow strength."
        },
        {
          "name": "ss_reflections_depth_tolerance",
          "type": "float",
          "setter": "set_ssr_depth_tolerance",
          "getter": "get_ssr_depth_tolerance",
          "description": ""
        },
        {
          "name": "ss_reflections_enabled",
          "type": "bool",
          "setter": "set_ssr_enabled",
          "getter": "is_ssr_enabled",
          "description": ""
        },
        {
          "name": "ss_reflections_fade_in",
          "type": "float",
          "setter": "set_ssr_fade_in",
          "getter": "get_ssr_fade_in",
          "description": ""
        },
        {
          "name": "ss_reflections_fade_out",
          "type": "float",
          "setter": "set_ssr_fade_out",
          "getter": "get_ssr_fade_out",
          "description": ""
        },
        {
          "name": "ss_reflections_max_steps",
          "type": "int",
          "setter": "set_ssr_max_steps",
          "getter": "get_ssr_max_steps",
          "description": ""
        },
        {
          "name": "ss_reflections_roughness",
          "type": "bool",
          "setter": "set_ssr_rough",
          "getter": "is_ssr_rough",
          "description": ""
        },
        {
          "name": "ssao_bias",
          "type": "float",
          "setter": "set_ssao_bias",
          "getter": "get_ssao_bias",
          "description": ""
        },
        {
          "name": "ssao_blur",
          "type": "int",
          "setter": "set_ssao_blur",
          "getter": "is_ssao_blur_enabled",
          "enum": "Environment.SSAOBlur",
          "description": ""
        },
        {
          "name": "ssao_color",
          "type": "Color",
          "setter": "set_ssao_color",
          "getter": "get_ssao_color",
          "description": ""
        },
        {
          "name": "ssao_edge_sharpness",
          "type": "float",
          "setter": "set_ssao_edge_sharpness",
          "getter": "get_ssao_edge_sharpness",
          "description": ""
        },
        {
          "name": "ssao_enabled",
          "type": "bool",
          "setter": "set_ssao_enabled",
          "getter": "is_ssao_enabled",
          "description": ""
        },
        {
          "name": "ssao_intensity",
          "type": "float",
          "setter": "set_ssao_intensity",
          "getter": "get_ssao_intensity",
          "description": ""
        },
        {
          "name": "ssao_intensity2",
          "type": "float",
          "setter": "set_ssao_intensity2",
          "getter": "get_ssao_intensity2",
          "description": ""
        },
        {
          "name": "ssao_light_affect",
          "type": "float",
          "setter": "set_ssao_direct_light_affect",
          "getter": "get_ssao_direct_light_affect",
          "description": ""
        },
        {
          "name": "ssao_quality",
          "type": "int",
          "setter": "set_ssao_quality",
          "getter": "get_ssao_quality",
          "enum": "Environment.SSAOQuality",
          "description": ""
        },
        {
          "name": "ssao_radius",
          "type": "float",
          "setter": "set_ssao_radius",
          "getter": "get_ssao_radius",
          "description": ""
        },
        {
          "name": "ssao_radius2",
          "type": "float",
          "setter": "set_ssao_radius2",
          "getter": "get_ssao_radius2",
          "description": ""
        },
        {
          "name": "tonemap_exposure",
          "type": "float",
          "setter": "set_tonemap_exposure",
          "getter": "get_tonemap_exposure",
          "description": "Default exposure for tonemap."
        },
        {
          "name": "tonemap_mode",
          "type": "int",
          "setter": "set_tonemapper",
          "getter": "get_tonemapper",
          "enum": "Environment.ToneMapper",
          "description": "Tonemapping mode."
        },
        {
          "name": "tonemap_white",
          "type": "float",
          "setter": "set_tonemap_white",
          "getter": "get_tonemap_white",
          "description": "White reference value for tonemap."
        }
      ],
      "theme_properties": []
    },
    "Skeleton": {
      "name": "Skeleton",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Skeleton for characters and animated objects.",
      "description": "Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see [Animation]). Skeleton will support rag doll dynamics in the future.",
      "methods": [
        {
          "name": "add_bone",
          "description": "Add a bone, with name \"name\". [method get_bone_count] will become the bone index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bind_child_node_to_bone",
          "description": "Deprecated soon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_bones",
          "description": "Clear all the bones in this skeleton.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "find_bone",
          "qualifiers": "const",
          "description": "Return the bone index that matches \"name\" as its name.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_count",
          "qualifiers": "const",
          "description": "Return the amount of bones in the skeleton.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bone_custom_pose",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_global_pose",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_name",
          "qualifiers": "const",
          "description": "Return the name of the bone at index \"index\"",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_parent",
          "qualifiers": "const",
          "description": "Return the bone index which is the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note that the parent bone returned will always be less than \"bone_idx\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_pose",
          "qualifiers": "const",
          "description": "Return the pose transform for bone \"bone_idx\".",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_rest",
          "qualifiers": "const",
          "description": "Return the rest transform for a bone \"bone_idx\".",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bound_child_nodes_to_bone",
          "qualifiers": "const",
          "description": "Deprecated soon.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_bone_rest_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_custom_pose",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "custom_pose",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_disable_rest",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_global_pose",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pose",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_parent",
          "description": "Set the bone index \"parent_idx\" as the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note: \"parent_idx\" must be less than \"bone_idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parent_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_pose",
          "description": "Return the pose transform for bone \"bone_idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pose",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_rest",
          "description": "Set the rest transform for bone \"bone_idx\"",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rest",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unbind_child_node_from_bone",
          "description": "Deprecated soon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unparent_bone_and_rest",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NOTIFICATION_UPDATE_SKELETON",
          "value": "50",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VehicleBody": {
      "name": "VehicleBody",
      "inherits": "RigidBody",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "brake",
          "type": "float",
          "setter": "set_brake",
          "getter": "get_brake",
          "description": ""
        },
        {
          "name": "engine_force",
          "type": "float",
          "setter": "set_engine_force",
          "getter": "get_engine_force",
          "description": ""
        },
        {
          "name": "steering",
          "type": "float",
          "setter": "set_steering",
          "getter": "get_steering",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptConstructor": {
      "name": "VisualScriptConstructor",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A Visual Script node which calls a base type constructor.",
      "description": "A Visual Script node which calls a base type constructor. It can be used for type conversion as well.",
      "methods": [
        {
          "name": "get_constructor",
          "qualifiers": "const",
          "description": "",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_constructor_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_constructor",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "constructor",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constructor_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Position3D": {
      "name": "Position3D",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Generic 3D Position hint for editing",
      "description": "Generic 3D Position hint for editing. It's just like a plain [Spatial] but displays as a cross in the 3D-Editor at all times.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DDirectBodyState": {
      "name": "Physics2DDirectBodyState",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Direct access object to a physics body in the [Physics2DServer].",
      "description": "Direct access object to a physics body in the [Physics2DServer]. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body.",
      "methods": [
        {
          "name": "get_contact_collider",
          "qualifiers": "const",
          "description": "Return the [RID] of the collider.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_id",
          "qualifiers": "const",
          "description": "Return the object id of the collider.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_object",
          "qualifiers": "const",
          "description": "Return the collider object, this depends on how it was created (will return a scene node if such was used to create it).",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_position",
          "qualifiers": "const",
          "description": "Return the contact position in the collider.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_shape",
          "qualifiers": "const",
          "description": "Return the collider shape index.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_shape_metadata",
          "qualifiers": "const",
          "description": "Return the metadata of the collided shape. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_velocity_at_position",
          "qualifiers": "const",
          "description": "Return the linear velocity vector at contact point of the collider.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_count",
          "qualifiers": "const",
          "description": "Return the amount of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_contact_local_normal",
          "qualifiers": "const",
          "description": "Return the local normal (of this body) of the contact point.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_position",
          "qualifiers": "const",
          "description": "Return the local position (of this body) of the contact point.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_shape",
          "qualifiers": "const",
          "description": "Return the local shape index of the collision.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_space_state",
          "description": "Return the current state of space, useful for queries.",
          "return_type": "Physics2DDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "integrate_forces",
          "description": "Call the built-in force integration code.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "angular_velocity",
          "type": "float",
          "setter": "set_angular_velocity",
          "getter": "get_angular_velocity",
          "description": "The angular velocity of the body."
        },
        {
          "name": "inverse_inertia",
          "type": "float",
          "setter": "",
          "getter": "get_inverse_inertia",
          "description": "The inverse of the inertia of the body."
        },
        {
          "name": "inverse_mass",
          "type": "float",
          "setter": "",
          "getter": "get_inverse_mass",
          "description": "The inverse of the mass of the body."
        },
        {
          "name": "linear_velocity",
          "type": "Vector2",
          "setter": "set_linear_velocity",
          "getter": "get_linear_velocity",
          "description": "The linear velocity of the body."
        },
        {
          "name": "sleeping",
          "type": "bool",
          "setter": "set_sleep_state",
          "getter": "is_sleeping",
          "description": "[code]true[/code] if this body is currently sleeping (not active)."
        },
        {
          "name": "step",
          "type": "float",
          "setter": "",
          "getter": "get_step",
          "description": "The timestep (delta) used for the simulation."
        },
        {
          "name": "total_angular_damp",
          "type": "float",
          "setter": "",
          "getter": "get_total_angular_damp",
          "description": "The rate at which the body stops rotating, if there are not any other forces moving it."
        },
        {
          "name": "total_gravity",
          "type": "Vector2",
          "setter": "",
          "getter": "get_total_gravity",
          "description": "The total gravity vector being currently applied to this body."
        },
        {
          "name": "total_linear_damp",
          "type": "float",
          "setter": "",
          "getter": "get_total_linear_damp",
          "description": "The rate at which the body stops moving, if there are not any other forces moving it."
        },
        {
          "name": "transform",
          "type": "Transform2D",
          "setter": "set_transform",
          "getter": "get_transform",
          "description": "The transformation matrix of the body."
        }
      ],
      "theme_properties": []
    },
    "BaseButton": {
      "name": "BaseButton",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for different kinds of buttons.",
      "description": "BaseButton is the abstract base class for buttons, so it shouldn't be used directly (it doesn't display anything). Other types of buttons inherit from it.",
      "methods": [
        {
          "name": "_pressed",
          "qualifiers": "virtual",
          "description": "Called when button is pressed.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_toggled",
          "qualifiers": "virtual",
          "description": "Called when button is toggled (only if toggle_mode is active).",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "button_pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_draw_mode",
          "qualifiers": "const",
          "description": "Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to \"draw\" signal. The visual state of the button is defined by the DRAW_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_hovered",
          "qualifiers": "const",
          "description": "Return true if mouse entered the button before it exit.",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "button_down",
          "description": "Emitted when the button starts being held down.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "button_up",
          "description": "Emitted when the button stops being held down.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pressed",
          "description": "This signal is emitted every time the button is toggled or pressed (i.e. activated, so on [code]button_down[/code] if \"Click on press\" is active and on [code]button_up[/code] otherwise).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "toggled",
          "description": "This signal is emitted when the button was just toggled between pressed and normal states (only if toggle_mode is active). The new state is contained in the [i]pressed[/i] argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "DRAW_NORMAL",
          "value": "0",
          "enum": "DrawMode",
          "description": "The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons."
        },
        {
          "name": "DRAW_PRESSED",
          "value": "1",
          "enum": "DrawMode",
          "description": "The state of buttons are pressed."
        },
        {
          "name": "DRAW_HOVER",
          "value": "2",
          "enum": "DrawMode",
          "description": "The state of buttons are hovered."
        },
        {
          "name": "DRAW_DISABLED",
          "value": "3",
          "enum": "DrawMode",
          "description": "The state of buttons are disabled."
        },
        {
          "name": "ACTION_MODE_BUTTON_PRESS",
          "value": "0",
          "enum": "ActionMode",
          "description": "Require just a press to consider the button clicked."
        },
        {
          "name": "ACTION_MODE_BUTTON_RELEASE",
          "value": "1",
          "enum": "ActionMode",
          "description": "Require a press and a subsequent release before considering the button clicked."
        }
      ],
      "properties": [
        {
          "name": "action_mode",
          "type": "int",
          "setter": "set_action_mode",
          "getter": "get_action_mode",
          "enum": "BaseButton.ActionMode",
          "description": "Determines when the button is considered clicked, one of the ACTION_MODE_* constants."
        },
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": "If [code]true[/code] the button is in disabled state and can't be clicked or toggled."
        },
        {
          "name": "enabled_focus_mode",
          "type": "int",
          "setter": "set_enabled_focus_mode",
          "getter": "get_enabled_focus_mode",
          "enum": "Control.FocusMode",
          "description": "Focus access mode to use when switching between enabled/disabled (see [method Control.set_focus_mode] and [member disabled])."
        },
        {
          "name": "group",
          "type": "ButtonGroup",
          "setter": "set_button_group",
          "getter": "get_button_group",
          "description": "[ButtonGroup] associated to the button."
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "If [code]true[/code] the button's state is pressed. Means the button is pressed down or toggled (if toggle_mode is active)."
        },
        {
          "name": "shortcut",
          "type": "ShortCut",
          "setter": "set_shortcut",
          "getter": "get_shortcut",
          "description": "[Shortcut] associated to the button."
        },
        {
          "name": "toggle_mode",
          "type": "bool",
          "setter": "set_toggle_mode",
          "getter": "is_toggle_mode",
          "description": "If [code]true[/code] the button is in toggle mode. Makes the button flip state between pressed and unpressed each time its area is clicked."
        }
      ],
      "theme_properties": []
    },
    "InputMap": {
      "name": "InputMap",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Singleton that manages [InputEventAction].",
      "description": "Manages all [InputEventAction] which can be created/modified from the project settings menu [code]Project > Project Settings > Input Map[/code] or in code with [method add_action] and [method action_add_event]. See [method Node._input].",
      "methods": [
        {
          "name": "action_add_event",
          "description": "Adds an [InputEvent] to an action. This [InputEvent] will trigger the action.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "action_erase_event",
          "description": "Removes an [InputEvent] from an action.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "action_has_event",
          "description": "Returns [true] if an action has an [InputEvent] associated with it.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_action",
          "description": "Adds an (empty) action to the [code]InputMap[/code]. An [InputEvent] can then be added to this action with [method action_add_event].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_action",
          "description": "Removes an action from the [code]InputMap[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "event_is_action",
          "qualifiers": "const",
          "description": "Returns [true] if the given event is part of an existing action. This method ignores keyboard modifiers if the given [InputEvent] is not pressed (for proper release detection). See [method action_has_event] if you don't want this behavior.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_action_list",
          "description": "Returns an array of [InputEvent]s associated with a given action.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_actions",
          "description": "Returns an array of all actions in the [code]InputMap[/code].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_action",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the [code]InputMap[/code] has a registered action with the given name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load_from_globals",
          "description": "Clears all [InputEventAction] in the [code]InputMap[/code] and load it anew from [ProjectSettings].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "OS": {
      "name": "OS",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Operating System functions.",
      "description": "Operating System functions. OS Wraps the most common functionality to communicate with the host Operating System, such as: mouse grabbing, mouse cursors, clipboard, video mode, date and time, timers, environment variables, execution of binaries, command line, etc.",
      "methods": [
        {
          "name": "alert",
          "description": "Displays a modal dialog box utilizing the host OS.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": "\"Alert!\""
            }
          ]
        },
        {
          "name": "can_draw",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the host OS allows drawing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "can_use_threads",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the current host platform is using multiple threads.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "delay_msec",
          "qualifiers": "const",
          "description": "Delay executing of the current thread by given milliseconds.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "msec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "delay_usec",
          "qualifiers": "const",
          "description": "Delay executing of the current thread by given microseconds.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "usec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dump_memory_to_file",
          "description": "Dumps the memory allocation ringlist to a file (only works in debug).\n\t\t\t\tEntry format per line: \"Address - Size - Description\"",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dump_resources_to_file",
          "description": "Dumps all used resources to file (only works in debug).\n\t\t\t\tEntry format per line: \"Resource Type : Resource Location\"\n\t\t\t\tAt the end of the file is a statistic of all used Resource Types.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "execute",
          "description": "Execute the file at the given path, optionally blocking until it returns.\n\t\t\t\tPlatform path resolution will take place.  The resolved file must exist and be executable.\n\t\t\t\tReturns a process id.\n\t\t\t\tFor example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar output = []\n\t\t\t\tvar pid = OS.execute('ls', [], true, output)\n\t\t\t\t[/codeblock]\n\t\t\t\tIf you wish to access a shell built-in or perform a composite command, a platform specific shell can be invoked.  For example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar pid = OS.execute('CMD.exe', ['/C', 'cd %TEMP% && dir'], true, output)\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arguments",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "blocking",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "output",
              "type": "Array",
              "default_value": "[  ]"
            }
          ]
        },
        {
          "name": "find_scancode_from_string",
          "qualifiers": "const",
          "description": "Returns the scancode of the given string (e.g. \"Escape\")",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cmdline_args",
          "description": "Returns the command line arguments passed to the engine.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_date",
          "qualifiers": "const",
          "description": "Returns current date as a dictionary of keys: year, month, day, weekday, dst (daylight savings time).",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "utc",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_datetime",
          "qualifiers": "const",
          "description": "Returns current datetime as a dictionary of keys: year, month, day, weekday, dst (daylight savings time), hour, minute, second.",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "utc",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_datetime_from_unix_time",
          "qualifiers": "const",
          "description": "Get a dictionary of time values when given epoch time.\n\t\t\t\tDictionary Time values will be a union of values from [method get_time] and [method get_date] dictionaries (with the exception of dst = day light standard time, as it cannot be determined from epoch).",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "unix_time_val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_dynamic_memory_usage",
          "qualifiers": "const",
          "description": "Returns the total amount of dynamic memory used (only works in debug).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_environment",
          "qualifiers": "const",
          "description": "Returns an environment variable.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "environment",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_executable_path",
          "qualifiers": "const",
          "description": "Returns the path to the current engine executable.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_latin_keyboard_variant",
          "qualifiers": "const",
          "description": "Returns the current latin keyboard variant as a String.\n\t\t\t\tPossible return values are: \"QWERTY\", \"AZERTY\", \"QZERTY\", \"DVORAK\", \"NEO\", \"COLEMAK\" or \"ERROR\".",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_locale",
          "qualifiers": "const",
          "description": "Returns the host OS locale.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_model_name",
          "qualifiers": "const",
          "description": "Returns the model name of the current device.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Returns the name of the host OS. Possible values are: \"Android\", \"Haiku\", \"iOS\", \"HTML5\", \"OSX\", \"Server\", \"Windows\", \"UWP\", \"X11\".",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_power_percent_left",
          "description": "Returns the amount of battery left in the device as a percentage.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_power_seconds_left",
          "description": "Returns the time in seconds before the device runs out of battery.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_power_state",
          "description": "Returns the current state of the device regarding battery and power. See [code]POWERSTATE_*[/code] constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_process_id",
          "qualifiers": "const",
          "description": "Returns the game process ID",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_processor_count",
          "qualifiers": "const",
          "description": "Returns the number of cores available in the host machine.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_scancode_string",
          "qualifiers": "const",
          "description": "Returns the given scancode as a string (e.g. Return values: \"Escape\", \"Shift+Escape\").",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_screen_count",
          "qualifiers": "const",
          "description": "Returns the number of displays attached to the host machine.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_screen_dpi",
          "qualifiers": "const",
          "description": "Returns the dots per inch density of the specified screen.\n\n\t\t\t\tOn Android Devices, the actual screen densities are grouped into six generalized densities:\n\t\t\t\t\tldpi    - 120 dpi\n\t\t\t\t\tmdpi    - 160 dpi\n\t\t\t\t\thdpi    - 240 dpi\n\t\t\t\t\txhdpi   - 320 dpi\n\t\t\t\t\txxhdpi  - 480 dpi\n\t\t\t\t\txxxhdpi - 640 dpi",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_screen_position",
          "qualifiers": "const",
          "description": "Returns the position of the specified screen by index. If no screen index is provided, the current screen will be used.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_screen_size",
          "qualifiers": "const",
          "description": "Returns the dimensions in pixels of the specified screen.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_splash_tick_msec",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_static_memory_peak_usage",
          "qualifiers": "const",
          "description": "Returns the max amount of static memory used (only works in debug).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_static_memory_usage",
          "qualifiers": "const",
          "description": "Returns the amount of static memory being used by the program in bytes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_system_dir",
          "qualifiers": "const",
          "description": "Returns the actual path to commonly used folders across different platforms. Available locations are specified in [OS.SystemDir].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "int",
              "enum": "OS.SystemDir",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_system_time_secs",
          "qualifiers": "const",
          "description": "Returns the epoch time of the operating system in seconds.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_ticks_msec",
          "qualifiers": "const",
          "description": "Returns the amount of time passed in milliseconds since the engine started.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_time",
          "qualifiers": "const",
          "description": "Returns current time as a dictionary of keys: hour, minute, second.",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "utc",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_time_zone_info",
          "qualifiers": "const",
          "description": "Returns the current time zone as a dictionary with the keys: bias and name.",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_unique_id",
          "qualifiers": "const",
          "description": "Returns a string that is unique to the device. Currently only works on Android and iOS. Returns empty string on other platforms.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_unix_time",
          "qualifiers": "const",
          "description": "Return\tthe current unix timestamp.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_unix_time_from_datetime",
          "qualifiers": "const",
          "description": "Get an epoch time value from a dictionary of time values.\n\t\t\t\t[code]datetime[/code] must be populated with the following keys: year, month, day, hour, minute, second.\n\t\t\t\tYou can pass the output from [method get_datetime_from_unix_time] directly into this function. Daylight savings time (dst), if present, is ignored.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "datetime",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_user_data_dir",
          "qualifiers": "const",
          "description": "Returns the absolute directory path where user data is written ([code]user://[/code]).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_virtual_keyboard_height",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_environment",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if an environment variable exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "environment",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_feature",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "tag_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_touchscreen_ui_hint",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the device has a touchscreen or emulates one.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_virtual_keyboard",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the platform has a virtual keyboard, [code]false[/code] otherwise.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "hide_virtual_keyboard",
          "description": "Hides the virtual keyboard if it is shown, does nothing otherwise.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_debug_build",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the build is a debug build.\n\t\t\t\tReturns [code]true[/code] when running in the editor.\n\t\t\t\tReturns [code]false[/code] if the build is a release build.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_ok_left_and_cancel_right",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the \"Okay\" button should appear on the left and \"Cancel\" on the right.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_scancode_unicode",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the input code has a unicode character.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_stdout_verbose",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the engine was executed with -v (verbose stdout).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_userfs_persistent",
          "qualifiers": "const",
          "description": "If [code]true[/code], the [code]user://[/code] file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "kill",
          "description": "Kill a process ID (this method can be used to kill processes that were not spawned by the game).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pid",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "native_video_is_playing",
          "description": "Returns [code]true[/code] if native video is playing.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "native_video_pause",
          "description": "Pauses native video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "native_video_play",
          "description": "Plays native video from the specified path, at the given volume and with audio and subtitle tracks.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "volume",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "audio_track",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "subtitle_track",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "native_video_stop",
          "description": "Stops native video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "native_video_unpause",
          "description": "Resumes native video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "print_all_resources",
          "description": "Shows all resources in the game. Optionally the list can be written to a file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tofile",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "print_all_textures_by_size",
          "description": "Shows the list of loaded textures sorted by size in memory.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "print_resources_by_type",
          "description": "Shows the number of resources loaded by the game of the given types.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "types",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print_resources_in_use",
          "description": "Shows all resources currently used by the game.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "short",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "request_attention",
          "description": "Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_icon",
          "description": "Sets the game's icon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "icon",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ime_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_thread_name",
          "description": "Sets the name of the current thread.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_file_access_save_and_swap",
          "description": "Enables backup saves if [code]enabled[/code] is [code]true[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_title",
          "description": "Sets the window title to the specified string.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shell_open",
          "description": "Requests the OS to open a resource with the most appropriate program. For example.\n\t\t\t\t\t[code]OS.shell_open(\"C:\\\\Users\\name\\Downloads\")[/code] on Windows opens the file explorer at the downloads folders of the user.\n\t\t\t\t\t[code]OS.shell_open(\"http://godotengine.org\")[/code] opens the default web browser on the official Godot website.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uri",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show_virtual_keyboard",
          "description": "Shows the virtual keyboard if the platform has one. The [i]existing_text[/i] parameter is useful for implementing your own LineEdit, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing_text",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "DAY_SUNDAY",
          "value": "0",
          "enum": "Weekday",
          "description": ""
        },
        {
          "name": "DAY_MONDAY",
          "value": "1",
          "enum": "Weekday",
          "description": ""
        },
        {
          "name": "DAY_TUESDAY",
          "value": "2",
          "enum": "Weekday",
          "description": ""
        },
        {
          "name": "DAY_WEDNESDAY",
          "value": "3",
          "enum": "Weekday",
          "description": ""
        },
        {
          "name": "DAY_THURSDAY",
          "value": "4",
          "enum": "Weekday",
          "description": ""
        },
        {
          "name": "DAY_FRIDAY",
          "value": "5",
          "enum": "Weekday",
          "description": ""
        },
        {
          "name": "DAY_SATURDAY",
          "value": "6",
          "enum": "Weekday",
          "description": ""
        },
        {
          "name": "MONTH_JANUARY",
          "value": "1",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_FEBRUARY",
          "value": "2",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_MARCH",
          "value": "3",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_APRIL",
          "value": "4",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_MAY",
          "value": "5",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_JUNE",
          "value": "6",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_JULY",
          "value": "7",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_AUGUST",
          "value": "8",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_SEPTEMBER",
          "value": "9",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_OCTOBER",
          "value": "10",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_NOVEMBER",
          "value": "11",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "MONTH_DECEMBER",
          "value": "12",
          "enum": "Month",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_LANDSCAPE",
          "value": "0",
          "enum": "ScreenOrientation",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_PORTRAIT",
          "value": "1",
          "enum": "ScreenOrientation",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_REVERSE_LANDSCAPE",
          "value": "2",
          "enum": "ScreenOrientation",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_REVERSE_PORTRAIT",
          "value": "3",
          "enum": "ScreenOrientation",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_SENSOR_LANDSCAPE",
          "value": "4",
          "enum": "ScreenOrientation",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_SENSOR_PORTRAIT",
          "value": "5",
          "enum": "ScreenOrientation",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_SENSOR",
          "value": "6",
          "enum": "ScreenOrientation",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DESKTOP",
          "value": "0",
          "enum": "SystemDir",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DCIM",
          "value": "1",
          "enum": "SystemDir",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DOCUMENTS",
          "value": "2",
          "enum": "SystemDir",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DOWNLOADS",
          "value": "3",
          "enum": "SystemDir",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_MOVIES",
          "value": "4",
          "enum": "SystemDir",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_MUSIC",
          "value": "5",
          "enum": "SystemDir",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_PICTURES",
          "value": "6",
          "enum": "SystemDir",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_RINGTONES",
          "value": "7",
          "enum": "SystemDir",
          "description": ""
        },
        {
          "name": "POWERSTATE_UNKNOWN",
          "value": "0",
          "enum": "PowerState",
          "description": ""
        },
        {
          "name": "POWERSTATE_ON_BATTERY",
          "value": "1",
          "enum": "PowerState",
          "description": ""
        },
        {
          "name": "POWERSTATE_NO_BATTERY",
          "value": "2",
          "enum": "PowerState",
          "description": ""
        },
        {
          "name": "POWERSTATE_CHARGING",
          "value": "3",
          "enum": "PowerState",
          "description": ""
        },
        {
          "name": "POWERSTATE_CHARGED",
          "value": "4",
          "enum": "PowerState",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "clipboard",
          "type": "String",
          "setter": "set_clipboard",
          "getter": "get_clipboard",
          "description": "The clipboard from the host OS. Might be unavailable on some platforms."
        },
        {
          "name": "current_screen",
          "type": "int",
          "setter": "set_current_screen",
          "getter": "get_current_screen",
          "description": "The current screen index (starting from 0)."
        },
        {
          "name": "exit_code",
          "type": "int",
          "setter": "set_exit_code",
          "getter": "get_exit_code",
          "description": ""
        },
        {
          "name": "keep_screen_on",
          "type": "bool",
          "setter": "set_keep_screen_on",
          "getter": "is_keep_screen_on",
          "description": ""
        },
        {
          "name": "low_processor_usage_mode",
          "type": "bool",
          "setter": "set_low_processor_usage_mode",
          "getter": "is_in_low_processor_usage_mode",
          "description": ""
        },
        {
          "name": "screen_orientation",
          "type": "int",
          "setter": "set_screen_orientation",
          "getter": "get_screen_orientation",
          "enum": "_OS.ScreenOrientation",
          "description": "The current screen orientation."
        },
        {
          "name": "vsync_enabled",
          "type": "bool",
          "setter": "set_use_vsync",
          "getter": "is_vsync_enabled",
          "description": ""
        },
        {
          "name": "window_borderless",
          "type": "bool",
          "setter": "set_borderless_window",
          "getter": "get_borderless_window",
          "description": "If [code]true[/code], removes the window frame."
        },
        {
          "name": "window_fullscreen",
          "type": "bool",
          "setter": "set_window_fullscreen",
          "getter": "is_window_fullscreen",
          "description": "If [code]true[/code], the window is fullscreen."
        },
        {
          "name": "window_maximized",
          "type": "bool",
          "setter": "set_window_maximized",
          "getter": "is_window_maximized",
          "description": "If [code]true[/code], the window is maximized."
        },
        {
          "name": "window_minimized",
          "type": "bool",
          "setter": "set_window_minimized",
          "getter": "is_window_minimized",
          "description": "If [code]true[/code], the window is minimized."
        },
        {
          "name": "window_position",
          "type": "Vector2",
          "setter": "set_window_position",
          "getter": "get_window_position",
          "description": "The window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right."
        },
        {
          "name": "window_resizable",
          "type": "bool",
          "setter": "set_window_resizable",
          "getter": "is_window_resizable",
          "description": "If [code]true[/code], the window is resizable by the user."
        },
        {
          "name": "window_size",
          "type": "Vector2",
          "setter": "set_window_size",
          "getter": "get_window_size",
          "description": "The size of the window (without counting window manager decorations)."
        }
      ],
      "theme_properties": []
    },
    "NetworkedMultiplayerENet": {
      "name": "NetworkedMultiplayerENet",
      "inherits": "NetworkedMultiplayerPeer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "PacketPeer implementation using the ENet library.",
      "description": "A connection (or a listening server) that should be passed to [method SceneTree.set_network_peer]. Socket events can be handled by connecting to [SceneTree] signals.",
      "methods": [
        {
          "name": "close_connection",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_client",
          "description": "Create client that connects to a server at address [code]ip[/code] using specified [code]port[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ip",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "in_bandwidth",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "out_bandwidth",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "create_server",
          "description": "Create server that listens to connections via [code]port[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_clients",
              "type": "int",
              "default_value": "32"
            },
            {
              "index": "2",
              "name": "in_bandwidth",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "out_bandwidth",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_bind_ip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ip",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "COMPRESS_NONE",
          "value": "0",
          "enum": "CompressionMode",
          "description": ""
        },
        {
          "name": "COMPRESS_RANGE_CODER",
          "value": "1",
          "enum": "CompressionMode",
          "description": ""
        },
        {
          "name": "COMPRESS_FASTLZ",
          "value": "2",
          "enum": "CompressionMode",
          "description": ""
        },
        {
          "name": "COMPRESS_ZLIB",
          "value": "3",
          "enum": "CompressionMode",
          "description": ""
        },
        {
          "name": "COMPRESS_ZSTD",
          "value": "4",
          "enum": "CompressionMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "compression_mode",
          "type": "int",
          "setter": "set_compression_mode",
          "getter": "get_compression_mode",
          "enum": "NetworkedMultiplayerENet.CompressionMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectAmplify": {
      "name": "AudioEffectAmplify",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a Amplify audio effect to an Audio bus.\n\t\tIncreases or decreases the volume of the selected audio bus.",
      "description": "Increases or decreases the volume being routed through the audio bus.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "volume_db",
          "type": "float",
          "setter": "set_volume_db",
          "getter": "get_volume_db",
          "description": "Amount of amplification. Positive values make the sound louder, negative values make it quieter. Value can range from -80 to 24. Default value: [code]0[/code]."
        }
      ],
      "theme_properties": []
    },
    "StreamTexture": {
      "name": "StreamTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A .stex texture.",
      "description": "A texture that is loaded from a .stex file.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "load_path",
          "type": "String",
          "setter": "load",
          "getter": "get_load_path",
          "description": "The StreamTexture's filepath to a .stex file."
        }
      ],
      "theme_properties": []
    },
    "InputEventWithModifiers": {
      "name": "InputEventWithModifiers",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for keys events with modifiers.",
      "description": "Contains keys events information with modifiers support like [code]SHIFT[/code] or [code]ALT[/code]. See [method Node._input].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "alt",
          "type": "bool",
          "setter": "set_alt",
          "getter": "get_alt",
          "description": "State of the Alt modifier."
        },
        {
          "name": "command",
          "type": "bool",
          "setter": "set_command",
          "getter": "get_command",
          "description": "State of the Command modifier."
        },
        {
          "name": "control",
          "type": "bool",
          "setter": "set_control",
          "getter": "get_control",
          "description": "State of the Ctrl modifier."
        },
        {
          "name": "meta",
          "type": "bool",
          "setter": "set_metakey",
          "getter": "get_metakey",
          "description": "State of the Meta modifier."
        },
        {
          "name": "shift",
          "type": "bool",
          "setter": "set_shift",
          "getter": "get_shift",
          "description": "State of the Shift modifier."
        }
      ],
      "theme_properties": []
    },
    "Reference": {
      "name": "Reference",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for anything that keeps a reference count.",
      "description": "Base class for anything that keeps a reference count. Resource and many other helper objects inherit this. References keep an internal reference counter so they are only released when no longer in use.",
      "methods": [
        {
          "name": "init_ref",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reference",
          "description": "Increase the internal reference counter. Use this only if you really know what you are doing.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unreference",
          "description": "Decrease the internal reference counter. Use this only if you really know what you are doing.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Light": {
      "name": "Light",
      "inherits": "VisualInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Provides a base class for different kinds of light nodes.",
      "description": "Light is the abstract base class for light nodes, so it shouldn't be used directly (It can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_ENERGY",
          "value": "0",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_INDIRECT_ENERGY",
          "value": "1",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SPECULAR",
          "value": "2",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_RANGE",
          "value": "3",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION",
          "value": "4",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SPOT_ANGLE",
          "value": "5",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SPOT_ATTENUATION",
          "value": "6",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_CONTACT_SHADOW_SIZE",
          "value": "7",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_MAX_DISTANCE",
          "value": "8",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_SPLIT_1_OFFSET",
          "value": "9",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_SPLIT_2_OFFSET",
          "value": "10",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_SPLIT_3_OFFSET",
          "value": "11",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_NORMAL_BIAS",
          "value": "12",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_BIAS",
          "value": "13",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_BIAS_SPLIT_SCALE",
          "value": "14",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "15",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "BAKE_DISABLED",
          "value": "0",
          "enum": "BakeMode",
          "description": ""
        },
        {
          "name": "BAKE_INDIRECT",
          "value": "1",
          "enum": "BakeMode",
          "description": ""
        },
        {
          "name": "BAKE_ALL",
          "value": "2",
          "enum": "BakeMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "editor_only",
          "type": "bool",
          "setter": "set_editor_only",
          "getter": "is_editor_only",
          "description": ""
        },
        {
          "name": "light_bake_mode",
          "type": "int",
          "setter": "set_bake_mode",
          "getter": "get_bake_mode",
          "enum": "Light.BakeMode",
          "description": ""
        },
        {
          "name": "light_color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": ""
        },
        {
          "name": "light_cull_mask",
          "type": "int",
          "setter": "set_cull_mask",
          "getter": "get_cull_mask",
          "description": ""
        },
        {
          "name": "light_energy",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "light_indirect_energy",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "light_negative",
          "type": "bool",
          "setter": "set_negative",
          "getter": "is_negative",
          "description": ""
        },
        {
          "name": "light_specular",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "shadow_bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "shadow_color",
          "type": "Color",
          "setter": "set_shadow_color",
          "getter": "get_shadow_color",
          "description": ""
        },
        {
          "name": "shadow_contact",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "shadow_enabled",
          "type": "bool",
          "setter": "set_shadow",
          "getter": "has_shadow",
          "description": ""
        },
        {
          "name": "shadow_reverse_cull_face",
          "type": "bool",
          "setter": "set_shadow_reverse_cull_face",
          "getter": "get_shadow_reverse_cull_face",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ProceduralSky": {
      "name": "ProceduralSky",
      "inherits": "Sky",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "TEXTURE_SIZE_256",
          "value": "0",
          "enum": "TextureSize",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_512",
          "value": "1",
          "enum": "TextureSize",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_1024",
          "value": "2",
          "enum": "TextureSize",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_2048",
          "value": "3",
          "enum": "TextureSize",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_4096",
          "value": "4",
          "enum": "TextureSize",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_MAX",
          "value": "5",
          "enum": "TextureSize",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "ground_bottom_color",
          "type": "Color",
          "setter": "set_ground_bottom_color",
          "getter": "get_ground_bottom_color",
          "description": ""
        },
        {
          "name": "ground_curve",
          "type": "float",
          "setter": "set_ground_curve",
          "getter": "get_ground_curve",
          "description": ""
        },
        {
          "name": "ground_energy",
          "type": "float",
          "setter": "set_ground_energy",
          "getter": "get_ground_energy",
          "description": ""
        },
        {
          "name": "ground_horizon_color",
          "type": "Color",
          "setter": "set_ground_horizon_color",
          "getter": "get_ground_horizon_color",
          "description": ""
        },
        {
          "name": "sky_curve",
          "type": "float",
          "setter": "set_sky_curve",
          "getter": "get_sky_curve",
          "description": ""
        },
        {
          "name": "sky_energy",
          "type": "float",
          "setter": "set_sky_energy",
          "getter": "get_sky_energy",
          "description": ""
        },
        {
          "name": "sky_horizon_color",
          "type": "Color",
          "setter": "set_sky_horizon_color",
          "getter": "get_sky_horizon_color",
          "description": ""
        },
        {
          "name": "sky_top_color",
          "type": "Color",
          "setter": "set_sky_top_color",
          "getter": "get_sky_top_color",
          "description": ""
        },
        {
          "name": "sun_angle_max",
          "type": "float",
          "setter": "set_sun_angle_max",
          "getter": "get_sun_angle_max",
          "description": ""
        },
        {
          "name": "sun_angle_min",
          "type": "float",
          "setter": "set_sun_angle_min",
          "getter": "get_sun_angle_min",
          "description": ""
        },
        {
          "name": "sun_color",
          "type": "Color",
          "setter": "set_sun_color",
          "getter": "get_sun_color",
          "description": ""
        },
        {
          "name": "sun_curve",
          "type": "float",
          "setter": "set_sun_curve",
          "getter": "get_sun_curve",
          "description": ""
        },
        {
          "name": "sun_energy",
          "type": "float",
          "setter": "set_sun_energy",
          "getter": "get_sun_energy",
          "description": ""
        },
        {
          "name": "sun_latitude",
          "type": "float",
          "setter": "set_sun_latitude",
          "getter": "get_sun_latitude",
          "description": ""
        },
        {
          "name": "sun_longitude",
          "type": "float",
          "setter": "set_sun_longitude",
          "getter": "get_sun_longitude",
          "description": ""
        },
        {
          "name": "texture_size",
          "type": "int",
          "setter": "set_texture_size",
          "getter": "get_texture_size",
          "enum": "ProceduralSky.TextureSize",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "EditorPlugin": {
      "name": "EditorPlugin",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Used by the editor to extend its functionality.",
      "description": "Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins.",
      "methods": [
        {
          "name": "add_control_to_bottom_panel",
          "description": "Add a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_bottom_panel].",
          "return_type": "ToolButton",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_control_to_container",
          "description": "Add a custom control to a container (see CONTAINER_* enum). There are many locations where custom controls can be added in the editor UI.\n\t\t\t\tPlease remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).\n\t\t\t\tIf your plugin is being removed, also make sure to remove your custom controls too.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "container",
              "type": "int",
              "enum": "EditorPlugin.CustomControlContainer",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_control_to_dock",
          "description": "Add the control to a specific dock slot (see DOCK_* enum for options).\n\t\t\t\tIf the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.\n\t\t\t\tIf your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_docks].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "slot",
              "type": "int",
              "enum": "EditorPlugin.DockSlot",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_custom_type",
          "description": "Add a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.\n\t\t\t\tWhen given node or resource is selected, the base type will be instanced (ie, \"Spatial\", \"Control\", \"Resource\"), then the script will be loaded and set to this object.\n\t\t\t\tYou can use the [method EditorPlugin.handles] to check if your custom object is being edited by checking the script or using 'is' keyword.\n\t\t\t\tDuring run-time, this will be a simple object with a script so this function does not need to be called then.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "base",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "script",
              "type": "Script",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_export_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exporter",
              "type": "EditorExportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_import_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "importer",
              "type": "EditorImportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_scene_import_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene_importer",
              "type": "EditorSceneImporter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_tool_submenu_item",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "submenu",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_changes",
          "qualifiers": "virtual",
          "description": "This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.\n\t\t\t\tThis is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "clear",
          "qualifiers": "virtual",
          "description": "Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "create_spatial_gizmo",
          "qualifiers": "virtual",
          "description": "This is used for plugins that create gizmos used by the spatial editor. Just check that the node passed in the \"for_spatial\" argument matches your plugin.",
          "return_type": "EditorSpatialGizmo",
          "arguments": [
            {
              "index": "0",
              "name": "for_spatial",
              "type": "Spatial",
              "default_value": ""
            }
          ]
        },
        {
          "name": "edit",
          "qualifiers": "virtual",
          "description": "This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "forward_canvas_gui_input",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "forward_draw_over_viewport",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "overlay",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "forward_force_draw_over_viewport",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "overlay",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "forward_spatial_gui_input",
          "qualifiers": "virtual",
          "description": "Implement this function if you are interested in 3D view screen input events. It will be called only if currently selected node is handled by your plugin.\n\t\t\t\tIf you would like to always gets those input events then additionally use [method set_input_forwarding_always_enabled].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Camera",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_breakpoints",
          "qualifiers": "virtual",
          "description": "This is for editors that edit script based objects. You can return a list of breakpoints in the format (script:line), for example: res://path_to_script.gd:25",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_editor_interface",
          "description": "",
          "return_type": "EditorInterface",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_plugin_icon",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_plugin_name",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_state",
          "qualifiers": "virtual",
          "description": "Get the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_undo_redo",
          "description": "Get the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.",
          "return_type": "UndoRedo",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_window_layout",
          "qualifiers": "virtual",
          "description": "Get the GUI layout of the plugin. This is used to save the project's editor layout when the [method EditorPlugin.queue_save_layout] is called or the editor layout was changed(For example changing the position of a dock).",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "layout",
              "type": "ConfigFile",
              "default_value": ""
            }
          ]
        },
        {
          "name": "handles",
          "qualifiers": "virtual",
          "description": "Implement this function if your plugin edits a specific type of object (Resource or Node). If you return true, then you will get the functions [method EditorPlugin.edit] and [method EditorPlugin.make_visible] called when the editor requests them.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_main_screen",
          "qualifiers": "virtual",
          "description": "Return true if this is a main screen editor plugin (it goes in the main screen selector together with 2D, 3D, Script).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "hide_bottom_panel",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "make_bottom_panel_item_visible",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_visible",
          "qualifiers": "virtual",
          "description": "This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.\n\t\t\t\tRemember that you have to manage the visibility of all your editor controls manually.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_save_layout",
          "qualifiers": "const",
          "description": "Queue save the project's editor layout.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "remove_control_from_bottom_panel",
          "description": "Remove the control from the bottom panel. Don't forget to call this if you added one, so the editor can remove it cleanly.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_control_from_docks",
          "description": "Remove the control from the dock. Don't forget to call this if you added one, so the editor can save the layout and remove it cleanly.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_custom_type",
          "description": "Remove a custom type added by [method EditorPlugin.add_custom_type]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_export_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exporter",
              "type": "EditorExportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_import_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "importer",
              "type": "EditorImportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_scene_import_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene_importer",
              "type": "EditorSceneImporter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save_external_data",
          "qualifiers": "virtual",
          "description": "This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "set_force_draw_over_forwarding_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_input_event_forwarding_always_enabled",
          "description": "Use this method if you always want to receive inputs from 3D view screen inside [method forward_spatial_gui_input]. It might be especially usable if your plugin will want to use raycast in the scene.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_state",
          "qualifiers": "virtual",
          "description": "Restore the state saved by [method EditorPlugin.get_state].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_layout",
          "qualifiers": "virtual",
          "description": "Restore the plugin GUI layout saved by [method EditorPlugin.get_window_layout].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "layout",
              "type": "ConfigFile",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_overlays",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "main_screen_changed",
          "description": "Emitted when user change main screen view (2D, 3D, Script, AssetLib). Works also with screens which are defined by plugins.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "screen_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scene_changed",
          "description": "Emitted when user change scene. The argument is a root node of freshly opened scene.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene_root",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scene_closed",
          "description": "Emitted when user close scene. The argument is file path to a closed scene.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filepath",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "CONTAINER_TOOLBAR",
          "value": "0",
          "enum": "CustomControlContainer",
          "description": ""
        },
        {
          "name": "CONTAINER_SPATIAL_EDITOR_MENU",
          "value": "1",
          "enum": "CustomControlContainer",
          "description": ""
        },
        {
          "name": "CONTAINER_SPATIAL_EDITOR_SIDE",
          "value": "2",
          "enum": "CustomControlContainer",
          "description": ""
        },
        {
          "name": "CONTAINER_SPATIAL_EDITOR_BOTTOM",
          "value": "3",
          "enum": "CustomControlContainer",
          "description": ""
        },
        {
          "name": "CONTAINER_CANVAS_EDITOR_MENU",
          "value": "4",
          "enum": "CustomControlContainer",
          "description": ""
        },
        {
          "name": "CONTAINER_CANVAS_EDITOR_SIDE",
          "value": "5",
          "enum": "CustomControlContainer",
          "description": ""
        },
        {
          "name": "CONTAINER_CANVAS_EDITOR_BOTTOM",
          "value": "6",
          "enum": "CustomControlContainer",
          "description": ""
        },
        {
          "name": "CONTAINER_PROPERTY_EDITOR_BOTTOM",
          "value": "7",
          "enum": "CustomControlContainer",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_UL",
          "value": "0",
          "enum": "DockSlot",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_BL",
          "value": "1",
          "enum": "DockSlot",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_UR",
          "value": "2",
          "enum": "DockSlot",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_BR",
          "value": "3",
          "enum": "DockSlot",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_UL",
          "value": "4",
          "enum": "DockSlot",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_BL",
          "value": "5",
          "enum": "DockSlot",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_UR",
          "value": "6",
          "enum": "DockSlot",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_BR",
          "value": "7",
          "enum": "DockSlot",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_MAX",
          "value": "8",
          "enum": "DockSlot",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Quat": {
      "name": "Quat",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Quaternion.",
      "description": "A 4-dimensional vector representing a rotation.\n\t\tThe vector represents a 4 dimensional complex number where multiplication of the basis elements is not commutative (multiplying i with j gives a different result than multiplying j with i).\n\t\tMultiplying quaternions reproduces rotation sequences. However quaternions need to be often renormalized, or else they suffer from precision issues.\n\t\tIt can be used to perform SLERP (spherical-linear interpolation) between two rotations.",
      "methods": [
        {
          "name": "Quat",
          "description": "Returns a quaternion defined by these values.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "w",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Quat",
          "description": "Returns a quaternion that will rotate around the given axis by the specified angle. The axis must be a normalized vector.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "angle",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Quat",
          "description": "Returns the rotation matrix corresponding to the given quaternion.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Basis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubic_slerp",
          "description": "Performs a cubic spherical-linear interpolation with another quaternion.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pre_a",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "post_b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dot",
          "description": "Returns the dot product of two quaternions.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the quaternion.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_normalized",
          "description": "Returns whether the quaternion is normalized or not.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length",
          "description": "Returns the length of the quaternion.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length_squared",
          "description": "Returns the length of the quaternion, squared.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "normalized",
          "description": "Returns a copy of the quaternion, normalized to unit length.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "slerp",
          "description": "Performs a spherical-linear interpolation with another quaternion.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slerpni",
          "description": "Performs a spherical-linear interpolation with another quaterion without checking if the rotation path is not bigger than 90°.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform",
          "description": "Transforms the vector [code]v[/code] by this quaternion.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "w",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "W component of the quaternion. Default value: [code]1[/code]"
        },
        {
          "name": "x",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "X component of the quaternion. Default value: [code]0[/code]"
        },
        {
          "name": "y",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Y component of the quaternion. Default value: [code]0[/code]"
        },
        {
          "name": "z",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Z component of the quaternion. Default value: [code]0[/code]"
        }
      ],
      "theme_properties": []
    },
    "EditorFileDialog": {
      "name": "EditorFileDialog",
      "inherits": "ConfirmationDialog",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_filter",
          "description": "Adds a comma-delimited file extension filter option to the [code]EditorFileDialog[/code] with an optional semi-colon-delimited label.\n\t\t\t\tExample: \"*.tscn, *.scn; Scenes\", results in filter text \"Scenes (*.tscn, *.scn)\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_filters",
          "description": "Removes all filters except for \"All Files (*)\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_vbox",
          "description": "Returns the [code]VBoxContainer[/code] used to display the file system.",
          "return_type": "VBoxContainer",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "invalidate",
          "description": "Notify the [code]EditorFileDialog[/code] that its view of the data is no longer accurate. Updates the view contents on next view update.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "dir_selected",
          "description": "Emitted when a directory is selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "file_selected",
          "description": "Emitted when a file is selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "files_selected",
          "description": "Emitted when multiple files are selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paths",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MODE_OPEN_FILE",
          "value": "0",
          "enum": "Mode",
          "description": "The [code]EditorFileDialog[/code] can select only one file. Accepting the window will open the file."
        },
        {
          "name": "MODE_OPEN_FILES",
          "value": "1",
          "enum": "Mode",
          "description": "The [code]EditorFileDialog[/code] can select multiple files. Accepting the window will open all files."
        },
        {
          "name": "MODE_OPEN_DIR",
          "value": "2",
          "enum": "Mode",
          "description": "The [code]EditorFileDialog[/code] can select only one directory. Accepting the window will open the directory."
        },
        {
          "name": "MODE_OPEN_ANY",
          "value": "3",
          "enum": "Mode",
          "description": "The [code]EditorFileDialog[/code] can select a file or directory. Accepting the window will open it."
        },
        {
          "name": "MODE_SAVE_FILE",
          "value": "4",
          "enum": "Mode",
          "description": "The [code]EditorFileDialog[/code] can select only one file. Accepting the window will save the file."
        },
        {
          "name": "ACCESS_RESOURCES",
          "value": "0",
          "enum": "Access",
          "description": "The [code]EditorFileDialog[/code] can only view [code]res://[/code] directory contents."
        },
        {
          "name": "ACCESS_USERDATA",
          "value": "1",
          "enum": "Access",
          "description": "The [code]EditorFileDialog[/code] can only view [code]user://[/code] directory contents."
        },
        {
          "name": "ACCESS_FILESYSTEM",
          "value": "2",
          "enum": "Access",
          "description": "The [code]EditorFileDialog[/code] can view the entire local file system."
        },
        {
          "name": "DISPLAY_THUMBNAILS",
          "value": "0",
          "enum": "DisplayMode",
          "description": "The [code]EditorFileDialog[/code] displays resources as thumbnails."
        },
        {
          "name": "DISPLAY_LIST",
          "value": "1",
          "enum": "DisplayMode",
          "description": "The [code]EditorFileDialog[/code] displays resources as a list of filenames."
        }
      ],
      "properties": [
        {
          "name": "access",
          "type": "int",
          "setter": "set_access",
          "getter": "get_access",
          "enum": "EditorFileDialog.Access",
          "description": "The location from which the user may select a file, including [code]res://[/code], [code]user://[/code], and the local file system."
        },
        {
          "name": "current_dir",
          "type": "String",
          "setter": "set_current_dir",
          "getter": "get_current_dir",
          "description": "The currently occupied directory."
        },
        {
          "name": "current_file",
          "type": "String",
          "setter": "set_current_file",
          "getter": "get_current_file",
          "description": "The currently selected file."
        },
        {
          "name": "current_path",
          "type": "String",
          "setter": "set_current_path",
          "getter": "get_current_path",
          "description": "The file system path in the address bar."
        },
        {
          "name": "disable_overwrite_warning",
          "type": "bool",
          "setter": "set_disable_overwrite_warning",
          "getter": "is_overwrite_warning_disabled",
          "description": "If [code]true[/code] the [code]EditorFileDialog[/code] will not warn the user before overwriting files."
        },
        {
          "name": "display_mode",
          "type": "int",
          "setter": "set_display_mode",
          "getter": "get_display_mode",
          "enum": "EditorFileDialog.DisplayMode",
          "description": "The view format in which the [code]EditorFileDialog[/code] displays resources to the user."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "EditorFileDialog.Mode",
          "description": "The purpose of the [code]EditorFileDialog[/code]. Changes allowed behaviors."
        },
        {
          "name": "show_hidden_files",
          "type": "bool",
          "setter": "set_show_hidden_files",
          "getter": "is_showing_hidden_files",
          "description": "If [code]true[/code] hidden files and directories will be visible in the [code]EditorFileDialog[/code]."
        }
      ],
      "theme_properties": []
    },
    "YSort": {
      "name": "YSort",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Sort all child nodes based on their Y positions.",
      "description": "Sort all child nodes based on their Y positions. The child node must inherit from [CanvasItem] for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "sort_enabled",
          "type": "bool",
          "setter": "set_sort_enabled",
          "getter": "is_sort_enabled",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "LineEdit": {
      "name": "LineEdit",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Control that provides single line string editing.",
      "description": "LineEdit provides a single line string editor, used for text fields.",
      "methods": [
        {
          "name": "append_at_cursor",
          "description": "Adds [code]text[/code] after the cursor. If the resulting value is longer than [member max_length], nothing happens.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Erases the [LineEdit] text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "deselect",
          "description": "Clears the current selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_menu",
          "qualifiers": "const",
          "description": "Returns the [PopupMenu] of this [code]LineEdit[/code]. By default, this menu is displayed when right-clicking on the [LineEdit].",
          "return_type": "PopupMenu",
          "arguments": []
        },
        {
          "name": "menu_option",
          "description": "Executes a given action as defined in the MENU_* enum.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "option",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Selects characters inside [LineEdit] between [code]from[/code] and [code]to[/code]. By default [code]from[/code] is at the beginning and [code]to[/code] at the end.\n\t\t\t\t[codeblock]\n\t\t\t\ttext = \"Welcome\"\n\t\t\t\tselect()     # Welcome\n\t\t\t\tselect(4)    # ome\n\t\t\t\tselect(2, 5) # lco\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "1",
              "name": "to",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "select_all",
          "description": "Selects the whole [String].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "text_changed",
          "description": "Emitted when the text changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "new_text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "text_entered",
          "description": "Emitted when the user presses KEY_ENTER on the [code]LineEdit[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "new_text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "enum": "Align",
          "description": "Aligns the text on the left hand side of the [LineEdit]."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "enum": "Align",
          "description": "Centers the text in the middle of the [LineEdit]."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "enum": "Align",
          "description": "Aligns the text on the right hand side of the [LineEdit]."
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "enum": "Align",
          "description": "Stretches whitespaces to fit the [LineEdit]'s width."
        },
        {
          "name": "MENU_CUT",
          "value": "0",
          "enum": "MenuItems",
          "description": "Cuts (Copies and clears) the selected text."
        },
        {
          "name": "MENU_COPY",
          "value": "1",
          "enum": "MenuItems",
          "description": "Copies the selected text."
        },
        {
          "name": "MENU_PASTE",
          "value": "2",
          "enum": "MenuItems",
          "description": "Pastes the clipboard text over the selected text (or at the cursor's position)."
        },
        {
          "name": "MENU_CLEAR",
          "value": "3",
          "enum": "MenuItems",
          "description": "Erases the whole [Linedit] text."
        },
        {
          "name": "MENU_SELECT_ALL",
          "value": "4",
          "enum": "MenuItems",
          "description": "Selects the whole [Linedit] text."
        },
        {
          "name": "MENU_UNDO",
          "value": "5",
          "enum": "MenuItems",
          "description": "Undoes the previous action."
        },
        {
          "name": "MENU_REDO",
          "value": "6",
          "enum": "MenuItems",
          "description": ""
        },
        {
          "name": "MENU_MAX",
          "value": "7",
          "enum": "MenuItems",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "align",
          "type": "int",
          "setter": "set_align",
          "getter": "get_align",
          "enum": "LineEdit.Align",
          "description": "Text alignment as defined in the ALIGN_* enum."
        },
        {
          "name": "caret_blink",
          "type": "bool",
          "setter": "cursor_set_blink_enabled",
          "getter": "cursor_get_blink_enabled",
          "description": "If [code]true[/code] the caret (visual cursor) blinks."
        },
        {
          "name": "caret_blink_speed",
          "type": "float",
          "setter": "cursor_set_blink_speed",
          "getter": "cursor_get_blink_speed",
          "description": "Duration (in seconds) of a caret's blinking cycle."
        },
        {
          "name": "caret_position",
          "type": "int",
          "setter": "set_cursor_position",
          "getter": "get_cursor_position",
          "description": "The cursor's position inside the [code]LineEdit[/code]. When set, the text may scroll to accommodate it."
        },
        {
          "name": "context_menu_enabled",
          "type": "bool",
          "setter": "set_context_menu_enabled",
          "getter": "is_context_menu_enabled",
          "description": "If [code]true[/code] the context menu will appear when right clicked."
        },
        {
          "name": "editable",
          "type": "bool",
          "setter": "set_editable",
          "getter": "is_editable",
          "description": "If [code]false[/code] existing text cannot be modified and new text cannot be added."
        },
        {
          "name": "expand_to_text_length",
          "type": "bool",
          "setter": "set_expand_to_text_length",
          "getter": "get_expand_to_text_length",
          "description": "If [code]true[/code] the [LineEdit] width will increase to stay longer than the [member text]. It will [b]not[/b] compress if the [member text] is shortened."
        },
        {
          "name": "focus_mode",
          "type": "int",
          "setter": "set_focus_mode",
          "getter": "get_focus_mode",
          "enum": "Control.FocusMode",
          "description": "Defines how the [LineEdit] can grab focus (Keyboard and mouse, only keyboard, or none). See [code]enum FocusMode[/code] in [Control] for details."
        },
        {
          "name": "max_length",
          "type": "int",
          "setter": "set_max_length",
          "getter": "get_max_length",
          "description": "Maximum amount of characters that can be entered inside the [LineEdit]. If [code]0[/code], there is no limit."
        },
        {
          "name": "placeholder_alpha",
          "type": "float",
          "setter": "set_placeholder_alpha",
          "getter": "get_placeholder_alpha",
          "description": "Opacity of the [member placeholder_text]. From [code]0[/code] to [code]1[/code]."
        },
        {
          "name": "placeholder_text",
          "type": "String",
          "setter": "set_placeholder",
          "getter": "get_placeholder",
          "description": "Text shown when the [LineEdit] is empty. It is [b]not[/b] the [LineEdit]'s default value (see [member text])."
        },
        {
          "name": "secret",
          "type": "bool",
          "setter": "set_secret",
          "getter": "is_secret",
          "description": "If [code]true[/code] every character is shown as \"*\"."
        },
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": "String value of the [LineEdit]."
        }
      ],
      "theme_properties": [
        {
          "name": "cursor_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "minimum_spaces",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "read_only",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        }
      ]
    },
    "AABB": {
      "name": "AABB",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Axis-Aligned Bounding Box.",
      "description": "AABB consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.",
      "methods": [
        {
          "name": "AABB",
          "description": "Optional constructor, accepts position and size.",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "encloses",
          "description": "Returns [code]true[/code] if this [code]AABB[/code] completely encloses another one.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "expand",
          "description": "Returns this [code]AABB[/code] expanded to include a given point.",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_area",
          "description": "Gets the area of the [code]AABB[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_endpoint",
          "description": "Gets the position of the 8 endpoints of the [code]AABB[/code] in space.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_longest_axis",
          "description": "Returns the normalized longest axis of the [code]AABB[/code].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_longest_axis_index",
          "description": "Returns the index of the longest axis of the [code]AABB[/code] (according to [Vector3]::AXIS* enum).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_longest_axis_size",
          "description": "Returns the scalar length of the longest axis of the [code]AABB[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_shortest_axis",
          "description": "Returns the normalized shortest axis of the [code]AABB[/code].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_shortest_axis_index",
          "description": "Returns the index of the shortest axis of the [code]AABB[/code] (according to [Vector3]::AXIS* enum).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_shortest_axis_size",
          "description": "Returns the scalar length of the shortest axis of the [code]AABB[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_support",
          "description": "Returns the support point in a given direction. This is useful for collision detection algorithms.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "grow",
          "description": "Returns a copy of the [code]AABB[/code] grown a given amount of units towards all the sides.",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_no_area",
          "description": "Returns [code]true[/code] if the [code]AABB[/code] is flat or empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_no_surface",
          "description": "Returns [code]true[/code] if the [code]AABB[/code] is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "description": "Returns [code]true[/code] if the [code]AABB[/code] contains a point.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersection",
          "description": "Returns the intersection between two [code]AABB[/code]. An empty AABB (size 0,0,0) is returned on failure.",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects",
          "description": "Returns [code]true[/code] if the [code]AABB[/code] overlaps with another.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_plane",
          "description": "Returns [code]true[/code] if the [code]AABB[/code] is on both sides of a plane.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plane",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_segment",
          "description": "Returns [code]true[/code] if the [code]AABB[/code] intersects the line segment between [code]from[/code] and [code]to[/code].",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "merge",
          "description": "Returns a larger AABB that contains this AABB and [code]with[/code].",
          "return_type": "AABB",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "AABB",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "end",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "Ending corner."
        },
        {
          "name": "position",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "Beginning corner."
        },
        {
          "name": "size",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "Size from position to end."
        }
      ],
      "theme_properties": []
    },
    "Button": {
      "name": "Button",
      "inherits": "BaseButton",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Standard themed Button.",
      "description": "Button is the standard themed button. It can contain text and an icon, and will display them according to the current [Theme].",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "enum": "TextAlign",
          "description": "Align the text to the left."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "enum": "TextAlign",
          "description": "Align the text to the center."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "enum": "TextAlign",
          "description": "Align the text to the right."
        }
      ],
      "properties": [
        {
          "name": "align",
          "type": "int",
          "setter": "set_text_align",
          "getter": "get_text_align",
          "enum": "Button.TextAlign",
          "description": "Text alignment policy for the button's text, use one of the ALIGN_* constants."
        },
        {
          "name": "clip_text",
          "type": "bool",
          "setter": "set_clip_text",
          "getter": "get_clip_text",
          "description": "When this property is enabled, text that is too large to fit the button is clipped, when disabled the Button will always be wide enough to hold the text. This property is disabled by default."
        },
        {
          "name": "flat",
          "type": "bool",
          "setter": "set_flat",
          "getter": "is_flat",
          "description": "Flat buttons don't display decoration."
        },
        {
          "name": "icon",
          "type": "Texture",
          "setter": "set_button_icon",
          "getter": "get_button_icon",
          "description": "Button's icon, if text is present the icon will be placed before the text."
        },
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": "The button's text that will be displayed inside the button's area."
        }
      ],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "CylinderMesh": {
      "name": "CylinderMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class representing a cylindrical [PrimitiveMesh].",
      "description": "Class representing a cylindrical [PrimitiveMesh].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bottom_radius",
          "type": "float",
          "setter": "set_bottom_radius",
          "getter": "get_bottom_radius",
          "description": "Bottom radius of the cylinder. Defaults to 1.0."
        },
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "Full height of the cylinder. Defaults to 2.0."
        },
        {
          "name": "radial_segments",
          "type": "int",
          "setter": "set_radial_segments",
          "getter": "get_radial_segments",
          "description": "Number of radial segments on the cylinder. Defaults to 64."
        },
        {
          "name": "rings",
          "type": "int",
          "setter": "set_rings",
          "getter": "get_rings",
          "description": "Number of edge rings along the height of the cylinder. Defaults to 4."
        },
        {
          "name": "top_radius",
          "type": "float",
          "setter": "set_top_radius",
          "getter": "get_top_radius",
          "description": "Top radius of the cylinder. Defaults to 1.0."
        }
      ],
      "theme_properties": []
    },
    "Timer": {
      "name": "Timer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A countdown timer.",
      "description": "Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or \"one shot\" mode.",
      "methods": [
        {
          "name": "is_stopped",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the timer is stopped.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "start",
          "description": "Starts the timer. This also resets the remaining time to [code]wait_time[/code].\n\t\t\t\tNote: this method will not resume a paused timer. See [method set_paused].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "stop",
          "description": "Stop (cancel) the Timer.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "timeout",
          "description": "Emitted when the Timer reaches 0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "TIMER_PROCESS_PHYSICS",
          "value": "0",
          "enum": "TimerProcessMode",
          "description": "Update the Timer during the physics step at each frame (fixed framerate processing)."
        },
        {
          "name": "TIMER_PROCESS_IDLE",
          "value": "1",
          "enum": "TimerProcessMode",
          "description": "Update the Timer during the idle time at each frame."
        }
      ],
      "properties": [
        {
          "name": "autostart",
          "type": "bool",
          "setter": "set_autostart",
          "getter": "has_autostart",
          "description": "If [code]true[/code], Timer will automatically start when entering the scene tree. Default value: [code]false[/code]."
        },
        {
          "name": "one_shot",
          "type": "bool",
          "setter": "set_one_shot",
          "getter": "is_one_shot",
          "description": "If [code]true[/code], Timer will stop when reaching 0. If [code]false[/code], it will restart. Default value: [code]false[/code]."
        },
        {
          "name": "paused",
          "type": "bool",
          "setter": "set_paused",
          "getter": "is_paused",
          "description": "If [code]true[/code], the timer is paused and will not process until it is unpaused again, even if [method start] is called."
        },
        {
          "name": "process_mode",
          "type": "int",
          "setter": "set_timer_process_mode",
          "getter": "get_timer_process_mode",
          "enum": "Timer.TimerProcessMode",
          "description": "Processing mode. Uses TIMER_PROCESS_* constants as value."
        },
        {
          "name": "time_left",
          "type": "float",
          "setter": "",
          "getter": "get_time_left",
          "description": "The timer's remaining time in seconds. Returns 0 if the timer is inactive."
        },
        {
          "name": "wait_time",
          "type": "float",
          "setter": "set_wait_time",
          "getter": "get_wait_time",
          "description": "Wait time in seconds."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptFunction": {
      "name": "VisualScriptFunction",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PacketPeerUDP": {
      "name": "PacketPeerUDP",
      "inherits": "PacketPeer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "UDP packet peer.",
      "description": "UDP packet peer. Can be used to send raw UDP packets as well as [Variant]s.",
      "methods": [
        {
          "name": "close",
          "description": "Close the UDP socket the [code]PacketPeerUDP[/code] is currently listening on.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_packet_ip",
          "qualifiers": "const",
          "description": "Return the IP of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_packet_port",
          "qualifiers": "const",
          "description": "Return the port of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_listening",
          "qualifiers": "const",
          "description": "Return whether this [code]PacketPeerUDP[/code] is listening.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "listen",
          "description": "Make this [code]PacketPeerUDP[/code] listen on the \"port\" binding to \"bind_address\" with a buffer size \"recv_buf_size\".\n\t\t\t\tIf \"bind_address\" is set as \"*\" (default), the peer will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf \"bind_address\" is set as \"0.0.0.0\" (for IPv4) or \"::\" (for IPv6), the peer will listen on all available addresses matching that IP type.\n\t\t\t\tIf \"bind_address\" is set to any valid address (e.g. \"192.168.1.101\", \"::1\", etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bind_address",
              "type": "String",
              "default_value": "\"*\""
            },
            {
              "index": "2",
              "name": "recv_buf_size",
              "type": "int",
              "default_value": "65536"
            }
          ]
        },
        {
          "name": "set_dest_address",
          "description": "Set the destination address and port for sending packets and variables, a hostname will be resolved using if valid.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "wait",
          "description": "Wait for a packet to arrive on the listening port, see [method listen].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ShaderMaterial": {
      "name": "ShaderMaterial",
      "inherits": "Material",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_shader_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shader_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "shader",
          "type": "Shader",
          "setter": "set_shader",
          "getter": "get_shader",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Transform": {
      "name": "Transform",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "3D Transformation. 3x4 matrix.",
      "description": "Represents one or many transformations in 3D space such as translation, rotation, or scaling. It consists of a [Basis] \"basis\" and an [Vector3] \"origin\". It is similar to a 3x4 matrix.",
      "methods": [
        {
          "name": "Transform",
          "description": "Constructs the Transform from four [Vector3]. Each axis corresponds to local basis vectors (some of which may be scaled).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "origin",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Constructs the Transform from a [Basis] and [Vector3].",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "basis",
              "type": "Basis",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "origin",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Constructs the Transform from a [Transform2D].",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Constructs the Transform from a [Quat]. The origin will be Vector3(0, 0, 0).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Constructs the Transform from a [Basis]. The origin will be Vector3(0, 0, 0).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Basis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "affine_inverse",
          "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation, scaling and translation.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "interpolate_with",
          "description": "Interpolates the transform to other Transform by weight amount (0-1).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "looking_at",
          "description": "Rotate the transform around the up vector to face the target.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "orthonormalized",
          "description": "Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotated",
          "description": "Rotates the transform around given axis by phi. The axis must be a normalized vector.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scaled",
          "description": "Scales the transform by the specified 3D scaling factors.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translated",
          "description": "Translates the transform by the specified offset.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform",
          "description": "Transforms the given [Vector3], [Plane], or [AABB] by this transform.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_inv",
          "description": "Inverse-transforms the given [Vector3], [Plane], or [AABB] by this transform.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "basis",
          "type": "Basis",
          "setter": "",
          "getter": "",
          "description": "The basis is a matrix containing 3 [Vector3] as its columns: X axis, Y axis, and Z axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object."
        },
        {
          "name": "origin",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "The translation offset of the transform."
        }
      ],
      "theme_properties": []
    },
    "InputEventKey": {
      "name": "InputEventKey",
      "inherits": "InputEventWithModifiers",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Input event type for keyboard events.",
      "description": "Stores key presses on the keyboard. Supports key presses, key releases and [member echo] events.",
      "methods": [
        {
          "name": "get_scancode_with_modifiers",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "echo",
          "type": "bool",
          "setter": "set_echo",
          "getter": "is_echo",
          "description": "If [code]true[/code] the key was already pressed before this event. It means the user is holding the key down."
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "If [code]true[/code] the key's state is pressed. If [code]false[/code] the key's state is released."
        },
        {
          "name": "scancode",
          "type": "int",
          "setter": "set_scancode",
          "getter": "get_scancode",
          "description": "Key scancode, one of the [code]KEY_*[/code] constants in [@global Scope]."
        },
        {
          "name": "unicode",
          "type": "int",
          "setter": "set_unicode",
          "getter": "get_unicode",
          "description": "Key unicode identifier when relevant."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptIterator": {
      "name": "VisualScriptIterator",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Steps through items in a given input.",
      "description": "This node steps through each item in a given input. Input can be any sequence data type, such as an [Array] or [String]. When each item has been processed, execution passed out the [code]exit[/code] Sequence port.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence: [code]for (elem) in (input)[/code]\n\t\t- Data (variant): [code]input[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence: [code]each[/code]\n\t\t- Sequence: [code]exit[/code]\n\t\t- Data (variant): [code]elem[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MultiMesh": {
      "name": "MultiMesh",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Provides high performance mesh instancing.",
      "description": "MultiMesh provides low level mesh instancing. If the amount of [Mesh] instances needed goes from hundreds to thousands (and most need to be visible at close proximity) creating such a large amount of [MeshInstance] nodes may affect performance by using too much CPU or video memory.\n\t\tFor this case a MultiMesh becomes very useful, as it can draw thousands of instances with little API overhead.\n\t\tAs a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object).\n\t\tSince instances may have any behavior, the AABB used for visibility must be provided by the user.",
      "methods": [
        {
          "name": "get_aabb",
          "qualifiers": "const",
          "description": "Return the visibility AABB.",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "get_instance_color",
          "qualifiers": "const",
          "description": "Get the color of a specific instance.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_instance_transform",
          "qualifiers": "const",
          "description": "Return the transform of a specific instance.",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_color",
          "description": "Set the color of a specific instance.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_transform",
          "description": "Set the transform for a specific instance.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TRANSFORM_2D",
          "value": "0",
          "enum": "TransformFormat",
          "description": ""
        },
        {
          "name": "TRANSFORM_3D",
          "value": "1",
          "enum": "TransformFormat",
          "description": ""
        },
        {
          "name": "COLOR_NONE",
          "value": "0",
          "enum": "ColorFormat",
          "description": ""
        },
        {
          "name": "COLOR_8BIT",
          "value": "1",
          "enum": "ColorFormat",
          "description": ""
        },
        {
          "name": "COLOR_FLOAT",
          "value": "2",
          "enum": "ColorFormat",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "color_format",
          "type": "int",
          "setter": "set_color_format",
          "getter": "get_color_format",
          "enum": "MultiMesh.ColorFormat",
          "description": ""
        },
        {
          "name": "instance_count",
          "type": "int",
          "setter": "set_instance_count",
          "getter": "get_instance_count",
          "description": ""
        },
        {
          "name": "mesh",
          "type": "Mesh",
          "setter": "set_mesh",
          "getter": "get_mesh",
          "description": ""
        },
        {
          "name": "transform_format",
          "type": "int",
          "setter": "set_transform_format",
          "getter": "get_transform_format",
          "enum": "MultiMesh.TransformFormat",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectCompressor": {
      "name": "AudioEffectCompressor",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a Compressor audio effect to an Audio bus.\n\t\tReduces sounds that exceed a certain threshold level, smooths out the dynamics and increases the overall volume.",
      "description": "Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).\n\t\tCompressor has many uses in the mix:\n\t\t- In the Master bus to compress the whole output (Although a [AudioEffectLimiter] is probably better)\n\t\t- In voice channels to ensure they sound as balanced as possible.\n\t\t- Sidechained. Sidechained, which can reduce the sound level sidechained with another audio bus for threshold detection.. This technique is very common in video game mixing to download the level of Music/SFX while voices are being heard.\n\t\t- Accentuates transients by using a wider attack, making effects sound more punchy.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "attack_us",
          "type": "float",
          "setter": "set_attack_us",
          "getter": "get_attack_us",
          "description": "Compressor's reaction time when the signal exceeds the threshold. Value can range from 20 to 2000. Default value: [code]20ms[/code]."
        },
        {
          "name": "gain",
          "type": "float",
          "setter": "set_gain",
          "getter": "get_gain",
          "description": "Gain applied to the output signal."
        },
        {
          "name": "mix",
          "type": "float",
          "setter": "set_mix",
          "getter": "get_mix",
          "description": "Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet). Default value: [code]1[/code]."
        },
        {
          "name": "ratio",
          "type": "float",
          "setter": "set_ratio",
          "getter": "get_ratio",
          "description": "Amount of compression applied to the audio once it passes the threshold level. The higher the ratio the more the loud parts of the audio will be compressed. Value can range from 1 to 48. Default value: [code]4[/code]."
        },
        {
          "name": "release_ms",
          "type": "float",
          "setter": "set_release_ms",
          "getter": "get_release_ms",
          "description": "Compressor's delay time to stop reducing the signal after the signal level falls below the threshold. Value can range from 20 to 2000. Default value: [code]250ms[/code]."
        },
        {
          "name": "sidechain",
          "type": "String",
          "setter": "set_sidechain",
          "getter": "get_sidechain",
          "description": "Reduce the sound level using another audio bus for threshold detection."
        },
        {
          "name": "threshold",
          "type": "float",
          "setter": "set_threshold",
          "getter": "get_threshold",
          "description": "The level above which compression is applied to the audio. Value can range from -60 to 0. Default value: [code]0[/code]."
        }
      ],
      "theme_properties": []
    },
    "CircleShape2D": {
      "name": "CircleShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Circular shape for 2D collisions.",
      "description": "Circular shape for 2D collisions. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "The circle's radius."
        }
      ],
      "theme_properties": []
    },
    "Particles": {
      "name": "Particles",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "3D particle emitter.",
      "description": "3D particle node used to create a variety of particle systems and effects. [code]Particles[/code] features an emitter that generates some number of particles at a given rate.\n\t\tUse the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.",
      "methods": [
        {
          "name": "capture_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "restart",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "DRAW_ORDER_INDEX",
          "value": "0",
          "enum": "DrawOrder",
          "description": "Particles are drawn in the order emitted."
        },
        {
          "name": "DRAW_ORDER_LIFETIME",
          "value": "1",
          "enum": "DrawOrder",
          "description": "Particles are drawn in order of remaining lifetime."
        },
        {
          "name": "DRAW_ORDER_VIEW_DEPTH",
          "value": "2",
          "enum": "DrawOrder",
          "description": "Particles are drawn in order of depth."
        },
        {
          "name": "MAX_DRAW_PASSES",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "amount",
          "type": "int",
          "setter": "set_amount",
          "getter": "get_amount",
          "description": "Number of particles to emit."
        },
        {
          "name": "draw_order",
          "type": "int",
          "setter": "set_draw_order",
          "getter": "get_draw_order",
          "enum": "Particles.DrawOrder",
          "description": "Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code]."
        },
        {
          "name": "draw_pass_1",
          "type": "Mesh",
          "setter": "set_draw_pass_mesh",
          "getter": "get_draw_pass_mesh",
          "description": ""
        },
        {
          "name": "draw_pass_2",
          "type": "Mesh",
          "setter": "set_draw_pass_mesh",
          "getter": "get_draw_pass_mesh",
          "description": ""
        },
        {
          "name": "draw_pass_3",
          "type": "Mesh",
          "setter": "set_draw_pass_mesh",
          "getter": "get_draw_pass_mesh",
          "description": ""
        },
        {
          "name": "draw_pass_4",
          "type": "Mesh",
          "setter": "set_draw_pass_mesh",
          "getter": "get_draw_pass_mesh",
          "description": ""
        },
        {
          "name": "draw_passes",
          "type": "int",
          "setter": "set_draw_passes",
          "getter": "get_draw_passes",
          "description": ""
        },
        {
          "name": "emitting",
          "type": "bool",
          "setter": "set_emitting",
          "getter": "is_emitting",
          "description": "If [code]true[/code] particles are being emitted. Default value: [code]true[/code]."
        },
        {
          "name": "explosiveness",
          "type": "float",
          "setter": "set_explosiveness_ratio",
          "getter": "get_explosiveness_ratio",
          "description": "Time ratio between each emission. If [code]0[/code] particles are emitted continuously. If [code]1[/code] all particles are emitted simultaneously. Default value: [code]0[/code]."
        },
        {
          "name": "fixed_fps",
          "type": "int",
          "setter": "set_fixed_fps",
          "getter": "get_fixed_fps",
          "description": ""
        },
        {
          "name": "fract_delta",
          "type": "bool",
          "setter": "set_fractional_delta",
          "getter": "get_fractional_delta",
          "description": ""
        },
        {
          "name": "lifetime",
          "type": "float",
          "setter": "set_lifetime",
          "getter": "get_lifetime",
          "description": "Amount of time each particle will exist. Default value: [code]1[/code]."
        },
        {
          "name": "local_coords",
          "type": "bool",
          "setter": "set_use_local_coordinates",
          "getter": "get_use_local_coordinates",
          "description": "If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code]."
        },
        {
          "name": "one_shot",
          "type": "bool",
          "setter": "set_one_shot",
          "getter": "get_one_shot",
          "description": "If [code]true[/code] only [code]amount[/code] particles will be emitted. Default value: [code]false[/code]."
        },
        {
          "name": "preprocess",
          "type": "float",
          "setter": "set_pre_process_time",
          "getter": "get_pre_process_time",
          "description": ""
        },
        {
          "name": "process_material",
          "type": "Material",
          "setter": "set_process_material",
          "getter": "get_process_material",
          "description": "[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial]."
        },
        {
          "name": "randomness",
          "type": "float",
          "setter": "set_randomness_ratio",
          "getter": "get_randomness_ratio",
          "description": "Emission randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "speed_scale",
          "type": "float",
          "setter": "set_speed_scale",
          "getter": "get_speed_scale",
          "description": "Speed scaling ratio. Default value: [code]1[/code]."
        },
        {
          "name": "visibility_aabb",
          "type": "AABB",
          "setter": "set_visibility_aabb",
          "getter": "get_visibility_aabb",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Navigation2D": {
      "name": "Navigation2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_closest_point",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_owner",
          "description": "",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_simple_path",
          "description": "",
          "return_type": "PoolVector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "optimize",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "navpoly_add",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "NavigationPolygon",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "owner",
              "type": "Object",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "navpoly_remove",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "navpoly_set_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "int": {
      "name": "int",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Integer built-in type.",
      "description": "Integer built-in type.",
      "methods": [
        {
          "name": "int",
          "description": "Cast a [bool] value to an integer value, [code]int(true)[/code] will be equals to 1 and [code]int(false)[/code] will be equals to 0.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "int",
          "description": "Cast a float value to an integer value, this method simply removes the number fractions, so for example [code]int(2.7)[/code] will be equals to 2, [code]int(.1)[/code] will be equals to 0 and [code]int(-2.7)[/code] will be equals to -2.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "int",
          "description": "Cast a [String] value to an integer value, this method is an integer parser from a string, so calling this method with an invalid integer string will return 0, a valid string will be something like [code]'1.7'[/code]. This method will ignore all non-number characters, so calling [code]int('1e3')[/code] will return 13.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptGlobalConstant": {
      "name": "VisualScriptGlobalConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "constant",
          "type": "int",
          "setter": "set_global_constant",
          "getter": "get_global_constant",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ConeTwistJoint": {
      "name": "ConeTwistJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A twist joint between two 3D bodies",
      "description": "The joint can rotate the bodies across an axis defined by the local x-axes of the [Joint].\n\t\tThe twist axis is initiated as the x-axis of the [Joint].\n\t\tOnce the Bodies swing, the twist axis is calculated as the middle of the x-axes of the Joint in the local space of the two Bodies.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_SWING_SPAN",
          "value": "0",
          "enum": "Param",
          "description": "Swing is rotation from side to side, around the axis perpendicular to the twist axis.\n\t\t\tThe swing span defines, how much rotation will not get corrected allong the swing axis.\n\t\t\tCould be defined as looseness in the [code]ConeTwistJoint[/code].\n\t\t\tIf below 0.05, this behaviour is locked. Default value: [code]PI/4[/code]."
        },
        {
          "name": "PARAM_TWIST_SPAN",
          "value": "1",
          "enum": "Param",
          "description": "Twist is the rotation around the twist axis, this value defined how far the joint can twist.\n\t\t\tTwist is locked if below 0.05."
        },
        {
          "name": "PARAM_BIAS",
          "value": "2",
          "enum": "Param",
          "description": "The speed with which the swing or twist will take place.\n\t\t\tThe higher, the faster."
        },
        {
          "name": "PARAM_SOFTNESS",
          "value": "3",
          "enum": "Param",
          "description": "The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint."
        },
        {
          "name": "PARAM_RELAXATION",
          "value": "4",
          "enum": "Param",
          "description": "Defines, how fast the swing- and twist-speed-difference on both sides gets synced."
        },
        {
          "name": "PARAM_MAX",
          "value": "5",
          "enum": "Param",
          "description": "End flag of PARAM_* constants, used internally."
        }
      ],
      "properties": [
        {
          "name": "bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The speed with which the swing or twist will take place.\n\t\t\tThe higher, the faster."
        },
        {
          "name": "relaxation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Defines, how fast the swing- and twist-speed-difference on both sides gets synced."
        },
        {
          "name": "softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint."
        },
        {
          "name": "swing_span",
          "type": "float",
          "setter": "_set_swing_span",
          "getter": "_get_swing_span",
          "description": "Swing is rotation from side to side, around the axis perpendicular to the twist axis.\n\t\t\tThe swing span defines, how much rotation will not get corrected allong the swing axis.\n\t\t\tCould be defined as looseness in the [code]ConeTwistJoint[/code].\n\t\t\tIf below 0.05, this behaviour is locked. Default value: [code]PI/4[/code]."
        },
        {
          "name": "twist_span",
          "type": "float",
          "setter": "_set_twist_span",
          "getter": "_get_twist_span",
          "description": "Twist is the rotation around the twist axis, this value defined how far the joint can twist.\n\t\t\tTwist is locked if below 0.05."
        }
      ],
      "theme_properties": []
    },
    "Camera2D": {
      "name": "Camera2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Camera node for 2D scenes.",
      "description": "Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem] based nodes.\n\t\tThis node is intended to be a simple helper to get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [Node2D] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [Viewport].",
      "methods": [
        {
          "name": "align",
          "description": "Align the camera to the tracked node",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_current",
          "description": "Removes any [code]Camera2D[/code] from the ancestor [Viewport]'s internal currently-assigned camera.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_update_scroll",
          "description": "Force the camera to update scroll immediately.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_camera_position",
          "qualifiers": "const",
          "description": "Return the camera position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_camera_screen_center",
          "qualifiers": "const",
          "description": "Returns the location of the [code]Camera2D[/code]'s screen-center, relative to the origin.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "make_current",
          "description": "Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reset_smoothing",
          "description": "Set the camera's position immediately to its current smoothing destination.\n\t\t\t\tThis has no effect if smoothing is disabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ANCHOR_MODE_FIXED_TOP_LEFT",
          "value": "0",
          "enum": "AnchorMode",
          "description": "The camera's position is fixed so that the top-left corner is always at the origin."
        },
        {
          "name": "ANCHOR_MODE_DRAG_CENTER",
          "value": "1",
          "enum": "AnchorMode",
          "description": "The camera's position takes into account vertical/horizontal offsets and the screen size."
        }
      ],
      "properties": [
        {
          "name": "anchor_mode",
          "type": "int",
          "setter": "set_anchor_mode",
          "getter": "get_anchor_mode",
          "enum": "Camera2D.AnchorMode",
          "description": "The Camera2D's anchor point. See [code]ANCHOR_MODE_*[/code] constants."
        },
        {
          "name": "current",
          "type": "bool",
          "setter": "_set_current",
          "getter": "is_current",
          "description": "If [code]true[/code] the camera is the active camera for the current scene. Only one camera can be current, so setting a different camera [code]current[/code] will disable this one."
        },
        {
          "name": "custom_viewport",
          "type": "Node",
          "setter": "set_custom_viewport",
          "getter": "get_custom_viewport",
          "description": "The custom [Viewport] node attached to the [code]Camera2D[/code]. If null or not a [Viewport], uses the default viewport instead."
        },
        {
          "name": "drag_margin_bottom",
          "type": "float",
          "setter": "set_drag_margin",
          "getter": "get_drag_margin",
          "description": "Bottom margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen."
        },
        {
          "name": "drag_margin_h_enabled",
          "type": "bool",
          "setter": "set_h_drag_enabled",
          "getter": "is_h_drag_enabled",
          "description": "If [code]true[/code] the camera only moves when reaching the horizontal drag margins. If [code]false[/code] the camera moves horizontally regardless of margins. Default value: [code]true[/code]."
        },
        {
          "name": "drag_margin_left",
          "type": "float",
          "setter": "set_drag_margin",
          "getter": "get_drag_margin",
          "description": "Left margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen."
        },
        {
          "name": "drag_margin_right",
          "type": "float",
          "setter": "set_drag_margin",
          "getter": "get_drag_margin",
          "description": "Right margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen."
        },
        {
          "name": "drag_margin_top",
          "type": "float",
          "setter": "set_drag_margin",
          "getter": "get_drag_margin",
          "description": "Top margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen."
        },
        {
          "name": "drag_margin_v_enabled",
          "type": "bool",
          "setter": "set_v_drag_enabled",
          "getter": "is_v_drag_enabled",
          "description": "If [code]true[/code] the camera only moves when reaching the vertical drag margins. If [code]false[/code] the camera moves vertically regardless of margins. Default value: [code]true[/code]."
        },
        {
          "name": "editor_draw_drag_margin",
          "type": "bool",
          "setter": "set_margin_drawing_enabled",
          "getter": "is_margin_drawing_enabled",
          "description": "If [code]true[/code] draws the camera's drag margin rectangle in the editor. Default value: [code]false[/code]"
        },
        {
          "name": "editor_draw_limits",
          "type": "bool",
          "setter": "set_limit_drawing_enabled",
          "getter": "is_limit_drawing_enabled",
          "description": "If [code]true[/code] draws the camera's limits rectangle in the editor. Default value: [code]true[/code]"
        },
        {
          "name": "editor_draw_screen",
          "type": "bool",
          "setter": "set_screen_drawing_enabled",
          "getter": "is_screen_drawing_enabled",
          "description": "If [code]true[/code] draws the camera's screen rectangle in the editor. Default value: [code]false[/code]"
        },
        {
          "name": "limit_bottom",
          "type": "int",
          "setter": "set_limit",
          "getter": "get_limit",
          "description": "Bottom scroll limit in pixels. The camera stops moving when reaching this value."
        },
        {
          "name": "limit_left",
          "type": "int",
          "setter": "set_limit",
          "getter": "get_limit",
          "description": "Left scroll limit in pixels. The camera stops moving when reaching this value."
        },
        {
          "name": "limit_right",
          "type": "int",
          "setter": "set_limit",
          "getter": "get_limit",
          "description": "Right scroll limit in pixels. The camera stops moving when reaching this value."
        },
        {
          "name": "limit_smoothed",
          "type": "bool",
          "setter": "set_limit_smoothing_enabled",
          "getter": "is_limit_smoothing_enabled",
          "description": "If [code]true[/code] the camera smoothly stops when reaches its limits. Default value: [code]false[/code]"
        },
        {
          "name": "limit_top",
          "type": "int",
          "setter": "set_limit",
          "getter": "get_limit",
          "description": "Top scroll limit in pixels. The camera stops moving when reaching this value."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The camera's offset, useful for looking around or camera shake animations."
        },
        {
          "name": "offset_h",
          "type": "float",
          "setter": "set_h_offset",
          "getter": "get_h_offset",
          "description": "The horizontal offset of the camera, relative to the drag margins. Default value: [code]0[/code]"
        },
        {
          "name": "offset_v",
          "type": "float",
          "setter": "set_v_offset",
          "getter": "get_v_offset",
          "description": "The vertical offset of the camera, relative to the drag margins. Default value: [code]0[/code]"
        },
        {
          "name": "rotating",
          "type": "bool",
          "setter": "set_rotating",
          "getter": "is_rotating",
          "description": "If [code]true[/code] the camera rotates with the target. Default value: [code]false[/code]"
        },
        {
          "name": "smoothing_enabled",
          "type": "bool",
          "setter": "set_enable_follow_smoothing",
          "getter": "is_follow_smoothing_enabled",
          "description": "If [code]true[/code] the camera smoothly moves towards the target at [member smoothing_speed]. Default value: [code]false[/code]"
        },
        {
          "name": "smoothing_speed",
          "type": "float",
          "setter": "set_follow_smoothing",
          "getter": "get_follow_smoothing",
          "description": "Speed in pixels per second of the camera's smoothing effect when [member smoothing_enabled] is [code]true[/code]"
        },
        {
          "name": "zoom",
          "type": "Vector2",
          "setter": "set_zoom",
          "getter": "get_zoom",
          "description": "The camera's zoom relative to the viewport. Values larger than [code]Vector2(1, 1)[/code] zoom out and smaller values zoom in. For an example, use [code]Vector2(0.5, 0.5)[/code] for a 2x zoom in, and [code]Vector2(4, 4)[/code] for a 4x zoom out."
        }
      ],
      "theme_properties": []
    },
    "HSlider": {
      "name": "HSlider",
      "inherits": "Slider",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Horizontal slider.",
      "description": "Horizontal slider. See [Slider]. This one goes from left (min) to right (max).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_area",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_disabled",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "slider",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tick",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "Theme": {
      "name": "Theme",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Theme for controls.",
      "description": "Theme for skinning controls. Controls can be skinned individually, but for complex applications it's more efficient to just create a global theme that defines everything. This theme can be applied to any [Control], and it and its children will automatically use it.\n\t\tTheme resources can be alternatively loaded by writing them in a .theme file, see docs for more info.",
      "methods": [
        {
          "name": "clear_color",
          "description": "Clears theme [Color] at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_constant",
          "description": "Clears theme constant at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_font",
          "description": "Clears [Font] at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_icon",
          "description": "Clears icon at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_stylebox",
          "description": "Clears [StyleBox] at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "copy_default_theme",
          "description": "Sets theme values to a copy of the default theme values.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Returns the [Color] at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color_list",
          "qualifiers": "const",
          "description": "Returns all of the [Color]s as a [PoolStringArray] filled with each [Color]'s name, for use in [method get_color], if Theme has [code]type[/code].",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_constant",
          "qualifiers": "const",
          "description": "Returns the constant at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_constant_list",
          "qualifiers": "const",
          "description": "Returns all of the constants as a [PoolStringArray] filled with each constant's name, for use in [method get_constant], if Theme has [code]type[/code].",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_font",
          "qualifiers": "const",
          "description": "Returns the [Font] at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "Font",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_font_list",
          "qualifiers": "const",
          "description": "Returns all of the [Font]s as a [PoolStringArray] filled with each [Font]'s name, for use in [method get_font], if Theme has [code]type[/code].",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon",
          "qualifiers": "const",
          "description": "Returns the icon [Texture] at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon_list",
          "qualifiers": "const",
          "description": "Returns all of the icons as a [PoolStringArray] filled with each [Texture]'s name, for use in [method get_icon], if Theme has [code]type[/code].",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_stylebox",
          "qualifiers": "const",
          "description": "Returns the icon [StyleBox] at [code]name[/code] if Theme has [code]type[/code].",
          "return_type": "StyleBox",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_stylebox_list",
          "qualifiers": "const",
          "description": "Returns all of the [StyleBox]s as a [PoolStringArray] filled with each [StyleBox]'s name, for use in [method get_stylebox], if Theme has [code]type[/code].",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_stylebox_types",
          "qualifiers": "const",
          "description": "Returns all of the [StyleBox] types as a [PoolStringArray] filled with each [StyleBox]'s type, for use in [method get_stylebox] and/or [method get_stylebox_list], if Theme has [code]type[/code].",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_type_list",
          "qualifiers": "const",
          "description": "Returns all of the types in [code]type[/code] as a [PoolStringArray] for use in any of the get_* functions, if Theme has [code]type[/code].",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_color",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if [Color] with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_constant",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if constant with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_font",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if [Font] with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_icon",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if icon [Texture] with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_stylebox",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if [StyleBox] with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color",
          "description": "Sets Theme's [Color] to [code]color[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant",
          "description": "Sets Theme's constant to [code]constant[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "constant",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_font",
          "description": "Sets Theme's [Font] to [code]font[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon",
          "description": "Sets Theme's icon [Texture] to [code]texture[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stylebox",
          "description": "Sets Theme's [StyleBox] to [code]stylebox[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "StyleBox",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "default_font",
          "type": "Font",
          "setter": "set_default_font",
          "getter": "get_default_font",
          "description": "The theme's default font."
        }
      ],
      "theme_properties": []
    },
    "RayCast": {
      "name": "RayCast",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Query the closest object intersecting a ray.",
      "description": "A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 3D space in order to find the closest object along the path of the ray.\n\t\tRayCast can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.\n\t\tOnly enabled raycasts will be able to query the space and report collisions.\n\t\tRayCast calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.",
      "methods": [
        {
          "name": "add_exception",
          "description": "Adds a collision exception so the ray does not report collisions with the specified node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_exception_rid",
          "description": "Adds a collision exception so the ray does not report collisions with the specified [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_exceptions",
          "description": "Removes all collision exceptions for this ray.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_raycast_update",
          "description": "Updates the collision information for the ray.\n\t\t\t\tUse this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state. Note: [code]enabled == true[/code] is not required for this to work.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "Return the closest object the ray is pointing to. Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tif RayCast.is_colliding():\n\t\t\t\t    var collider = RayCast.get_collider()\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "Returns the collision shape of the closest object the ray is pointing to.  Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tif RayCast.is_colliding():\n\t\t\t\t    var shape = RayCast.get_collider_shape()\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the bit index passed is turned on. Note that bit indexes range from 0-19.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "Returns the normal of the intersecting object's shape at the collision point.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_collision_point",
          "qualifiers": "const",
          "description": "Returns the collision point at which the ray intersects the closest object. Note: this point is in the [b]global[/b] coordinate system.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "is_colliding",
          "qualifiers": "const",
          "description": "Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove_exception",
          "description": "Removes a collision exception so the ray does report collisions with the specified node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_exception_rid",
          "description": "Removes a collision exception so the ray does report collisions with the specified [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Sets the bit index passed to the [code]value[/code] passed. Note that bit indexes range from 0-19.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "cast_to",
          "type": "Vector3",
          "setter": "set_cast_to",
          "getter": "get_cast_to",
          "description": "The ray's destination point, relative to the RayCast's [code]position[/code]."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected."
        },
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": "If [code]true[/code] collisions will be reported. Default value: [code]false[/code]."
        },
        {
          "name": "exclude_parent",
          "type": "bool",
          "setter": "set_exclude_parent_body",
          "getter": "get_exclude_parent_body",
          "description": "If [code]true[/code] collisions will be ignored for this RayCast's immediate parent. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": []
    },
    "AudioServer": {
      "name": "AudioServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Server interface for low level audio access.",
      "description": "AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.",
      "methods": [
        {
          "name": "add_bus",
          "description": "Adds a bus at [code]at_position[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_bus_effect",
          "description": "Adds an [AudioEffect] effect to the bus [code]bus_idx[/code] at [code]at_position[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect",
              "type": "AudioEffect",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "generate_bus_layout",
          "qualifiers": "const",
          "description": "Generates an [AudioBusLayout] using the available busses and effects.",
          "return_type": "AudioBusLayout",
          "arguments": []
        },
        {
          "name": "get_bus_count",
          "qualifiers": "const",
          "description": "Returns the number of available busses.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bus_effect",
          "description": "Returns the [AudioEffect] at position [code]effect_idx[/code] in bus [code]bus_idx[/code].",
          "return_type": "AudioEffect",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_effect_count",
          "description": "Returns the number of effects on the bus at [code]bus_idx[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_index",
          "qualifiers": "const",
          "description": "Returns the index of the bus with the name [code]bus_name[/code].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "bus_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_name",
          "qualifiers": "const",
          "description": "Returns the name of the bus with the index [code]bus_idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_peak_volume_left_db",
          "qualifiers": "const",
          "description": "Returns the peak volume of the left speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "channel",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_peak_volume_right_db",
          "qualifiers": "const",
          "description": "Returns the peak volume of the right speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "channel",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_send",
          "qualifiers": "const",
          "description": "Returns the name of the bus that the bus at index [code]bus_idx[/code] sends to.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_volume_db",
          "qualifiers": "const",
          "description": "Returns the volume of the bus at index [code]bus_idx[/code] in dB.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_mix_rate",
          "qualifiers": "const",
          "description": "Returns the sample rate at the output of the audioserver.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_speaker_mode",
          "qualifiers": "const",
          "description": "Returns the speaker configuration.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_bus_bypassing_effects",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_bus_effect_enabled",
          "qualifiers": "const",
          "description": "If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_bus_mute",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_bus_solo",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "lock",
          "description": "Locks the audio drivers mainloop. Remember to unlock it afterwards.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "move_bus",
          "description": "Moves the bus from index [code]index[/code] to index [code]to_index[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_bus",
          "description": "Removes the bus at index [code]index[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_bus_effect",
          "description": "Removes the effect at index [code]effect_idx[/code] from the bus at index [code]bus_idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_bypass_effects",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_count",
          "description": "Adds and removes busses to make the number of busses match [code]amount[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_effect_enabled",
          "description": "If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_layout",
          "description": "Overwrites the currently used [AudioBusLayout].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_layout",
              "type": "AudioBusLayout",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_mute",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_name",
          "description": "Sets the name of the bus at index [code]bus_idx[/code] to [code]name[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_send",
          "description": "Connects the output of the bus at [code]bus_idx[/code] to the bus named [code]send[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "send",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_solo",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_volume_db",
          "description": "Sets the volume of the bus at index [code]bus_idx[/code] to [code]volume_db[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "volume_db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "swap_bus_effects",
          "description": "Swaps the position of two effects in bus [code]bus_idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "by_effect_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unlock",
          "description": "Unlocks the audiodriver's main loop. After locking it always unlock it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "bus_layout_changed",
          "description": "Emitted when the [AudioBusLayout] changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "SPEAKER_MODE_STEREO",
          "value": "0",
          "enum": "SpeakerMode",
          "description": "Two or fewer speakers are detected."
        },
        {
          "name": "SPEAKER_SURROUND_51",
          "value": "2",
          "enum": "SpeakerMode",
          "description": "A 5.1 channel surround setup detected."
        },
        {
          "name": "SPEAKER_SURROUND_71",
          "value": "3",
          "enum": "SpeakerMode",
          "description": "A 7.1 channel surround setup detected."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Sprite": {
      "name": "Sprite",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "General purpose Sprite node.",
      "description": "A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.",
      "methods": [],
      "signals": [
        {
          "name": "frame_changed",
          "description": "Emitted when the [member frame] changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "texture_changed",
          "description": "Emitted when the [member texture] changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "centered",
          "type": "bool",
          "setter": "set_centered",
          "getter": "is_centered",
          "description": "If [code]true[/code] texture is centered. Default value: [code]true[/code]."
        },
        {
          "name": "flip_h",
          "type": "bool",
          "setter": "set_flip_h",
          "getter": "is_flipped_h",
          "description": "If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code]."
        },
        {
          "name": "flip_v",
          "type": "bool",
          "setter": "set_flip_v",
          "getter": "is_flipped_v",
          "description": "If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code]."
        },
        {
          "name": "frame",
          "type": "int",
          "setter": "set_frame",
          "getter": "get_frame",
          "description": "Current frame to display from sprite sheet. [member vframes] or [member hframes] must be greater than 1."
        },
        {
          "name": "hframes",
          "type": "int",
          "setter": "set_hframes",
          "getter": "get_hframes",
          "description": "The number of collumns in the sprite sheet."
        },
        {
          "name": "normal_map",
          "type": "Texture",
          "setter": "set_normal_map",
          "getter": "get_normal_map",
          "description": "The normal map gives depth to the Sprite."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The texture's drawing offset."
        },
        {
          "name": "region_enabled",
          "type": "bool",
          "setter": "set_region",
          "getter": "is_region",
          "description": "If [code]true[/code] texture is cut from a larger atlas texture. See [code]region_rect[/code]. Default value: [code]false[/code]."
        },
        {
          "name": "region_filter_clip",
          "type": "bool",
          "setter": "set_region_filter_clip",
          "getter": "is_region_filter_clip_enabled",
          "description": "If [code]true[/code] the outermost pixels get blurred out."
        },
        {
          "name": "region_rect",
          "type": "Rect2",
          "setter": "set_region_rect",
          "getter": "get_region_rect",
          "description": "The region of the atlas texture to display. [member region_enabled] must be [code]true[/code]."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "[Texture] object to draw."
        },
        {
          "name": "vframes",
          "type": "int",
          "setter": "set_vframes",
          "getter": "get_vframes",
          "description": "The number of rows in the sprite sheet."
        }
      ],
      "theme_properties": []
    },
    "ShortCut": {
      "name": "ShortCut",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A shortcut for binding input.",
      "description": "A shortcut for binding input.\n\t\tShortcuts are commonly used for interacting with a [Control] element from a [InputEvent].",
      "methods": [
        {
          "name": "get_as_text",
          "qualifiers": "const",
          "description": "Returns the Shortcut's [InputEvent] as a [String].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_shortcut",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the Shortcut's [InputEvent] equals [code]event[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "If [code]true[/code] this Shortcut is valid.",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "shortcut",
          "type": "InputEvent",
          "setter": "set_shortcut",
          "getter": "get_shortcut",
          "description": "The Shortcut's [InputEvent].\n\t\t\tGenerally the [InputEvent] is a keyboard key, though it can be any [InputEvent]."
        }
      ],
      "theme_properties": []
    },
    "MeshInstance": {
      "name": "MeshInstance",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Node that instances meshes into a scenario.",
      "description": "MeshInstance is a node that takes a [Mesh] resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single [Mesh] in many places. This allows to reuse geometry and save on resources. When a [Mesh] has to be instanced more than thousands of times at close proximity, consider using a [MultiMesh] in a [MultiMeshInstance] instead.",
      "methods": [
        {
          "name": "create_convex_collision",
          "description": "This helper creates a [StaticBody] child node with a [ConvexPolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_debug_tangents",
          "description": "This helper creates a [MeshInstance] child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_trimesh_collision",
          "description": "This helper creates a [StaticBody] child node with a [ConcavePolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_surface_material",
          "qualifiers": "const",
          "description": "Returns the [Material] for a surface of the [Mesh] resource.",
          "return_type": "Material",
          "arguments": [
            {
              "index": "0",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_surface_material",
          "description": "Sets the [Material] for a surface of the [Mesh] resource.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surface",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "mesh",
          "type": "Mesh",
          "setter": "set_mesh",
          "getter": "get_mesh",
          "description": "The [Mesh] resource for the instance."
        },
        {
          "name": "skeleton",
          "type": "NodePath",
          "setter": "set_skeleton_path",
          "getter": "get_skeleton_path",
          "description": "[NodePath] to the [Skeleton] associated with the instance."
        }
      ],
      "theme_properties": []
    },
    "PluginScript": {
      "name": "PluginScript",
      "inherits": "Script",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HingeJoint": {
      "name": "HingeJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A hinge between two 3D bodies.",
      "description": "Normally uses the z-axis of body A as the hinge axis, another axis can be specified when adding it manually though.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_BIAS",
          "value": "0",
          "enum": "Param",
          "description": "The speed with which the two bodies get pulled together when they move in different directions."
        },
        {
          "name": "PARAM_LIMIT_UPPER",
          "value": "1",
          "enum": "Param",
          "description": "The maximum rotation. only active if [member angular_limit/enable] is [code]true[/code]."
        },
        {
          "name": "PARAM_LIMIT_LOWER",
          "value": "2",
          "enum": "Param",
          "description": "The minimum rotation. only active if [member angular_limit/enable] is [code]true[/code]."
        },
        {
          "name": "PARAM_LIMIT_BIAS",
          "value": "3",
          "enum": "Param",
          "description": "The speed with which the rotation across the axis perpendicular to the hinge gets corrected."
        },
        {
          "name": "PARAM_LIMIT_SOFTNESS",
          "value": "4",
          "enum": "Param",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_RELAXATION",
          "value": "5",
          "enum": "Param",
          "description": "The lower this value, the more the rotation gets slowed down."
        },
        {
          "name": "PARAM_MOTOR_TARGET_VELOCITY",
          "value": "6",
          "enum": "Param",
          "description": "Target speed for the motor."
        },
        {
          "name": "PARAM_MOTOR_MAX_IMPULSE",
          "value": "7",
          "enum": "Param",
          "description": "Maximum acceleration for the motor."
        },
        {
          "name": "PARAM_MAX",
          "value": "8",
          "enum": "Param",
          "description": "End flag of PARAM_* constants, used internally."
        },
        {
          "name": "FLAG_USE_LIMIT",
          "value": "0",
          "enum": "Flag",
          "description": "If [code]true[/code] the hinges maximum and minimum rotation, defined by [member angular_limit/lower] and [member angular_limit/upper] has effects."
        },
        {
          "name": "FLAG_ENABLE_MOTOR",
          "value": "1",
          "enum": "Flag",
          "description": "When activated, a motor turns the hinge."
        },
        {
          "name": "FLAG_MAX",
          "value": "2",
          "enum": "Flag",
          "description": "End flag of FLAG_* constants, used internally."
        }
      ],
      "properties": [
        {
          "name": "angular_limit/bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The speed with which the rotation across the axis perpendicular to the hinge gets corrected."
        },
        {
          "name": "angular_limit/enable",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": "If [code]true[/code] the hinges maximum and minimum rotation, defined by [member angular_limit/lower] and [member angular_limit/upper] has effects."
        },
        {
          "name": "angular_limit/lower",
          "type": "float",
          "setter": "_set_lower_limit",
          "getter": "_get_lower_limit",
          "description": "The minimum rotation. only active if [member angular_limit/enable] is [code]true[/code]."
        },
        {
          "name": "angular_limit/relaxation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The lower this value, the more the rotation gets slowed down."
        },
        {
          "name": "angular_limit/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_limit/upper",
          "type": "float",
          "setter": "_set_upper_limit",
          "getter": "_get_upper_limit",
          "description": "The maximum rotation. only active if [member angular_limit/enable] is [code]true[/code]."
        },
        {
          "name": "motor/enable",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": "When activated, a motor turns the hinge."
        },
        {
          "name": "motor/max_impulse",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Maximum acceleration for the motor."
        },
        {
          "name": "motor/target_velocity",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Target speed for the motor."
        },
        {
          "name": "params/bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The speed with which the two bodies get pulled together when they move in different directions."
        }
      ],
      "theme_properties": []
    },
    "BoneAttachment": {
      "name": "BoneAttachment",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A node that will attach to a bone.",
      "description": "This node must be the child of a [Skeleton] node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bone_name",
          "type": "String",
          "setter": "set_bone_name",
          "getter": "get_bone_name",
          "description": "The name of the attached bone."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptFunctionCall": {
      "name": "VisualScriptFunctionCall",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "CALL_MODE_SELF",
          "value": "0",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_NODE_PATH",
          "value": "1",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_INSTANCE",
          "value": "2",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_BASIC_TYPE",
          "value": "3",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_SINGLETON",
          "value": "4",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "RPC_DISABLED",
          "value": "0",
          "enum": "RPCCallMode",
          "description": ""
        },
        {
          "name": "RPC_RELIABLE",
          "value": "1",
          "enum": "RPCCallMode",
          "description": ""
        },
        {
          "name": "RPC_UNRELIABLE",
          "value": "2",
          "enum": "RPCCallMode",
          "description": ""
        },
        {
          "name": "RPC_RELIABLE_TO_ID",
          "value": "3",
          "enum": "RPCCallMode",
          "description": ""
        },
        {
          "name": "RPC_UNRELIABLE_TO_ID",
          "value": "4",
          "enum": "RPCCallMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "base_script",
          "type": "String",
          "setter": "set_base_script",
          "getter": "get_base_script",
          "description": ""
        },
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        },
        {
          "name": "basic_type",
          "type": "int",
          "setter": "set_basic_type",
          "getter": "get_basic_type",
          "enum": "Variant.Type",
          "description": ""
        },
        {
          "name": "call_mode",
          "type": "int",
          "setter": "set_call_mode",
          "getter": "get_call_mode",
          "enum": "VisualScriptFunctionCall.CallMode",
          "description": ""
        },
        {
          "name": "function",
          "type": "String",
          "setter": "set_function",
          "getter": "get_function",
          "description": ""
        },
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_base_path",
          "getter": "get_base_path",
          "description": ""
        },
        {
          "name": "rpc_call_mode",
          "type": "int",
          "setter": "set_rpc_call_mode",
          "getter": "get_rpc_call_mode",
          "enum": "VisualScriptFunctionCall.RPCCallMode",
          "description": ""
        },
        {
          "name": "singleton",
          "type": "String",
          "setter": "set_singleton",
          "getter": "get_singleton",
          "description": ""
        },
        {
          "name": "use_default_args",
          "type": "int",
          "setter": "set_use_default_args",
          "getter": "get_use_default_args",
          "description": ""
        },
        {
          "name": "validate",
          "type": "bool",
          "setter": "set_validate",
          "getter": "get_validate",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "MainLoop": {
      "name": "MainLoop",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Main loop is the abstract main loop base class.",
      "description": "Main loop is the abstract main loop base class. All other main loop classes are derived from it. Upon application start, a [code]MainLoop[/code] has to be provided to OS, else the application will exit. This happens automatically (and a [SceneTree] is created), unless a main [Script] is supplied, which may or not create and return a [code]MainLoop[/code].",
      "methods": [
        {
          "name": "_drop_files",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "files",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "screen",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_finalize",
          "qualifiers": "virtual",
          "description": "Called before the program exits.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_idle",
          "qualifiers": "virtual",
          "description": "Called each idle frame with time since last call as an only argument.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_initialize",
          "qualifiers": "virtual",
          "description": "Called once during initialization.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "ev",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_input_text",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_iteration",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "finish",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "idle",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "init",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "input_event",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ev",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "input_text",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "iteration",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NOTIFICATION_WM_MOUSE_ENTER",
          "value": "2",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_MOUSE_EXIT",
          "value": "3",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_FOCUS_IN",
          "value": "4",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_FOCUS_OUT",
          "value": "5",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_QUIT_REQUEST",
          "value": "6",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_GO_BACK_REQUEST",
          "value": "7",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_UNFOCUS_REQUEST",
          "value": "8",
          "description": ""
        },
        {
          "name": "NOTIFICATION_OS_MEMORY_WARNING",
          "value": "9",
          "description": ""
        },
        {
          "name": "NOTIFICATION_TRANSLATION_CHANGED",
          "value": "90",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_ABOUT",
          "value": "91",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SplitContainer": {
      "name": "SplitContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Container for splitting and adjusting.",
      "description": "Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.",
      "methods": [],
      "signals": [
        {
          "name": "dragged",
          "description": "Emitted when the dragger is dragged by user.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "DRAGGER_VISIBLE",
          "value": "0",
          "enum": "DraggerVisibility",
          "description": "The split dragger is visible."
        },
        {
          "name": "DRAGGER_HIDDEN",
          "value": "1",
          "enum": "DraggerVisibility",
          "description": "The split dragger is invisible."
        },
        {
          "name": "DRAGGER_HIDDEN_COLLAPSED",
          "value": "2",
          "enum": "DraggerVisibility",
          "description": "The split dragger is invisible and collapsed."
        }
      ],
      "properties": [
        {
          "name": "collapsed",
          "type": "bool",
          "setter": "set_collapsed",
          "getter": "is_collapsed",
          "description": ""
        },
        {
          "name": "dragger_visibility",
          "type": "int",
          "setter": "set_dragger_visibility",
          "getter": "get_dragger_visibility",
          "enum": "SplitContainer.DraggerVisibility",
          "description": ""
        },
        {
          "name": "split_offset",
          "type": "int",
          "setter": "set_split_offset",
          "getter": "get_split_offset",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Engine": {
      "name": "Engine",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Access to basic engine properties.",
      "description": "The [code]Engine[/code] class allows you to query and modify the game's run-time parameters, such as frames per second, time scale, and others.",
      "methods": [
        {
          "name": "get_frames_drawn",
          "description": "Returns the total number of frames drawn.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_frames_per_second",
          "qualifiers": "const",
          "description": "Returns the frames per second of the running game.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_main_loop",
          "qualifiers": "const",
          "description": "Returns the main loop object (see [MainLoop] and [SceneTree]).",
          "return_type": "MainLoop",
          "arguments": []
        },
        {
          "name": "get_singleton",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_version_info",
          "qualifiers": "const",
          "description": "Returns the current engine version information in a Dictionary.\n\n\t\t\t\t\"major\"    - Holds the major version number as a String\n\t\t\t\t\"minor\"    - Holds the minor version number as a String\n\t\t\t\t\"patch\"    - Holds the patch version number as a String\n\t\t\t\t\"status\"   - Holds the status (e.g. \"beta\", \"rc1\", \"rc2\", ... \"stable\") as a String\n\t\t\t\t\"build\"    - Holds the build name (e.g. \"custom-build\") as a String\n\t\t\t\t\"string\"   - major + minor + patch + status + build in a single String",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "has_singleton",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_in_physics_frame",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the game is inside the fixed process and physics phase of the game loop.",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "editor_hint",
          "type": "bool",
          "setter": "set_editor_hint",
          "getter": "is_editor_hint",
          "description": "If [code]true[/code], it is running inside the editor. Useful for tool scripts."
        },
        {
          "name": "iterations_per_second",
          "type": "int",
          "setter": "set_iterations_per_second",
          "getter": "get_iterations_per_second",
          "description": "The number of fixed iterations per second (for fixed process and physics)."
        },
        {
          "name": "target_fps",
          "type": "int",
          "setter": "set_target_fps",
          "getter": "get_target_fps",
          "description": "The desired frames per second. If the hardware cannot keep up, this setting may not be respected. Defaults to 0, which indicates no limit."
        },
        {
          "name": "time_scale",
          "type": "float",
          "setter": "set_time_scale",
          "getter": "get_time_scale",
          "description": "Controls how fast or slow the in-game clock ticks versus the real life one. It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, whilst a value of 0.5 means the game moves at half the regular speed."
        }
      ],
      "theme_properties": []
    },
    "SceneTreeTimer": {
      "name": "SceneTreeTimer",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [
        {
          "name": "timeout",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "time_left",
          "type": "float",
          "setter": "set_time_left",
          "getter": "get_time_left",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Shader": {
      "name": "Shader",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "To be changed, ignore.",
      "description": "To be changed, ignore.",
      "methods": [
        {
          "name": "get_default_texture_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_texture_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MODE_SPATIAL",
          "value": "0",
          "enum": "Mode",
          "description": ""
        },
        {
          "name": "MODE_CANVAS_ITEM",
          "value": "1",
          "enum": "Mode",
          "description": ""
        },
        {
          "name": "MODE_PARTICLES",
          "value": "2",
          "enum": "Mode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "code",
          "type": "String",
          "setter": "set_code",
          "getter": "get_code",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ConfirmationDialog": {
      "name": "ConfirmationDialog",
      "inherits": "AcceptDialog",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Dialog for confirmation of actions.",
      "description": "Dialog for confirmation of actions. This dialog inherits from [AcceptDialog], but has by default an OK and Cancel button (in host OS order).",
      "methods": [
        {
          "name": "get_cancel",
          "description": "Return the cancel button.",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Position2D": {
      "name": "Position2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Generic 2D Position hint for editing.",
      "description": "Generic 2D Position hint for editing. It's just like a plain [Node2D] but displays as a cross in the 2D-Editor at all times.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NavigationPolygon": {
      "name": "NavigationPolygon",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_outline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "outline",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_outline_at_index",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "outline",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_polygon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_outlines",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_polygons",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_outline",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_outline_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "description": "",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_polygon_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertices",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "make_polygons_from_outlines",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_outline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_outline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "outline",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertices",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertices",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpinBox": {
      "name": "SpinBox",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Numerical input text field.",
      "description": "SpinBox is a numerical input text field. It allows entering integers and floats.",
      "methods": [
        {
          "name": "get_line_edit",
          "description": "",
          "return_type": "LineEdit",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "editable",
          "type": "bool",
          "setter": "set_editable",
          "getter": "is_editable",
          "description": ""
        },
        {
          "name": "prefix",
          "type": "String",
          "setter": "set_prefix",
          "getter": "get_prefix",
          "description": ""
        },
        {
          "name": "suffix",
          "type": "String",
          "setter": "set_suffix",
          "getter": "get_suffix",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "updown",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "AudioEffect": {
      "name": "AudioEffect",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Audio Effect For Audio.",
      "description": "Base resource for audio bus. Applies an audio effect on the bus that the resource is applied on.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorExportPlugin": {
      "name": "EditorExportPlugin",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "_export_begin",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "features",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "is_debug",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_export_file",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "features",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_file",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "file",
              "type": "PoolByteArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "remap",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_ios_bundle_file",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_ios_cpp_code",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_ios_framework",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_ios_linker_flags",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_ios_plist_content",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plist_content",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_shared_object",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tags",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "skip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NetworkedMultiplayerPeer": {
      "name": "NetworkedMultiplayerPeer",
      "inherits": "PacketPeer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A high-level network interface to simplify multiplayer interactions.",
      "description": "Manages the connection to network peers. Assigns unique IDs to each client connected to the server.",
      "methods": [
        {
          "name": "get_connection_status",
          "qualifiers": "const",
          "description": "Returns the current state of the connection. See [enum ConnectionStatus].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_packet_peer",
          "qualifiers": "const",
          "description": "Returns the ID of the [code]NetworkedMultiplayerPeer[/code] who sent the most recent packet.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_unique_id",
          "qualifiers": "const",
          "description": "Returns the ID of this [code]NetworkedMultiplayerPeer[/code].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "poll",
          "description": "Waits up to 1 second to receive a new network event.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_target_peer",
          "description": "The peer to which packets will be sent. Default value: [code]0[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "connection_failed",
          "description": "Emitted when a connection attempt fails.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connection_succeeded",
          "description": "Emitted when a connection attempt succeeds.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "peer_connected",
          "description": "Emitted by the server when a client connects.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "peer_disconnected",
          "description": "Emitted by the server when a client disconnects.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "server_disconnected",
          "description": "Emitted by clients when the server disconnects.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "TRANSFER_MODE_UNRELIABLE",
          "value": "0",
          "enum": "TransferMode",
          "description": "Packets are sent via unordered UDP packets."
        },
        {
          "name": "TRANSFER_MODE_UNRELIABLE_ORDERED",
          "value": "1",
          "enum": "TransferMode",
          "description": "Packets are sent via ordered UDP packets."
        },
        {
          "name": "TRANSFER_MODE_RELIABLE",
          "value": "2",
          "enum": "TransferMode",
          "description": "Packets are sent via TCP packets."
        },
        {
          "name": "CONNECTION_DISCONNECTED",
          "value": "0",
          "enum": "ConnectionStatus",
          "description": "The ongoing connection disconnected."
        },
        {
          "name": "CONNECTION_CONNECTING",
          "value": "1",
          "enum": "ConnectionStatus",
          "description": "A connection attempt is ongoing."
        },
        {
          "name": "CONNECTION_CONNECTED",
          "value": "2",
          "enum": "ConnectionStatus",
          "description": "The connection attempt succeeded."
        },
        {
          "name": "TARGET_PEER_BROADCAST",
          "value": "0",
          "description": "Packets are sent to the server and then redistributed to other peers."
        },
        {
          "name": "TARGET_PEER_SERVER",
          "value": "1",
          "description": "Packets are sent to the server alone."
        }
      ],
      "properties": [
        {
          "name": "refuse_new_connections",
          "type": "bool",
          "setter": "set_refuse_new_connections",
          "getter": "is_refusing_new_connections",
          "description": "If [code]true[/code] this [code]NetworkedMultiplayerPeer[/code] refuses new connections. Default value: [code]false[/code]."
        },
        {
          "name": "transfer_mode",
          "type": "int",
          "setter": "set_transfer_mode",
          "getter": "get_transfer_mode",
          "enum": "NetworkedMultiplayerPeer.TransferMode",
          "description": "The manner in which to send packets to the [code]target_peer[/code]. See [enum TransferMode]."
        }
      ],
      "theme_properties": []
    },
    "PinJoint": {
      "name": "PinJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Pin Joint for 3D Shapes.",
      "description": "Pin Joint for 3D Rigid Bodies. It pins 2 bodies (rigid or static) together.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_BIAS",
          "value": "0",
          "enum": "Param",
          "description": "The force with which the pinned objects stay in positional relation to each other.\n\t\t\tThe higher, the stronger."
        },
        {
          "name": "PARAM_DAMPING",
          "value": "1",
          "enum": "Param",
          "description": "The force with which the pinned objects stay in velocity relation to each other.\n\t\t\tThe higher, the stronger."
        },
        {
          "name": "PARAM_IMPULSE_CLAMP",
          "value": "2",
          "enum": "Param",
          "description": "If above 0, this value is the maximum value for an impulse that this Joint produces."
        }
      ],
      "properties": [
        {
          "name": "params/bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The force with which the pinned objects stay in positional relation to each other.\n\t\t\tThe higher, the stronger."
        },
        {
          "name": "params/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The force with which the pinned objects stay in velocity relation to each other.\n\t\t\tThe higher, the stronger."
        },
        {
          "name": "params/impulse_clamp",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "If above 0, this value is the maximum value for an impulse that this Joint produces."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectChorus": {
      "name": "AudioEffectChorus",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a chorus audio effect.",
      "description": "Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "dry",
          "type": "float",
          "setter": "set_dry",
          "getter": "get_dry",
          "description": "The effect's raw signal."
        },
        {
          "name": "voice/1/cutoff_hz",
          "type": "float",
          "setter": "set_voice_cutoff_hz",
          "getter": "get_voice_cutoff_hz",
          "description": "The voice's cutoff frequency."
        },
        {
          "name": "voice/1/delay_ms",
          "type": "float",
          "setter": "set_voice_delay_ms",
          "getter": "get_voice_delay_ms",
          "description": "The voice's signal delay."
        },
        {
          "name": "voice/1/depth_ms",
          "type": "float",
          "setter": "set_voice_depth_ms",
          "getter": "get_voice_depth_ms",
          "description": "The voice filter's depth."
        },
        {
          "name": "voice/1/level_db",
          "type": "float",
          "setter": "set_voice_level_db",
          "getter": "get_voice_level_db",
          "description": "The voice's volume."
        },
        {
          "name": "voice/1/pan",
          "type": "float",
          "setter": "set_voice_pan",
          "getter": "get_voice_pan",
          "description": "The voice's pan level."
        },
        {
          "name": "voice/1/rate_hz",
          "type": "float",
          "setter": "set_voice_rate_hz",
          "getter": "get_voice_rate_hz",
          "description": "The voice's filter rate."
        },
        {
          "name": "voice/2/cutoff_hz",
          "type": "float",
          "setter": "set_voice_cutoff_hz",
          "getter": "get_voice_cutoff_hz",
          "description": "The voice's cutoff frequency."
        },
        {
          "name": "voice/2/delay_ms",
          "type": "float",
          "setter": "set_voice_delay_ms",
          "getter": "get_voice_delay_ms",
          "description": "The voice's signal delay."
        },
        {
          "name": "voice/2/depth_ms",
          "type": "float",
          "setter": "set_voice_depth_ms",
          "getter": "get_voice_depth_ms",
          "description": "The voice filter's depth."
        },
        {
          "name": "voice/2/level_db",
          "type": "float",
          "setter": "set_voice_level_db",
          "getter": "get_voice_level_db",
          "description": "The voice's volume."
        },
        {
          "name": "voice/2/pan",
          "type": "float",
          "setter": "set_voice_pan",
          "getter": "get_voice_pan",
          "description": "The voice's pan level."
        },
        {
          "name": "voice/2/rate_hz",
          "type": "float",
          "setter": "set_voice_rate_hz",
          "getter": "get_voice_rate_hz",
          "description": "The voice's filter rate."
        },
        {
          "name": "voice/3/cutoff_hz",
          "type": "float",
          "setter": "set_voice_cutoff_hz",
          "getter": "get_voice_cutoff_hz",
          "description": "The voice's cutoff frequency."
        },
        {
          "name": "voice/3/delay_ms",
          "type": "float",
          "setter": "set_voice_delay_ms",
          "getter": "get_voice_delay_ms",
          "description": "The voice's signal delay."
        },
        {
          "name": "voice/3/depth_ms",
          "type": "float",
          "setter": "set_voice_depth_ms",
          "getter": "get_voice_depth_ms",
          "description": "The voice filter's depth."
        },
        {
          "name": "voice/3/level_db",
          "type": "float",
          "setter": "set_voice_level_db",
          "getter": "get_voice_level_db",
          "description": "The voice's volume."
        },
        {
          "name": "voice/3/pan",
          "type": "float",
          "setter": "set_voice_pan",
          "getter": "get_voice_pan",
          "description": "The voice's pan level."
        },
        {
          "name": "voice/3/rate_hz",
          "type": "float",
          "setter": "set_voice_rate_hz",
          "getter": "get_voice_rate_hz",
          "description": "The voice's filter rate."
        },
        {
          "name": "voice/4/cutoff_hz",
          "type": "float",
          "setter": "set_voice_cutoff_hz",
          "getter": "get_voice_cutoff_hz",
          "description": "The voice's cutoff frequency."
        },
        {
          "name": "voice/4/delay_ms",
          "type": "float",
          "setter": "set_voice_delay_ms",
          "getter": "get_voice_delay_ms",
          "description": "The voice's signal delay."
        },
        {
          "name": "voice/4/depth_ms",
          "type": "float",
          "setter": "set_voice_depth_ms",
          "getter": "get_voice_depth_ms",
          "description": "The voice filter's depth."
        },
        {
          "name": "voice/4/level_db",
          "type": "float",
          "setter": "set_voice_level_db",
          "getter": "get_voice_level_db",
          "description": "The voice's volume."
        },
        {
          "name": "voice/4/pan",
          "type": "float",
          "setter": "set_voice_pan",
          "getter": "get_voice_pan",
          "description": "The voice's pan level."
        },
        {
          "name": "voice/4/rate_hz",
          "type": "float",
          "setter": "set_voice_rate_hz",
          "getter": "get_voice_rate_hz",
          "description": "The voice's filter rate."
        },
        {
          "name": "voice_count",
          "type": "int",
          "setter": "set_voice_count",
          "getter": "get_voice_count",
          "description": "The amount of voices in the effect."
        },
        {
          "name": "wet",
          "type": "float",
          "setter": "set_wet",
          "getter": "get_wet",
          "description": "The effect's processed signal."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptLocalVarSet": {
      "name": "VisualScriptLocalVarSet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Changes a local variable's value.",
      "description": "Changes a local variable's value to the given input. The new value is also provided on an output Data port.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence\n\t\t- Data (variant): [code]set[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence\n\t\t- Data (variant): [code]get[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "type",
          "type": "int",
          "setter": "set_var_type",
          "getter": "get_var_type",
          "enum": "Variant.Type",
          "description": "The local variable's type."
        },
        {
          "name": "var_name",
          "type": "String",
          "setter": "set_var_name",
          "getter": "get_var_name",
          "description": "The local variable's name."
        }
      ],
      "theme_properties": []
    },
    "World2D": {
      "name": "World2D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class that has everything pertaining to a 2D world.",
      "description": "Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "canvas",
          "type": "RID",
          "setter": "",
          "getter": "get_canvas",
          "description": "The [RID] of this world's canvas resource. Used by the [VisualServer] for 2D drawing."
        },
        {
          "name": "direct_space_state",
          "type": "Physics2DDirectSpaceState",
          "setter": "",
          "getter": "get_direct_space_state",
          "description": "The state of this world's physics space. This allows arbitrary querying for collision."
        },
        {
          "name": "space",
          "type": "RID",
          "setter": "",
          "getter": "get_space",
          "description": "The [RID] of this world's physics space resource. Used by the [Physics2DServer] for 2D physics, treating it as both a space and an area."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectEQ": {
      "name": "AudioEffectEQ",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for audio equalizers. Gives you control over frequencies.\n\t\tUse it to create a custom equalizer if [AudioEffectEQ6], [AudioEffectEQ10] or [AudioEffectEQ21] don't fit your needs.",
      "description": "AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQ are very useful on the Master Bus to completely master a mix and give it character. They are also very useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged).",
      "methods": [
        {
          "name": "get_band_count",
          "qualifiers": "const",
          "description": "Returns the number of bands of the equalizer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_band_gain_db",
          "qualifiers": "const",
          "description": "Returns the band's gain at the specified index, in dB.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "band_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_band_gain_db",
          "description": "Sets band's gain at the specified index, in dB.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "band_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "volume_db",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StyleBoxTexture": {
      "name": "StyleBoxTexture",
      "inherits": "StyleBox",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Texture Based 3x3 scale style.",
      "description": "Texture Based 3x3 scale style. This stylebox performs a 3x3 scaling of a texture, where only the center cell is fully stretched. This allows for the easy creation of bordered styles.",
      "methods": [
        {
          "name": "set_expand_margin_all",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_individual",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size_left",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size_top",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "size_right",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "size_bottom",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "texture_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "AXIS_STRETCH_MODE_STRETCH",
          "value": "0",
          "enum": "AxisStretchMode",
          "description": ""
        },
        {
          "name": "AXIS_STRETCH_MODE_TILE",
          "value": "1",
          "enum": "AxisStretchMode",
          "description": ""
        },
        {
          "name": "AXIS_STRETCH_MODE_TILE_FIT",
          "value": "2",
          "enum": "AxisStretchMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "axis_stretch_horizontal",
          "type": "int",
          "setter": "set_h_axis_stretch_mode",
          "getter": "get_h_axis_stretch_mode",
          "enum": "StyleBoxTexture.AxisStretchMode",
          "description": ""
        },
        {
          "name": "axis_stretch_vertical",
          "type": "int",
          "setter": "set_v_axis_stretch_mode",
          "getter": "get_v_axis_stretch_mode",
          "enum": "StyleBoxTexture.AxisStretchMode",
          "description": ""
        },
        {
          "name": "draw_center",
          "type": "bool",
          "setter": "set_draw_center",
          "getter": "is_draw_center_enabled",
          "description": ""
        },
        {
          "name": "expand_margin_bottom",
          "type": "float",
          "setter": "set_expand_margin_size",
          "getter": "get_expand_margin_size",
          "description": ""
        },
        {
          "name": "expand_margin_left",
          "type": "float",
          "setter": "set_expand_margin_size",
          "getter": "get_expand_margin_size",
          "description": ""
        },
        {
          "name": "expand_margin_right",
          "type": "float",
          "setter": "set_expand_margin_size",
          "getter": "get_expand_margin_size",
          "description": ""
        },
        {
          "name": "expand_margin_top",
          "type": "float",
          "setter": "set_expand_margin_size",
          "getter": "get_expand_margin_size",
          "description": ""
        },
        {
          "name": "margin_bottom",
          "type": "float",
          "setter": "set_margin_size",
          "getter": "get_margin_size",
          "description": ""
        },
        {
          "name": "margin_left",
          "type": "float",
          "setter": "set_margin_size",
          "getter": "get_margin_size",
          "description": ""
        },
        {
          "name": "margin_right",
          "type": "float",
          "setter": "set_margin_size",
          "getter": "get_margin_size",
          "description": ""
        },
        {
          "name": "margin_top",
          "type": "float",
          "setter": "set_margin_size",
          "getter": "get_margin_size",
          "description": ""
        },
        {
          "name": "modulate_color",
          "type": "Color",
          "setter": "set_modulate",
          "getter": "get_modulate",
          "description": ""
        },
        {
          "name": "normal_map",
          "type": "Resource",
          "setter": "set_normal_map",
          "getter": "get_normal_map",
          "description": ""
        },
        {
          "name": "region_rect",
          "type": "Rect2",
          "setter": "set_region_rect",
          "getter": "get_region_rect",
          "description": ""
        },
        {
          "name": "texture",
          "type": "Resource",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "BackBufferCopy": {
      "name": "BackBufferCopy",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Copies a region of the screen (or the whole screen) to a buffer so it can be accessed with the texscreen() shader instruction.",
      "description": "Node for back-buffering the currently displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Accessing this buffer is done with the texscreen() shader instruction.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "COPY_MODE_DISABLED",
          "value": "0",
          "enum": "CopyMode",
          "description": "Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers."
        },
        {
          "name": "COPY_MODE_RECT",
          "value": "1",
          "enum": "CopyMode",
          "description": "BackBufferCopy buffers a rectangular region."
        },
        {
          "name": "COPY_MODE_VIEWPORT",
          "value": "2",
          "enum": "CopyMode",
          "description": "BackBufferCopy buffers the entire screen."
        }
      ],
      "properties": [
        {
          "name": "copy_mode",
          "type": "int",
          "setter": "set_copy_mode",
          "getter": "get_copy_mode",
          "enum": "BackBufferCopy.CopyMode",
          "description": "Buffer mode. See [code]COPY_MODE_*[/code] constants."
        },
        {
          "name": "rect",
          "type": "Rect2",
          "setter": "set_rect",
          "getter": "get_rect",
          "description": "The area covered by the BackBufferCopy. Only used if [code]copy_mode[/code] is [code]COPY_MODE_RECT[/code]."
        }
      ],
      "theme_properties": []
    },
    "ARVRPositionalTracker": {
      "name": "ARVRPositionalTracker",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A tracked object",
      "description": "An instance of this object represents a device that is tracked such as a controller or anchor point. HMDs aren't represented here as they are fully handled internally.\n\t\tAs controllers are turned on and the AR/VR interface detects them instances of this object are automatically added to this list of active tracking objects accessible through the ARVRServer\n\t\tThe ARVRController and ARVRAnchor both consume objects of this type and should be the objects you use in game. The positional trackers are just the under the hood objects that make this all work and are mostly exposed so GDNative based interfaces can interact with them.",
      "methods": [
        {
          "name": "get_hand",
          "qualifiers": "const",
          "description": "Returns the hand holding this tracker, if known. See TRACKER_* constants.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_joy_id",
          "qualifiers": "const",
          "description": "If this is a controller that is being tracked the controller will also be represented by a joystick entry with this id.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Returns the controller or anchor point's name if available.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_orientation",
          "qualifiers": "const",
          "description": "Returns the controller's orientation matrix.",
          "return_type": "Basis",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "Returns the world-space controller position.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_tracks_orientation",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this device tracks orientation.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_tracks_position",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this device tracks position.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Returns the transform combining this device's orientation and position.",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "adjust_by_reference_frame",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_type",
          "qualifiers": "const",
          "description": "Returns the tracker's type.",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TRACKER_HAND_UNKNOWN",
          "value": "0",
          "enum": "TrackerHand",
          "description": "The hand this tracker is held in is unknown or not applicable."
        },
        {
          "name": "TRACKER_LEFT_HAND",
          "value": "1",
          "enum": "TrackerHand",
          "description": "This tracker is the left hand controller."
        },
        {
          "name": "TRACKER_RIGHT_HAND",
          "value": "2",
          "enum": "TrackerHand",
          "description": "This tracker is the right hand controller."
        }
      ],
      "properties": [
        {
          "name": "rumble",
          "type": "float",
          "setter": "set_rumble",
          "getter": "get_rumble",
          "description": "The degree to which the tracker rumbles. Ranges from [code]0.0[/code] to [code]1.0[/code] with precision [code].01[/code]."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptConstant": {
      "name": "VisualScriptConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Gets a contant's value.",
      "description": "This node returns a constant's value.\n\t\t[b]Input Ports:[/b]\n\t\tnone\n\t\t[b]Output Ports:[/b]\n\t\t- Data (variant): [code]get[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "type",
          "type": "int",
          "setter": "set_constant_type",
          "getter": "get_constant_type",
          "enum": "Variant.Type",
          "description": "The constant's type."
        },
        {
          "name": "value",
          "type": "Variant",
          "setter": "set_constant_value",
          "getter": "get_constant_value",
          "description": "The constant's value."
        }
      ],
      "theme_properties": []
    },
    "Variant": {
      "name": "Variant",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "The most important data type in Godot.",
      "description": "A Variant takes up only 20 bytes and can store almost any engine datatype inside of it. Variants are rarely used to hold information for long periods of time, instead they are used mainly for communication, editing, serialization and moving data around.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionShape": {
      "name": "CollisionShape",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Node that represents collision shape data in 3D space.",
      "description": "Editor facility for creating and editing collision shapes in 3D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area] to give it a detection shape, or add it to a [PhysicsBody] to give create solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.",
      "methods": [
        {
          "name": "make_convex_from_brothers",
          "description": "Sets the collision shape's shape to the addition of all its convexed [MeshInstance] siblings geometry.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resource_changed",
          "description": "If this method exists within a script it will be called whenever the shape resource has been modified.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": "A disabled collision shape has no effect in the world."
        },
        {
          "name": "shape",
          "type": "Shape",
          "setter": "set_shape",
          "getter": "get_shape",
          "description": "The actual shape owned by this collision shape."
        }
      ],
      "theme_properties": []
    },
    "ARVRController": {
      "name": "ARVRController",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A spatial node representing a spatially tracked controller.",
      "description": "This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy pass throughs to the state of buttons and such on the controllers.\n\t\tControllers are linked by their id. You can create controller nodes before the controllers are available. Say your game always uses two controllers (one for each hand) you can predefine the controllers with id 1 and 2 and they will become active as soon as the controllers are identified. If you expect additional controllers to be used you should react to the signals and add ARVRController nodes to your scene.\n\t\tThe position of the controller node is automatically updated by the ARVR Server. This makes this node ideal to add child  nodes to visualise the controller.",
      "methods": [
        {
          "name": "get_controller_name",
          "qualifiers": "const",
          "description": "If active, returns the name of the associated controller if provided by the AR/VR SDK used.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_hand",
          "qualifiers": "const",
          "description": "Returns the hand holding this controller, if known. See TRACKER_* constants in [ARVRPositionalTracker].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_is_active",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the bound controller is active. ARVR systems attempt to track active controllers.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_joystick_axis",
          "qualifiers": "const",
          "description": "Returns the value of the given axis for things like triggers, touchpads, etc. that are embedded into the controller.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joystick_id",
          "qualifiers": "const",
          "description": "Returns the ID of the joystick object bound to this. Every controller tracked by the ARVR Server that has buttons and axis will also be registered as a joystick within Godot. This means that all the normal joystick tracking and input mapping will work for buttons and axis found on the AR/VR controllers. This ID is purely offered as information so you can link up the controller with its joystick entry.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_button_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the button at index [code]button[/code] is pressed.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "button_pressed",
          "description": "Emitted when a button on this controller is pressed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "button_release",
          "description": "Emitted when a button on this controller is released.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "controller_id",
          "type": "int",
          "setter": "set_controller_id",
          "getter": "get_controller_id",
          "description": "The controller's id.\n\t\t\tA controller id of 0 is unbound and will always result in an inactive node. Controller id 1 is reserved for the first controller that identifies itself as the left hand controller and id 2 is reserved for the first controller that identifies itself as the right hand controller.\n\t\t\tFor any other controller that the [ARVRServer] detects we continue with controller id 3.\n\t\t\tWhen a controller is turned off, its slot is freed. This ensures controllers will keep the same id even when controllers with lower ids are turned off."
        },
        {
          "name": "rumble",
          "type": "float",
          "setter": "set_rumble",
          "getter": "get_rumble",
          "description": "The degree to which the tracker rumbles. Ranges from [code]0.0[/code] to [code]1.0[/code] with precision [code].01[/code]. If changed, updates [member ARVRPositionalTracker.rumble] accordingly."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptFunctionState": {
      "name": "VisualScriptFunctionState",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "connect_to_signal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "signals",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "args",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "resume",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "args",
              "type": "Array",
              "default_value": "null"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GDScript": {
      "name": "GDScript",
      "inherits": "Script",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A script implemented in the GDScript programming language.",
      "description": "A script implemented in the GDScript programming language. The script exends the functionality of all objects that instance it.\n\t\t[method new] creates a new instance of the script. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.",
      "methods": [
        {
          "name": "get_as_byte_code",
          "qualifiers": "const",
          "description": "Returns byte code for the script source code.",
          "return_type": "PoolByteArray",
          "arguments": []
        },
        {
          "name": "new",
          "qualifiers": "vararg",
          "description": "Returns a new instance of the script.\n\t\t\t\tFor example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar MyClass = load(\"myclass.gd\")\n\t\t\t\tvar instance = MyClass.new()\n\t\t\t\tassert(instance.get_script() == MyClass)\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DServerSW": {
      "name": "Physics2DServerSW",
      "inherits": "Physics2DServer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Software implementation of [Physics2DServer].",
      "description": "This class exposes no new methods or properties and should not be used, as [Physics2DServer] automatically selects the best implementation available.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RID": {
      "name": "RID",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Handle for a [Resource]'s unique ID.",
      "description": "The RID type is used to access the unique integer ID of a resource.  They are opaque, so they do not grant access to the associated resource by themselves. They are used by and with the low-level Server classes such as [VisualServer].",
      "methods": [
        {
          "name": "RID",
          "description": "Create a new RID instance with the ID of a given resource. When not handed a valid resource, silently stores the unused ID 0.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_id",
          "description": "Retrieve the ID of the referenced resource.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NavigationMeshInstance": {
      "name": "NavigationMeshInstance",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": ""
        },
        {
          "name": "navmesh",
          "type": "NavigationMesh",
          "setter": "set_navigation_mesh",
          "getter": "get_navigation_mesh",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptInputAction": {
      "name": "VisualScriptInputAction",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "MODE_PRESSED",
          "value": "0",
          "enum": "Mode",
          "description": ""
        },
        {
          "name": "MODE_RELEASED",
          "value": "1",
          "enum": "Mode",
          "description": ""
        },
        {
          "name": "MODE_JUST_PRESSED",
          "value": "2",
          "enum": "Mode",
          "description": ""
        },
        {
          "name": "MODE_JUST_RELEASED",
          "value": "3",
          "enum": "Mode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "action",
          "type": "String",
          "setter": "set_action_name",
          "getter": "get_action_name",
          "description": ""
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_action_mode",
          "getter": "get_action_mode",
          "enum": "VisualScriptInputAction.Mode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Input": {
      "name": "Input",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A Singleton that deals with inputs.",
      "description": "A Singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions. Actions and their events can be set in the Project Settings / Input Map tab. Or be set with [InputMap].",
      "methods": [
        {
          "name": "action_press",
          "description": "This will simulate pressing the specified action.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "action_release",
          "description": "If the specified action is already pressed, this will release it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_joy_mapping",
          "description": "Add a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mapping",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "update_existing",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_accelerometer",
          "qualifiers": "const",
          "description": "If the device has an accelerometer, this will return the movement.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_connected_joypads",
          "description": "Returns an [Array] containing the device IDs of all currently connected joypads.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_gravity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_gyroscope",
          "qualifiers": "const",
          "description": "If the device has a gyroscope, this will return the rate of rotation in rad/s around a device's x, y, and z axis.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_joy_axis",
          "qualifiers": "const",
          "description": "Returns the current value of the joypad axis at given index (see [code]JOY_*[/code] constants in [@GlobalScope])",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_axis_index_from_string",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_axis_string",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_button_index_from_string",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_button_string",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_guid",
          "qualifiers": "const",
          "description": "Returns a SDL2 compatible device guid on platforms that use gamepad remapping. Returns \"Default Gamepad\" otherwise.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_name",
          "description": "Returns the name of the joypad at the specified device index",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_vibration_duration",
          "description": "Returns the duration of the current vibration effect in seconds.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_vibration_strength",
          "description": "Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_last_mouse_speed",
          "qualifiers": "const",
          "description": "Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_magnetometer",
          "qualifiers": "const",
          "description": "If the device has a magnetometer, this will return the magnetic field strength in micro-Tesla for all axes.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_mouse_button_mask",
          "qualifiers": "const",
          "description": "Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time the bits are added together.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mouse_mode",
          "qualifiers": "const",
          "description": "Return the mouse mode. See the constants for more information.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_action_just_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] when you start pressing the action event.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_just_released",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] when you stop pressing the action event.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if you are pressing the action event.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_joy_button_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if you are pressing the joypad button. (see [code]JOY_*[/code] constants in [@GlobalScope])",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_joy_known",
          "description": "Returns [code]true[/code] if the system knows the specified device. This means that it sets all button and axis indices exactly as defined in the [code]JOY_*[/code] constants (see [@GlobalScope]). Unknown joypads are not expected to match these constants, but you can still retrieve events from them.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_key_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if you are pressing the key. You can pass [code]KEY_*[/code], which are pre-defined constants listed in [@GlobalScope].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "scancode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_mouse_button_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if you are pressing the mouse button. You can pass [code]BUTTON_*[/code], which are pre-defined constants listed in [@GlobalScope].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joy_connection_changed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "connected",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "guid",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "parse_input_event",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_joy_mapping",
          "description": "Removes all mappings from the internal db that match the given uid.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "guid",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_mouse_cursor",
          "description": "Set a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified. See enum [code]CURSOR_*[/code] for the list of shapes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Resource",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "int",
              "enum": "Input.CursorShape",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "hotspot",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "set_mouse_mode",
          "description": "Set the mouse mode. See the constants for more information.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Input.MouseMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "start_joy_vibration",
          "description": "Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. weak_magnitude is the strength of the weak motor (between 0 and 1) and strong_magnitude is the strength of the strong motor (between 0 and 1). duration is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).\n\t\t\t\tNote that not every hardware is compatible with long effect durations, it is recommended to restart an effect if in need to play it for more than a few seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weak_magnitude",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "strong_magnitude",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "duration",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "stop_joy_vibration",
          "description": "Stops the vibration of the joypad.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "warp_mouse_position",
          "description": "Sets the mouse position to the specified vector.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "joy_connection_changed",
          "description": "Emitted when a joypad device has been connected or disconnected",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "connected",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MOUSE_MODE_VISIBLE",
          "value": "0",
          "enum": "MouseMode",
          "description": "Makes the mouse cursor visible if it is hidden."
        },
        {
          "name": "MOUSE_MODE_HIDDEN",
          "value": "1",
          "enum": "MouseMode",
          "description": "Makes the mouse cursor hidden if it is visible."
        },
        {
          "name": "MOUSE_MODE_CAPTURED",
          "value": "2",
          "enum": "MouseMode",
          "description": "Captures the mouse. The mouse will be hidden and unable to leave the game window. But it will still register movement and mouse button presses."
        },
        {
          "name": "MOUSE_MODE_CONFINED",
          "value": "3",
          "enum": "MouseMode",
          "description": ""
        },
        {
          "name": "CURSOR_ARROW",
          "value": "0",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_IBEAM",
          "value": "1",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_POINTING_HAND",
          "value": "2",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_CROSS",
          "value": "3",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_WAIT",
          "value": "4",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_BUSY",
          "value": "5",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_DRAG",
          "value": "6",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_CAN_DROP",
          "value": "7",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_FORBIDDEN",
          "value": "8",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_VSIZE",
          "value": "9",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_HSIZE",
          "value": "10",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_BDIAGSIZE",
          "value": "11",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_FDIAGSIZE",
          "value": "12",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_MOVE",
          "value": "13",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_VSPLIT",
          "value": "14",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_HSPLIT",
          "value": "15",
          "enum": "CursorShape",
          "description": ""
        },
        {
          "name": "CURSOR_HELP",
          "value": "16",
          "enum": "CursorShape",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamPlayer2D": {
      "name": "AudioStreamPlayer2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Plays audio in 2D.",
      "description": "Plays audio that dampens with distance from screen center.",
      "methods": [
        {
          "name": "get_playback_position",
          "description": "Returns the position in the [AudioStream].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Plays the audio from the given position 'from_position', in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_position",
              "type": "float",
              "default_value": "0.0"
            }
          ]
        },
        {
          "name": "seek",
          "description": "Sets the position from which audio will be played, in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stops the audio.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "finished",
          "description": "Emitted when the audio stops playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "area_mask",
          "type": "int",
          "setter": "set_area_mask",
          "getter": "get_area_mask",
          "description": "Areas in which this sound plays."
        },
        {
          "name": "attenuation",
          "type": "float",
          "setter": "set_attenuation",
          "getter": "get_attenuation",
          "description": "Dampens audio over distance with this as an exponent."
        },
        {
          "name": "autoplay",
          "type": "bool",
          "setter": "set_autoplay",
          "getter": "is_autoplay_enabled",
          "description": "If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code]."
        },
        {
          "name": "bus",
          "type": "String",
          "setter": "set_bus",
          "getter": "get_bus",
          "description": "Bus on which this audio is playing."
        },
        {
          "name": "max_distance",
          "type": "float",
          "setter": "set_max_distance",
          "getter": "get_max_distance",
          "description": "Maximum distance from which audio is still hearable."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "is_playing",
          "description": "If [code]true[/code] audio is playing."
        },
        {
          "name": "stream",
          "type": "AudioStream",
          "setter": "set_stream",
          "getter": "get_stream",
          "description": "The [AudioStream] object to be played."
        },
        {
          "name": "volume_db",
          "type": "float",
          "setter": "set_volume_db",
          "getter": "get_volume_db",
          "description": "Base volume without dampening."
        }
      ],
      "theme_properties": []
    },
    "GodotSharp": {
      "name": "GodotSharp",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "attach_thread",
          "description": "Attaches the current thread to the mono runtime.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "detach_thread",
          "description": "Detaches the current thread from the mono runtime.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_domain_loaded",
          "description": "Returns whether the scripts domain is loaded.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_finalizing_domain",
          "description": "Returns whether the scripts domain is being finalized.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualInstance": {
      "name": "VisualInstance",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_aabb",
          "qualifiers": "const",
          "description": "Returns the [AABB] (also known as the bounding box) for this VisualInstance.",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "get_transformed_aabb",
          "qualifiers": "const",
          "description": "Returns the transformed [AABB] (also known as the bounding box) for this VisualInstance.\n\t\t\t\tTransformed in this case means the [AABB] plus the position, rotation, and scale of the [Spatial]s [Transform]",
          "return_type": "AABB",
          "arguments": []
        },
        {
          "name": "set_base",
          "description": "Sets the base of the VisualInstance, which changes how the engine handles the VisualInstance under the hood.\n\t\t\t\tIt is recommended to only use set_base if you know what you're doing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base",
              "type": "RID",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "layers",
          "type": "int",
          "setter": "set_layer_mask",
          "getter": "get_layer_mask",
          "description": "The render layer(s) this VisualInstance is drawn on.\n\t\t\tThis object will only be visible for [Camera]s whose cull mask includes the render object this VisualInstance is set to."
        }
      ],
      "theme_properties": []
    },
    "VisibilityEnabler2D": {
      "name": "VisibilityEnabler2D",
      "inherits": "VisibilityNotifier2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Enable certain nodes only when visible.",
      "description": "The VisibilityEnabler2D will disable [RigidBody2D], [AnimationPlayer], and other nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler2D itself.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "ENABLER_PAUSE_ANIMATIONS",
          "value": "0",
          "enum": "Enabler",
          "description": "This enabler will pause [AnimationPlayer] nodes."
        },
        {
          "name": "ENABLER_FREEZE_BODIES",
          "value": "1",
          "enum": "Enabler",
          "description": "This enabler will freeze [RigidBody2D] nodes."
        },
        {
          "name": "ENABLER_PAUSE_PARTICLES",
          "value": "2",
          "enum": "Enabler",
          "description": "This enabler will stop [Particles2D] nodes."
        },
        {
          "name": "ENABLER_PARENT_PROCESS",
          "value": "3",
          "enum": "Enabler",
          "description": "This enabler will stop the parent's _process function."
        },
        {
          "name": "ENABLER_PARENT_PHYSICS_PROCESS",
          "value": "4",
          "enum": "Enabler",
          "description": "This enabler will stop the parent's _physics_process function."
        },
        {
          "name": "ENABLER_PAUSE_ANIMATED_SPRITES",
          "value": "5",
          "enum": "Enabler",
          "description": ""
        },
        {
          "name": "ENABLER_MAX",
          "value": "6",
          "enum": "Enabler",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "freeze_bodies",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "pause_animated_sprites",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "pause_animations",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "pause_particles",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "physics_process_parent",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "process_parent",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PhysicsShapeQueryResult": {
      "name": "PhysicsShapeQueryResult",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Result of a shape query in Physics2DServer.",
      "description": "",
      "methods": [
        {
          "name": "get_result_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_result_object",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptSequence": {
      "name": "VisualScriptSequence",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Executes a series of Sequence ports.",
      "description": "Steps through a series of one or more output Sequence ports. The [code]current[/code] data port outputs the currently executing item.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence: [code]in order[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence: [code]1[/code]\n\t\t- Sequence: [code]2 - n[/code] (optional)\n\t\t- Data (int): [code]current[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "steps",
          "type": "int",
          "setter": "set_steps",
          "getter": "get_steps",
          "description": "The number of steps in the sequence."
        }
      ],
      "theme_properties": []
    },
    "InterpolatedCamera": {
      "name": "InterpolatedCamera",
      "inherits": "Camera",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "set_target",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_interpolation_enabled",
          "getter": "is_interpolation_enabled",
          "description": ""
        },
        {
          "name": "speed",
          "type": "float",
          "setter": "set_speed",
          "getter": "get_speed",
          "description": ""
        },
        {
          "name": "target",
          "type": "NodePath",
          "setter": "set_target_path",
          "getter": "get_target_path",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "BoxContainer": {
      "name": "BoxContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for box containers.",
      "description": "Arranges child controls vertically or horizontally, and rearranges the controls automatically when their minimum size changes.",
      "methods": [
        {
          "name": "add_spacer",
          "description": "Adds a control to the box as a spacer. If [code]true[/code], [i]begin[/i] will insert the spacer control in front of other children.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "begin",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ALIGN_BEGIN",
          "value": "0",
          "enum": "AlignMode",
          "description": "Aligns children with the beginning of the container."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "enum": "AlignMode",
          "description": "Aligns children with the center of the container."
        },
        {
          "name": "ALIGN_END",
          "value": "2",
          "enum": "AlignMode",
          "description": "Aligns children with the end of the container."
        }
      ],
      "properties": [
        {
          "name": "alignment",
          "type": "int",
          "setter": "set_alignment",
          "getter": "get_alignment",
          "enum": "BoxContainer.AlignMode",
          "description": "The alignment of the container's children (must be one of ALIGN_BEGIN, ALIGN_CENTER, or ALIGN_END)."
        }
      ],
      "theme_properties": []
    },
    "UndoRedo": {
      "name": "UndoRedo",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Helper to manage UndoRedo in the editor or custom tools.",
      "description": "Helper to manage UndoRedo in the editor or custom tools. It works by storing calls to functions in both 'do' an 'undo' lists.\n\t\tCommon behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.",
      "methods": [
        {
          "name": "add_do_method",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_do_property",
          "description": "Set a property with a custom value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_do_reference",
          "description": "Add a 'do' reference that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_undo_method",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_undo_property",
          "description": "Undo setting of a property with a custom value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_undo_reference",
          "description": "Add an 'undo' reference that will be erased if the 'undo' history is lost. This is useful mostly for nodes removed with the 'do' call (not the 'undo' call!).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_history",
          "description": "Clear the undo/redo history and associated references.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit_action",
          "description": "Commit the action. All 'do' methods/properties are called/set when this function is called.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_action",
          "description": "Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property] and [method add_undo_property].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "merge_mode",
              "type": "int",
              "enum": "UndoRedo.MergeMode",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_current_action_name",
          "qualifiers": "const",
          "description": "Get the name of the current action.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_version",
          "qualifiers": "const",
          "description": "Get the version, each time a new action is committed, the version number of the UndoRedo is increased automatically.\n\t\t\t\tThis is useful mostly to check if something changed from a saved version.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "redo",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "undo",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MERGE_DISABLE",
          "value": "0",
          "enum": "MergeMode",
          "description": ""
        },
        {
          "name": "MERGE_ENDS",
          "value": "1",
          "enum": "MergeMode",
          "description": ""
        },
        {
          "name": "MERGE_ALL",
          "value": "2",
          "enum": "MergeMode",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectDistortion": {
      "name": "AudioEffectDistortion",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a Distortion audio effect to an Audio bus.\n\t\tModify the sound to make it dirty.",
      "description": "Modify the sound and make it dirty. Different types are available : clip, tan, lofi (bit crushing), overdrive, or waveshape.\n\t\tBy distorting the waveform the frequency content change, which will often make the sound \"crunchy\" or \"abrasive\". For games, it can simulate sound coming from some saturated device or speaker very efficiently.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "MODE_CLIP",
          "value": "0",
          "enum": "Mode",
          "description": "Digital distortion effect which cuts off peaks at the top and bottom of the waveform."
        },
        {
          "name": "MODE_ATAN",
          "value": "1",
          "enum": "Mode",
          "description": ""
        },
        {
          "name": "MODE_LOFI",
          "value": "2",
          "enum": "Mode",
          "description": "Low-resolution digital distortion effect. You can use it to emulate the sound of early digital audio devices."
        },
        {
          "name": "MODE_OVERDRIVE",
          "value": "3",
          "enum": "Mode",
          "description": "Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers."
        },
        {
          "name": "MODE_WAVESHAPE",
          "value": "4",
          "enum": "Mode",
          "description": "Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound."
        }
      ],
      "properties": [
        {
          "name": "drive",
          "type": "float",
          "setter": "set_drive",
          "getter": "get_drive",
          "description": "Distortion power. Value can range from 0 to 1. Default value: [code]0[/code]."
        },
        {
          "name": "keep_hf_hz",
          "type": "float",
          "setter": "set_keep_hf_hz",
          "getter": "get_keep_hf_hz",
          "description": "High-pass filter. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000. Default value: [code]16000[/code]."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "AudioEffectDistortion.Mode",
          "description": "Distortion type. Default value: [code]MODE_CLIP[/code]."
        },
        {
          "name": "post_gain",
          "type": "float",
          "setter": "set_post_gain",
          "getter": "get_post_gain",
          "description": "Increases or decreases the volume after the effect. Value can range from -80 to 24. Default value: [code]0[/code]."
        },
        {
          "name": "pre_gain",
          "type": "float",
          "setter": "set_pre_gain",
          "getter": "get_pre_gain",
          "description": "Increases or decreases the volume before the effect. Value can range from -60 to 60. Default value: [code]0[/code]."
        }
      ],
      "theme_properties": []
    },
    "TriangleMesh": {
      "name": "TriangleMesh",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventMagnifyGesture": {
      "name": "InputEventMagnifyGesture",
      "inherits": "InputEventGesture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "factor",
          "type": "float",
          "setter": "set_factor",
          "getter": "get_factor",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "MarginContainer": {
      "name": "MarginContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Simple margin container.",
      "description": "Simple margin container. Adds a left margin to anything contained.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "margin_bottom",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin_left",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin_right",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin_top",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Path2D": {
      "name": "Path2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Contains a [Curve2D] path for [PathFollow2D] nodes to follow.",
      "description": "Can have [PathFollow2D] child-nodes moving along the [Curve2D]. See [PathFollow2D] for more information on this usage.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "curve",
          "type": "Curve2D",
          "setter": "set_curve",
          "getter": "get_curve",
          "description": "A [Curve2D] describing the path."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptYieldSignal": {
      "name": "VisualScriptYieldSignal",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "CALL_MODE_SELF",
          "value": "0",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_NODE_PATH",
          "value": "1",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_INSTANCE",
          "value": "2",
          "enum": "CallMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        },
        {
          "name": "call_mode",
          "type": "int",
          "setter": "set_call_mode",
          "getter": "get_call_mode",
          "enum": "VisualScriptYieldSignal.CallMode",
          "description": ""
        },
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_base_path",
          "getter": "get_base_path",
          "description": ""
        },
        {
          "name": "signal",
          "type": "String",
          "setter": "set_signal",
          "getter": "get_signal",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "KinematicBody2D": {
      "name": "KinematicBody2D",
      "inherits": "PhysicsBody2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Kinematic body 2D node.",
      "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:\n\t\tSimulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\tKinematic Characters: KinematicBody2D also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.",
      "methods": [
        {
          "name": "get_floor_velocity",
          "qualifiers": "const",
          "description": "Returns the velocity of the floor. Only updates when calling [method move_and_slide].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_slide_collision",
          "description": "Returns a [KinematicCollision2D], which contains information about a collision that occurred during the last [method move_and_slide] call. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count] - 1).",
          "return_type": "KinematicCollision2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "slide_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slide_count",
          "qualifiers": "const",
          "description": "Returns the number of times the body collided and changed direction during the last call to [method move_and_slide].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_on_ceiling",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on the ceiling. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_on_floor",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on the floor. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_on_wall",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on a wall. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "move_and_collide",
          "description": "Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision2D], which contains information about the collision.",
          "return_type": "KinematicCollision2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rel_vec",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_and_slide",
          "description": "Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [code]KinematicBody2D[/code] or [RigidBody2D], it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.\n\t\t\t\t[code]linear_velocity[/code] is a value in pixels per second. Unlike in for example [method move_and_collide], you should [i]not[/i] multiply it with [code]delta[/code] — this is done by the method.\n\t\t\t\t[code]floor_normal[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector2(0, 0)[/code], everything is considered a wall. This is useful for topdown games.\n\t\t\t\tIf the body is standing on a slope and the horizontal speed (relative to the floor's speed) goes below [code]slope_stop_min_velocity[/code], the body will stop completely. This prevents the body from sliding down slopes when you include gravity in [code]linear_velocity[/code]. When set to lower values, the body will not be able to stand still on steep slopes.\n\t\t\t\tIf the body collides, it will change direction a maximum of [code]max_bounces[/code] times before it stops.\n\t\t\t\t[code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.\n\t\t\t\tReturns the movement that remained when the body stopped. To get more detailed information about collisions that occurred, use [method get_slide_collision].",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_velocity",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "floor_normal",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            },
            {
              "index": "2",
              "name": "slope_stop_min_velocity",
              "type": "float",
              "default_value": "5"
            },
            {
              "index": "3",
              "name": "max_bounces",
              "type": "int",
              "default_value": "4"
            },
            {
              "index": "4",
              "name": "floor_max_angle",
              "type": "float",
              "default_value": "0.785398"
            }
          ]
        },
        {
          "name": "test_move",
          "description": "Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform2D], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rel_vec",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision/safe_margin",
          "type": "float",
          "setter": "set_safe_margin",
          "getter": "get_safe_margin",
          "description": "If the body is at least this close to another body, this body will consider them to be colliding."
        }
      ],
      "theme_properties": []
    },
    "Spatial": {
      "name": "Spatial",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Most basic 3D game object, parent of all 3D related nodes.",
      "description": "Most basic 3D game object, with a 3D [Transform] and visibility settings. All other 3D game objects inherit from Spatial. Use Spatial as a parent node to move, scale, rotate and show/hide children in a 3D project.\n\n\t\tAffine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the Spatial object is set as top level. Affine operations in this coordinate system correspond to direct affine operations on the Spatial's transform. The word local below refers to this coordinate system. The coordinate system that is attached to the Spatial object itself is referred to as object-local coordinate system.",
      "methods": [
        {
          "name": "get_parent_spatial",
          "qualifiers": "const",
          "description": "Returns the parent [code]Spatial[/code], or an empty [Object] if no parent exists or parent is not of type [code]Spatial[/code].",
          "return_type": "Spatial",
          "arguments": []
        },
        {
          "name": "get_world",
          "qualifiers": "const",
          "description": "Returns the current [World] resource this Spatial node is registered to.",
          "return_type": "World",
          "arguments": []
        },
        {
          "name": "global_rotate",
          "description": "Rotates the global (world) transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in global coordinate system.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "angle",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "global_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "global_translate",
          "description": "Moves the global (world) transformation by [Vector3] offset. The offset is in global coordinate system.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hide",
          "description": "Disables rendering of this node. Change Spatial Visible property to false.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_local_transform_notification_enabled",
          "qualifiers": "const",
          "description": "Returns whether node notifies about its local transformation changes. Spatial will not propagate this by default.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_set_as_toplevel",
          "qualifiers": "const",
          "description": "Returns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_transform_notification_enabled",
          "qualifiers": "const",
          "description": "Returns whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_visible_in_tree",
          "qualifiers": "const",
          "description": "Returns whether the node is visible, taking into consideration that its parents visibility.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "look_at",
          "description": "Rotates itself to point into direction of target position. Operations take place in global space.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "look_at_from_position",
          "description": "Moves the node to specified position and then rotates itself to point into direction of target position. Operations take place in global space.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "orthonormalize",
          "description": "Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's [Transform3D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotate",
          "description": "Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "angle",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_object_local",
          "description": "Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in object-local coordinate system.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "angle",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_x",
          "description": "Rotates the local transformation around the X axis by angle in radians",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angle",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_y",
          "description": "Rotates the local transformation around the Y axis by angle in radians.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angle",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_z",
          "description": "Rotates the local transformation around the Z axis by angle in radians.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angle",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scale_object_local",
          "description": "Scales the local transformation by given 3D scale factors in object-local coordinate system.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_as_toplevel",
          "description": "Makes the node ignore its parents transformations. Node transformations are only in global space.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_identity",
          "description": "Reset all transformations for this node. Set its [Transform3D] to identity matrix.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_ignore_transform_notification",
          "description": "Set whether the node ignores notification that its transformation (global or local) changed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_notify_local_transform",
          "description": "Set whether the node notifies about its local transformation changes. Spatial will not propagate this by default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_notify_transform",
          "description": "Set whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show",
          "description": "Enables rendering of this node. Change Spatial Visible property to \"True\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_global",
          "qualifiers": "const",
          "description": "Transforms [Vector3] \"local_point\" from this node's local space to world space.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "local_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_local",
          "qualifiers": "const",
          "description": "Transforms [Vector3] \"global_point\" from world space to this node's local space.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "global_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translate",
          "description": "Changes the node's position by given offset [Vector3].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translate_object_local",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_gizmo",
          "description": "Updates the [SpatialGizmo] of this node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "visibility_changed",
          "description": "Emitted when node visibility changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_TRANSFORM_CHANGED",
          "value": "29",
          "description": "Spatial nodes receives this notification when their global transform changes. This means that either the current or a parent node changed its transform.\n\t\t\tIn order for NOTIFICATION_TRANSFORM_CHANGED to work user first needs to ask for it, with set_notify_transform(true)."
        },
        {
          "name": "NOTIFICATION_ENTER_WORLD",
          "value": "41",
          "description": "Spatial nodes receives this notification when they are registered to new [World] resource."
        },
        {
          "name": "NOTIFICATION_EXIT_WORLD",
          "value": "42",
          "description": "Spatial nodes receives this notification when they are unregistered from current [World] resource."
        },
        {
          "name": "NOTIFICATION_VISIBILITY_CHANGED",
          "value": "43",
          "description": "Spatial nodes receives this notification when their visibility changes."
        }
      ],
      "properties": [
        {
          "name": "gizmo",
          "type": "SpatialGizmo",
          "setter": "set_gizmo",
          "getter": "get_gizmo",
          "description": "The SpatialGizmo for this node. Used for example in [EditorSpatialGizmo] as custom visualization and editing handles in Editor."
        },
        {
          "name": "global_transform",
          "type": "Transform",
          "setter": "set_global_transform",
          "getter": "get_global_transform",
          "description": "World space (global) [Transform] of this node."
        },
        {
          "name": "rotation",
          "type": "Vector3",
          "setter": "set_rotation",
          "getter": "get_rotation",
          "description": "Rotation part of the local transformation, specified in terms of YXZ-Euler angles in the format (X-angle, Y-angle, Z-angle), in radians.\n\n\t\t\tNote that in the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three indepdent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a [Vector3] data structure not because the rotation is a vector, but only because [Vector3] exists as a convenient data-structure to store 3 floating point numbers. Therefore, applying affine operations on the rotation \"vector\" is not meaningful."
        },
        {
          "name": "rotation_degrees",
          "type": "Vector3",
          "setter": "set_rotation_degrees",
          "getter": "get_rotation_degrees",
          "description": "Rotation part of the local transformation, specified in terms of YXZ-Euler angles in the format (X-angle, Y-angle, Z-angle), in degrees."
        },
        {
          "name": "scale",
          "type": "Vector3",
          "setter": "set_scale",
          "getter": "get_scale",
          "description": "Scale part of the local transformation."
        },
        {
          "name": "transform",
          "type": "Transform",
          "setter": "set_transform",
          "getter": "get_transform",
          "description": "Local space [Transform] of this node, with respect to the parent node."
        },
        {
          "name": "translation",
          "type": "Vector3",
          "setter": "set_translation",
          "getter": "get_translation",
          "description": "Local translation of this node."
        },
        {
          "name": "visible",
          "type": "bool",
          "setter": "set_visible",
          "getter": "is_visible",
          "description": "Visibility of this node. Toggles if this node is rendered."
        }
      ],
      "theme_properties": []
    },
    "ResourceLoader": {
      "name": "ResourceLoader",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Resource Loader.",
      "description": "Resource Loader. This is a static object accessible as [code]ResourceLoader[/code]. GDScript has a simplified load() function, though.",
      "methods": [
        {
          "name": "get_dependencies",
          "description": "",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_recognized_extensions_for_type",
          "description": "Return the list of recognized extensions for a resource type.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load",
          "description": "",
          "return_type": "Resource",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type_hint",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "2",
              "name": "p_no_cache",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "load_interactive",
          "description": "Load a resource interactively, the returned object allows to load with high granularity.",
          "return_type": "ResourceInteractiveLoader",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type_hint",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "set_abort_on_missing_resources",
          "description": "Change the behavior on missing sub-resources. Default is to abort load.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "abort",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ImageTexture": {
      "name": "ImageTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A [Texture] based on an [Image].",
      "description": "A [Texture] based on an [Image]. Can be created from an [Image] with [method create_from_image].",
      "methods": [
        {
          "name": "create",
          "description": "Create a new [code]ImageTexture[/code] with \"width\" and \"height\".\n\t\t\t\t\"format\" one of [Image].FORMAT_*.\n\t\t\t\t\"flags\" one or more of [Texture].FLAG_*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "create_from_image",
          "description": "Create a new [code]ImageTexture[/code] from an [Image] with \"flags\" from [Texture].FLAG_*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "Return the format of the [code]ImageTexture[/code], one of [Image].FORMAT_*.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "load",
          "description": "Load an [code]ImageTexture[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_data",
          "description": "Set the [Image] of this [code]ImageTexture[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size_override",
          "description": "Resizes the [code]ImageTexture[/code] to the specified dimensions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STORAGE_RAW",
          "value": "0",
          "enum": "Storage",
          "description": "[Image] data is stored raw and unaltered."
        },
        {
          "name": "STORAGE_COMPRESS_LOSSY",
          "value": "1",
          "enum": "Storage",
          "description": "[Image] data is compressed with a lossy algorithm. You can set the storage quality with [method set_lossy_storage_quality]."
        },
        {
          "name": "STORAGE_COMPRESS_LOSSLESS",
          "value": "2",
          "enum": "Storage",
          "description": "[Image] data is compressed with a lossless algorithm."
        }
      ],
      "properties": [
        {
          "name": "lossy_quality",
          "type": "float",
          "setter": "set_lossy_storage_quality",
          "getter": "get_lossy_storage_quality",
          "description": "The storage quality for [code]ImageTexture[/code].STORAGE_COMPRESS_LOSSY."
        },
        {
          "name": "storage",
          "type": "int",
          "setter": "set_storage",
          "getter": "get_storage",
          "enum": "ImageTexture.Storage",
          "description": "The storage type (raw, lossy, or compressed)."
        }
      ],
      "theme_properties": []
    },
    "Script": {
      "name": "Script",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A class stored as a resource.",
      "description": "A class stored as a resource. The script exends the functionality of all objects that instance it.\n\t\tThe 'new' method of a script subclass creates a new instance. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.",
      "methods": [
        {
          "name": "can_instance",
          "qualifiers": "const",
          "description": "Returns true if the script can be instanced.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_base_script",
          "qualifiers": "const",
          "description": "",
          "return_type": "Script",
          "arguments": []
        },
        {
          "name": "get_instance_base_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "has_script_signal",
          "qualifiers": "const",
          "description": "Returns true if the script, or a base class, defines a signal with the given name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "signal_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_source_code",
          "qualifiers": "const",
          "description": "Returns true if the script contains non-empty source code.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "instance_has",
          "qualifiers": "const",
          "description": "Returns true if 'base_object' is an instance of this script.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "base_object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_tool",
          "qualifiers": "const",
          "description": "Returns true if the script is a tool script. A tool script can run in the editor.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "reload",
          "description": "Reloads the script's class implementation. Returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keep_state",
              "type": "bool",
              "default_value": "false"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "source_code",
          "type": "String",
          "setter": "set_source_code",
          "getter": "get_source_code",
          "description": "The script source code, or an empty string if source code is not available. When set, does not reload the class implementation automatically."
        }
      ],
      "theme_properties": []
    },
    "PoolRealArray": {
      "name": "PoolRealArray",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Real Array.",
      "description": "Real Array. Array of floating point values. Can only contain floats. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolRealArray",
          "description": "Create from a generic array.",
          "return_type": "PoolRealArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [RealArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append an element at the end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the float at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorScenePostImport": {
      "name": "EditorScenePostImport",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "post_import",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "scene",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsBody2D": {
      "name": "PhysicsBody2D",
      "inherits": "CollisionObject2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for all objects affected by physics in 2D space.",
      "description": "PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it.",
      "methods": [
        {
          "name": "add_collision_exception_with",
          "description": "Adds a body to the list of bodies that this body can't collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_collision_exception_with",
          "description": "Removes a body from the list of bodies that this body can't collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "Set/clear individual bits on the layer mask. This makes getting a body in/out of only one layer easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The physics layers this area is in.\n\t\t\tCollidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.\n\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The physics layers this area can scan for collisions."
        },
        {
          "name": "layers",
          "type": "int",
          "setter": "_set_layers",
          "getter": "_get_layers",
          "description": "Both collision_layer and collision_mask. Returns collision_layer when accessed. Updates collision_layers and collision_mask when modified."
        }
      ],
      "theme_properties": []
    },
    "VideoStreamTheora": {
      "name": "VideoStreamTheora",
      "inherits": "VideoStream",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_file",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_file",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PoolVector3Array": {
      "name": "PoolVector3Array",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "An Array of Vector3.",
      "description": "An Array specifically designed to hold Vector3.",
      "methods": [
        {
          "name": "PoolVector3Array",
          "description": "Construct a new PoolVector3Array. Optionally, you can pass in an Array that will be converted.",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [code]PoolVector3Array[/code] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Insert a [Vector3] at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [Vector3] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RemoteTransform2D": {
      "name": "RemoteTransform2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "RemoteTransform2D leads the [Transform2D] of another [CanvasItem] derived Node in the scene.",
      "description": "RemoteTransform2D leads the [Transform2D] of another [CanvasItem] derived Node (called the remote node) in the scene.\n\t\tIt can be set to track another Node's position, rotation and/or scale. It can update using either global or local coordinates.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "remote_path",
          "type": "NodePath",
          "setter": "set_remote_node",
          "getter": "get_remote_node",
          "description": "The [NodePath] to the remote node, relative to the RemoteTransform2D's position in the scene."
        },
        {
          "name": "update_position",
          "type": "bool",
          "setter": "set_update_position",
          "getter": "get_update_position",
          "description": "If [code]true[/code] the remote node's position is tracked. Default value: [code]true[/code]."
        },
        {
          "name": "update_rotation",
          "type": "bool",
          "setter": "set_update_rotation",
          "getter": "get_update_rotation",
          "description": "If [code]true[/code] the remote node's rotation is tracked. Default value: [code]true[/code]."
        },
        {
          "name": "update_scale",
          "type": "bool",
          "setter": "set_update_scale",
          "getter": "get_update_scale",
          "description": "If [code]true[/code] the remote node's scale is tracked. Default value: [code]true[/code]."
        },
        {
          "name": "use_global_coordinates",
          "type": "bool",
          "setter": "set_use_global_coordinates",
          "getter": "get_use_global_coordinates",
          "description": "If [code]true[/code] global coordinates are used. If [code]false[/code] local coordinates are used. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": []
    },
    "VideoPlayer": {
      "name": "VideoPlayer",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Control to play video files.",
      "description": "This control has the ability to play video streams. The only format accepted is the OGV Theora, so any other format must be converted before using in a project.",
      "methods": [
        {
          "name": "get_stream_name",
          "qualifiers": "const",
          "description": "Get the name of the video stream.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_video_texture",
          "description": "Get the current frame of the video as a [Texture].",
          "return_type": "Texture",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Get whether or not the video is playing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Start the video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "stop",
          "description": "Stop the video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "audio_track",
          "type": "int",
          "setter": "set_audio_track",
          "getter": "get_audio_track",
          "description": ""
        },
        {
          "name": "autoplay",
          "type": "bool",
          "setter": "set_autoplay",
          "getter": "has_autoplay",
          "description": ""
        },
        {
          "name": "buffering_msec",
          "type": "int",
          "setter": "set_buffering_msec",
          "getter": "get_buffering_msec",
          "description": "The amount of milliseconds to store in buffer while playing."
        },
        {
          "name": "bus",
          "type": "String",
          "setter": "set_bus",
          "getter": "get_bus",
          "description": ""
        },
        {
          "name": "expand",
          "type": "bool",
          "setter": "set_expand",
          "getter": "has_expand",
          "description": ""
        },
        {
          "name": "paused",
          "type": "bool",
          "setter": "set_paused",
          "getter": "is_paused",
          "description": ""
        },
        {
          "name": "stream",
          "type": "VideoStream",
          "setter": "set_stream",
          "getter": "get_stream",
          "description": ""
        },
        {
          "name": "stream_position",
          "type": "float",
          "setter": "set_stream_position",
          "getter": "get_stream_position",
          "description": "The current position of the stream, in seconds."
        },
        {
          "name": "volume",
          "type": "float",
          "setter": "set_volume",
          "getter": "get_volume",
          "description": "The volume of the audio track as a linear value."
        },
        {
          "name": "volume_db",
          "type": "float",
          "setter": "set_volume_db",
          "getter": "get_volume_db",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "StreamPeerBuffer": {
      "name": "StreamPeerBuffer",
      "inherits": "StreamPeer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "duplicate",
          "qualifiers": "const",
          "description": "",
          "return_type": "StreamPeerBuffer",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "resize",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "data_array",
          "type": "PoolByteArray",
          "setter": "set_data_array",
          "getter": "get_data_array",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ClassDB": {
      "name": "ClassDB",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class information repository.",
      "description": "Provides access to metadata stored for every available class.",
      "methods": [
        {
          "name": "can_instance",
          "qualifiers": "const",
          "description": "Returns true if you can instance objects from the specified 'class', false in other case.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_exists",
          "qualifiers": "const",
          "description": "Returns whether the specified 'class' is available or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_category",
          "qualifiers": "const",
          "description": "Returns a category associated with the class for use in documentation and the Asset Library. Debug mode required.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_integer_constant",
          "qualifiers": "const",
          "description": "Returns the value of the integer constant 'name' of 'class' or its ancestry. Always returns 0 when the constant could not be found.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_integer_constant_list",
          "qualifiers": "const",
          "description": "Returns an array with the names all the integer constants of 'class' or its ancestry.",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_get_method_list",
          "qualifiers": "const",
          "description": "Returns an array with all the methods of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a [Dictionary] with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_get_property",
          "qualifiers": "const",
          "description": "Returns the value of 'property' of 'class' or its ancestry.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_property_list",
          "qualifiers": "const",
          "description": "Returns an array with all the properties of 'class' or its ancestry if 'no_inheritance' is false.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_get_signal",
          "qualifiers": "const",
          "description": "Returns the 'signal' data of 'class' or its ancestry. The returned value is a [Dictionary] with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_signal_list",
          "qualifiers": "const",
          "description": "Returns an array with all the signals of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a [Dictionary] as described in [class_get_signal].",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_has_integer_constant",
          "qualifiers": "const",
          "description": "Return whether 'class' or its ancestry has an integer constant called 'name' or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_has_method",
          "qualifiers": "const",
          "description": "Return whether 'class' (or its ancestry if 'no_inheritance' is false) has a method called 'method' or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_has_signal",
          "qualifiers": "const",
          "description": "Return whether 'class' or its ancestry has a signal called 'signal' or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_set_property",
          "qualifiers": "const",
          "description": "Sets 'property' value of 'class' to 'value'.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_class_list",
          "qualifiers": "const",
          "description": "Returns the names of all the classes available.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_inheriters_from_class",
          "qualifiers": "const",
          "description": "Returns the names of all the classes that directly or indirectly inherit from 'class'.",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_parent_class",
          "qualifiers": "const",
          "description": "Returns the parent class of 'class'.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance",
          "qualifiers": "const",
          "description": "Creates an instance of 'class'.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_class_enabled",
          "qualifiers": "const",
          "description": "Returns whether this class is enabled or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_parent_class",
          "qualifiers": "const",
          "description": "Returns whether 'inherits' is an ancestor of 'class' or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "inherits",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SphereMesh": {
      "name": "SphereMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class representing a spherical [PrimitiveMesh].",
      "description": "Class representing a spherical [PrimitiveMesh].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "Full height of the sphere. Defaults to 2.0."
        },
        {
          "name": "is_hemisphere",
          "type": "bool",
          "setter": "set_is_hemisphere",
          "getter": "get_is_hemisphere",
          "description": "Determines whether a full sphere or a hemisphere is created. Attention: To get a regular hemisphere the height and radius of the sphere have to equal. Defaults to false."
        },
        {
          "name": "radial_segments",
          "type": "int",
          "setter": "set_radial_segments",
          "getter": "get_radial_segments",
          "description": "Number of radial segments on the sphere. Defaults to 64."
        },
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "Radius of sphere. Defaults to 1.0."
        },
        {
          "name": "rings",
          "type": "int",
          "setter": "set_rings",
          "getter": "get_rings",
          "description": "Number of segments along the height of the sphere. Defaults to 32."
        }
      ],
      "theme_properties": []
    },
    "OccluderPolygon2D": {
      "name": "OccluderPolygon2D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Defines a 2D polygon for LightOccluder2D.",
      "description": "Editor facility that helps you draw a 2D polygon used as resource for [LightOccluder2D].",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "CULL_DISABLED",
          "value": "0",
          "enum": "CullMode",
          "description": "Culling mode for the occlusion. Disabled means no culling. See [member cull_mode]."
        },
        {
          "name": "CULL_CLOCKWISE",
          "value": "1",
          "enum": "CullMode",
          "description": "Culling mode for the occlusion. Sets the culling to be in clockwise direction. See [member cull_mode]."
        },
        {
          "name": "CULL_COUNTER_CLOCKWISE",
          "value": "2",
          "enum": "CullMode",
          "description": "Culling mode for the occlusion. Sets the culling to be in counter clockwise direction. See [member cull_mode]."
        }
      ],
      "properties": [
        {
          "name": "closed",
          "type": "bool",
          "setter": "set_closed",
          "getter": "is_closed",
          "description": "If [code]true[/code] closes the polygon. A closed OccluderPolygon2D occludes the light coming from any direction. An opened OccluderPolygon2D occludes the light only at its outline's direction. Default value [code]true[/code]."
        },
        {
          "name": "cull_mode",
          "type": "int",
          "setter": "set_cull_mode",
          "getter": "get_cull_mode",
          "enum": "OccluderPolygon2D.CullMode",
          "description": "Set the direction of the occlusion culling when not [code]CULL_DISABLED[/code]. Default value [code]DISABLED[/code]."
        },
        {
          "name": "polygon",
          "type": "PoolVector2Array",
          "setter": "set_polygon",
          "getter": "get_polygon",
          "description": "A [Vector2] array with the index for polygon's vertices positions."
        }
      ],
      "theme_properties": []
    },
    "TileMap": {
      "name": "TileMap",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Node for 2D tile-based maps.",
      "description": "Node for 2D tile-based maps. Tilemaps use a [TileSet] which contain a list of tiles (textures plus optional collision, navigation, and/or occluder shapes) which are used to create grid-based maps.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear all cells.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cell",
          "qualifiers": "const",
          "description": "Return the tile index of the referenced cell.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cellv",
          "qualifiers": "const",
          "description": "Return the tile index of the cell referenced by a Vector2.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_used_cells",
          "qualifiers": "const",
          "description": "Return an array of all cells containing a tile from the tileset (i.e. a tile index different from -1).",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_used_cells_by_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_used_rect",
          "description": "",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_cell_transposed",
          "qualifiers": "const",
          "description": "Return whether the referenced cell is transposed, i.e. the X and Y axes are swapped (mirroring with regard to the (1,1) vector).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_cell_x_flipped",
          "qualifiers": "const",
          "description": "Return whether the referenced cell is flipped over the X axis.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_cell_y_flipped",
          "qualifiers": "const",
          "description": "Return whether the referenced cell is flipped over the Y axis.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "map_to_world",
          "qualifiers": "const",
          "description": "Return the absolute world position corresponding to the tilemap (grid-based) coordinates given as an argument.\n\t\t\t\tOptionally, the tilemap's potential half offset can be ignored.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "map_position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ignore_half_ofs",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_cell",
          "description": "Set the tile index for the cell referenced by its grid-based X and Y coordinates.\n\t\t\t\tA tile index of -1 clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped over the X and Y coordinates, transposed, or be given autotile coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tile",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "flip_x",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "flip_y",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "6",
              "name": "autotile_coord",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "set_cellv",
          "description": "Set the tile index for the cell referenced by a Vector2 of grid-based coordinates.\n\t\t\t\tA tile index of -1 clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped over the X and Y axes or transposed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tile",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flip_x",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "flip_y",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_bitmask_area",
          "description": "Applies autotiling rules to the cell (and its adjacent cells) referenced by its grid-based X and Y coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_bitmask_region",
          "description": "Applies autotiling rules to the cells in the given region (specified by grid-based X and Y coordinates).\n\t\t\t\tCalling with invalid (or missing) parameters applies autotiling rules for the entire TileMap.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "world_to_map",
          "qualifiers": "const",
          "description": "Return the tilemap (grid-based) coordinates corresponding to the absolute world position given as an argument.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "world_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "settings_changed",
          "description": "Emitted when a tilemap setting has changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "INVALID_CELL",
          "value": "-1",
          "description": "Returned when a cell doesn't exist."
        },
        {
          "name": "MODE_SQUARE",
          "value": "0",
          "enum": "Mode",
          "description": "Orthogonal orientation mode."
        },
        {
          "name": "MODE_ISOMETRIC",
          "value": "1",
          "enum": "Mode",
          "description": "Isometric orientation mode."
        },
        {
          "name": "MODE_CUSTOM",
          "value": "2",
          "enum": "Mode",
          "description": "Custom orientation mode."
        },
        {
          "name": "HALF_OFFSET_X",
          "value": "0",
          "enum": "HalfOffset",
          "description": "Half offset on the X coordinate."
        },
        {
          "name": "HALF_OFFSET_Y",
          "value": "1",
          "enum": "HalfOffset",
          "description": "Half offset on the Y coordinate."
        },
        {
          "name": "HALF_OFFSET_DISABLED",
          "value": "2",
          "enum": "HalfOffset",
          "description": "Half offset disabled."
        },
        {
          "name": "TILE_ORIGIN_TOP_LEFT",
          "value": "0",
          "enum": "TileOrigin",
          "description": "Tile origin at its top-left corner."
        },
        {
          "name": "TILE_ORIGIN_CENTER",
          "value": "1",
          "enum": "TileOrigin",
          "description": "Tile origin at its center."
        },
        {
          "name": "TILE_ORIGIN_BOTTOM_LEFT",
          "value": "2",
          "enum": "TileOrigin",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "cell_clip_uv",
          "type": "bool",
          "setter": "set_clip_uv",
          "getter": "get_clip_uv",
          "description": ""
        },
        {
          "name": "cell_custom_transform",
          "type": "Transform2D",
          "setter": "set_custom_transform",
          "getter": "get_custom_transform",
          "description": "The custom [Transform2D] to be applied to the TileMap's cells."
        },
        {
          "name": "cell_half_offset",
          "type": "int",
          "setter": "set_half_offset",
          "getter": "get_half_offset",
          "enum": "TileMap.HalfOffset",
          "description": "Amount to offset alternating tiles. Uses HALF_OFFSET_* constants. Default value: HALF_OFFSET_DISABLED."
        },
        {
          "name": "cell_quadrant_size",
          "type": "int",
          "setter": "set_quadrant_size",
          "getter": "get_quadrant_size",
          "description": "The TileMap's quadrant size.  Optimizes drawing by batching, using chunks of this size. Default value: 16."
        },
        {
          "name": "cell_size",
          "type": "Vector2",
          "setter": "set_cell_size",
          "getter": "get_cell_size",
          "description": "The TileMap's cell size."
        },
        {
          "name": "cell_tile_origin",
          "type": "int",
          "setter": "set_tile_origin",
          "getter": "get_tile_origin",
          "enum": "TileMap.TileOrigin",
          "description": "Position for tile origin. Uses TILE_ORIGIN_* constants. Default value: TILE_ORIGIN_TOP_LEFT."
        },
        {
          "name": "cell_y_sort",
          "type": "bool",
          "setter": "set_y_sort_mode",
          "getter": "is_y_sort_mode_enabled",
          "description": "If [code]true[/code] the TileMap's children will be drawn in order of their Y coordinate. Default value: [code]false[/code]."
        },
        {
          "name": "collision_bounce",
          "type": "float",
          "setter": "set_collision_bounce",
          "getter": "get_collision_bounce",
          "description": "Bounce value for static body collisions (see [code]collision_use_kinematic[/code]). Default value: 0."
        },
        {
          "name": "collision_friction",
          "type": "float",
          "setter": "set_collision_friction",
          "getter": "get_collision_friction",
          "description": "Friction value for static body collisions (see [code]collision_use_kinematic[/code]). Default value: 1."
        },
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The collision layer(s) for all colliders in the TileMap."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The collision mask(s) for all colliders in the TileMap."
        },
        {
          "name": "collision_use_kinematic",
          "type": "bool",
          "setter": "set_collision_use_kinematic",
          "getter": "get_collision_use_kinematic",
          "description": "If [code]true[/code] TileMap collisions will be handled as a kinematic body. If [code]false[/code] collisions will be handled as static body. Default value: [code]false[/code]."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "TileMap.Mode",
          "description": "The TileMap orientation mode. Uses MODE_* constants. Default value: MODE_SQUARE."
        },
        {
          "name": "occluder_light_mask",
          "type": "int",
          "setter": "set_occluder_light_mask",
          "getter": "get_occluder_light_mask",
          "description": "The light mask assigned to all light occluders in the TileMap.  The TileSet's light occluders will cast shadows only from Light2D(s) that have the same light mask(s)."
        },
        {
          "name": "tile_set",
          "type": "TileSet",
          "setter": "set_tileset",
          "getter": "get_tileset",
          "description": "The assigned [TileSet]."
        }
      ],
      "theme_properties": []
    },
    "PoolIntArray": {
      "name": "PoolIntArray",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Integer Array.",
      "description": "Integer Array. Contains integers. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolIntArray",
          "description": "Create from a generic array.",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [code]PoolIntArray[/code] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new int at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append a value to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the int at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the array size.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptEngineSingleton": {
      "name": "VisualScriptEngineSingleton",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A Visual Script node returning a singleton from [@GlobalScope]",
      "description": "A Visual Script node returning a singleton from [@GlobalScope]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "constant",
          "type": "String",
          "setter": "set_singleton",
          "getter": "get_singleton",
          "description": "The singleton's name."
        }
      ],
      "theme_properties": []
    },
    "ScriptEditor": {
      "name": "ScriptEditor",
      "inherits": "PanelContainer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "can_drop_data_fw",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "drop_data_fw",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_script",
          "description": "Returns a [Script] that is currently active in editor.",
          "return_type": "Script",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_drag_data_fw",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_open_scripts",
          "qualifiers": "const",
          "description": "Returns an array with all [Script] objects which are currently open in editor.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "open_script_create_dialog",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "base_path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "editor_script_changed",
          "description": "Emitted when user changed active script. Argument is a freshly activated [Script].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "script",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "script_close",
          "description": "Emitted when editor is about to close the active script. Argument is a [Script] that is going to be closed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "script",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CapsuleShape": {
      "name": "CapsuleShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Capsule shape for collisions.",
      "description": "Capsule shape for collisions.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "The capsule's height."
        },
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "The capsule's radius."
        }
      ],
      "theme_properties": []
    },
    "Physics2DDirectBodyStateSW": {
      "name": "Physics2DDirectBodyStateSW",
      "inherits": "Physics2DDirectBodyState",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Software implementation of [Physics2DDirectBodyState].",
      "description": "Software implementation of [Physics2DDirectBodyState]. This object exposes no new methods or properties and should not be used, as [Physics2DDirectBodyState] selects the best implementation available.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptCustomNode": {
      "name": "VisualScriptCustomNode",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A scripted Visual Script node.",
      "description": "A custom Visual Script node which can be scripted in powerful ways.",
      "methods": [
        {
          "name": "_get_caption",
          "qualifiers": "virtual",
          "description": "Return the node's title.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "_get_category",
          "qualifiers": "virtual",
          "description": "Return the node's category.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "_get_input_value_port_count",
          "qualifiers": "virtual",
          "description": "Return the count of input value ports.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "_get_input_value_port_name",
          "qualifiers": "virtual",
          "description": "Return the specified input port's name.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_input_value_port_type",
          "qualifiers": "virtual",
          "description": "Return the specified input port's type. See the TYPE_* enum in [@GlobalScope].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_output_sequence_port_count",
          "qualifiers": "virtual",
          "description": "Return the amount of output [b]sequence[/b] ports.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "_get_output_sequence_port_text",
          "qualifiers": "virtual",
          "description": "Return the specified [b]sequence[/b] output's name.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_output_value_port_count",
          "qualifiers": "virtual",
          "description": "Return the amount of output value ports.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "_get_output_value_port_name",
          "qualifiers": "virtual",
          "description": "Return the specified output's name.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_output_value_port_type",
          "qualifiers": "virtual",
          "description": "Return the specified output's type. See the TYPE_* enum in [@GlobalScope].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_text",
          "qualifiers": "virtual",
          "description": "Return the custom node's text, which is shown right next to the input [b]sequence[/b] port (if there is none, on the place that is usually taken by it).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "_get_working_memory_size",
          "qualifiers": "virtual",
          "description": "Return the size of the custom node's working memory. See [method _step] for more details.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "_has_input_sequence_port",
          "qualifiers": "virtual",
          "description": "Return whether the custom node has an input [b]sequence[/b] port.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "_step",
          "qualifiers": "virtual",
          "description": "Execute the custom node's logic, returning the index of the output sequence port to use or a [String] when there is an error.\n\t\t\t\t\n\t\t\t\tThe [code]inputs[/code] array contains the values of the input ports.\n\t\t\t\t[code]outputs[/code] is an array whose indices should be set to the respective outputs.\n\t\t\t\tThe [code]start_mode[/code] is usually [code]START_MODE_BEGIN_SEQUENCE[/code], unless you have used the STEP_* constants.\n\t\t\t\t[code]working_mem[/code] is an array which can be used to persist information between runs of the custom node.\n\t\t\t\t\n\t\t\t\tWhen returning, you can mask the returned value with one of the STEP_* constants.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "inputs",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "outputs",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "start_mode",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "working_mem",
              "type": "Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "START_MODE_BEGIN_SEQUENCE",
          "value": "0",
          "enum": "StartMode",
          "description": "The start mode used the first time when [method _step] is called."
        },
        {
          "name": "START_MODE_CONTINUE_SEQUENCE",
          "value": "1",
          "enum": "StartMode",
          "description": "The start mode used when [method _step] is called after coming back from a STEP_PUSH_STACK_BIT."
        },
        {
          "name": "START_MODE_RESUME_YIELD",
          "value": "2",
          "enum": "StartMode",
          "description": "The start mode used when [method _step] is called after resuming from STEP_YIELD_BIT."
        },
        {
          "name": "STEP_PUSH_STACK_BIT",
          "value": "16777216",
          "description": "Hint used by [method _step] to tell that control should return to it when there is no other node left to execute.\n\t\t\tThis is used by [VisualScriptCondition] to redirect the sequence to the \"Done\" port after the true/false branch has finished execution."
        },
        {
          "name": "STEP_GO_BACK_BIT",
          "value": "33554432",
          "description": "Hint used by [method _step] to tell that control should return back, either hitting a previous STEP_PUSH_STACK_BIT or exiting the function."
        },
        {
          "name": "STEP_NO_ADVANCE_BIT",
          "value": "67108864",
          "description": ""
        },
        {
          "name": "STEP_EXIT_FUNCTION_BIT",
          "value": "134217728",
          "description": "Hint used by [method _step] to tell that control should stop and exit the function."
        },
        {
          "name": "STEP_YIELD_BIT",
          "value": "268435456",
          "description": "Hint used by [method _step] to tell that the function should be yielded.\n\t\t\tUsing this requires you to have at least one working memory slot, which is used for the [VisualScriptFunctionState]."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectHighShelfFilter": {
      "name": "AudioEffectHighShelfFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "DynamicFont": {
      "name": "DynamicFont",
      "inherits": "Font",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "DynamicFont renders vector font files at runtime.",
      "description": "DynamicFont renders vector font files (such as TTF or OTF) dynamically at runtime instead of using a prerendered texture atlas like [BitmapFont]. This trades the faster loading time of [BitmapFont]s for the ability to change font parameters like size and spacing during runtime. [DynamicFontData] is used for referencing the font file paths.",
      "methods": [
        {
          "name": "add_fallback",
          "description": "Adds a fallback font.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "DynamicFontData",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_fallback",
          "qualifiers": "const",
          "description": "Returns the fallback font at index [code]idx[/code].",
          "return_type": "DynamicFontData",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_fallback_count",
          "qualifiers": "const",
          "description": "Returns the number of fallback fonts.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "remove_fallback",
          "description": "Removes the fallback font at index [code]idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fallback",
          "description": "Sets the fallback font at index [code]idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "DynamicFontData",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SPACING_TOP",
          "value": "0",
          "enum": "SpacingType",
          "description": "Spacing at the top."
        },
        {
          "name": "SPACING_BOTTOM",
          "value": "1",
          "enum": "SpacingType",
          "description": "Spacing at the bottom."
        },
        {
          "name": "SPACING_CHAR",
          "value": "2",
          "enum": "SpacingType",
          "description": "Character spacing."
        },
        {
          "name": "SPACING_SPACE",
          "value": "3",
          "enum": "SpacingType",
          "description": "Space spacing."
        }
      ],
      "properties": [
        {
          "name": "extra_spacing_bottom",
          "type": "int",
          "setter": "set_spacing",
          "getter": "get_spacing",
          "description": "Extra spacing at the bottom in pixels."
        },
        {
          "name": "extra_spacing_char",
          "type": "int",
          "setter": "set_spacing",
          "getter": "get_spacing",
          "description": "Extra character spacing in pixels."
        },
        {
          "name": "extra_spacing_space",
          "type": "int",
          "setter": "set_spacing",
          "getter": "get_spacing",
          "description": "Extra space spacing in pixels."
        },
        {
          "name": "extra_spacing_top",
          "type": "int",
          "setter": "set_spacing",
          "getter": "get_spacing",
          "description": "Extra spacing at the top in pixels."
        },
        {
          "name": "font_data",
          "type": "DynamicFontData",
          "setter": "set_font_data",
          "getter": "get_font_data",
          "description": "The font data."
        },
        {
          "name": "size",
          "type": "int",
          "setter": "set_size",
          "getter": "get_size",
          "description": "The font size."
        },
        {
          "name": "use_filter",
          "type": "bool",
          "setter": "set_use_filter",
          "getter": "get_use_filter",
          "description": "If [code]true[/code] filtering is used."
        },
        {
          "name": "use_mipmaps",
          "type": "bool",
          "setter": "set_use_mipmaps",
          "getter": "get_use_mipmaps",
          "description": "If [code]true[/code] mipmapping is used."
        }
      ],
      "theme_properties": []
    },
    "PackedDataContainer": {
      "name": "PackedDataContainer",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "pack",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "__data__",
          "type": "PoolByteArray",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AnimationTreePlayer": {
      "name": "AnimationTreePlayer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Animation Player that uses a node graph for blending Animations.",
      "description": "A node graph tool for blending multiple animations bound to an [AnimationPlayer]. Especially useful for animating characters or other skeleton-based rigs. It can combine several animations to form a desired pose.\n\t\tIt takes [Animation]s from an [AnimationPlayer] node and mixes them depending on the graph.",
      "methods": [
        {
          "name": "add_node",
          "description": "Adds a [code]type[/code] node to the graph with name [code]id[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "AnimationTreePlayer.NodeType",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "advance",
          "description": "Shifts position in the animation timeline. Delta is the time in seconds to shift.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_get_animation",
          "qualifiers": "const",
          "description": "Returns the [AnimationPlayer]'s [Animation] bound to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].",
          "return_type": "Animation",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_get_master_animation",
          "qualifiers": "const",
          "description": "Returns the name of the [member master_player]'s [Animation] bound to this animation node.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_set_animation",
          "description": "Binds a new [Animation] from the [member master_player] to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_set_filter_path",
          "description": "If [code]enable[/code] is [code]true[/code], the animation node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_set_master_animation",
          "description": "Binds the [Animation] named [code]source[/code] from [member master_player] to the animation node [code]id[/code]. Recalculates caches.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "source",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "are_nodes_connected",
          "qualifiers": "const",
          "description": "Returns whether node [code]id[/code] and [code]dst_id[/code] are connected at the specified slot.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dst_id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst_input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend2_node_get_amount",
          "qualifiers": "const",
          "description": "Returns the blend amount of a Blend2 node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend2_node_set_amount",
          "description": "Sets the blend amount of a Blend2 node given its name and value.\n\t\t\t\tA Blend2 Node blends two animations with the amount between 0 and 1.\n\t\t\t\tAt 0, Output is input a.\n\t\t\t\tTowards 1, the influence of a gets lessened, the influence of b gets raised.\n\t\t\t\tAt 1, Output is input b.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "blend",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend2_node_set_filter_path",
          "description": "If [code]enable[/code] is [code]true[/code], the blend2 node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend3_node_get_amount",
          "qualifiers": "const",
          "description": "Returns the blend amount of a Blend3 node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend3_node_set_amount",
          "description": "Sets the blend amount of a Blend3 node given its name and value.\n\t\t\t\tA Blend3 Node blends three animations with the amount between -1 and 1.\n\t\t\t\tAt -1, Output is input b-.\n\t\t\t\tFrom -1 to 0, the influence of b- gets lessened, the influence of a gets raised and the influence of b+ is 0.\n\t\t\t\tAt 0, Output is input a.\n\t\t\t\tFrom 0 to 1, the influence of a gets lessened, the influence of b+ gets raised and the influence of b+ is 0.\n\t\t\t\tAt 1, Output is input b+.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "blend",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend4_node_get_amount",
          "qualifiers": "const",
          "description": "Returns the blend amount of a Blend4 node given its name.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend4_node_set_amount",
          "description": "Sets the blend amount of a Blend4 node given its name and value.\n\t\t\t\tA Blend4 Node blends two pairs of animations.\n\t\t\t\tThe two pairs are blended like blend2 and then added together.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "blend",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "connect_nodes",
          "description": "Connects node [code]id[/code] to [code]dst_id[/code] at the specified input slot.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dst_id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst_input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect_nodes",
          "description": "Disconnects nodes connected to [code]id[/code] at the specified input slot.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dst_input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_list",
          "description": "Returns a [PoolStringArray] containing the name of all nodes.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mix_node_get_amount",
          "qualifiers": "const",
          "description": "Returns mix amount of a Mix node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mix_node_set_amount",
          "description": "Sets mix amount of a Mix node given its name and value.\n\t\t\t\tA Mix node adds input b to input a by a the amount given by ratio.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_exists",
          "qualifiers": "const",
          "description": "Check if a node exists (by name).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_input_count",
          "qualifiers": "const",
          "description": "Return the input count for a given node. Different types of nodes have different amount of inputs.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_input_source",
          "qualifiers": "const",
          "description": "Return the input source for a given node input.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_position",
          "qualifiers": "const",
          "description": "Returns position of a node in the graph given its name.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_type",
          "qualifiers": "const",
          "description": "Get the node type, will return from NODE_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_rename",
          "description": "Rename a node in the graph.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_set_position",
          "description": "Sets position of a node in the graph given its name and position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "screen_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_autorestart_delay",
          "qualifiers": "const",
          "description": "Returns autostart delay of a OneShot node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_autorestart_random_delay",
          "qualifiers": "const",
          "description": "Returns autostart random delay of a OneShot node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_fadein_time",
          "qualifiers": "const",
          "description": "Returns fade in time of a OneShot node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_fadeout_time",
          "qualifiers": "const",
          "description": "Returns fade out time of a OneShot node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_has_autorestart",
          "qualifiers": "const",
          "description": "Returns whether a OneShot node will auto restart given its name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_is_active",
          "qualifiers": "const",
          "description": "Returns whether a OneShot node is active given its name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_autorestart",
          "description": "Sets autorestart property of a OneShot node given its name and value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_autorestart_delay",
          "description": "Sets autorestart delay of a OneShot node given its name and value in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "delay_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_autorestart_random_delay",
          "description": "Sets autorestart random delay of a OneShot node given its name and value in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rand_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_fadein_time",
          "description": "Sets fade in time of a OneShot node given its name and value in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_fadeout_time",
          "description": "Sets fade out time of a OneShot node given its name and value in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_filter_path",
          "description": "If [code]enable[/code] is [code]true[/code], the oneshot node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_start",
          "description": "Starts a OneShot node given its name.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_stop",
          "description": "Stops the OneShot node with name [code]id[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "recompute_caches",
          "description": "Manually recalculates the cache of track information generated from animation nodes. Needed when external sources modify the animation nodes' state.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_node",
          "description": "Removes the animation node with name [code]id[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reset",
          "description": "Resets this [code]AnimationTreePlayer[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "timescale_node_get_scale",
          "qualifiers": "const",
          "description": "Returns time scale value of the TimeScale node with name [code]id[/code].",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "timescale_node_set_scale",
          "description": "Sets the time scale of the TimeScale node with name [code]id[/code] to [code]scale[/code].\n\t\t\t\tThe timescale node is used to speed [Animation]s up if the scale is above 1 or slow them down if it is below 1.\n\t\t\t\tIf applied after a blend or mix, affects all input animations to that blend or mix.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "timeseek_node_seek",
          "description": "Sets the time seek value of the TimeSeek node with name [code]id[/code] to [code]seconds[/code]\n\t\t\t\tThis functions as a seek in the [Animation] or the blend or mix of [Animation]s input in it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "seconds",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_delete_input",
          "description": "Deletes the input at [code]input_idx[/code] for the transition node with name [code]id[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_get_current",
          "qualifiers": "const",
          "description": "Returns the index of the currently evaluated input for the transition node with name [code]id[/code].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_get_input_count",
          "qualifiers": "const",
          "description": "Returns the number of inputs for the transition node with name [code]id[/code]. You can add inputs by rightclicking on the transition node.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_get_xfade_time",
          "qualifiers": "const",
          "description": "Returns the cross fade time for the transition node with name [code]id[/code].",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_has_input_auto_advance",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the input at [code]input_idx[/code] on transition node with name [code]id[/code] is set to automatically advance to the next input upon completion.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_current",
          "description": "The transition node with name [code]id[/code] sets its current input at [code]input_idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_input_auto_advance",
          "description": "The transition node with name [code]id[/code] advances to its next input automatically when the input at [code]input_idx[/code] completes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_input_count",
          "description": "Resizes the number of inputs available for the transition node with name [code]id[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "count",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_xfade_time",
          "description": "The transition node with name [code]id[/code] sets its cross fade time to [code]time_sec[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NODE_OUTPUT",
          "value": "0",
          "enum": "NodeType",
          "description": "Output node."
        },
        {
          "name": "NODE_ANIMATION",
          "value": "1",
          "enum": "NodeType",
          "description": "Animation node."
        },
        {
          "name": "NODE_ONESHOT",
          "value": "2",
          "enum": "NodeType",
          "description": "OneShot node."
        },
        {
          "name": "NODE_MIX",
          "value": "3",
          "enum": "NodeType",
          "description": "Mix node."
        },
        {
          "name": "NODE_BLEND2",
          "value": "4",
          "enum": "NodeType",
          "description": "Blend2 node."
        },
        {
          "name": "NODE_BLEND3",
          "value": "5",
          "enum": "NodeType",
          "description": "Blend3 node."
        },
        {
          "name": "NODE_BLEND4",
          "value": "6",
          "enum": "NodeType",
          "description": "Blend4 node."
        },
        {
          "name": "NODE_TIMESCALE",
          "value": "7",
          "enum": "NodeType",
          "description": "TimeScale node."
        },
        {
          "name": "NODE_TIMESEEK",
          "value": "8",
          "enum": "NodeType",
          "description": "TimeSeek node."
        },
        {
          "name": "NODE_TRANSITION",
          "value": "9",
          "enum": "NodeType",
          "description": "Transition node."
        },
        {
          "name": "ANIMATION_PROCESS_PHYSICS",
          "value": "0",
          "enum": "AnimationProcessMode",
          "description": "Process animation during the physics process. This is especially useful when animating physics bodies."
        },
        {
          "name": "ANIMATION_PROCESS_IDLE",
          "value": "1",
          "enum": "AnimationProcessMode",
          "description": "Process animation during the idle process."
        }
      ],
      "properties": [
        {
          "name": "active",
          "type": "bool",
          "setter": "set_active",
          "getter": "is_active",
          "description": "If [code]true[/code] the [code]AnimationTreePlayer[/code] is able to play animations. Default value: [code]false[/code]."
        },
        {
          "name": "base_path",
          "type": "NodePath",
          "setter": "set_base_path",
          "getter": "get_base_path",
          "description": "The node from which to relatively access other nodes. Default value: [code]\"..\"[/code].\n\t\t\tIt accesses the Bones, so it should point to the same Node the AnimationPlayer would point its Root Node at."
        },
        {
          "name": "master_player",
          "type": "NodePath",
          "setter": "set_master_player",
          "getter": "get_master_player",
          "description": "The path to the [AnimationPlayer] from which this [code]AnimationTreePlayer[/code] binds animations to animation nodes.\n\t\t\tOnce set, Animation nodes can be added to the AnimationTreePlayer."
        },
        {
          "name": "playback_process_mode",
          "type": "int",
          "setter": "set_animation_process_mode",
          "getter": "get_animation_process_mode",
          "enum": "AnimationTreePlayer.AnimationProcessMode",
          "description": "The thread in which to update animations. Default value: [enum ANIMATION_PROCESS_IDLE]."
        }
      ],
      "theme_properties": []
    },
    "AudioStreamPlayer": {
      "name": "AudioStreamPlayer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Plays back audio.",
      "description": "Plays background audio.",
      "methods": [
        {
          "name": "get_playback_position",
          "description": "Returns the position in the [AudioStream].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Plays the audio from the given position 'from_position', in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_position",
              "type": "float",
              "default_value": "0.0"
            }
          ]
        },
        {
          "name": "seek",
          "description": "Sets the position from which audio will be played, in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stops the audio.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "finished",
          "description": "Emitted when the audio stops playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "MIX_TARGET_STEREO",
          "value": "0",
          "enum": "MixTarget",
          "description": "The audio will be played only on the first channel."
        },
        {
          "name": "MIX_TARGET_SURROUND",
          "value": "1",
          "enum": "MixTarget",
          "description": "The audio will be played on all surround channels."
        },
        {
          "name": "MIX_TARGET_CENTER",
          "value": "2",
          "enum": "MixTarget",
          "description": "The audio will be played on the second channel, which is usually the center."
        }
      ],
      "properties": [
        {
          "name": "autoplay",
          "type": "bool",
          "setter": "set_autoplay",
          "getter": "is_autoplay_enabled",
          "description": "If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code]."
        },
        {
          "name": "bus",
          "type": "String",
          "setter": "set_bus",
          "getter": "get_bus",
          "description": "Bus on which this audio is playing."
        },
        {
          "name": "mix_target",
          "type": "int",
          "setter": "set_mix_target",
          "getter": "get_mix_target",
          "enum": "AudioStreamPlayer.MixTarget",
          "description": "If the audio configuration has more than two speakers, this sets the target channels. See [code]MIX_TARGET_*[/code] constants."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "is_playing",
          "description": "If [code]true[/code] audio is playing."
        },
        {
          "name": "stream",
          "type": "AudioStream",
          "setter": "set_stream",
          "getter": "get_stream",
          "description": "The [AudioStream] object to be played."
        },
        {
          "name": "volume_db",
          "type": "float",
          "setter": "set_volume_db",
          "getter": "get_volume_db",
          "description": "Volume of sound, in dB."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptDeconstruct": {
      "name": "VisualScriptDeconstruct",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A Visual Script node which deconstructs a base type instance into its parts.",
      "description": "A Visual Script node which deconstructs a base type instance into its parts.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "type",
          "type": "int",
          "setter": "set_deconstruct_type",
          "getter": "get_deconstruct_type",
          "enum": "Variant.Type",
          "description": "The type to deconstruct."
        }
      ],
      "theme_properties": []
    },
    "AudioBusLayout": {
      "name": "AudioBusLayout",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Stores information about the audiobusses.",
      "description": "Stores position, muting, solo, bypass, effects, effect position, volume, and the connections between busses. See [AudioServer] for usage.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NinePatchRect": {
      "name": "NinePatchRect",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Scalable texture-based frame that tiles the texture's centers and sides, but keeps the corners' original size. Perfect for panels and dialog boxes.",
      "description": "Better known as 9-slice panels, NinePatchRect produces clean panels of any size, based on a small texture. To do so, it splits the texture in a 3 by 3 grid. When you scale the node, it tiles the texture's sides horizontally or vertically, the center on both axes but it doesn't scale or tile the corners.",
      "methods": [],
      "signals": [
        {
          "name": "texture_changed",
          "description": "Fired when the node's texture changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "AXIS_STRETCH_MODE_STRETCH",
          "value": "0",
          "enum": "AxisStretchMode",
          "description": "Doesn't do anything at the time of writing. Default value for [code]axis_stretch_horizontal[/code] and [code]axis_stretch_vertical[/code]."
        },
        {
          "name": "AXIS_STRETCH_MODE_TILE",
          "value": "1",
          "enum": "AxisStretchMode",
          "description": "Doesn't do anything at the time of writing."
        },
        {
          "name": "AXIS_STRETCH_MODE_TILE_FIT",
          "value": "2",
          "enum": "AxisStretchMode",
          "description": "Doesn't do anything at the time of writing."
        }
      ],
      "properties": [
        {
          "name": "axis_stretch_horizontal",
          "type": "int",
          "setter": "set_h_axis_stretch_mode",
          "getter": "get_h_axis_stretch_mode",
          "enum": "NinePatchRect.AxisStretchMode",
          "description": "Doesn't do anything at the time of writing."
        },
        {
          "name": "axis_stretch_vertical",
          "type": "int",
          "setter": "set_v_axis_stretch_mode",
          "getter": "get_v_axis_stretch_mode",
          "enum": "NinePatchRect.AxisStretchMode",
          "description": "Doesn't do anything at the time of writing."
        },
        {
          "name": "draw_center",
          "type": "bool",
          "setter": "set_draw_center",
          "getter": "is_draw_center_enabled",
          "description": "If [code]true[/code], draw the panel's center. Else, only draw the 9-slice's borders. Default value: [code]true[/code]"
        },
        {
          "name": "patch_margin_bottom",
          "type": "int",
          "setter": "set_patch_margin",
          "getter": "get_patch_margin",
          "description": "The height of the 9-slice's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders."
        },
        {
          "name": "patch_margin_left",
          "type": "int",
          "setter": "set_patch_margin",
          "getter": "get_patch_margin",
          "description": "The height of the 9-slice's left column."
        },
        {
          "name": "patch_margin_right",
          "type": "int",
          "setter": "set_patch_margin",
          "getter": "get_patch_margin",
          "description": "The height of the 9-slice's right column."
        },
        {
          "name": "patch_margin_top",
          "type": "int",
          "setter": "set_patch_margin",
          "getter": "get_patch_margin",
          "description": "The height of the 9-slice's top row."
        },
        {
          "name": "region_rect",
          "type": "Rect2",
          "setter": "set_region_rect",
          "getter": "get_region_rect",
          "description": "Rectangular region of the texture to sample from. If you're working with an atlas, use this property to define the area the 9-slice should use. All other properties are relative to this one."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The node's texture resource."
        }
      ],
      "theme_properties": []
    },
    "ResourcePreloader": {
      "name": "ResourcePreloader",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Resource Preloader Node.",
      "description": "Resource Preloader Node. This node is used to preload sub-resources inside a scene, so when the scene is loaded all the resources are ready to use and be retrieved from here.",
      "methods": [
        {
          "name": "add_resource",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resource",
          "qualifiers": "const",
          "description": "Return the resource given a text-id.",
          "return_type": "Resource",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resource_list",
          "qualifiers": "const",
          "description": "Return the list of resources inside the preloader.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "has_resource",
          "qualifiers": "const",
          "description": "Return true if the preloader has a given resource.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_resource",
          "description": "Remove a resource from the preloader by text id.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_resource",
          "description": "Rename a resource inside the preloader, from a text-id to a new text-id.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "newname",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "BakedLightmapData": {
      "name": "BakedLightmapData",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_user",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "lightmap",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "instance",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_users",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_user_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_user_lightmap",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "user_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_user_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "user_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bounds",
          "type": "AABB",
          "setter": "set_bounds",
          "getter": "get_bounds",
          "description": ""
        },
        {
          "name": "cell_space_transform",
          "type": "Transform",
          "setter": "set_cell_space_transform",
          "getter": "get_cell_space_transform",
          "description": ""
        },
        {
          "name": "cell_subdiv",
          "type": "int",
          "setter": "set_cell_subdiv",
          "getter": "get_cell_subdiv",
          "description": ""
        },
        {
          "name": "energy",
          "type": "float",
          "setter": "set_energy",
          "getter": "get_energy",
          "description": ""
        },
        {
          "name": "octree",
          "type": "PoolByteArray",
          "setter": "set_octree",
          "getter": "get_octree",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptSelf": {
      "name": "VisualScriptSelf",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Outputs a reference to the current instance.",
      "description": "Provides a reference to the node running the visual script.\n\t\t[b]Input Ports:[/b]\n\t\tnone\n\t\t[b]Output Ports:[/b]\n\t\t- Data (object): [code]instance[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputDefault": {
      "name": "InputDefault",
      "inherits": "Input",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Default implementation of the [Input] class.",
      "description": "Default implementation of the [Input] class, used internally by the editor and games for default input management.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpriteBase3D": {
      "name": "SpriteBase3D",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "2D Sprite node in 3D environment.",
      "description": "A node that displays 2D texture information in a 3D environment.",
      "methods": [
        {
          "name": "get_item_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_TRANSPARENT",
          "value": "0",
          "enum": "DrawFlags",
          "description": "If set, the texture's transparency and the opacity are used to make those parts of the Sprite invisible."
        },
        {
          "name": "FLAG_SHADED",
          "value": "1",
          "enum": "DrawFlags",
          "description": "If set, the Light in the Environment has effects on the Sprite."
        },
        {
          "name": "FLAG_DOUBLE_SIDED",
          "value": "2",
          "enum": "DrawFlags",
          "description": "If set, texture can be seen from the back as well, if not, it is invisible when looking at it from behind."
        },
        {
          "name": "FLAG_MAX",
          "value": "3",
          "enum": "DrawFlags",
          "description": "Used internally to mark the end of the Flags section."
        },
        {
          "name": "ALPHA_CUT_DISABLED",
          "value": "0",
          "enum": "AlphaCutMode",
          "description": ""
        },
        {
          "name": "ALPHA_CUT_DISCARD",
          "value": "1",
          "enum": "AlphaCutMode",
          "description": ""
        },
        {
          "name": "ALPHA_CUT_OPAQUE_PREPASS",
          "value": "2",
          "enum": "AlphaCutMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "alpha_cut",
          "type": "int",
          "setter": "set_alpha_cut_mode",
          "getter": "get_alpha_cut_mode",
          "enum": "SpriteBase3D.AlphaCutMode",
          "description": ""
        },
        {
          "name": "axis",
          "type": "int",
          "setter": "set_axis",
          "getter": "get_axis",
          "enum": "Vector3.Axis",
          "description": "The direction in which the front of the texture faces."
        },
        {
          "name": "centered",
          "type": "bool",
          "setter": "set_centered",
          "getter": "is_centered",
          "description": "If [code]true[/code] texture will be centered. Default value: [code]true[/code]."
        },
        {
          "name": "double_sided",
          "type": "bool",
          "setter": "set_draw_flag",
          "getter": "get_draw_flag",
          "description": "If [code]true[/code] texture can be seen from the back as well, if [code]false[/code], it is invisible when looking at it from behind. Default value: [code]true[/code]."
        },
        {
          "name": "flip_h",
          "type": "bool",
          "setter": "set_flip_h",
          "getter": "is_flipped_h",
          "description": "If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code]."
        },
        {
          "name": "flip_v",
          "type": "bool",
          "setter": "set_flip_v",
          "getter": "is_flipped_v",
          "description": "If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code]."
        },
        {
          "name": "modulate",
          "type": "Color",
          "setter": "set_modulate",
          "getter": "get_modulate",
          "description": "A color value that gets multiplied on, could be used for mood-coloring or to simulate the color of light."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The texture's drawing offset."
        },
        {
          "name": "opacity",
          "type": "float",
          "setter": "set_opacity",
          "getter": "get_opacity",
          "description": "The objects visibility on a scale from [code]0[/code] fully invisible to [code]1[/code] fully visible."
        },
        {
          "name": "pixel_size",
          "type": "float",
          "setter": "set_pixel_size",
          "getter": "get_pixel_size",
          "description": "The size of one pixel's width on the Sprite to scale it in 3D."
        },
        {
          "name": "shaded",
          "type": "bool",
          "setter": "set_draw_flag",
          "getter": "get_draw_flag",
          "description": "If [code]true[/code] the [Light] in the [Environment] has effects on the Sprite. Default value: [code]false[/code]."
        },
        {
          "name": "transparent",
          "type": "bool",
          "setter": "set_draw_flag",
          "getter": "get_draw_flag",
          "description": "If [code]true[/code] the texture's transparency and the opacity are used to make those parts of the Sprite invisible. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": []
    },
    "ConcavePolygonShape2D": {
      "name": "ConcavePolygonShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Concave polygon 2D shape resource for physics.",
      "description": "Concave polygon 2D shape resource for physics. It is made out of segments and is very optimal for complex polygonal concave collisions. It is really not advised to use for [RigidBody2D] nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.\n\t\tThe main difference between a [ConvexPolygonShape2D] and a [code]ConcavePolygonShape2D[/code] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "segments",
          "type": "PoolVector2Array",
          "setter": "set_segments",
          "getter": "get_segments",
          "description": "The array of points that make up the [code]ConcavePolygonShape2D[/code]'s line segments."
        }
      ],
      "theme_properties": []
    },
    "EditorSpatialGizmo": {
      "name": "EditorSpatialGizmo",
      "inherits": "SpatialGizmo",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Custom gizmo for editing Spatial objects.",
      "description": "Custom gizmo that is used for providing custom visualization and editing (handles) for 3D Spatial objects. These are created by [method EditorPlugin.create_spatial_gizmo].",
      "methods": [
        {
          "name": "add_collision_segments",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_collision_triangles",
          "description": "Add collision triangles to the gizmo for picking. A [TriangleMesh] can be generated from a regular [Mesh] too. Call this function during [method redraw].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "triangles",
              "type": "TriangleMesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bounds",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_handles",
          "description": "Add a list of handles (points) which can be used to deform the object being edited.\n\t\t\t\tThere are virtual functions which will be called upon editing of these handles. Call this function during [method redraw].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "handles",
              "type": "PoolVector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "billboard",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "secondary",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_lines",
          "description": "Add lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this function during [method redraw].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lines",
              "type": "PoolVector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "Material",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "billboard",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_mesh",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "ArrayMesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "billboard",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "skeleton",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_unscaled_billboard",
          "description": "Add an unscaled billboard for visualization. Call this function during [method redraw].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "default_scale",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit_handle",
          "qualifiers": "virtual",
          "description": "Commit a handle being edited (handles must have been previously added by [method add_handles]).\n\t\t\t\tIf the cancel parameter is true, an option to restore the edited value to the original is provided.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "restore",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "cancel",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_handle_name",
          "qualifiers": "virtual",
          "description": "Get the name of an edited handle (handles must have been previously added by [method add_handles]).\n\t\t\t\tHandles can be named for reference to the user when editing.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_handle_value",
          "qualifiers": "virtual",
          "description": "Get actual value of a handle. This value can be anything and used for eventually undoing the motion when calling [method commit_handle]",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "redraw",
          "qualifiers": "virtual",
          "description": "This function is called when the Spatial this gizmo refers to changes (the [method Spatial.update_gizmo] is called).",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "set_handle",
          "qualifiers": "virtual",
          "description": "This function is used when the user drags a gizmo handle (previously added with [method add_handles]) in screen coordinates.\n\t\t\t\tThe [Camera] is also provided so screen coordinates can be converted to raycasts.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "camera",
              "type": "Camera",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_spatial_node",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "BoxShape": {
      "name": "BoxShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Box shape resource.",
      "description": "3D box shape that can be a child of a [PhysicsBody] or [Area].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "extents",
          "type": "Vector3",
          "setter": "set_extents",
          "getter": "get_extents",
          "description": "The shape's half extents."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectLowPassFilter": {
      "name": "AudioEffectLowPassFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a low pass filter to the Audio Bus.",
      "description": "Cuts frequencies higher than the [member cutoff_hz] and allows lower frequencies to pass.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PoolStringArray": {
      "name": "PoolStringArray",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "String Array.",
      "description": "String Array. Array of strings. Can only contain strings. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolStringArray",
          "description": "Create from a generic array.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [StringArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "join",
          "description": "Returns a [String] with each element of the array joined with the delimiter.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delimiter",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_back",
          "description": "Append a string element at end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [String] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptExpression": {
      "name": "VisualScriptExpression",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Joint": {
      "name": "Joint",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for all 3D joints",
      "description": "All 3D joints link two nodes, has a priority, and can decide if the two bodies of the nodes should be able to collide with each other",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision/exclude_nodes",
          "type": "bool",
          "setter": "set_exclude_nodes_from_collision",
          "getter": "get_exclude_nodes_from_collision",
          "description": "If [code]true[/code] the two bodies of the nodes are not able to collide with each other."
        },
        {
          "name": "nodes/node_a",
          "type": "NodePath",
          "setter": "set_node_a",
          "getter": "get_node_a",
          "description": "The [Node], the first side of the Joint attaches to."
        },
        {
          "name": "nodes/node_b",
          "type": "NodePath",
          "setter": "set_node_b",
          "getter": "get_node_b",
          "description": "The [Node], the second side of the Joint attaches to."
        },
        {
          "name": "solver/priority",
          "type": "int",
          "setter": "set_solver_priority",
          "getter": "get_solver_priority",
          "description": "The order in which the solver is executed compared to the other [Joints], the lower, the earlier."
        }
      ],
      "theme_properties": []
    },
    "PanelContainer": {
      "name": "PanelContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Panel container type.",
      "description": "Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "VisualScriptIndexSet": {
      "name": "VisualScriptIndexSet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AStar": {
      "name": "AStar",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "AStar class representation that uses vectors as edges.",
      "description": "A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently directed path between multiple points. It enjoys widespread use due to its performance and accuracy. Godot's A* implementation make use of vectors as points.\n\t\tYou must add points manually with [method AStar.add_point] and create segments manually with [method AStar.connect_points]. So you can test if there is a path between two points with the [method AStar.are_points_connected] function, get the list of existing ids in the found path with [method AStar.get_id_path], or the points list with [method AStar.get_point_path].",
      "methods": [
        {
          "name": "_compute_cost",
          "qualifiers": "virtual",
          "description": "Called when computing the cost between two connected points.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_estimate_cost",
          "qualifiers": "virtual",
          "description": "Called when estimating the cost between a point and the path's ending point.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_point",
          "description": "Adds a new point at the given position with the given identifier. The algorithm prefers points with lower [code]weight_scale[/code] to form a path. The [code]id[/code] must be 0 or larger, and the [code]weight_scale[/code] must be 1 or larger.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(1,0,0), 4) # Adds the point (1,0,0) with weight_scale=4 and id=1\n\t\t\t\t[/codeblock]\n\t\t\t\tIf there already exists a point for the given id, its position and weight scale are updated to the given values.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "weight_scale",
              "type": "float",
              "default_value": "1.0"
            }
          ]
        },
        {
          "name": "are_points_connected",
          "qualifiers": "const",
          "description": "Returns whether there is a connection/segment between the given points.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clears all the points and segments.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connect_points",
          "description": "Creates a segment between the given points.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(1,1,0))\n\t\t\t\tas.add_point(2, Vector3(0,5,0))\n\n\t\t\t\tas.connect_points(1, 2, false) # If bidirectional=false it's only possible to go from point 1 to point 2\n\t\t\t\t                               # and not from point 2 to point 1.\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "bidirectional",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "disconnect_points",
          "description": "Deletes the segment between the given points.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_available_point_id",
          "qualifiers": "const",
          "description": "Returns the next available point id with no point associated to it.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_closest_point",
          "qualifiers": "const",
          "description": "Returns the id of the closest point to [code]to_position[/code]. Returns -1 if there are no points in the points pool.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_position_in_segment",
          "qualifiers": "const",
          "description": "Returns the closest position to [code]to_position[/code] that resides inside a segment between two connected points.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(0,0,0))\n\t\t\t\tas.add_point(2, Vector3(0,5,0))\n\n\t\t\t\tas.connect_points(1, 2)\n\n\t\t\t\tvar res = as.get_closest_position_in_segment(Vector3(3,3,0)) # returns (0, 3, 0)\n\t\t\t\t[/codeblock]\n\t\t\t\tThe result is in the segment that goes from [code]y=0[/code] to [code]y=5[/code]. It's the closest position in the segment to the given point.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_id_path",
          "description": "Returns an array with the ids of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(0,0,0))\n\t\t\t\tas.add_point(2, Vector3(0,1,0), 1) # default weight is 1\n\t\t\t\tas.add_point(3, Vector3(1,1,0))\n\t\t\t\tas.add_point(4, Vector3(2,0,0))\n\n\t\t\t\tas.connect_points(1, 2, false)\n\t\t\t\tas.connect_points(2, 3, false)\n\t\t\t\tas.connect_points(4, 3, false)\n\t\t\t\tas.connect_points(1, 4, false)\n\t\t\t\tas.connect_points(5, 4, false)\n\n\t\t\t\tvar res = as.get_id_path(1, 3) # returns [1, 2, 3]\n\t\t\t\t[/codeblock]\n\t\t\t\tIf you change the 2nd point's weight to 3, then the result will be [code][1, 4, 3][/code] instead, because now even though the distance is longer, it's \"easier\" to get through point 4 than through point 2.",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_connections",
          "description": "Returns an array with the ids of the points that form the connect with the given point.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(0,0,0))\n\t\t\t\tas.add_point(2, Vector3(0,1,0))\n\t\t\t\tas.add_point(3, Vector3(1,1,0))\n\t\t\t\tas.add_point(4, Vector3(2,0,0))\n\n\t\t\t\tas.connect_points(1, 2, true)\n\t\t\t\tas.connect_points(1, 3, true)\n\n\t\t\t\tvar neighbors = as.get_point_connections(1) # returns [2, 3]\n\t\t\t\t[/codeblock]",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_path",
          "description": "Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "Returns the position of the point associated with the given id.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_weight_scale",
          "qualifiers": "const",
          "description": "Returns the weight scale of the point associated with the given id.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_points",
          "description": "Returns an array of all points.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "qualifiers": "const",
          "description": "Returns whether a point associated with the given id exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Removes the point associated with the given id from the points pool.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_position",
          "description": "Sets the position for the point with the given id.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_weight_scale",
          "description": "Sets the [code]weight_scale[/code] for the point with the given id.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weight_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ColorPickerButton": {
      "name": "ColorPickerButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Button that pops out a [ColorPicker]",
      "description": "Encapsulates a [ColorPicker] making it accesible by pressing a button, pressing the button will toggle the [ColorPicker] visibility",
      "methods": [
        {
          "name": "get_picker",
          "qualifiers": "const",
          "description": "Returns the [code]ColorPicker[/code] that this [code]ColorPickerButton[/code] toggles.",
          "return_type": "ColorPicker",
          "arguments": []
        },
        {
          "name": "get_popup",
          "qualifiers": "const",
          "description": "Returns the control's [PopupPanel] which allows you to connect to Popup Signals. This allows you to handle events when the ColorPicker is shown or hidden.",
          "return_type": "PopupPanel",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "color_changed",
          "description": "Emitted when the color changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_pick_color",
          "getter": "get_pick_color",
          "description": "The currently selected color."
        },
        {
          "name": "edit_alpha",
          "type": "bool",
          "setter": "set_edit_alpha",
          "getter": "is_editing_alpha",
          "description": "If [code]true[/code] the alpha channel in the displayed [ColorPicker] will be visible. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": [
        {
          "name": "bg",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "GridContainer": {
      "name": "GridContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Grid container used to arrange elements in a grid like layout",
      "description": "Grid container will arrange its children in a grid like structure, the grid columns are specified using the [method set_columns] method and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "columns",
          "type": "int",
          "setter": "set_columns",
          "getter": "get_columns",
          "description": "The number of columns in the [code]GridContainer[/code]. If modified, [code]GridContainer[/code] reorders its children to accommodate the new layout."
        }
      ],
      "theme_properties": [
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "PolygonPathFinder": {
      "name": "PolygonPathFinder",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "find_path",
          "description": "",
          "return_type": "PoolVector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bounds",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_closest_point",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_intersections",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_penalty",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_point_inside",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_penalty",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "penalty",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "setup",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "connections",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "LineShape2D": {
      "name": "LineShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Line shape for 2D collisions.",
      "description": "Line shape for 2D collisions. It works like a 2D plane and will not allow any body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "d",
          "type": "float",
          "setter": "set_d",
          "getter": "get_d",
          "description": "The line's distance from the origin."
        },
        {
          "name": "normal",
          "type": "Vector2",
          "setter": "set_normal",
          "getter": "get_normal",
          "description": "The line's normal."
        }
      ],
      "theme_properties": []
    },
    "ParallaxLayer": {
      "name": "ParallaxLayer",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A parallax scrolling layer to be used with [ParallaxBackground].",
      "description": "A ParallaxLayer must be the child of a [ParallaxBackground] node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the [member ParallaxBackground.scroll_offset] value.\n\t\tThis node's children will be affected by its scroll offset.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "motion_mirroring",
          "type": "Vector2",
          "setter": "set_mirroring",
          "getter": "get_mirroring",
          "description": "The ParallaxLayer's [Texture] mirroring. Useful for creating an infinite scrolling background. If an axis is set to [code]0[/code] the [Texture] will not be mirrored. Default value: [code](0, 0)[/code]."
        },
        {
          "name": "motion_offset",
          "type": "Vector2",
          "setter": "set_motion_offset",
          "getter": "get_motion_offset",
          "description": "The ParallaxLayer's offset relative to the parent ParallaxBackground's [member ParallaxBackground.scroll_offset]."
        },
        {
          "name": "motion_scale",
          "type": "Vector2",
          "setter": "set_motion_scale",
          "getter": "get_motion_scale",
          "description": "Multiplies the ParallaxLayer's motion. If an axis is set to [code]0[/code] it will not scroll."
        }
      ],
      "theme_properties": []
    },
    "JSON": {
      "name": "JSON",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Helper class for parsing JSON data.",
      "description": "Helper class for parsing JSON data. For usage example, see [JSONParseResult].",
      "methods": [
        {
          "name": "parse",
          "description": "Parses a JSON encoded string and returns a [JSONParseResult] containing the result.",
          "return_type": "JSONParseResult",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "json",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print",
          "description": "Converts a Variant var to JSON text and returns the result. Useful for serializing data to store or send over the network.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "indent",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "2",
              "name": "sort_keys",
              "type": "bool",
              "default_value": "false"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionPolygon": {
      "name": "CollisionPolygon",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Editor-only class for defining a collision polygon in 3D space.",
      "description": "Allows editing a collision polygon's vertices on a selected plane. Can also set a depth perpendicular to that plane. This class is only available in the editor. It will not appear in the scene tree at runtime. Creates a [Shape] for gameplay. Properties modified during gameplay will have no effect.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "depth",
          "type": "float",
          "setter": "set_depth",
          "getter": "get_depth",
          "description": "Length that the resulting collision extends in either direction perpendicular to its polygon."
        },
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": "If true, no collision will be produced."
        },
        {
          "name": "polygon",
          "type": "PoolVector2Array",
          "setter": "set_polygon",
          "getter": "get_polygon",
          "description": "Array of vertices which define the polygon."
        }
      ],
      "theme_properties": []
    },
    "EditorSettings": {
      "name": "EditorSettings",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Object that holds the project-independent editor settings.",
      "description": "Object that holds the project-independent editor settings. These settings are generally visible in the Editor Settings menu.\n\t\tAccessing the settings is done by using the regular [Object] API, such as:\n\t\t[codeblock]\n\t\tsettings.set(prop,value)\n\t\tsettings.get(prop)\n\t\tlist_of_settings = settings.get_property_list()\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "add_property_info",
          "description": "Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@GlobalScope]), and optionally hint:[int](see PROPERTY_HINT_* in [@GlobalScope]), hint_string:[String].\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\teditor_settings.set(\"category/property_name\", 0)\n\n\t\t\t\tvar property_info = {\n\t\t\t\t    \"name\": \"category/property_name\",\n\t\t\t\t    \"type\": TYPE_INT,\n\t\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t\t}\n\n\t\t\t\teditor_settings.add_property_info(property_info)\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "info",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase",
          "description": "Erase a given setting (pass full property path).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_favorite_dirs",
          "qualifiers": "const",
          "description": "Get the list of favorite directories for this project.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_project_settings_dir",
          "qualifiers": "const",
          "description": "Get the specific project settings path. Projects all have a unique sub-directory inside the settings path where project specific settings are saved.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_recent_dirs",
          "qualifiers": "const",
          "description": "Get the list of recently visited folders in the file dialog for this project.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_setting",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_settings_dir",
          "qualifiers": "const",
          "description": "Get the global settings path for the engine. Inside this path you can find some standard paths such as:\n\t\t\t\tsettings/tmp - used for temporary storage of files\n\t\t\t\tsettings/templates - where export templates are located",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "has_setting",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "property_can_revert",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "property_get_revert",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_favorite_dirs",
          "description": "Set the list of favorite directories for this project.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dirs",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_initial_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "update_current",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_recent_dirs",
          "description": "Set the list of recently visited folders in the file dialog for this project.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dirs",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_setting",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "settings_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GIProbe": {
      "name": "GIProbe",
      "inherits": "VisualInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "bake",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_node",
              "type": "Node",
              "default_value": "null"
            },
            {
              "index": "1",
              "name": "create_visual_debug",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "debug_bake",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SUBDIV_64",
          "value": "0",
          "enum": "Subdiv",
          "description": ""
        },
        {
          "name": "SUBDIV_128",
          "value": "1",
          "enum": "Subdiv",
          "description": ""
        },
        {
          "name": "SUBDIV_256",
          "value": "2",
          "enum": "Subdiv",
          "description": ""
        },
        {
          "name": "SUBDIV_512",
          "value": "3",
          "enum": "Subdiv",
          "description": ""
        },
        {
          "name": "SUBDIV_MAX",
          "value": "4",
          "enum": "Subdiv",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "bias",
          "type": "float",
          "setter": "set_bias",
          "getter": "get_bias",
          "description": ""
        },
        {
          "name": "compress",
          "type": "bool",
          "setter": "set_compress",
          "getter": "is_compressed",
          "description": ""
        },
        {
          "name": "data",
          "type": "GIProbeData",
          "setter": "set_probe_data",
          "getter": "get_probe_data",
          "description": ""
        },
        {
          "name": "dynamic_range",
          "type": "int",
          "setter": "set_dynamic_range",
          "getter": "get_dynamic_range",
          "description": ""
        },
        {
          "name": "energy",
          "type": "float",
          "setter": "set_energy",
          "getter": "get_energy",
          "description": ""
        },
        {
          "name": "extents",
          "type": "Vector3",
          "setter": "set_extents",
          "getter": "get_extents",
          "description": ""
        },
        {
          "name": "interior",
          "type": "bool",
          "setter": "set_interior",
          "getter": "is_interior",
          "description": ""
        },
        {
          "name": "normal_bias",
          "type": "float",
          "setter": "set_normal_bias",
          "getter": "get_normal_bias",
          "description": ""
        },
        {
          "name": "propagation",
          "type": "float",
          "setter": "set_propagation",
          "getter": "get_propagation",
          "description": ""
        },
        {
          "name": "subdiv",
          "type": "int",
          "setter": "set_subdiv",
          "getter": "get_subdiv",
          "enum": "GIProbe.Subdiv",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Resource": {
      "name": "Resource",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for all resources.",
      "description": "Resource is the base class for all resource types. Resources are primarily data containers. They are reference counted and freed when no longer in use. They are also loaded only once from disk, and further attempts to load the resource will return the same reference (all this in contrast to a [Node], which is not reference counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a [Node] or another resource.",
      "methods": [
        {
          "name": "_setup_local_to_scene",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "duplicate",
          "qualifiers": "const",
          "description": "",
          "return_type": "Resource",
          "arguments": [
            {
              "index": "0",
              "name": "subresources",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_local_scene",
          "qualifiers": "const",
          "description": "",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "Return the RID of the resource (or an empty RID). Many resources (such as [Texture], [Mesh], etc) are high level abstractions of resources stored in a server, so this function will return the original RID.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "setup_local_to_scene",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "take_over_path",
          "description": "Set the path of the resource. Differs from set_path(), if another [code]Resource[/code] exists with \"path\" it over-takes it, instead of failing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "resource_local_to_scene",
          "type": "bool",
          "setter": "set_local_to_scene",
          "getter": "is_local_to_scene",
          "description": ""
        },
        {
          "name": "resource_name",
          "type": "String",
          "setter": "set_name",
          "getter": "get_name",
          "description": ""
        },
        {
          "name": "resource_path",
          "type": "String",
          "setter": "set_path",
          "getter": "get_path",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "GDScriptNativeClass": {
      "name": "GDScriptNativeClass",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "new",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AnimatedSprite": {
      "name": "AnimatedSprite",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Sprite node that can use multiple textures for animation.",
      "description": "Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.",
      "methods": [
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return true if an animation if currently being played.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play the animation set in parameter. If no parameter is provided, the current animation is played.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the current animation (does not reset the frame counter).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "animation_finished",
          "description": "Emitted when the animation is finished (when it plays the last frame). If the animation is looping, this signal is emitted every time the last frame is drawn.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "frame_changed",
          "description": "Emitted when [member frame] changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "animation",
          "type": "String",
          "setter": "set_animation",
          "getter": "get_animation",
          "description": "The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset."
        },
        {
          "name": "centered",
          "type": "bool",
          "setter": "set_centered",
          "getter": "is_centered",
          "description": "If [code]true[/code] texture will be centered. Default value: [code]true[/code]."
        },
        {
          "name": "flip_h",
          "type": "bool",
          "setter": "set_flip_h",
          "getter": "is_flipped_h",
          "description": "If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code]."
        },
        {
          "name": "flip_v",
          "type": "bool",
          "setter": "set_flip_v",
          "getter": "is_flipped_v",
          "description": "If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code]."
        },
        {
          "name": "frame",
          "type": "int",
          "setter": "set_frame",
          "getter": "get_frame",
          "description": "The displayed animation frame's index."
        },
        {
          "name": "frames",
          "type": "SpriteFrames",
          "setter": "set_sprite_frames",
          "getter": "get_sprite_frames",
          "description": "The [SpriteFrames] resource containing the animation(s)."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The texture's drawing offset."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "_is_playing",
          "description": "If [code]true[/code] the [member animation] is currently playing."
        }
      ],
      "theme_properties": []
    },
    "AudioStream": {
      "name": "AudioStream",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for audio streams.",
      "description": "Base class for audio streams. Audio streams are used for music playback, or other types of streamed sounds that don't fit or require more flexibility than a [Sample].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Viewport": {
      "name": "Viewport",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Creates a sub-view into the screen.",
      "description": "A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.\n\t\tOptionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.\n\t\tIf a viewport is a child of a [Control], it will automatically take up its same rect and position, otherwise they must be set manually.\n\t\tViewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.\n\t\tAlso, viewports can be assigned to different screens in case the devices have multiple screens.\n\t\tFinally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.",
      "methods": [
        {
          "name": "find_world",
          "qualifiers": "const",
          "description": "Return the 3D world of the viewport, or if no such present, the one of the parent viewport.",
          "return_type": "World",
          "arguments": []
        },
        {
          "name": "find_world_2d",
          "qualifiers": "const",
          "description": "Return the 2D world of the viewport.",
          "return_type": "World2D",
          "arguments": []
        },
        {
          "name": "get_camera",
          "qualifiers": "const",
          "description": "Return the active 3D camera.",
          "return_type": "Camera",
          "arguments": []
        },
        {
          "name": "get_final_transform",
          "qualifiers": "const",
          "description": "Get the total transform of the viewport.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_mouse_position",
          "qualifiers": "const",
          "description": "Get the mouse position, relative to the viewport.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_render_info",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "info",
              "type": "int",
              "enum": "Viewport.RenderInfo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_size_override",
          "qualifiers": "const",
          "description": "Get the size override set with [method set_size_override].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Get the viewport's texture, for use with various objects that you want to texture with the viewport.",
          "return_type": "ViewportTexture",
          "arguments": []
        },
        {
          "name": "get_viewport_rid",
          "qualifiers": "const",
          "description": "Get the viewport RID from the [VisualServer].",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_visible_rect",
          "qualifiers": "const",
          "description": "Return the final, visible rect in global screen coordinates.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "gui_get_drag_data",
          "qualifiers": "const",
          "description": "Returns the drag data from the GUI, that was previously returned by [method Control.get_drag_data].",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "gui_has_modal_stack",
          "qualifiers": "const",
          "description": "Returns whether there are shown modals on-screen.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "input",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_size_override_enabled",
          "qualifiers": "const",
          "description": "Get the enabled status of the size override set with [method set_size_override].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_size_override_stretch_enabled",
          "qualifiers": "const",
          "description": "Get the enabled status of the size strech override set with [method set_size_override_stretch].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_attach_to_screen_rect",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size_override",
          "description": "Set the size override of the viewport. If the enable parameter is true, it would use the override, otherwise it would use the default size. If the size parameter is equal to [code](-1, -1)[/code], it won't update the size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "Vector2",
              "default_value": "Vector2( -1, -1 )"
            },
            {
              "index": "2",
              "name": "margin",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "set_size_override_stretch",
          "description": "Set whether the size override affects stretch as well.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unhandled_input",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_worlds",
          "description": "Force update of the 2D and 3D worlds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "warp_mouse",
          "description": "Warp the mouse to a position, relative to the viewport.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "size_changed",
          "description": "Emitted when the size of the viewport is changed, whether by [method set_size_override], resize of window, or some other means.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "UPDATE_DISABLED",
          "value": "0",
          "enum": "UpdateMode",
          "description": "Do not update the render target."
        },
        {
          "name": "UPDATE_ONCE",
          "value": "1",
          "enum": "UpdateMode",
          "description": "Update the render target once, then switch to [code]UPDATE_DISABLED[/code]"
        },
        {
          "name": "UPDATE_WHEN_VISIBLE",
          "value": "2",
          "enum": "UpdateMode",
          "description": "Update the render target only when it is visible. This is the default value."
        },
        {
          "name": "UPDATE_ALWAYS",
          "value": "3",
          "enum": "UpdateMode",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED",
          "value": "0",
          "enum": "ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_1",
          "value": "1",
          "enum": "ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_4",
          "value": "2",
          "enum": "ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_16",
          "value": "3",
          "enum": "ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_64",
          "value": "4",
          "enum": "ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_256",
          "value": "5",
          "enum": "ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_1024",
          "value": "6",
          "enum": "ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_MAX",
          "value": "7",
          "enum": "ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "RENDER_INFO_OBJECTS_IN_FRAME",
          "value": "0",
          "enum": "RenderInfo",
          "description": ""
        },
        {
          "name": "RENDER_INFO_VERTICES_IN_FRAME",
          "value": "1",
          "enum": "RenderInfo",
          "description": ""
        },
        {
          "name": "RENDER_INFO_MATERIAL_CHANGES_IN_FRAME",
          "value": "2",
          "enum": "RenderInfo",
          "description": ""
        },
        {
          "name": "RENDER_INFO_SHADER_CHANGES_IN_FRAME",
          "value": "3",
          "enum": "RenderInfo",
          "description": ""
        },
        {
          "name": "RENDER_INFO_SURFACE_CHANGES_IN_FRAME",
          "value": "4",
          "enum": "RenderInfo",
          "description": ""
        },
        {
          "name": "RENDER_INFO_DRAW_CALLS_IN_FRAME",
          "value": "5",
          "enum": "RenderInfo",
          "description": ""
        },
        {
          "name": "RENDER_INFO_MAX",
          "value": "6",
          "enum": "RenderInfo",
          "description": ""
        },
        {
          "name": "DEBUG_DRAW_DISABLED",
          "value": "0",
          "enum": "DebugDraw",
          "description": ""
        },
        {
          "name": "DEBUG_DRAW_UNSHADED",
          "value": "1",
          "enum": "DebugDraw",
          "description": ""
        },
        {
          "name": "DEBUG_DRAW_OVERDRAW",
          "value": "2",
          "enum": "DebugDraw",
          "description": ""
        },
        {
          "name": "DEBUG_DRAW_WIREFRAME",
          "value": "3",
          "enum": "DebugDraw",
          "description": ""
        },
        {
          "name": "MSAA_DISABLED",
          "value": "0",
          "enum": "MSAA",
          "description": ""
        },
        {
          "name": "MSAA_2X",
          "value": "1",
          "enum": "MSAA",
          "description": ""
        },
        {
          "name": "MSAA_4X",
          "value": "2",
          "enum": "MSAA",
          "description": ""
        },
        {
          "name": "MSAA_8X",
          "value": "3",
          "enum": "MSAA",
          "description": ""
        },
        {
          "name": "MSAA_16X",
          "value": "4",
          "enum": "MSAA",
          "description": ""
        },
        {
          "name": "USAGE_2D",
          "value": "0",
          "enum": "Usage",
          "description": ""
        },
        {
          "name": "USAGE_2D_NO_SAMPLING",
          "value": "1",
          "enum": "Usage",
          "description": ""
        },
        {
          "name": "USAGE_3D",
          "value": "2",
          "enum": "Usage",
          "description": ""
        },
        {
          "name": "USAGE_3D_NO_EFFECTS",
          "value": "3",
          "enum": "Usage",
          "description": ""
        },
        {
          "name": "CLEAR_MODE_ALWAYS",
          "value": "0",
          "enum": "ClearMode",
          "description": ""
        },
        {
          "name": "CLEAR_MODE_NEVER",
          "value": "1",
          "enum": "ClearMode",
          "description": ""
        },
        {
          "name": "CLEAR_MODE_ONLY_NEXT_FRAME",
          "value": "2",
          "enum": "ClearMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "arvr",
          "type": "bool",
          "setter": "set_use_arvr",
          "getter": "use_arvr",
          "description": ""
        },
        {
          "name": "audio_listener_enable_2d",
          "type": "bool",
          "setter": "set_as_audio_listener_2d",
          "getter": "is_audio_listener_2d",
          "description": ""
        },
        {
          "name": "audio_listener_enable_3d",
          "type": "bool",
          "setter": "set_as_audio_listener",
          "getter": "is_audio_listener",
          "description": ""
        },
        {
          "name": "canvas_transform",
          "type": "Transform2D",
          "setter": "set_canvas_transform",
          "getter": "get_canvas_transform",
          "description": "The canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]s. This is relative to the global canvas transform of the viewport."
        },
        {
          "name": "debug_draw",
          "type": "int",
          "setter": "set_debug_draw",
          "getter": "get_debug_draw",
          "enum": "Viewport.DebugDraw",
          "description": ""
        },
        {
          "name": "disable_3d",
          "type": "bool",
          "setter": "set_disable_3d",
          "getter": "is_3d_disabled",
          "description": ""
        },
        {
          "name": "global_canvas_transform",
          "type": "Transform2D",
          "setter": "set_global_canvas_transform",
          "getter": "get_global_canvas_transform",
          "description": "The global canvas transform of the viewport. The canvas transform is relative to this."
        },
        {
          "name": "gui_disable_input",
          "type": "bool",
          "setter": "set_disable_input",
          "getter": "is_input_disabled",
          "description": ""
        },
        {
          "name": "gui_snap_controls_to_pixels",
          "type": "bool",
          "setter": "set_snap_controls_to_pixels",
          "getter": "is_snap_controls_to_pixels_enabled",
          "description": ""
        },
        {
          "name": "hdr",
          "type": "bool",
          "setter": "set_hdr",
          "getter": "get_hdr",
          "description": ""
        },
        {
          "name": "msaa",
          "type": "int",
          "setter": "set_msaa",
          "getter": "get_msaa",
          "enum": "Viewport.MSAA",
          "description": ""
        },
        {
          "name": "own_world",
          "type": "bool",
          "setter": "set_use_own_world",
          "getter": "is_using_own_world",
          "description": ""
        },
        {
          "name": "physics_object_picking",
          "type": "bool",
          "setter": "set_physics_object_picking",
          "getter": "get_physics_object_picking",
          "description": ""
        },
        {
          "name": "render_target_clear_mode",
          "type": "int",
          "setter": "set_clear_mode",
          "getter": "get_clear_mode",
          "enum": "Viewport.ClearMode",
          "description": ""
        },
        {
          "name": "render_target_update_mode",
          "type": "int",
          "setter": "set_update_mode",
          "getter": "get_update_mode",
          "enum": "Viewport.UpdateMode",
          "description": ""
        },
        {
          "name": "render_target_v_flip",
          "type": "bool",
          "setter": "set_vflip",
          "getter": "get_vflip",
          "description": ""
        },
        {
          "name": "shadow_atlas_quad_0",
          "type": "int",
          "setter": "set_shadow_atlas_quadrant_subdiv",
          "getter": "get_shadow_atlas_quadrant_subdiv",
          "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "shadow_atlas_quad_1",
          "type": "int",
          "setter": "set_shadow_atlas_quadrant_subdiv",
          "getter": "get_shadow_atlas_quadrant_subdiv",
          "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "shadow_atlas_quad_2",
          "type": "int",
          "setter": "set_shadow_atlas_quadrant_subdiv",
          "getter": "get_shadow_atlas_quadrant_subdiv",
          "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "shadow_atlas_quad_3",
          "type": "int",
          "setter": "set_shadow_atlas_quadrant_subdiv",
          "getter": "get_shadow_atlas_quadrant_subdiv",
          "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "shadow_atlas_size",
          "type": "int",
          "setter": "set_shadow_atlas_size",
          "getter": "get_shadow_atlas_size",
          "description": ""
        },
        {
          "name": "size",
          "type": "Vector2",
          "setter": "set_size",
          "getter": "get_size",
          "description": ""
        },
        {
          "name": "transparent_bg",
          "type": "bool",
          "setter": "set_transparent_background",
          "getter": "has_transparent_background",
          "description": ""
        },
        {
          "name": "usage",
          "type": "int",
          "setter": "set_usage",
          "getter": "get_usage",
          "enum": "Viewport.Usage",
          "description": ""
        },
        {
          "name": "world",
          "type": "World",
          "setter": "set_world",
          "getter": "get_world",
          "description": ""
        },
        {
          "name": "world_2d",
          "type": "World2D",
          "setter": "set_world_2d",
          "getter": "get_world_2d",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ReflectionProbe": {
      "name": "ReflectionProbe",
      "inherits": "VisualInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "UPDATE_ONCE",
          "value": "0",
          "enum": "UpdateMode",
          "description": ""
        },
        {
          "name": "UPDATE_ALWAYS",
          "value": "1",
          "enum": "UpdateMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "box_projection",
          "type": "bool",
          "setter": "set_enable_box_projection",
          "getter": "is_box_projection_enabled",
          "description": ""
        },
        {
          "name": "cull_mask",
          "type": "int",
          "setter": "set_cull_mask",
          "getter": "get_cull_mask",
          "description": ""
        },
        {
          "name": "enable_shadows",
          "type": "bool",
          "setter": "set_enable_shadows",
          "getter": "are_shadows_enabled",
          "description": ""
        },
        {
          "name": "extents",
          "type": "Vector3",
          "setter": "set_extents",
          "getter": "get_extents",
          "description": ""
        },
        {
          "name": "intensity",
          "type": "float",
          "setter": "set_intensity",
          "getter": "get_intensity",
          "description": ""
        },
        {
          "name": "interior_ambient_color",
          "type": "Color",
          "setter": "set_interior_ambient",
          "getter": "get_interior_ambient",
          "description": ""
        },
        {
          "name": "interior_ambient_contrib",
          "type": "float",
          "setter": "set_interior_ambient_probe_contribution",
          "getter": "get_interior_ambient_probe_contribution",
          "description": ""
        },
        {
          "name": "interior_ambient_energy",
          "type": "float",
          "setter": "set_interior_ambient_energy",
          "getter": "get_interior_ambient_energy",
          "description": ""
        },
        {
          "name": "interior_enable",
          "type": "bool",
          "setter": "set_as_interior",
          "getter": "is_set_as_interior",
          "description": ""
        },
        {
          "name": "max_distance",
          "type": "float",
          "setter": "set_max_distance",
          "getter": "get_max_distance",
          "description": ""
        },
        {
          "name": "origin_offset",
          "type": "Vector3",
          "setter": "set_origin_offset",
          "getter": "get_origin_offset",
          "description": ""
        },
        {
          "name": "update_mode",
          "type": "int",
          "setter": "set_update_mode",
          "getter": "get_update_mode",
          "enum": "ReflectionProbe.UpdateMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "SliderJoint": {
      "name": "SliderJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Piston kind of slider between two bodies in 3D.",
      "description": "Slides across the x-axis of the [Pivot] object.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_LINEAR_LIMIT_UPPER",
          "value": "0",
          "enum": "Param",
          "description": "The maximum difference between the pivot points on their x-axis before damping happens."
        },
        {
          "name": "PARAM_LINEAR_LIMIT_LOWER",
          "value": "1",
          "enum": "Param",
          "description": "The minimum difference between the pivot points on their x-axis before damping happens."
        },
        {
          "name": "PARAM_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "enum": "Param",
          "description": "A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement."
        },
        {
          "name": "PARAM_LINEAR_LIMIT_RESTITUTION",
          "value": "3",
          "enum": "Param",
          "description": "The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost."
        },
        {
          "name": "PARAM_LINEAR_LIMIT_DAMPING",
          "value": "4",
          "enum": "Param",
          "description": "The amount of damping once the slider limits are surpassed."
        },
        {
          "name": "PARAM_LINEAR_MOTION_SOFTNESS",
          "value": "5",
          "enum": "Param",
          "description": "A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement."
        },
        {
          "name": "PARAM_LINEAR_MOTION_RESTITUTION",
          "value": "6",
          "enum": "Param",
          "description": "The amount of restitution inside the slider limits."
        },
        {
          "name": "PARAM_LINEAR_MOTION_DAMPING",
          "value": "7",
          "enum": "Param",
          "description": "The amount of damping inside the slider limits."
        },
        {
          "name": "PARAM_LINEAR_ORTHOGONAL_SOFTNESS",
          "value": "8",
          "enum": "Param",
          "description": "A factor applied to the movement across axes orthogonal to the slider."
        },
        {
          "name": "PARAM_LINEAR_ORTHOGONAL_RESTITUTION",
          "value": "9",
          "enum": "Param",
          "description": "The amount of restitution when movement is across axes orthogonal to the slider."
        },
        {
          "name": "PARAM_LINEAR_ORTHOGONAL_DAMPING",
          "value": "10",
          "enum": "Param",
          "description": "The amount of damping when movement is across axes orthogonal to the slider."
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_UPPER",
          "value": "11",
          "enum": "Param",
          "description": "The upper limit of rotation in the slider."
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_LOWER",
          "value": "12",
          "enum": "Param",
          "description": "The lower limit of rotation in the slider."
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_SOFTNESS",
          "value": "13",
          "enum": "Param",
          "description": "A factor applied to the all rotation once the limit is surpassed."
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_RESTITUTION",
          "value": "14",
          "enum": "Param",
          "description": "The amount of restitution of the rotation when the limit is surpassed."
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_DAMPING",
          "value": "15",
          "enum": "Param",
          "description": "The amount of damping of the rotation when the limit is surpassed."
        },
        {
          "name": "PARAM_ANGULAR_MOTION_SOFTNESS",
          "value": "16",
          "enum": "Param",
          "description": "A factor applied to the all rotation in the limits."
        },
        {
          "name": "PARAM_ANGULAR_MOTION_RESTITUTION",
          "value": "17",
          "enum": "Param",
          "description": "The amount of restitution of the rotation in the limits."
        },
        {
          "name": "PARAM_ANGULAR_MOTION_DAMPING",
          "value": "18",
          "enum": "Param",
          "description": "The amount of damping of the rotation in the limits."
        },
        {
          "name": "PARAM_ANGULAR_ORTHOGONAL_SOFTNESS",
          "value": "19",
          "enum": "Param",
          "description": "A factor applied to the all rotation across axes orthogonal to the slider."
        },
        {
          "name": "PARAM_ANGULAR_ORTHOGONAL_RESTITUTION",
          "value": "20",
          "enum": "Param",
          "description": "The amount of restitution of the rotation across axes orthogonal to the slider."
        },
        {
          "name": "PARAM_ANGULAR_ORTHOGONAL_DAMPING",
          "value": "21",
          "enum": "Param",
          "description": "The amount of damping of the rotation across axes orthogonal to the slider."
        },
        {
          "name": "PARAM_MAX",
          "value": "22",
          "enum": "Param",
          "description": "End flag of PARAM_* constants, used internally."
        }
      ],
      "properties": [
        {
          "name": "angular_limit/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of damping of the rotation when the limit is surpassed.\n\t\t\tA lower damping value allows a rotation initiated by body A to travel to body B slower."
        },
        {
          "name": "angular_limit/lower_angle",
          "type": "float",
          "setter": "_set_lower_limit_angular",
          "getter": "_get_lower_limit_angular",
          "description": "The lower limit of rotation in the slider."
        },
        {
          "name": "angular_limit/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of restitution of the rotation when the limit is surpassed.\n\t\t\tDoes not affect damping."
        },
        {
          "name": "angular_limit/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "A factor applied to the all rotation once the limit is surpassed.\n\t\t\tMakes all rotation slower when between 0 and 1."
        },
        {
          "name": "angular_limit/upper_angle",
          "type": "float",
          "setter": "_set_upper_limit_angular",
          "getter": "_get_upper_limit_angular",
          "description": "The upper limit of rotation in the slider."
        },
        {
          "name": "angular_motion/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of damping of the rotation in the limits."
        },
        {
          "name": "angular_motion/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of restitution of the rotation in the limits."
        },
        {
          "name": "angular_motion/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "A factor applied to the all rotation in the limits."
        },
        {
          "name": "angular_ortho/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of damping of the rotation across axes orthogonal to the slider."
        },
        {
          "name": "angular_ortho/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of restitution of the rotation across axes orthogonal to the slider."
        },
        {
          "name": "angular_ortho/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "A factor applied to the all rotation across axes orthogonal to the slider."
        },
        {
          "name": "linear_limit/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of damping that happens once the limit defined by [member linear_limit/lower_distance] and [member linear_limit/upper_distance] is surpassed."
        },
        {
          "name": "linear_limit/lower_distance",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The minimum difference between the pivot points on their x-axis before damping happens."
        },
        {
          "name": "linear_limit/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost."
        },
        {
          "name": "linear_limit/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement."
        },
        {
          "name": "linear_limit/upper_distance",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The maximum difference between the pivot points on their x-axis before damping happens."
        },
        {
          "name": "linear_motion/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of damping inside the slider limits."
        },
        {
          "name": "linear_motion/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of restitution inside the slider limits."
        },
        {
          "name": "linear_motion/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement."
        },
        {
          "name": "linear_ortho/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of damping when movement is across axes orthogonal to the slider."
        },
        {
          "name": "linear_ortho/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The amount of restitution when movement is across axes orthogonal to the slider."
        },
        {
          "name": "linear_ortho/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "A factor applied to the movement across axes orthogonal to the slider."
        }
      ],
      "theme_properties": []
    },
    "Geometry": {
      "name": "Geometry",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "build_box_planes",
          "description": "Returns an array with 6 [Plane]s that describe the sides of a box centered at the origin. The box size is defined by [code]extents[/code], which represents one (positive) corner of the box (i.e. half its actual size).",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "build_capsule_planes",
          "description": "Returns an array of [Plane]s closely bounding a faceted capsule centered at the origin with radius [code]radius[/code] and height [code]height[/code]. The parameter [code]sides[/code] defines how many planes will be generated for the side part of the capsule, whereas [code]lats[/code] gives the number of latitudinal steps at the bottom and top of the capsule. The parameter [code]axis[/code] describes the axis along which the capsule is oriented (0 for X, 1 for Y, 2 for Z).",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sides",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "lats",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": "2"
            }
          ]
        },
        {
          "name": "build_cylinder_planes",
          "description": "Returns an array of [Plane]s closely bounding a faceted cylinder centered at the origin with radius [code]radius[/code] and height [code]height[/code]. The parameter [code]sides[/code] defines how many planes will be generated for the round part of the cylinder. The parameter [code]axis[/code] describes the axis along which the cylinder is oriented (0 for X, 1 for Y, 2 for Z).",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sides",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": "2"
            }
          ]
        },
        {
          "name": "clip_polygon",
          "description": "Clips the polygon defined by the points in [code]points[/code] against the [code]plane[/code] and returns the points of the clipped polygon.",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "plane",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "convex_hull_2d",
          "description": "Given an array of [Vector2]s, returns the convex hull as a list of points in counter-clockwise order. The last point is the same as the first one.",
          "return_type": "PoolVector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment",
          "description": "Returns the 3d point on the 3d segment ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point will always be inside the specified segment.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment_2d",
          "description": "Returns the 2d point on the 2d segment ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point will always be inside the specified segment.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment_uncapped",
          "description": "Returns the 3d point on the 3d line defined by ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point can be inside the segment ([code]s1[/code], [code]s2[/code]) or outside of it, i.e. somewhere on the line extending from the segment.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment_uncapped_2d",
          "description": "Returns the 2d point on the 2d line defined by ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point can be inside the segment ([code]s1[/code], [code]s2[/code]) or outside of it, i.e. somewhere on the line extending from the segment.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_points_between_segments",
          "description": "Given the two 3d segments ([code]p1[/code], [code]p2[/code]) and ([code]q1[/code], [code]q2[/code]), finds those two points on the two segments that are closest to each other. Returns a [PoolVector3Array] that contains this point on ([code]p1[/code], [code]p2[/code]) as well the accompanying point on ([code]q1[/code], [code]q2[/code]).",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "p2",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "q1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "q2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_points_between_segments_2d",
          "description": "Given the two 2d segments ([code]p1[/code], [code]p2[/code]) and ([code]q1[/code], [code]q2[/code]), finds those two points on the two segments that are closest to each other. Returns a [PoolVector2Array] that contains this point on ([code]p1[/code], [code]p2[/code]) as well the accompanying point on ([code]q1[/code], [code]q2[/code]).",
          "return_type": "PoolVector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "q1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "p2",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "q2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_uv84_normal_bit",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_atlas",
          "description": "Given an array of [Vector2]s representing tiles, builds an atlas. The returned dictionary has two keys: [code]points[/code] is a vector of [Vector2] that specifies the positions of each tile, [code]size[/code] contains the overall size of the whole atlas as [Vector2].",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sizes",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "point_is_inside_triangle",
          "qualifiers": "const",
          "description": "Returns if [code]point[/code] is inside the triangle specified by [code]a[/code], [code]b[/code] and [code]c[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "c",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ray_intersects_triangle",
          "description": "Tests if the 3d ray starting at [code]from[/code] with the direction of [code]dir[/code] intersects the triangle specified by [code]a[/code], [code]b[/code] and [code]c[/code]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, an empty [Variant] is returned.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dir",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "a",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "c",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_circle",
          "description": "Given the 2d segment ([code]segment_from[/code], [code]segment_to[/code]), returns the position on the segment (as a number between 0 and 1) at which the segment hits the circle that is located at position [code]circle_position[/code] and has radius [code]circle_radius[/code]. If the segment does not intersect the circle, -1 is returned (this is also the case if the line extending the segment would intersect the circle, but the segment does not).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segment_from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "segment_to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "circle_position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "circle_radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_convex",
          "description": "Given a convex hull defined though the [Plane]s in the array [code]planes[/code], tests if the segment ([code]from[/code], [code]to[/code]) intersects with that hull. If an intersection is found, returns a [PoolVector3Array] containing the point the intersection and the hull's normal. If no intersecion is found, an the returned array is empty.",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "planes",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_cylinder",
          "description": "Checks if the segment ([code]from[/code], [code]to[/code]) intersects the cylinder with height [code]height[/code] that is centered at the origin and has radius [code]radius[/code]. If no, returns an empty [PoolVector3Array]. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection.",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "height",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_segment_2d",
          "description": "Checks if the two segments ([code]from_a[/code], [code]to_a[/code]) and ([code]from_b[/code], [code]to_b[/code]) intersect. If yes, return the point of intersection as [Vector2]. If no intersection takes place, returns an empty [Variant].",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_b",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_sphere",
          "description": "Checks if the segment ([code]from[/code], [code]to[/code]) intersects the sphere that is located at [code]sphere_position[/code] and has radius [code]sphere_radius[/code]. If no, returns an empty [PoolVector3Array]. If yes, returns a [PoolVector3Array] containing the point of intersection and the sphere's normal at the point of intersection.",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sphere_position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "sphere_radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_triangle",
          "description": "Tests if the segment ([code]from[/code], [code]to[/code]) intersects the triangle [code]a[/code], [code]b[/code], [code]c[/code]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, an empty [Variant] is returned.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "a",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "c",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "triangulate_polygon",
          "description": "Triangulates the polygon specified by the points in [code]polygon[/code]. Returns a [PoolIntArray] where each triangle consists of three consecutive point indices into [code]polygon[/code] (i.e. the returned array will have [code]n * 3[/code] elements, with [code]n[/code] being the number of found triangles). If the triangulation did not succeed, an empty [PoolIntArray] is returned.",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CSharpScript": {
      "name": "CSharpScript",
      "inherits": "Script",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "new",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Object",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptNode": {
      "name": "VisualScriptNode",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A node which is part of a [VisualScript].",
      "description": "A node which is part of a [VisualScript]. Not to be confused with [Node], which is a part of a [SceneTree].",
      "methods": [
        {
          "name": "get_default_input_value",
          "qualifiers": "const",
          "description": "Returns the default value of a given port. The default value is used when nothing is connected to the port.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "port_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_visual_script",
          "qualifiers": "const",
          "description": "Returns the [VisualScript] instance the node is bound to.",
          "return_type": "VisualScript",
          "arguments": []
        },
        {
          "name": "ports_changed_notify",
          "description": "Notify that the node's ports have changed. Usually used in conjunction with [VisualScriptCustomNode] .",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_default_input_value",
          "description": "Change the default value of a given port.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "ports_changed",
          "description": "Emitted when the available input/output ports are changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ViewportContainer": {
      "name": "ViewportContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "stretch",
          "type": "bool",
          "setter": "set_stretch",
          "getter": "is_stretch_enabled",
          "description": ""
        },
        {
          "name": "stretch_shrink",
          "type": "int",
          "setter": "set_stretch_shrink",
          "getter": "get_stretch_shrink",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "RegEx": {
      "name": "RegEx",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class for searching text for patterns using regular expressions.",
      "description": "Regular Expression (or regex) is a compact programming language that can be used to recognise strings that follow a specific pattern, such as URLs, email addresses, complete sentences, etc. For instance, a regex of [code]ab[0-9][/code] would find any string that is [code]ab[/code] followed by any number from [code]0[/code] to [code]9[/code]. For a more in-depth look, you can easily find various tutorials and detailed explainations on the Internet.\n\t\tTo begin, the RegEx object needs to be compiled with the search pattern using [method compile] before it can be used.\n\t\t[codeblock]\n\t\tvar regex = RegEx.new()\n\t\tregex.compile(\"\\\\w-(\\\\d+)\")\n\t\t[/codeblock]\n\t\tThe search pattern must be escaped first for gdscript before it is escaped for the expression. For example, [code]compile(\"\\\\d+\")[/code] would be read by RegEx as [code]\\d+[/code]. Similarly, [code]compile(\"\\\"(?:\\\\\\\\.|[^\\\"])*\\\"\")[/code] would be read as [code]\"(?:\\\\.|[^\"])*\"[/code]\n\t\tUsing [method search] you can find the pattern within the given text. If a pattern is found, [RegExMatch] is returned and you can retrieve details of the results using fuctions such as [method RegExMatch.get_string] and [method RegExMatch.get_start].\n\t\t[codeblock]\n\t\tvar regex = RegEx.new()\n\t\tregex.compile(\"\\\\w-(\\\\d+)\")\n\t\tvar result = regex.search(\"abc n-0123\")\n\t\tif result:\n\t\t    print(result.get_string()) # Would print n-0123\n\t\t[/codeblock]\n\t\tThe results of capturing groups [code]()[/code] can be retrieved by passing the group number to the various functions in [RegExMatch]. Group 0 is the default and would always refer to the entire pattern. In the above example, calling [code]result.get_string(1)[/code] would give you [code]0123[/code].\n\t\tThis version of RegEx also supports named capturing groups, and the names can be used to retrieve the results. If two or more groups have the same name, the name would only refer to the first one with a match.\n\t\t[codeblock]\n\t\tvar regex = RegEx.new()\n\t\tregex.compile(\"d(?<digit>[0-9]+)|x(?<digit>[0-9a-f]+)\")\n\t\tvar result = regex.search(\"the number is x2f\")\n\t\tif result:\n\t\t    print(result.get_string(\"digit\")) # Would print 2f\n\t\t[/codeblock]\n\t\tIf you need to process multiple results, [method search_all] generates a list of all non-overlapping results. This can be combined with a for-loop for convenience.\n\t\t[codeblock]\n\t\tfor result in regex.search_all(\"d01, d03, d0c, x3f and x42\"):\n\t\t    print(result.get_string(\"digit\"))\n\t\t# Would print 01 03 3f 42\n\t\t# Note that d0c would not match\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "clear",
          "description": "This method resets the state of the object, as it was freshly created. Namely, it unassigns the regular expression of this object.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "compile",
          "description": "Compiles and assign the search pattern to use. Returns OK if the compilation is successful. If an error is encountered the details are printed to STDOUT and FAILED is returned.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pattern",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_group_count",
          "qualifiers": "const",
          "description": "Returns the number of capturing groups in compiled pattern.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_names",
          "qualifiers": "const",
          "description": "Returns an array of names of named capturing groups in the compiled pattern. They are ordered by appearance.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_pattern",
          "qualifiers": "const",
          "description": "Returns the original search pattern that was compiled.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "Returns whether this object has a valid search pattern assigned.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "search",
          "qualifiers": "const",
          "description": "Searches the text for the compiled pattern. Returns a [RegExMatch] container of the first matching result if found, otherwise null. The region to search within can be specified without modifying where the start and end anchor would be.",
          "return_type": "RegExMatch",
          "arguments": [
            {
              "index": "0",
              "name": "subject",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "end",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "search_all",
          "qualifiers": "const",
          "description": "Searches the text for the compiled pattern. Returns an array of [RegExMatch] containers for each non-overlapping result. If no results were found an empty array is returned instead. The region to search within can be specified without modifying where the start and end anchor would be.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "subject",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "end",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "sub",
          "qualifiers": "const",
          "description": "Searches the text for the compiled pattern and replaces it with the specified string. Escapes and backreferences such as [code]\\1[/code] and [code]\\g<name>[/code] expanded and resolved. By default only the first instance is replaced but it can be changed for all instances (global replacement). The region to search within can be specified without modifying where the start and end anchor would be.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "subject",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "replacement",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "all",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "offset",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "4",
              "name": "end",
              "type": "int",
              "default_value": "-1"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Transform2D": {
      "name": "Transform2D",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "2D Transformation. 3x2 matrix.",
      "description": "Represents one or many transformations in 2D space such as translation, rotation, or scaling. It consists of a two [Vector2] x, y and [Vector2] \"origin\". It is similar to a 3x2 matrix.",
      "methods": [
        {
          "name": "Transform2D",
          "description": "Constructs the transform from a 3D [Transform].",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform2D",
          "description": "Constructs the transform from 3 [Vector2]s representing x, y, and origin.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x_axis",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y_axis",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "origin",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform2D",
          "description": "Constructs the transform from a given angle (in radians) and position.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotation",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "affine_inverse",
          "description": "Returns the inverse of the matrix.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "basis_xform",
          "description": "Transforms the given vector by this transform's basis (no translation).",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "basis_xform_inv",
          "description": "Inverse-transforms the given vector by this transform's basis (no translation).",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_origin",
          "description": "Returns the transform's origin (translation).",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "description": "Returns the transform's rotation (in radians).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scale",
          "description": "Returns the scale.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "interpolate_with",
          "description": "Returns a transform interpolated between this transform and another by a given weight (0-1).",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling).",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "orthonormalized",
          "description": "Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotated",
          "description": "Rotates the transform by the given angle (in radians).",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scaled",
          "description": "Scales the transform by the given factor.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translated",
          "description": "Translates the transform by the given offset.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform",
          "description": "Transforms the given [Vector2] or [Rect2] by this transform.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_inv",
          "description": "Inverse-transforms the given [Vector2] or [Rect2] by this transform.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "origin",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "The transform's translation offset."
        },
        {
          "name": "x",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "The X axis of 2x2 basis matrix containing 2 [Vector2]s as its columns: X axis and Y axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object."
        },
        {
          "name": "y",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "The Y axis of 2x2 basis matrix containing 2 [Vector2]s as its columns: X axis and Y axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object."
        }
      ],
      "theme_properties": []
    },
    "XMLParser": {
      "name": "XMLParser",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Low-level class for creating parsers for XML files.",
      "description": "This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low level so it can be applied to any possible schema.",
      "methods": [
        {
          "name": "get_attribute_count",
          "qualifiers": "const",
          "description": "Get the amount of attributes in the current element.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_attribute_name",
          "qualifiers": "const",
          "description": "Get the name of the attribute specified by the index in [code]idx[/code] argument.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_attribute_value",
          "qualifiers": "const",
          "description": "Get the value of the attribute specified by the index in [code]idx[/code] argument.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_line",
          "qualifiers": "const",
          "description": "Get the current line in the parsed file (currently not implemented).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_named_attribute_value",
          "qualifiers": "const",
          "description": "Get the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_named_attribute_value_safe",
          "qualifiers": "const",
          "description": "Get the value of a certain attribute of the current element by name. This will return an empty [String] if the attribute is not found.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_data",
          "qualifiers": "const",
          "description": "Get the contents of a text node. This will raise an error in any other type of node.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_node_name",
          "qualifiers": "const",
          "description": "Get the name of the current element node. This will raise an error if the current node type is not [code]NODE_ELEMENT[/code] nor [code]NODE_ELEMENT_END[/code]",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_node_offset",
          "qualifiers": "const",
          "description": "Get the byte offset of the current node since the beginning of the file or buffer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node_type",
          "description": "Get the type of the current node. Compare with [code]NODE_*[/code] constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_attribute",
          "qualifiers": "const",
          "description": "Check whether or not the current element has a certain attribute.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_empty",
          "qualifiers": "const",
          "description": "Check whether the current element is empty (this only works for completely empty tags, e.g. <element \\>).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "open",
          "description": "Open a XML file for parsing. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_buffer",
          "description": "Open a XML raw buffer for parsing. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "read",
          "description": "Read the next node of the file. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "seek",
          "description": "Move the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "skip_section",
          "description": "Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NODE_NONE",
          "value": "0",
          "enum": "NodeType",
          "description": "There's no node (no file or buffer opened)"
        },
        {
          "name": "NODE_ELEMENT",
          "value": "1",
          "enum": "NodeType",
          "description": "Element (tag)"
        },
        {
          "name": "NODE_ELEMENT_END",
          "value": "2",
          "enum": "NodeType",
          "description": "End of element"
        },
        {
          "name": "NODE_TEXT",
          "value": "3",
          "enum": "NodeType",
          "description": "Text node"
        },
        {
          "name": "NODE_COMMENT",
          "value": "4",
          "enum": "NodeType",
          "description": "Comment node"
        },
        {
          "name": "NODE_CDATA",
          "value": "5",
          "enum": "NodeType",
          "description": "CDATA content"
        },
        {
          "name": "NODE_UNKNOWN",
          "value": "6",
          "enum": "NodeType",
          "description": "Unknown node"
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisibilityEnabler": {
      "name": "VisibilityEnabler",
      "inherits": "VisibilityNotifier",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Enable certain nodes only when visible.",
      "description": "The VisibilityEnabler will disable [RigidBody] and [AnimationPlayer] nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler itself.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "ENABLER_PAUSE_ANIMATIONS",
          "value": "0",
          "enum": "Enabler",
          "description": "This enabler will pause [AnimationPlayer] nodes."
        },
        {
          "name": "ENABLER_FREEZE_BODIES",
          "value": "1",
          "enum": "Enabler",
          "description": "This enabler will freeze [RigidBody] nodes."
        },
        {
          "name": "ENABLER_MAX",
          "value": "2",
          "enum": "Enabler",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "freeze_bodies",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "pause_animations",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "CubeMap": {
      "name": "CubeMap",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A CubeMap is a 6 sided 3D texture.",
      "description": "A 6-sided 3D texture typically used for faking reflections. It can be used to make an object look as if it's reflecting its surroundings. This usually delivers much better performance than other reflection methods.",
      "methods": [
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Returns the [code]CubeMap[/code]'s height.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_side",
          "qualifiers": "const",
          "description": "Returns an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.",
          "return_type": "Image",
          "arguments": [
            {
              "index": "0",
              "name": "side",
              "type": "int",
              "enum": "CubeMap.Side",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_width",
          "qualifiers": "const",
          "description": "Returns the [code]CubeMap[/code]'s width.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_side",
          "description": "Sets an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "side",
              "type": "int",
              "enum": "CubeMap.Side",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STORAGE_RAW",
          "value": "0",
          "enum": "Storage",
          "description": "Store the [code]CubeMap[/code] without any compression."
        },
        {
          "name": "STORAGE_COMPRESS_LOSSY",
          "value": "1",
          "enum": "Storage",
          "description": "Store the [code]CubeMap[/code] with strong compression that reduces image quality."
        },
        {
          "name": "STORAGE_COMPRESS_LOSSLESS",
          "value": "2",
          "enum": "Storage",
          "description": "Store the [code]CubeMap[/code] with moderate compression that doesn't reduce image quality."
        },
        {
          "name": "SIDE_LEFT",
          "value": "0",
          "enum": "Side",
          "description": "Identifier for the left face of the [code]CubeMap[/code]."
        },
        {
          "name": "SIDE_RIGHT",
          "value": "1",
          "enum": "Side",
          "description": "Identifier for the right face of the [code]CubeMap[/code]."
        },
        {
          "name": "SIDE_BOTTOM",
          "value": "2",
          "enum": "Side",
          "description": "Identifier for the bottom face of the [code]CubeMap[/code]."
        },
        {
          "name": "SIDE_TOP",
          "value": "3",
          "enum": "Side",
          "description": "Identifier for the top face of the [code]CubeMap[/code]."
        },
        {
          "name": "SIDE_FRONT",
          "value": "4",
          "enum": "Side",
          "description": "Identifier for the front face of the [code]CubeMap[/code]."
        },
        {
          "name": "SIDE_BACK",
          "value": "5",
          "enum": "Side",
          "description": "Identifier for the back face of the [code]CubeMap[/code]."
        },
        {
          "name": "FLAG_MIPMAPS",
          "value": "1",
          "enum": "Flags",
          "description": "Generate mipmaps, to enable smooth zooming out of the texture."
        },
        {
          "name": "FLAG_REPEAT",
          "value": "2",
          "enum": "Flags",
          "description": "Repeat (instead of clamp to edge)."
        },
        {
          "name": "FLAG_FILTER",
          "value": "4",
          "enum": "Flags",
          "description": "Turn on magnifying filter, to enable smooth zooming in of the texture."
        },
        {
          "name": "FLAGS_DEFAULT",
          "value": "7",
          "enum": "Flags",
          "description": "Default flags. Generate mipmaps, repeat, and filter are enabled."
        }
      ],
      "properties": [
        {
          "name": "flags",
          "type": "int",
          "setter": "set_flags",
          "getter": "get_flags",
          "description": "The render flags for the [code]CubeMap[/code]. See the [code]FLAG_*[/code] constants for details."
        },
        {
          "name": "lossy_storage_quality",
          "type": "float",
          "setter": "set_lossy_storage_quality",
          "getter": "get_lossy_storage_quality",
          "description": "The lossy storage quality of the [code]CubeMap[/code] if the storage mode is set to STORAGE_COMPRESS_LOSSY."
        },
        {
          "name": "storage_mode",
          "type": "int",
          "setter": "set_storage",
          "getter": "get_storage",
          "enum": "CubeMap.Storage",
          "description": "The [code]CubeMap[/code]'s storage mode. See [code]STORAGE_*[/code] constants."
        }
      ],
      "theme_properties": []
    },
    "CapsuleShape2D": {
      "name": "CapsuleShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Capsule shape for 2D collisions.",
      "description": "Capsule shape for 2D collisions.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "The capsule's height."
        },
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "The capsules's radius."
        }
      ],
      "theme_properties": []
    },
    "KinematicCollision2D": {
      "name": "KinematicCollision2D",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Collision data for KinematicBody2D collisions.",
      "description": "Contains collision data for KinematicBody2D collisions. When a [KinematicBody2D] is moved using [method KinematicBody2D.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision2D object is returned.\n\t\tThis object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collider",
          "type": "Object",
          "setter": "",
          "getter": "get_collider",
          "description": "The colliding body."
        },
        {
          "name": "collider_id",
          "type": "int",
          "setter": "",
          "getter": "get_collider_id",
          "description": "The colliding body's unique [RID]."
        },
        {
          "name": "collider_metadata",
          "type": "Variant",
          "setter": "",
          "getter": "get_collider_metadata",
          "description": "The colliding body's metadata. See [Object]."
        },
        {
          "name": "collider_shape",
          "type": "Object",
          "setter": "",
          "getter": "get_collider_shape",
          "description": "The colliding body's shape."
        },
        {
          "name": "collider_shape_index",
          "type": "int",
          "setter": "",
          "getter": "get_collider_shape_index",
          "description": "The colliding shape's index. See [CollisionObject2D]."
        },
        {
          "name": "collider_velocity",
          "type": "Vector2",
          "setter": "",
          "getter": "get_collider_velocity",
          "description": "The colliding object's velocity."
        },
        {
          "name": "local_shape",
          "type": "Object",
          "setter": "",
          "getter": "get_local_shape",
          "description": "The moving object's colliding shape."
        },
        {
          "name": "normal",
          "type": "Vector2",
          "setter": "",
          "getter": "get_normal",
          "description": "The colliding body's shape's normal at the point of collision."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "",
          "getter": "get_position",
          "description": "The point of collision."
        },
        {
          "name": "remainder",
          "type": "Vector2",
          "setter": "",
          "getter": "get_remainder",
          "description": "The moving object's remaining movement vector."
        },
        {
          "name": "travel",
          "type": "Vector2",
          "setter": "",
          "getter": "get_travel",
          "description": "The distance the moving object traveled before collision."
        }
      ],
      "theme_properties": []
    },
    "GDNative": {
      "name": "GDNative",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "call_native",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "calling_type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "procedure_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arguments",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "initialize",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "terminate",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "library",
          "type": "GDNativeLibrary",
          "setter": "set_library",
          "getter": "get_library",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptYield": {
      "name": "VisualScriptYield",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "YIELD_FRAME",
          "value": "1",
          "enum": "YieldMode",
          "description": ""
        },
        {
          "name": "YIELD_PHYSICS_FRAME",
          "value": "2",
          "enum": "YieldMode",
          "description": ""
        },
        {
          "name": "YIELD_WAIT",
          "value": "3",
          "enum": "YieldMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "mode",
          "type": "int",
          "setter": "set_yield_mode",
          "getter": "get_yield_mode",
          "enum": "VisualScriptYield.YieldMode",
          "description": ""
        },
        {
          "name": "wait_time",
          "type": "float",
          "setter": "set_wait_time",
          "getter": "get_wait_time",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Shape2D": {
      "name": "Shape2D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for all 2D Shapes.",
      "description": "Base class for all 2D Shapes. All 2D shape types inherit from this.",
      "methods": [
        {
          "name": "collide",
          "description": "Return whether this shape is colliding with another.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_and_get_contacts",
          "description": "Return a list of the points where this shape touches another. If there are no collisions, the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_with_motion",
          "description": "Return whether this shape would collide with another, if a given movement was applied.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "shape_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_motion",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_with_motion_and_get_contacts",
          "description": "Return a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions, the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "shape_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_motion",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "custom_solver_bias",
          "type": "float",
          "setter": "set_custom_solver_bias",
          "getter": "get_custom_solver_bias",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioStreamPlayback": {
      "name": "AudioStreamPlayback",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Meta class for playing back audio.",
      "description": "Can play, loop, pause a scroll through Audio. See [AudioStream] and [AudioStreamOGGVorbis] for usage.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsShapeQueryParameters": {
      "name": "PhysicsShapeQueryParameters",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "set_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Resource",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": ""
        },
        {
          "name": "exclude",
          "type": "Array",
          "setter": "set_exclude",
          "getter": "get_exclude",
          "description": ""
        },
        {
          "name": "margin",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": ""
        },
        {
          "name": "shape_rid",
          "type": "RID",
          "setter": "set_shape_rid",
          "getter": "get_shape_rid",
          "description": ""
        },
        {
          "name": "transform",
          "type": "Transform",
          "setter": "set_transform",
          "getter": "get_transform",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "SphereShape": {
      "name": "SphereShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Sphere shape for 3D collisions.",
      "description": "Sphere shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. This shape is useful for modeling sphere-like 3D objects.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "The sphere's radius. The shape's diameter is double the radius."
        }
      ],
      "theme_properties": []
    },
    "PackedDataContainerRef": {
      "name": "PackedDataContainerRef",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "LargeTexture": {
      "name": "LargeTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A Texture capable of storing many smaller Textures with offsets.",
      "description": "A Texture capable of storing many smaller Textures with offsets.\n\t\tYou can dynamically add pieces([Texture]) to this [code]LargeTexture[/code] using different offsets.",
      "methods": [
        {
          "name": "add_piece",
          "description": "Add another [Texture] to this [code]LargeTexture[/code], starting on offset \"ofs\".",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clears the [code]LargeTexture[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_piece_count",
          "qualifiers": "const",
          "description": "Returns the number of pieces currently in this [code]LargeTexture[/code].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_piece_offset",
          "qualifiers": "const",
          "description": "Returns the offset of the piece with index \"idx\".",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_piece_texture",
          "qualifiers": "const",
          "description": "Returns the [Texture] of the piece with index \"idx\".",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_piece_offset",
          "description": "Sets the offset of the piece with index \"idx\" to \"ofs\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_piece_texture",
          "description": "Sets the [Texture] of the piece with index \"idx\" to  \"ofs\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "Sets the size of this [code]LargeTexture[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamRandomPitch": {
      "name": "AudioStreamRandomPitch",
      "inherits": "AudioStream",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Plays audio with random pitch tweaking.",
      "description": "Randomly varies pitch on each start.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "audio_stream",
          "type": "AudioStream",
          "setter": "set_audio_stream",
          "getter": "get_audio_stream",
          "description": "The current [AudioStream]."
        },
        {
          "name": "random_pitch",
          "type": "float",
          "setter": "set_random_pitch",
          "getter": "get_random_pitch",
          "description": "The intensity of random pitch variation."
        }
      ],
      "theme_properties": []
    },
    "VScrollBar": {
      "name": "VScrollBar",
      "inherits": "ScrollBar",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Vertical version of [ScrollBar], which goes from left (min) to right (max).",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "scroll",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "scroll_focus",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "RigidBody": {
      "name": "RigidBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Physics Body whose position is determined through physics simulation in 3D space.",
      "description": "This is the node that implements full 3D physics. This means that you do not control a RigidBody directly. Instead you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.\n\t\tThis node can use custom force integration, for writing complex physics motion behavior per node.\n\t\tThis node can shift state between regular Rigid body, Kinematic, Character or Static.\n\t\tCharacter mode forbids this node from being rotated.\n\t\tAs a warning, don't change RigidBody's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior.",
      "methods": [
        {
          "name": "_integrate_forces",
          "qualifiers": "virtual",
          "description": "Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default it works in addition to the usual physics behavior, but [method set_use_custom_integrator] allows you to disable the default behavior and do fully custom force integration for a body.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "PhysicsDirectBodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_impulse",
          "description": "Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the position are in global coordinates, and the position is relative to the object's origin.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "impulse",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_colliding_bodies",
          "qualifiers": "const",
          "description": "Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it.  Note that the result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "set_axis_velocity",
          "description": "Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "body_entered",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exited",
          "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_entered",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that collided with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body collided with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_exited",
          "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that stopped colliding with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body stopped colliding with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sleeping_state_changed",
          "description": "Emitted when the body changes its sleeping state. Either by sleeping or waking up.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "MODE_RIGID",
          "value": "0",
          "enum": "Mode",
          "description": "Rigid body. This is the \"natural\" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code."
        },
        {
          "name": "MODE_STATIC",
          "value": "1",
          "enum": "Mode",
          "description": "Static mode. The body behaves like a [StaticBody], and can only move by user code."
        },
        {
          "name": "MODE_CHARACTER",
          "value": "2",
          "enum": "Mode",
          "description": "Character body. This behaves like a rigid body, but can not rotate."
        },
        {
          "name": "MODE_KINEMATIC",
          "value": "3",
          "enum": "Mode",
          "description": "Kinematic body. The body behaves like a [KinematicBody], and can only move by user code."
        }
      ],
      "properties": [
        {
          "name": "angular_damp",
          "type": "float",
          "setter": "set_angular_damp",
          "getter": "get_angular_damp",
          "description": "Damps RigidBody's rotational forces."
        },
        {
          "name": "angular_velocity",
          "type": "Vector3",
          "setter": "set_angular_velocity",
          "getter": "get_angular_velocity",
          "description": "RigidBody's rotational velocity."
        },
        {
          "name": "axis_lock_angular_x",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_angular_y",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_angular_z",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_linear_x",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_linear_y",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_linear_z",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "bounce",
          "type": "float",
          "setter": "set_bounce",
          "getter": "get_bounce",
          "description": "RigidBody's bounciness."
        },
        {
          "name": "can_sleep",
          "type": "bool",
          "setter": "set_can_sleep",
          "getter": "is_able_to_sleep",
          "description": "If [code]true[/code] the RigidBody will not calculate forces and will act as a static body while there is no movement. It will wake up when forces are applied through other collisions or when the [code]apply_impulse[/code] method is used."
        },
        {
          "name": "contact_monitor",
          "type": "bool",
          "setter": "set_contact_monitor",
          "getter": "is_contact_monitor_enabled",
          "description": "If true, the RigidBody will emit signals when it collides with another RigidBody."
        },
        {
          "name": "contacts_reported",
          "type": "int",
          "setter": "set_max_contacts_reported",
          "getter": "get_max_contacts_reported",
          "description": "The maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0."
        },
        {
          "name": "continuous_cd",
          "type": "bool",
          "setter": "set_use_continuous_collision_detection",
          "getter": "is_using_continuous_collision_detection",
          "description": "If [code]true[/code] continuous collision detection is used.\n\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses less impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects."
        },
        {
          "name": "custom_integrator",
          "type": "bool",
          "setter": "set_use_custom_integrator",
          "getter": "is_using_custom_integrator",
          "description": "If [code]true[/code] internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined."
        },
        {
          "name": "friction",
          "type": "float",
          "setter": "set_friction",
          "getter": "get_friction",
          "description": "The body friction, from 0 (frictionless) to 1 (max friction)."
        },
        {
          "name": "gravity_scale",
          "type": "float",
          "setter": "set_gravity_scale",
          "getter": "get_gravity_scale",
          "description": "This is multiplied by the global 3D gravity setting found in \"Project > Project Settings > Physics > 3d\" to produce RigidBody's gravity. E.g. a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object."
        },
        {
          "name": "linear_damp",
          "type": "float",
          "setter": "set_linear_damp",
          "getter": "get_linear_damp",
          "description": "RigidBody's linear damp. Default value: -1, cannot be less than -1. If this value is different from -1, any linear damp derived from the world or areas will be overridden."
        },
        {
          "name": "linear_velocity",
          "type": "Vector3",
          "setter": "set_linear_velocity",
          "getter": "get_linear_velocity",
          "description": "RigidBody's linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may run in another thread and runs at a different granularity. Use [method _integrate_forces] as your process loop for precise control of the body state."
        },
        {
          "name": "mass",
          "type": "float",
          "setter": "set_mass",
          "getter": "get_mass",
          "description": "RigidBody's mass."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "RigidBody.Mode",
          "description": "The body mode from the MODE_* enum. Modes include: MODE_STATIC, MODE_KINEMATIC, MODE_RIGID, and MODE_CHARACTER."
        },
        {
          "name": "sleeping",
          "type": "bool",
          "setter": "set_sleeping",
          "getter": "is_sleeping",
          "description": "If [code]true[/code] RigidBody is sleeping and will not calculate forces until woken up by a collision or the [code]apply_impulse[/code] method."
        },
        {
          "name": "weight",
          "type": "float",
          "setter": "set_weight",
          "getter": "get_weight",
          "description": "RigidBody's weight based on its mass and the global 3D gravity. Global values are set in \"Project > Project Settings > Physics > 3d\"."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectLimiter": {
      "name": "AudioEffectLimiter",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a soft clip Limiter audio effect to an Audio bus.",
      "description": "A limiter is similar to a compressor, but it’s less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master Bus is always recommended to reduce the effects of clipping.\n\t\tSoft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "ceiling_db",
          "type": "float",
          "setter": "set_ceiling_db",
          "getter": "get_ceiling_db",
          "description": "The waveform's maximum allowed value. Value can range from -20 to -0.1. Default value: [code]-0.1dB[/code]."
        },
        {
          "name": "soft_clip_db",
          "type": "float",
          "setter": "set_soft_clip_db",
          "getter": "get_soft_clip_db",
          "description": "Applies a gain to the limited waves. Value can range from 0 to 6. Default value: [code]2dB[/code]."
        },
        {
          "name": "soft_clip_ratio",
          "type": "float",
          "setter": "set_soft_clip_ratio",
          "getter": "get_soft_clip_ratio",
          "description": ""
        },
        {
          "name": "threshold_db",
          "type": "float",
          "setter": "set_threshold_db",
          "getter": "get_threshold_db",
          "description": "Threshold from which the limiter begins to be active. Value can range from -30 to 0. Default value: [code]0dB[/code]."
        }
      ],
      "theme_properties": []
    },
    "PinJoint2D": {
      "name": "PinJoint2D",
      "inherits": "Joint2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Pin Joint for 2D Shapes.",
      "description": "Pin Joint for 2D Rigid Bodies. It pins 2 bodies (rigid or static) together, or a single body to a fixed position in space.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "softness",
          "type": "float",
          "setter": "set_softness",
          "getter": "get_softness",
          "description": "The higher this value, the more the bond to the pinned partner can flex."
        }
      ],
      "theme_properties": []
    },
    "CubeMesh": {
      "name": "CubeMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Generate an axis-aligned cuboid [PrimitiveMesh].",
      "description": "Generate an axis-aligned cuboid [PrimitiveMesh].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "size",
          "type": "Vector3",
          "setter": "set_size",
          "getter": "get_size",
          "description": "Size of the cuboid mesh. Defaults to (2, 2, 2)."
        },
        {
          "name": "subdivide_depth",
          "type": "int",
          "setter": "set_subdivide_depth",
          "getter": "get_subdivide_depth",
          "description": "Number of extra edge loops inserted along the z-axis. Defaults to 0."
        },
        {
          "name": "subdivide_height",
          "type": "int",
          "setter": "set_subdivide_height",
          "getter": "get_subdivide_height",
          "description": "Number of extra edge loops inserted along the y-axis. Defaults to 0."
        },
        {
          "name": "subdivide_width",
          "type": "int",
          "setter": "set_subdivide_width",
          "getter": "get_subdivide_width",
          "description": "Number of extra edge loops inserted along the x-axis. Defaults to 0."
        }
      ],
      "theme_properties": []
    },
    "InputEvent": {
      "name": "InputEvent",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Generic input event",
      "description": "Base class of all sort of input event. See [method Node._input].",
      "methods": [
        {
          "name": "action_match",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this event matches [code]event[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "as_text",
          "qualifiers": "const",
          "description": "Returns a [String] representation of the event.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_action",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this input event matches a pre-defined action of any type.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the given action is being pressed (and is not an echo event for KEY events). Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the given action is released (i.e. not pressed). Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_type",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this input event's type is one of the [code]InputEvent[/code] constants.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_echo",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this input event is an echo event (only for events of type KEY).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this input event is pressed. Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "shortcut_match",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xformed_by",
          "qualifiers": "const",
          "description": "",
          "return_type": "InputEvent",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ofs",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "device",
          "type": "int",
          "setter": "set_device",
          "getter": "get_device",
          "description": "The event's device ID."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectEQ21": {
      "name": "AudioEffectEQ21",
      "inherits": "AudioEffectEQ",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a 21-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 22 Hz to 22000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.",
      "description": "Frequency bands :\n\t\tBand 1 : 22 Hz\n\t\tBand 2 : 32 Hz\n\t\tBand 3 : 44 Hz\n\t\tBand 4 : 63 Hz\n\t\tBand 5 : 90 Hz\n\t\tBand 6 : 125 Hz\n\t\tBand 7 : 175 Hz\n\t\tBand 8 : 250 Hz\n\t\tBand 9 : 350 Hz\n\t\tBand 10 : 500 Hz\n\t\tBand 11 : 700 Hz\n\t\tBand 12 : 1000 Hz\n\t\tBand 13 : 1400 Hz\n\t\tBand 14 : 2000 Hz\n\t\tBand 15 : 2800 Hz\n\t\tBand 16 : 4000 Hz\n\t\tBand 17 : 5600 Hz\n\t\tBand 18 : 8000 Hz\n\t\tBand 19 : 11000 Hz\n\t\tBand 20 : 16000 Hz\n\t\tBand 21 : 22000 Hz\n\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ10].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VBoxContainer": {
      "name": "VBoxContainer",
      "inherits": "BoxContainer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Vertical box container.",
      "description": "Vertical box container. See [BoxContainer].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "DampedSpringJoint2D": {
      "name": "DampedSpringJoint2D",
      "inherits": "Joint2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Damped spring constraint for 2D physics.",
      "description": "Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "damping",
          "type": "float",
          "setter": "set_damping",
          "getter": "get_damping",
          "description": "The spring joint's damping ratio. A value between [code]0[/code] and [code]1[/code]. When the two bodies move into different directions the system tries to align them to the spring axis again. A high [code]damping[/code] value forces the attached bodies to align faster. Default value: [code]1[/code]"
        },
        {
          "name": "length",
          "type": "float",
          "setter": "set_length",
          "getter": "get_length",
          "description": "The spring joint's maximum length. The two attached bodies cannot stretch it past this value. Default value: [code]50[/code]"
        },
        {
          "name": "rest_length",
          "type": "float",
          "setter": "set_rest_length",
          "getter": "get_rest_length",
          "description": "When the bodies attached to the spring joint move they stretch or squash it. The joint always tries to resize towards this length. Default value: [code]0[/code]"
        },
        {
          "name": "stiffness",
          "type": "float",
          "setter": "set_stiffness",
          "getter": "get_stiffness",
          "description": "The higher the value, the less the bodies attached to the joint will deform it. The joint applies an opposing force to the bodies, the product of the stiffness multiplied by the size difference from its resting length. Default value: [code]20[/code]"
        }
      ],
      "theme_properties": []
    },
    "Shape": {
      "name": "Shape",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for all 3D shape resources.",
      "description": "Base class for all 3D shape resources. All 3D shapes that inherit from this can be set into a [PhysicsBody] or [Area].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventMouseButton": {
      "name": "InputEventMouseButton",
      "inherits": "InputEventMouse",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Input event type for mouse button events.",
      "description": "Contains mouse click information. See [method Node._input].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "button_index",
          "type": "int",
          "setter": "set_button_index",
          "getter": "get_button_index",
          "description": "Mouse button identifier, one of the BUTTON_* or BUTTON_WHEEL_* constants in [@GlobalScope]."
        },
        {
          "name": "doubleclick",
          "type": "bool",
          "setter": "set_doubleclick",
          "getter": "is_doubleclick",
          "description": "If [code]true[/code] the mouse button's state is a double-click. If [code]false[/code] the mouse button's state is released."
        },
        {
          "name": "factor",
          "type": "float",
          "setter": "set_factor",
          "getter": "get_factor",
          "description": "TO TALK in PR, reduz said : i think it's used for apple touch but i don't remember what it does"
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "If [code]true[/code] the mouse button's state is pressed. If [code]false[/code] the mouse button's state is released."
        }
      ],
      "theme_properties": []
    },
    "Panel": {
      "name": "Panel",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Provides an opaque background for [Control] children.",
      "description": "Panel is a [Control] that displays an opaque background. It's commonly used as a parent and container for other types of [Control] nodes.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "panelf",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "panelnc",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "VisualScriptPropertySet": {
      "name": "VisualScriptPropertySet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "CALL_MODE_SELF",
          "value": "0",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_NODE_PATH",
          "value": "1",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_INSTANCE",
          "value": "2",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_BASIC_TYPE",
          "value": "3",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_NONE",
          "value": "0",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_ADD",
          "value": "1",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_SUB",
          "value": "2",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_MUL",
          "value": "3",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_DIV",
          "value": "4",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_MOD",
          "value": "5",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_SHIFT_LEFT",
          "value": "6",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_SHIFT_RIGHT",
          "value": "7",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_BIT_AND",
          "value": "8",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_BIT_OR",
          "value": "9",
          "enum": "AssignOp",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_BIT_XOR",
          "value": "10",
          "enum": "AssignOp",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "assign_op",
          "type": "int",
          "setter": "set_assign_op",
          "getter": "get_assign_op",
          "enum": "VisualScriptPropertySet.AssignOp",
          "description": ""
        },
        {
          "name": "base_script",
          "type": "String",
          "setter": "set_base_script",
          "getter": "get_base_script",
          "description": ""
        },
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        },
        {
          "name": "basic_type",
          "type": "int",
          "setter": "set_basic_type",
          "getter": "get_basic_type",
          "enum": "Variant.Type",
          "description": ""
        },
        {
          "name": "index",
          "type": "String",
          "setter": "set_index",
          "getter": "get_index",
          "description": ""
        },
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_base_path",
          "getter": "get_base_path",
          "description": ""
        },
        {
          "name": "property",
          "type": "String",
          "setter": "set_property",
          "getter": "get_property",
          "description": ""
        },
        {
          "name": "set_mode",
          "type": "int",
          "setter": "set_call_mode",
          "getter": "get_call_mode",
          "enum": "VisualScriptPropertySet.CallMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "WindowDialog": {
      "name": "WindowDialog",
      "inherits": "Popup",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for window dialogs.",
      "description": "Windowdialog is the base class for all window-based dialogs. It's a by-default toplevel [Control] that draws a window decoration and allows motion and resizing.",
      "methods": [
        {
          "name": "get_close_button",
          "description": "Return the close [TextureButton].",
          "return_type": "TextureButton",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "resizable",
          "type": "bool",
          "setter": "set_resizable",
          "getter": "get_resizable",
          "description": "If [code]true[/code] the user can resize the window. Default value: [code]false[/code]."
        },
        {
          "name": "window_title",
          "type": "String",
          "setter": "set_title",
          "getter": "get_title",
          "description": "The text displayed in the window's title bar. Default value: \"Save a File\"."
        }
      ],
      "theme_properties": [
        {
          "name": "close",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "close_h_ofs",
          "type": "int",
          "description": ""
        },
        {
          "name": "close_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "close_v_ofs",
          "type": "int",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "scaleborder_size",
          "type": "int",
          "description": ""
        },
        {
          "name": "title_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "title_height",
          "type": "int",
          "description": ""
        }
      ]
    },
    "MultiMeshInstance": {
      "name": "MultiMeshInstance",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Node that instances a [MultiMesh].",
      "description": "[code]MultiMeshInstance[/code] is a specialized node to instance [GeometryInstance]s based on a [MultiMesh] resource.\n\t\tThis is useful to optimize the rendering of a high amount of instances of a given mesh (for example tree in a forest or grass strands).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "multimesh",
          "type": "MultiMesh",
          "setter": "set_multimesh",
          "getter": "get_multimesh",
          "description": "The [MultiMesh] resource that will be used and shared among all instances of the [code]MultiMeshInstance[/code]."
        }
      ],
      "theme_properties": []
    },
    "@NativeScript": {
      "name": "@NativeScript",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "TextureRect": {
      "name": "TextureRect",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Draws a sprite or a texture inside a User Interface. The texture can tile or not.",
      "description": "Use TextureRect to draw icons and sprites in your User Interfaces. To create panels and menu boxes, take a look at [NinePatchFrame]. Its Stretch Mode property controls the texture's scale and placement. It can scale, tile and stay centered inside its bounding rectangle. TextureRect is one of the 5 most common nodes to create game UI.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "STRETCH_SCALE_ON_EXPAND",
          "value": "0",
          "enum": "StretchMode",
          "description": "Scale to fit the node's bounding rectangle, only if [code]expand[/code] is [code]true[/code]. Default [code]stretch_mode[/code], for backwards compatibility. Until you set [code]expand[/code] to [code]true[/code], the texture will behave like [code]STRETCH_KEEP[/code]."
        },
        {
          "name": "STRETCH_SCALE",
          "value": "1",
          "enum": "StretchMode",
          "description": "Scale to fit the node's bounding rectangle."
        },
        {
          "name": "STRETCH_TILE",
          "value": "2",
          "enum": "StretchMode",
          "description": "Tile inside the node's bounding rectangle."
        },
        {
          "name": "STRETCH_KEEP",
          "value": "3",
          "enum": "StretchMode",
          "description": "The texture keeps its original size and stays in the bounding rectangle's top-left corner."
        },
        {
          "name": "STRETCH_KEEP_CENTERED",
          "value": "4",
          "enum": "StretchMode",
          "description": "The texture keeps its original size and stays centered in the node's bounding rectangle."
        },
        {
          "name": "STRETCH_KEEP_ASPECT",
          "value": "5",
          "enum": "StretchMode",
          "description": "Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio."
        },
        {
          "name": "STRETCH_KEEP_ASPECT_CENTERED",
          "value": "6",
          "enum": "StretchMode",
          "description": "Scale the texture to fit the node's bounding rectangle, center it and maintain its aspect ratio."
        },
        {
          "name": "STRETCH_KEEP_ASPECT_COVERED",
          "value": "7",
          "enum": "StretchMode",
          "description": "Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits."
        }
      ],
      "properties": [
        {
          "name": "expand",
          "type": "bool",
          "setter": "set_expand",
          "getter": "has_expand",
          "description": "If [code]true[/code], the texture scales to fit its bounding rectangle. Default value: [code]false[/code]."
        },
        {
          "name": "stretch_mode",
          "type": "int",
          "setter": "set_stretch_mode",
          "getter": "get_stretch_mode",
          "enum": "TextureRect.StretchMode",
          "description": "Controls the texture's behavior when you resize the node's bounding rectangle. Set it to one of the [code]STRETCH_*[/code] constants. See the constants to learn more."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The node's [Texture] resource."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptTypeCast": {
      "name": "VisualScriptTypeCast",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "base_script",
          "type": "String",
          "setter": "set_base_script",
          "getter": "get_base_script",
          "description": ""
        },
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Animation": {
      "name": "Animation",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Contains data used to animate everything in the engine.",
      "description": "An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.\n\t\tAnimations are just data containers, and must be added to odes such as an [AnimationPlayer] or [AnimationTreePlayer] to be played back.",
      "methods": [
        {
          "name": "add_track",
          "description": "Add a track to the Animation. The track type must be specified as any of the values in the TYPE_* enumeration.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Animation.TrackType",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the animation (clear all tracks and reset all).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "copy_track",
          "description": "Adds a new track that is a copy of the given track from [code]to_animation[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "track",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_track",
          "qualifiers": "const",
          "description": "Return the index of the specified track. If the track is not found, return -1.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_track_count",
          "qualifiers": "const",
          "description": "Return the amount of tracks in the animation.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "method_track_get_key_indices",
          "qualifiers": "const",
          "description": "Return all the key indices of a method track, given a position and delta time.",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "method_track_get_name",
          "qualifiers": "const",
          "description": "Return the method name of a method track.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "method_track_get_params",
          "qualifiers": "const",
          "description": "Return the arguments values to be called on a method track for a given key in a given track.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_track",
          "description": "Remove a track by specifying the track index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_find_key",
          "qualifiers": "const",
          "description": "Find the key index by time in a given track. Optionally, only find it if the exact time is given.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "exact",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "track_get_interpolation_loop_wrap",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the track at [code]idx[/code] wraps the interpolation loop. Default value: [code]true[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_interpolation_type",
          "qualifiers": "const",
          "description": "Return the interpolation type of a given track, from the INTERPOLATION_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_count",
          "qualifiers": "const",
          "description": "Return the amount of keys in a given track.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_time",
          "qualifiers": "const",
          "description": "Return the time at which the key is located.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_transition",
          "qualifiers": "const",
          "description": "Return the transition curve (easing) for a specific key (see built-in math function \"ease\").",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_value",
          "qualifiers": "const",
          "description": "Return the value of a given key in a given track.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_path",
          "qualifiers": "const",
          "description": "Get the path of a track. for more information on the path format, see [method track_set_path]",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_type",
          "qualifiers": "const",
          "description": "Get the type of a track.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_insert_key",
          "description": "Insert a generic key in a given track.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "key",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "transition",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "track_is_enabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the track at index [code]idx[/code] is enabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_is_imported",
          "qualifiers": "const",
          "description": "Return true if the given track is imported. Else, return false.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_move_down",
          "description": "Move a track down.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_move_up",
          "description": "Move a track up.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_remove_key",
          "description": "Remove a key by index in a given track.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_remove_key_at_position",
          "description": "Remove a key by position (seconds) in a given track.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_enabled",
          "description": "Enables/disables the given track. Tracks are enabled by default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_imported",
          "description": "Set the given track as imported or not.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "imported",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_interpolation_loop_wrap",
          "description": "If [code]true[/code] the track at [code]idx[/code] wraps the interpolation loop.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "interpolation",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_interpolation_type",
          "description": "Set the interpolation type of a given track, from the INTERPOLATION_* enum.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "interpolation",
              "type": "int",
              "enum": "Animation.InterpolationType",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_key_transition",
          "description": "Set the transition curve (easing) for a specific key (see built-in math function \"ease\").",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transition",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_key_value",
          "description": "Set the value of an existing key.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_path",
          "description": "Set the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by \":\". Example: \"character/skeleton:ankle\" or \"character/mesh:transform/local\"",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transform_track_insert_key",
          "description": "Insert a transform key for a transform track.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "location",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "rotation",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transform_track_interpolate",
          "qualifiers": "const",
          "description": "Return the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position ([Vector3]), rotation ([Quat]) and scale ([Vector3]).",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "value_track_get_key_indices",
          "qualifiers": "const",
          "description": "Return all the key indices of a value track, given a position and delta time.",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "value_track_get_update_mode",
          "qualifiers": "const",
          "description": "Return the update mode of a value track.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "value_track_set_update_mode",
          "description": "Set the update mode (UPDATE_*) of a value track.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Animation.UpdateMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TYPE_VALUE",
          "value": "0",
          "enum": "TrackType",
          "description": "Value tracks set values in node properties, but only those which can be Interpolated."
        },
        {
          "name": "TYPE_TRANSFORM",
          "value": "1",
          "enum": "TrackType",
          "description": "Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are Interpolated."
        },
        {
          "name": "TYPE_METHOD",
          "value": "2",
          "enum": "TrackType",
          "description": "Method tracks call functions with given arguments per key."
        },
        {
          "name": "INTERPOLATION_NEAREST",
          "value": "0",
          "enum": "InterpolationType",
          "description": "No interpolation (nearest value)."
        },
        {
          "name": "INTERPOLATION_LINEAR",
          "value": "1",
          "enum": "InterpolationType",
          "description": "Linear interpolation."
        },
        {
          "name": "INTERPOLATION_CUBIC",
          "value": "2",
          "enum": "InterpolationType",
          "description": "Cubic interpolation."
        },
        {
          "name": "UPDATE_CONTINUOUS",
          "value": "0",
          "enum": "UpdateMode",
          "description": "Update between keyframes."
        },
        {
          "name": "UPDATE_DISCRETE",
          "value": "1",
          "enum": "UpdateMode",
          "description": "Update at the keyframes and hold the value."
        },
        {
          "name": "UPDATE_TRIGGER",
          "value": "2",
          "enum": "UpdateMode",
          "description": "Update at the keyframes."
        }
      ],
      "properties": [
        {
          "name": "length",
          "type": "float",
          "setter": "set_length",
          "getter": "get_length",
          "description": "The total length of the animation (in seconds). Note that length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping."
        },
        {
          "name": "loop",
          "type": "bool",
          "setter": "set_loop",
          "getter": "has_loop",
          "description": "A flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation."
        },
        {
          "name": "step",
          "type": "float",
          "setter": "set_step",
          "getter": "get_step",
          "description": "The animation step value."
        }
      ],
      "theme_properties": []
    },
    "RemoteTransform": {
      "name": "RemoteTransform",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "RemoteTransform leads the [Transform] of another [Spatial] derived Node in the scene.",
      "description": "RemoteTransform leads the [Transform] of another [Spatial] derived Node (called the remote node) in the scene.\n\t\tIt can be set to track another Node's position, rotation and/or scale. It can update using either global or local coordinates.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "remote_path",
          "type": "NodePath",
          "setter": "set_remote_node",
          "getter": "get_remote_node",
          "description": "The [NodePath] to the remote node, relative to the RemoteTransform's position in the scene."
        },
        {
          "name": "update_position",
          "type": "bool",
          "setter": "set_update_position",
          "getter": "get_update_position",
          "description": "If [code]true[/code] the remote node's position is tracked. Default value: [code]true[/code]."
        },
        {
          "name": "update_rotation",
          "type": "bool",
          "setter": "set_update_rotation",
          "getter": "get_update_rotation",
          "description": "If [code]true[/code] the remote node's rotation is tracked. Default value: [code]true[/code]."
        },
        {
          "name": "update_scale",
          "type": "bool",
          "setter": "set_update_scale",
          "getter": "get_update_scale",
          "description": "If [code]true[/code] the remote node's scale is tracked. Default value: [code]true[/code]."
        },
        {
          "name": "use_global_coordinates",
          "type": "bool",
          "setter": "set_use_global_coordinates",
          "getter": "get_use_global_coordinates",
          "description": "If [code]true[/code] global coordinates are used. If [code]false[/code] local coordinates are used. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": []
    },
    "PoolVector2Array": {
      "name": "PoolVector2Array",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "An Array of Vector2.",
      "description": "An Array specifically designed to hold Vector2.",
      "methods": [
        {
          "name": "PoolVector2Array",
          "description": "Construct a new [code]PoolVector2Array[/code]. Optionally, you can pass in an Array that will be converted.",
          "return_type": "PoolVector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [code]PoolVector2Array[/code] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Insert a [Vector2] at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [Vector2] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectBandLimitFilter": {
      "name": "AudioEffectBandLimitFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a band limit filter to the Audio Bus.",
      "description": "Limits the frequencies in a range around the [member cutoff_hz] and allows frequencies outside of this range to pass.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ConvexPolygonShape2D": {
      "name": "ConvexPolygonShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Convex Polygon Shape for 2D physics.",
      "description": "Convex Polygon Shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).\n\t\tThe main difference between a [code]ConvexPolygonShape2D[/code] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.",
      "methods": [
        {
          "name": "set_point_cloud",
          "description": "Currently, this method does nothing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point_cloud",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "points",
          "type": "PoolVector2Array",
          "setter": "set_points",
          "getter": "get_points",
          "description": "The polygon's list of vertices. Can be in either clockwise or counterclockwise order."
        }
      ],
      "theme_properties": []
    },
    "NativeScript": {
      "name": "NativeScript",
      "inherits": "Script",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "new",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Object",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "class_name",
          "type": "String",
          "setter": "set_class_name",
          "getter": "get_class_name",
          "description": ""
        },
        {
          "name": "library",
          "type": "GDNativeLibrary",
          "setter": "set_library",
          "getter": "get_library",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TreeItem": {
      "name": "TreeItem",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Control for a single item inside a [Tree].",
      "description": "Control for a single item inside a [Tree]. May have child [code]TreeItem[/code]s and be styled as well as contain buttons.",
      "methods": [
        {
          "name": "add_button",
          "description": "Adds a button with [Texture] [code]button[/code] at column [code]column[/code]. The [code]button_idx[/code] index is used to identify the button when calling other methods. If not specified, the next available index is used, which may be retrieved by calling [code]get_buton_count()[/code] immediately after this method. Optionally, the button can be [code]disabled[/code] and have a [code]tooltip[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "button_idx",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "disabled",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "tooltip",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "clear_custom_bg_color",
          "description": "Resets the background color for the given column to default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_custom_color",
          "description": "Resets the color for the given column to default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "deselect",
          "description": "Deselects the given column.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_button",
          "description": "Removes the button at index [code]button_idx[/code] in column [code]column[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_button",
          "qualifiers": "const",
          "description": "Returns the [Texture] of the button at index [code]button_idx[/code] in column [code]column[/code].",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_button_count",
          "qualifiers": "const",
          "description": "Returns the number of buttons in column [code]column[/code]. May be used to get the most recently added button's index, if no index was specified.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_mode",
          "qualifiers": "const",
          "description": "Returns the column's cell mode. See [code]CELL_MODE_*[/code] constants.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_children",
          "description": "Returns the TreeItem's child items.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_custom_bg_color",
          "qualifiers": "const",
          "description": "Returns the custom background color of column [code]column[/code].",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_expand_right",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if [code]expand_right[/code] is set.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon",
          "qualifiers": "const",
          "description": "Returns the given column's icon [Texture]. Error if no icon is set.",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon_max_width",
          "qualifiers": "const",
          "description": "Returns the column's icon's maximum width.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon_region",
          "qualifiers": "const",
          "description": "Returns the icon [Texture] region as [Rect2].",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_next",
          "description": "Returns the next TreeItem in the tree.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_next_visible",
          "description": "Returns the next visible TreeItem in the tree.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_parent",
          "description": "Returns the parent TreeItem.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_prev",
          "description": "Returns the previous TreeItem in the tree.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_prev_visible",
          "description": "Returns the previous visible TreeItem in the tree.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_range",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_range_config",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Returns the given column's text.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_text_align",
          "qualifiers": "const",
          "description": "Returns the given column's text alignment.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tooltip",
          "qualifiers": "const",
          "description": "Returns the given column's tooltip.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_button_disabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the button at index [code]button_idx[/code] for the given column is disabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_checked",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the given column is checked.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_custom_set_as_button",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_editable",
          "description": "Returns [code]true[/code] if column [code]column[/code] is editable.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_selectable",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if column [code]column[/code] is selectable.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_selected",
          "description": "Returns [code]true[/code] if column [code]column[/code] is selected.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_to_bottom",
          "description": "Moves this TreeItem to the bottom in the [Tree] hierarchy.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "move_to_top",
          "description": "Moves this TreeItem to the top in the [Tree] hierarchy.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_child",
          "description": "Removes the child TreeItem at index [code]index[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Selects the column [code]column[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_button",
          "description": "Sets the given column's button [Texture] at index [code]button_idx[/code] to [code]button[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "button",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_mode",
          "description": "Sets the given column's cell mode to [code]mode[/code]. See [code]CELL_MODE_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "TreeItem.TreeCellMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_checked",
          "description": "If [code]true[/code] the column [code]column[/code] is checked.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "checked",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_as_button",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_bg_color",
          "description": "Sets the given column's custom background color and whether to just use it as an outline.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "just_outline",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_custom_color",
          "description": "Sets the given column's custom color.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_draw",
          "description": "Sets the given column's custom draw callback to [code]callback[/code] method on [code]object[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "callback",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editable",
          "description": "If [code]true[/code] column [code]column[/code] is editable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_right",
          "description": "If [code]true[/code] column [code]column[/code] is expanded to the right.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon",
          "description": "Sets the given column's icon [Texture].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_max_width",
          "description": "Sets the given column's icon's maximum width.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_region",
          "description": "Sets the given column's icon's texture region.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_metadata",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_range",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_range_config",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "step",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "expr",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_selectable",
          "description": "If [code]true[/code] the given column is selectable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selectable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text_align",
          "description": "Sets the given column's text alignment. See [code]ALIGN_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text_align",
              "type": "int",
              "enum": "TreeItem.TextAlign",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tooltip",
          "description": "Sets the given column's tooltip text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CELL_MODE_STRING",
          "value": "0",
          "enum": "TreeCellMode",
          "description": "Cell contains a string."
        },
        {
          "name": "CELL_MODE_CHECK",
          "value": "1",
          "enum": "TreeCellMode",
          "description": "Cell can be checked."
        },
        {
          "name": "CELL_MODE_RANGE",
          "value": "2",
          "enum": "TreeCellMode",
          "description": "Cell contains a range."
        },
        {
          "name": "CELL_MODE_RANGE_EXPRESSION",
          "value": "3",
          "enum": "TreeCellMode",
          "description": "Cell contains a range expression."
        },
        {
          "name": "CELL_MODE_ICON",
          "value": "4",
          "enum": "TreeCellMode",
          "description": "Cell contains an icon."
        },
        {
          "name": "CELL_MODE_CUSTOM",
          "value": "5",
          "enum": "TreeCellMode",
          "description": ""
        },
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "enum": "TextAlign",
          "description": "Align text to the left. See [code]set_text_align()[/code]."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "enum": "TextAlign",
          "description": "Center text. See [code]set_text_align()[/code]."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "enum": "TextAlign",
          "description": "Align text to the right. See [code]set_text_align()[/code]."
        }
      ],
      "properties": [
        {
          "name": "collapsed",
          "type": "bool",
          "setter": "set_collapsed",
          "getter": "is_collapsed",
          "description": "If [code]true[/code] the TreeItem is collapsed."
        },
        {
          "name": "custom_minimum_height",
          "type": "int",
          "setter": "set_custom_minimum_height",
          "getter": "get_custom_minimum_height",
          "description": "The custom minimum height."
        },
        {
          "name": "disable_folding",
          "type": "bool",
          "setter": "set_disable_folding",
          "getter": "is_folding_disabled",
          "description": "If [code]true[/code] folding is disabled for this TreeItem."
        }
      ],
      "theme_properties": []
    },
    "RigidBody2D": {
      "name": "RigidBody2D",
      "inherits": "PhysicsBody2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A body that is controlled by the 2D physics engine.",
      "description": "This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.\n\t\tA RigidBody2D has 4 behavior modes (see [member mode]):\n\t\t- [b]Rigid[/b]: The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode.\n\t\t- [b]Static[/b]: The body behaves like a [StaticBody2D] and does not move.\n\t\t- [b]Character[/b]: Similar to [code]Rigid[/code] mode, but the body can not rotate.\n\t\t- [b]Kinematic[/b]: The body behaves like a [KinematicBody2D], and must be moved by code.\n\t\t[b]Note:[/b] You should not change a RigidBody2D's [code]position[/code] or [code]linear_velocity[/code] every frame or even very often. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.\n\t\tIf you need to override the default physics behavior, you can write a custom force integration. See [member custom_integrator].",
      "methods": [
        {
          "name": "_integrate_forces",
          "qualifiers": "virtual",
          "description": "Allows you to read and safely modify the simulation state for the object. Use this instead of [Node._physics_process] if you need to directly change the body's [code]position[/code] or other physics properties. By default it works in addition to the usual physics behavior, but [member custom_integrator] allows you to disable the default behavior and write custom force integration for a body.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "Physics2DDirectBodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_force",
          "description": "Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "force",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_impulse",
          "description": "Applies a positioned impulse to the body (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied instantaneously. Both the impulse and the offset from the body origin are in global coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "impulse",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_colliding_bodies",
          "qualifiers": "const",
          "description": "Returns a list of the bodies colliding with this one. Use [member contacts_reported] to set the maximum number reported. You must also set [member contact_monitor] to [code]true[/code]. Note that the result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "set_axis_velocity",
          "description": "Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "test_motion",
          "description": "Returns [code]true[/code] if a collision would result from moving in the given vector. [code]margin[/code] increases the size of the shapes involved in the collision detection, and [code]result[/code] is an object of type [Physics2DTestMotionResult], which contains additional information about the collision (should there be one).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "margin",
              "type": "float",
              "default_value": "0.08"
            },
            {
              "index": "2",
              "name": "result",
              "type": "Physics2DTestMotionResult",
              "default_value": "null"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "body_entered",
          "description": "Emitted when a body enters into contact with this one. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exited",
          "description": "Emitted when a body exits contact with this one. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_entered",
          "description": "Emitted when a body enters into contact with this one. Reports colliding shape information. See [CollisionObject2D] for shape index information. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_exited",
          "description": "Emitted when a body shape exits contact with this one. Reports colliding shape information. See [CollisionObject2D] for shape index information. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sleeping_state_changed",
          "description": "Emitted when [member sleeping] changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "MODE_RIGID",
          "value": "0",
          "enum": "Mode",
          "description": "Rigid mode. The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode."
        },
        {
          "name": "MODE_STATIC",
          "value": "1",
          "enum": "Mode",
          "description": "Static mode. The body behaves like a [StaticBody2D] and does not move."
        },
        {
          "name": "MODE_CHARACTER",
          "value": "2",
          "enum": "Mode",
          "description": "Character mode. Similar to [code]MODE_RIGID[/code], but the body can not rotate."
        },
        {
          "name": "MODE_KINEMATIC",
          "value": "3",
          "enum": "Mode",
          "description": "Kinematic mode. The body behaves like a [KinematicBody2D], and must be moved by code."
        },
        {
          "name": "CCD_MODE_DISABLED",
          "value": "0",
          "enum": "CCDMode",
          "description": "Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects."
        },
        {
          "name": "CCD_MODE_CAST_RAY",
          "value": "1",
          "enum": "CCDMode",
          "description": "Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise."
        },
        {
          "name": "CCD_MODE_CAST_SHAPE",
          "value": "2",
          "enum": "CCDMode",
          "description": "Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise."
        }
      ],
      "properties": [
        {
          "name": "angular_damp",
          "type": "float",
          "setter": "set_angular_damp",
          "getter": "get_angular_damp",
          "description": "Damps the body's [member angular_velocity]. If [code]-1[/code] the body will use the \"Default Angular Damp\" in \"Project > Project Settings > Physics > 2d\". Default value: [code]-1[/code]."
        },
        {
          "name": "angular_velocity",
          "type": "float",
          "setter": "set_angular_velocity",
          "getter": "get_angular_velocity",
          "description": "The body's rotational velocity."
        },
        {
          "name": "applied_force",
          "type": "Vector2",
          "setter": "set_applied_force",
          "getter": "get_applied_force",
          "description": "The body's total applied force."
        },
        {
          "name": "applied_torque",
          "type": "float",
          "setter": "set_applied_torque",
          "getter": "get_applied_torque",
          "description": "The body's total applied torque."
        },
        {
          "name": "bounce",
          "type": "float",
          "setter": "set_bounce",
          "getter": "get_bounce",
          "description": "The body's bounciness. Default value: [code]0[/code]."
        },
        {
          "name": "can_sleep",
          "type": "bool",
          "setter": "set_can_sleep",
          "getter": "is_able_to_sleep",
          "description": "If [code]true[/code] the body will not calculate forces and will act as a static body if there is no movement. The body will wake up when other forces are applied via collisions or by using [method apply_impulse] or [method add_force]. Default value: [code]true[/code]."
        },
        {
          "name": "contact_monitor",
          "type": "bool",
          "setter": "set_contact_monitor",
          "getter": "is_contact_monitor_enabled",
          "description": "If [code]true[/code] the body will emit signals when it collides with another RigidBody2D. See also [member contacts_reported]. Default value: [code]false[/code]."
        },
        {
          "name": "contacts_reported",
          "type": "int",
          "setter": "set_max_contacts_reported",
          "getter": "get_max_contacts_reported",
          "description": "The maximum number of contacts to report. Default value: [code]0[/code]."
        },
        {
          "name": "continuous_cd",
          "type": "int",
          "setter": "set_continuous_collision_detection_mode",
          "getter": "get_continuous_collision_detection_mode",
          "enum": "RigidBody2D.CCDMode",
          "description": "Continuous collision detection mode. Default value: [code]CCD_MODE_DISABLED[/code].\n\t\t\tContinuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See [code]CCD_MODE_[/code] constants for details."
        },
        {
          "name": "custom_integrator",
          "type": "bool",
          "setter": "set_use_custom_integrator",
          "getter": "is_using_custom_integrator",
          "description": "If [code]true[/code] internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the [method _integrate_forces] function."
        },
        {
          "name": "friction",
          "type": "float",
          "setter": "set_friction",
          "getter": "get_friction",
          "description": "The body's friction. Values range from [code]0[/code] (frictionless) to [code]1[/code] (maximum friction). Default value: [code]1[/code]."
        },
        {
          "name": "gravity_scale",
          "type": "float",
          "setter": "set_gravity_scale",
          "getter": "get_gravity_scale",
          "description": "Multiplies the gravity applied to the body. The body's gravity is calculated from the \"Default Gravity\" value in \"Project > Project Settings > Physics > 2d\" and/or any additional gravity vector applied by [Area2D]s. Default value: [code]1[/code]."
        },
        {
          "name": "inertia",
          "type": "float",
          "setter": "set_inertia",
          "getter": "get_inertia",
          "description": "The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 (or negative) inertia to return to automatically computing it."
        },
        {
          "name": "linear_damp",
          "type": "float",
          "setter": "set_linear_damp",
          "getter": "get_linear_damp",
          "description": "Damps the body's [member linear_velocity]. If [code]-1[/code] the body will use the \"Default Linear Damp\" in \"Project > Project Settings > Physics > 2d\". Default value: [code]-1[/code]."
        },
        {
          "name": "linear_velocity",
          "type": "Vector2",
          "setter": "set_linear_velocity",
          "getter": "get_linear_velocity",
          "description": "The body's linear velocity."
        },
        {
          "name": "mass",
          "type": "float",
          "setter": "set_mass",
          "getter": "get_mass",
          "description": "The body's mass. Default value: [code]1[/code]."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "RigidBody2D.Mode",
          "description": "The body's mode. See [code]MODE_*[/code] constants. Default value: [code]MODE_RIGID[/code]."
        },
        {
          "name": "sleeping",
          "type": "bool",
          "setter": "set_sleeping",
          "getter": "is_sleeping",
          "description": "If [code]true[/code] the body is sleeping and will not calculate forces until woken up by a collision or by using [method apply_impulse] or [method add_force]."
        },
        {
          "name": "weight",
          "type": "float",
          "setter": "set_weight",
          "getter": "get_weight",
          "description": "The body's weight based on its mass and the \"Default Gravity\" value in \"Project > Project Settings > Physics > 2d\"."
        }
      ],
      "theme_properties": []
    },
    "RayCast2D": {
      "name": "RayCast2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Query the closest object intersecting a ray.",
      "description": "A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 2D space in order to find the closest object along the path of the ray.\n\t\tRayCast2D can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.\n\t\tOnly enabled raycasts will be able to query the space and report collisions.\n\t\tRayCast2D calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.",
      "methods": [
        {
          "name": "add_exception",
          "description": "Adds a collision exception so the ray does not report collisions with the specified node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_exception_rid",
          "description": "Adds a collision exception so the ray does not report collisions with the specified [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_exceptions",
          "description": "Removes all collision exceptions for this ray.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_raycast_update",
          "description": "Updates the collision information for the ray.  Use this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state. Note: [code]enabled == true[/code] is not required for this to work.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "Returns the closest object the ray is pointing to. Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tif RayCast2D.is_colliding():\n\t\t\t\t\tvar collider = RayCast2D.get_collider()\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "Returns the collision shape of the closest object the ray is pointing to.  Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tif RayCast2D.is_colliding():\n\t\t\t\t\tvar shape = RayCast2D.get_collider_shape()\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "Returns the normal of the intersecting object's shape at the collision point.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collision_point",
          "qualifiers": "const",
          "description": "Returns the collision point at which the ray intersects the closest object. Note: this point is in the [b]global[/b] coordinate system.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "is_colliding",
          "qualifiers": "const",
          "description": "Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove_exception",
          "description": "Removes a collision exception so the ray does report collisions with the specified node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_exception_rid",
          "description": "Removes a collision exception so the ray does report collisions with the specified [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "cast_to",
          "type": "Vector2",
          "setter": "set_cast_to",
          "getter": "get_cast_to",
          "description": "The ray's destination point, relative to the RayCast's [code]position[/code]."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected."
        },
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": "If [code]true[/code], collisions will be reported. Default value: [code]false[/code]."
        },
        {
          "name": "exclude_parent",
          "type": "bool",
          "setter": "set_exclude_parent_body",
          "getter": "get_exclude_parent_body",
          "description": "If [code]true[/code], the parent node will be excluded from collision detection. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": []
    },
    "Sky": {
      "name": "Sky",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "The base class for [PanoramaSky] and [ProceduralSky].",
      "description": "The base class for [PanoramaSky] and [ProceduralSky].",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "RADIANCE_SIZE_32",
          "value": "0",
          "enum": "RadianceSize",
          "description": "Radiance texture size is 32x32 pixels."
        },
        {
          "name": "RADIANCE_SIZE_64",
          "value": "1",
          "enum": "RadianceSize",
          "description": "Radiance texture size is 64x64 pixels."
        },
        {
          "name": "RADIANCE_SIZE_128",
          "value": "2",
          "enum": "RadianceSize",
          "description": "Radiance texture size is 128x128 pixels."
        },
        {
          "name": "RADIANCE_SIZE_256",
          "value": "3",
          "enum": "RadianceSize",
          "description": "Radiance texture size is 256x256 pixels."
        },
        {
          "name": "RADIANCE_SIZE_512",
          "value": "4",
          "enum": "RadianceSize",
          "description": "Radiance texture size is 512x512 pixels."
        },
        {
          "name": "RADIANCE_SIZE_1024",
          "value": "5",
          "enum": "RadianceSize",
          "description": "Radiance texture size is 1024x1024 pixels."
        },
        {
          "name": "RADIANCE_SIZE_2048",
          "value": "6",
          "enum": "RadianceSize",
          "description": "Radiance texture size is 2048x2048 pixels."
        },
        {
          "name": "RADIANCE_SIZE_MAX",
          "value": "7",
          "enum": "RadianceSize",
          "description": "Radiance texture size is the largest size it can be."
        }
      ],
      "properties": [
        {
          "name": "radiance_size",
          "type": "int",
          "setter": "set_radiance_size",
          "getter": "get_radiance_size",
          "enum": "Sky.RadianceSize",
          "description": "The Sky's radiance map size.\n\t\t\tThe higher the radiance map size, the more detailed the lighting from the Sky will be.\n\t\t\tSee RADIANCE_SIZE_* constants for values. Default size is RADIANCE_SIZE_512."
        }
      ],
      "theme_properties": []
    },
    "Color": {
      "name": "Color",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Color in RGBA format with some support for ARGB format.",
      "description": "A color is represented as red, green and blue (r,g,b) components. Additionally, \"a\" represents the alpha component, often used for transparency. Values are in floating point and usually range from 0 to 1.  Some methods (such as set_modulate(color)) may accept values > 1.\n\t\tYou can also create a color from standardised color names with [method @GDScript.ColorN].",
      "methods": [
        {
          "name": "Color",
          "description": "Constructs a color from an RGBA profile using values between 0 and 1 (float).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 1.0, .7, .8) # a color of an RGBA(51, 255, 178, 204)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "g",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "a",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Color",
          "description": "Constructs a color from an RGB profile using values between 0 and 1 (float). Alpha will always be 1.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 1.0, .7) # a color of an RGBA(51, 255, 178, 255)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "g",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Color",
          "description": "Constructs a color from a 32-bit integer (each byte represents a component of the RGBA profile).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(274) # a color of an RGBA(0, 0, 1, 18)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Color",
          "description": "Constructs a color from an HTML hexadecimal color string in ARGB or RGB format. See also [method @GDScript.ColorN].\n\t\t\t\tThe following string formats are supported:\n\t\t\t\t\t[code]\"#ff00ff00\"[/code] - ARGB format with '#'\n\t\t\t\t\t[code]\"ff00ff00\"[/code] - ARGB format\n\t\t\t\t\t[code]\"#ff00ff\"[/code] - RGB format with '#'\n\t\t\t\t\t[code]\"ff00ff\"[/code] - RGB format\n\t\t\t\t[codeblock]\n\t\t\t\t# The following code creates the same color of an RGBA(178, 217, 10, 255)\n\t\t\t\tvar c1 = Color(\"#ffb2d90a\") # ARGB format with '#'\n\t\t\t\tvar c2 = Color(\"ffb2d90a\")  # ARGB format\n\t\t\t\tvar c3 = Color(\"#b2d90a\")   # RGB format with '#'\n\t\t\t\tvar c4 = Color(\"b2d90a\")    # RGB format\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend",
          "description": "Returns a new color resulting from blending this color over another color. If the color is opaque, the result would also be opaque. The other color could then take a range of values with different alpha values.\n\t\t\t\t[codeblock]\n\t\t\t\tvar bg = Color(0.0, 1.0, 0.0, 0.5) # Green with alpha of 50%\n\t\t\t\tvar fg = Color(1.0, 0.0, 0.0, .5) # Red with alpha of 50%\n\t\t\t\tvar blendedColor = bg.blend(fg) # Brown with alpha of 75%\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "over",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "contrasted",
          "description": "Returns the most contrasting color.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(.3, .4, .9)\n\t\t\t\tvar contrastedColor = c.contrasted() # a color of an RGBA(204, 229, 102, 255)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "darkened",
          "description": "Returns a new color resulting from making this color darker by the specified percentage (0-1).\n\t\t\t\t[codeblock]\n\t\t\t\tvar green = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar darkgreen = green.darkened(0.2) # 20% darker than regular green\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "gray",
          "description": "Returns the color's grayscale.\n\t\t\t\tThe gray is calculated by (r + g + b) / 3.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 0.45, 0.82)\n\t\t\t\tvar gray = c.gray() # a value of 0.466667\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverted",
          "description": "Returns the inverted color (1-r, 1-g, 1-b, 1-a).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(.3, .4, .9)\n\t\t\t\tvar invertedColor = c.inverted() # a color of an RGBA(178, 153, 26, 255)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "lightened",
          "description": "Returns a new color resulting from making this color lighter by the specified percentage (0-1).\n\t\t\t\t[codeblock]\n\t\t\t\tvar green = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar lightgreen = green.lightened(0.2) # 20% lighter than regular green\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "linear_interpolate",
          "description": "Returns the color of the linear interpolation with another color. The value t is between 0 and 1 (float).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c1 = Color(1.0, 0.0, 0.0)\n\t\t\t\tvar c2 = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar li_c = c1.linear_interpolate(c2, 0.5) # a color of an RGBA(128, 128, 0, 255)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_argb32",
          "description": "Returns the color's 32-bit integer in ARGB format (each byte represents a component of the ARGB profile). More compatible with DirectX.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(str(c.to_32())) # prints 4294934323\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_html",
          "description": "Returns the color's HTML hexadecimal color string in ARGB format (ex: [code]ff34f822[/code]).\n\t\t\t\tOptionally flag 'false' to not include alpha in hexadecimal string.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, 1, 1, .5)\n\t\t\t\tvar s1 = c.to_html() # Results \"7fffffff\"\n\t\t\t\tvar s2 = c.to_html(false) # Results 'ffffff'\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with_alpha",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "to_rgba32",
          "description": "Returns the color's 32-bit integer in ARGB format (each byte represents a component of the ARGB profile).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(str(c.to_32())) # prints 4294934323\n\t\t\t\t[/codeblock]\n\t\t\t\t[i]This is same as [method to_argb32] but may be changed later to support RGBA format instead[/i].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "a",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Alpha (0 to 1)"
        },
        {
          "name": "a8",
          "type": "int",
          "setter": "",
          "getter": "",
          "description": "Alpha (0 to 255)"
        },
        {
          "name": "b",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Blue (0 to 1)"
        },
        {
          "name": "b8",
          "type": "int",
          "setter": "",
          "getter": "",
          "description": "Blue (0 to 255)"
        },
        {
          "name": "g",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Green (0 to 1)"
        },
        {
          "name": "g8",
          "type": "int",
          "setter": "",
          "getter": "",
          "description": "Green (0 to 255)"
        },
        {
          "name": "h",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Hue (0 to 1)"
        },
        {
          "name": "r",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Red (0 to 1)"
        },
        {
          "name": "r8",
          "type": "int",
          "setter": "",
          "getter": "",
          "description": "Red (0 to 255)"
        },
        {
          "name": "s",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Saturation (0 to 1)"
        },
        {
          "name": "v",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Value (0 to 1)"
        }
      ],
      "theme_properties": []
    },
    "CollisionObject": {
      "name": "CollisionObject",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base node for collision objects.",
      "description": "CollisionObject is the base class for physics objects. It can hold any number of collision [Shape]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.",
      "methods": [
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "Accepts unhandled [InputEvent]s. [code]click_position[/code] is the clicked location in world space and [code]click_normal[/code] is the normal vector extending from the clicked surface of the [Shape] at [code]shape_idx[/code]. Connect to the [code]input_event[/code] signal to easily pick up these events.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "click_position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "click_normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_shape_owner",
          "description": "Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "Returns the object's [RID].",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_shape_owners",
          "description": "Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_shape_owner_disabled",
          "qualifiers": "const",
          "description": "If [code]true[/code] the shape owner and its shapes are disabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_shape_owner",
          "description": "Removes the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_find_owner",
          "qualifiers": "const",
          "description": "Returns the [code]owner_id[/code] of the given shape.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_add_shape",
          "description": "Adds a [Shape] to the shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_clear_shapes",
          "description": "Removes all shapes from the shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_owner",
          "qualifiers": "const",
          "description": "Returns the parent object of the given shape owner.",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape",
          "qualifiers": "const",
          "description": "Returns the [Shape] with the given id from the given shape owner.",
          "return_type": "Shape",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape_count",
          "qualifiers": "const",
          "description": "Returns the number of shapes the given shape owner contains.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape_index",
          "qualifiers": "const",
          "description": "Returns the child index of the [Shape] with the given id from the given shape owner.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_transform",
          "qualifiers": "const",
          "description": "Returns the shape owner's [Transform].",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_remove_shape",
          "description": "Removes a shape from the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_disabled",
          "description": "If [code]true[/code] disables the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_transform",
          "description": "Sets the [Transform] of the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "input_event",
          "description": "Emitted when [method _input_event] receives an event. See its description for details.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "click_position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "click_normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mouse_entered",
          "description": "Emitted when the mouse pointer enters any of this object's shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_exited",
          "description": "Emitted when the mouse pointer exits all this object's shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "input_capture_on_drag",
          "type": "bool",
          "setter": "set_capture_input_on_drag",
          "getter": "get_capture_input_on_drag",
          "description": "If [code]true[/code] the [code]CollisionObject[/code] will continue to receive input events as the mouse is dragged across its shapes. Default value: [code]false[/code]."
        },
        {
          "name": "input_ray_pickable",
          "type": "bool",
          "setter": "set_ray_pickable",
          "getter": "is_ray_pickable",
          "description": "If [code]true[/code] the [CollisionObject]'s shapes will respond to [RayCast]s. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": []
    },
    "ParallaxBackground": {
      "name": "ParallaxBackground",
      "inherits": "CanvasLayer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A node used to create a parallax scrolling background.",
      "description": "A ParallaxBackground uses one or more [ParallaxLayer] child nodes to create a parallax effect. Each [ParallaxLayer] can move at a different speed using [member ParallaxLayer.motion_offset]. This creates an illusion of depth in a 2D game. If not used with a [Camera2D], you must manually calculate the [member scroll_offset].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "scroll_base_offset",
          "type": "Vector2",
          "setter": "set_scroll_base_offset",
          "getter": "get_scroll_base_offset",
          "description": "Base position offset of all [ParallaxLayer] children."
        },
        {
          "name": "scroll_base_scale",
          "type": "Vector2",
          "setter": "set_scroll_base_scale",
          "getter": "get_scroll_base_scale",
          "description": "Base motion scale of all [ParallaxLayer] children."
        },
        {
          "name": "scroll_ignore_camera_zoom",
          "type": "bool",
          "setter": "set_ignore_camera_zoom",
          "getter": "is_ignore_camera_zoom",
          "description": "If [code]true[/code] elements in [ParallaxLayer] child aren't affected by the zoom level of the camera."
        },
        {
          "name": "scroll_limit_begin",
          "type": "Vector2",
          "setter": "set_limit_begin",
          "getter": "get_limit_begin",
          "description": "Top left limits for scrolling to begin. If the camera is outside of this limit the background will stop scrolling. Must be lower than [member scroll_limit_end] to work."
        },
        {
          "name": "scroll_limit_end",
          "type": "Vector2",
          "setter": "set_limit_end",
          "getter": "get_limit_end",
          "description": "Right bottom limits for scrolling to end. If the camera is outside of this limit the background will stop scrolling. Must be higher than [member scroll_limit_begin] to work."
        },
        {
          "name": "scroll_offset",
          "type": "Vector2",
          "setter": "set_scroll_offset",
          "getter": "get_scroll_offset",
          "description": "The ParallaxBackground's scroll value. Calculated automatically when using a [Camera2D], but can be used to manually manage scrolling when no camera is present."
        }
      ],
      "theme_properties": []
    },
    "InputEventMouseMotion": {
      "name": "InputEventMouseMotion",
      "inherits": "InputEventMouse",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Input event type for mouse motion events.",
      "description": "Contains mouse motion information. Supports relative, absolute positions and speed. See [method Node._input].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "relative",
          "type": "Vector2",
          "setter": "set_relative",
          "getter": "get_relative",
          "description": "Mouse position relative to the previous position (position at the last frame)."
        },
        {
          "name": "speed",
          "type": "Vector2",
          "setter": "set_speed",
          "getter": "get_speed",
          "description": "Mouse speed."
        }
      ],
      "theme_properties": []
    },
    "ColorPicker": {
      "name": "ColorPicker",
      "inherits": "BoxContainer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Color picker control.",
      "description": "This is a simple color picker [Control]. It's useful for selecting a color from an RGB/RGBA colorspace.",
      "methods": [
        {
          "name": "add_preset",
          "description": "Adds the current selected to color to a list of colors (presets), the presets will be displayed in the color picker and the user will be able to select them, notice that the presets list is only for this color picker.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "color_changed",
          "description": "Emitted when the color is changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_pick_color",
          "getter": "get_pick_color",
          "description": "The currently selected color."
        },
        {
          "name": "edit_alpha",
          "type": "bool",
          "setter": "set_edit_alpha",
          "getter": "is_editing_alpha",
          "description": "If [code]true[/code], shows an alpha channel slider (transparency)."
        },
        {
          "name": "raw_mode",
          "type": "bool",
          "setter": "set_raw_mode",
          "getter": "is_raw_mode",
          "description": "If [code]true[/code], allows the color R, G, B component values to go beyond 1.0, which can be used for certain special operations that require it (like tinting without darkening or rendering sprites in HDR)."
        }
      ],
      "theme_properties": [
        {
          "name": "add_preset",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "color_hue",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "color_sample",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "h_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "label_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "preset_bg",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "screen_picker",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "sv_height",
          "type": "int",
          "description": ""
        },
        {
          "name": "sv_width",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Marshalls": {
      "name": "Marshalls",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Data transformation (marshalling) and encoding helpers.",
      "description": "Provides data transformation and encoding utility functions.",
      "methods": [
        {
          "name": "base64_to_raw",
          "description": "Return [PoolByteArray] of a given base64 encoded String.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base64_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "base64_to_utf8",
          "description": "Return utf8 String of a given base64 encoded String.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base64_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "base64_to_variant",
          "description": "Return [Variant] of a given base64 encoded String.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base64_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "raw_to_base64",
          "description": "Return base64 encoded String of a given [PoolByteArray].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "utf8_to_base64",
          "description": "Return base64 encoded String of a given utf8 String.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "utf8_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "variant_to_base64",
          "description": "Return base64 encoded String of a given [Variant].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "variant",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VideoStream": {
      "name": "VideoStream",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventJoypadMotion": {
      "name": "InputEventJoypadMotion",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Input event type for gamepad joysticks and other motions. For buttons see [code]InputEventJoypadMotion[/code].",
      "description": "Stores information about joystick motions. One [code]InputEventJoypadMotion[/code] represents one axis at a time.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "axis",
          "type": "int",
          "setter": "set_axis",
          "getter": "get_axis",
          "description": "Axis identifier. Use one of the [code]JOY_AXIS_*[/code] constants in [@global Scope]."
        },
        {
          "name": "axis_value",
          "type": "float",
          "setter": "set_axis_value",
          "getter": "get_axis_value",
          "description": "Current position of the joystick on the given axis. The value ranges from [code]-1.0[/code] to [code]1.0[/code]. A value of [code]0[/code] means the axis is in its resting position."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectNotchFilter": {
      "name": "AudioEffectNotchFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a notch filter to the Audio Bus.",
      "description": "Attenuates frequencies in a narrow band around the [member cutoff_hz] and cuts frequencies outside of this range.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GIProbeData": {
      "name": "GIProbeData",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bias",
          "type": "float",
          "setter": "set_bias",
          "getter": "get_bias",
          "description": ""
        },
        {
          "name": "bounds",
          "type": "AABB",
          "setter": "set_bounds",
          "getter": "get_bounds",
          "description": ""
        },
        {
          "name": "cell_size",
          "type": "float",
          "setter": "set_cell_size",
          "getter": "get_cell_size",
          "description": ""
        },
        {
          "name": "compress",
          "type": "bool",
          "setter": "set_compress",
          "getter": "is_compressed",
          "description": ""
        },
        {
          "name": "dynamic_data",
          "type": "PoolIntArray",
          "setter": "set_dynamic_data",
          "getter": "get_dynamic_data",
          "description": ""
        },
        {
          "name": "dynamic_range",
          "type": "int",
          "setter": "set_dynamic_range",
          "getter": "get_dynamic_range",
          "description": ""
        },
        {
          "name": "energy",
          "type": "float",
          "setter": "set_energy",
          "getter": "get_energy",
          "description": ""
        },
        {
          "name": "interior",
          "type": "bool",
          "setter": "set_interior",
          "getter": "is_interior",
          "description": ""
        },
        {
          "name": "normal_bias",
          "type": "float",
          "setter": "set_normal_bias",
          "getter": "get_normal_bias",
          "description": ""
        },
        {
          "name": "propagation",
          "type": "float",
          "setter": "set_propagation",
          "getter": "get_propagation",
          "description": ""
        },
        {
          "name": "to_cell_xform",
          "type": "Transform",
          "setter": "set_to_cell_xform",
          "getter": "get_to_cell_xform",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Navigation": {
      "name": "Navigation",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A collection of [code]NavigationMesh[/code] resources and methods used for pathfinding.",
      "description": "The Navigation node is used for basic or advanced navigation. By default it will automatically collect all child [code]NavigationMesh[/code] resources, but they can also be added on the fly through scripting. It can be used for generating a simple path between two points or it can be used to ensure that a navigation agent is angled perfectly to the terrain it is navigating.",
      "methods": [
        {
          "name": "get_closest_point",
          "description": "Returns the closest navigation point to the point passed.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_normal",
          "description": "Returns the surface normal of the navigation mesh at the point passed. For instance, if the point passed was at a 45 degree slope it would return something like (0.5,0.5,0). This is useful for rotating a navigation agent in accordance with the [code]NavigationMesh[/code].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_owner",
          "description": "Returns the nearest [code]NavigationMeshInstance[/code] to the point passed.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment",
          "description": "Returns the nearest point to the line segment passed. The third optional parameter takes collisions into account.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "use_collision",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_simple_path",
          "description": "Returns a path of points as a [code]PoolVector3Array[/code]. If [code]optimize[/code] is false the [code]NavigationMesh[/code] agent properties will be taken into account, otherwise it will return the nearest path and ignore agent radius, height, etc.",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "optimize",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "navmesh_add",
          "description": "Adds a [code]NavigationMesh[/code] to the list of NavigationMesh's in this node. Returns an id. Its position, rotation and scale are associated with the [code]Transform[/code] passed. The [code]Node[/code] (or [code]Object[/code]) that owns this node is an optional parameter.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "NavigationMesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "owner",
              "type": "Object",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "navmesh_remove",
          "description": "Removes a [code]NavigationMesh[/code] from the list of NavigationMesh's in this node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "navmesh_set_transform",
          "description": "Associates a [code]NavigationMesh[/code]'s id with a [code]Transform[/code]. Its position, rotation and scale are based on the [code]Transform[/code] passed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "up_vector",
          "type": "Vector3",
          "setter": "set_up_vector",
          "getter": "get_up_vector",
          "description": "Defines which direction is up. The default defines 0,1,0 as up which is the world up direction. To make this a ceiling use 0,-1,0 to define down as up."
        }
      ],
      "theme_properties": []
    },
    "GraphNode": {
      "name": "GraphNode",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A GraphNode is a container with several input and output slots allowing connections between GraphNodes. Slots can have different, incompatible types.",
      "description": "A GraphNode is a container defined by a title. It can have 1 or more input and output slots, which can be enabled (shown) or disabled (not shown) and have different (incompatible) types. Colors can also be assigned to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input and output connections are left and right slots, but only enabled slots are counted as connections.",
      "methods": [
        {
          "name": "clear_all_slots",
          "description": "Disable all input and output slots of the GraphNode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_slot",
          "description": "Disable input and output slot whose index is 'idx'.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_input_color",
          "description": "Return the color of the input connection 'idx'.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_input_count",
          "description": "Return the number of enabled input slots (connections) to the GraphNode.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connection_input_position",
          "description": "Return the position of the input connection 'idx'.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_input_type",
          "description": "Return the type of the input connection 'idx'.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_output_color",
          "description": "Return the color of the output connection 'idx'.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_output_count",
          "description": "Return the number of enabled output slots (connections) of the GraphNode.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connection_output_position",
          "description": "Return the position of the output connection 'idx'.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_output_type",
          "description": "Return the type of the output connection 'idx'.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_color_left",
          "qualifiers": "const",
          "description": "Return the color set to 'idx' left (input) slot.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_color_right",
          "qualifiers": "const",
          "description": "Return the color set to 'idx' right (output) slot.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_type_left",
          "qualifiers": "const",
          "description": "Return the (integer) type of left (input) 'idx' slot.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_type_right",
          "qualifiers": "const",
          "description": "Return the (integer) type of right (output) 'idx' slot.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_slot_enabled_left",
          "qualifiers": "const",
          "description": "Return true if left (input) slot 'idx' is enabled. False otherwise.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_slot_enabled_right",
          "qualifiers": "const",
          "description": "Return true if right (output) slot 'idx' is enabled. False otherwise.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_slot",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable_left",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "type_left",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "color_left",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "enable_right",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "type_right",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "color_right",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "custom_left",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "8",
              "name": "custom_right",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "close_request",
          "description": "Signal sent on closing the GraphNode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "dragged",
          "description": "Signal sent when the GraphNode is dragged.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "offset_changed",
          "description": "Signal sent when the GraphNode is moved.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "raise_request",
          "description": "Signal sent when the GraphNode is requested to be displayed over other ones. Happens on focusing (clicking into) the GraphNode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resize_request",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "new_minsize",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "OVERLAY_DISABLED",
          "value": "0",
          "enum": "Overlay",
          "description": ""
        },
        {
          "name": "OVERLAY_BREAKPOINT",
          "value": "1",
          "enum": "Overlay",
          "description": ""
        },
        {
          "name": "OVERLAY_POSITION",
          "value": "2",
          "enum": "Overlay",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "comment",
          "type": "bool",
          "setter": "set_comment",
          "getter": "is_comment",
          "description": ""
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The offset of the GraphNode, relative to the scroll offset of the [GraphEdit]. Note that you cannot use position directly, as [GraphEdit] is a [Container]."
        },
        {
          "name": "overlay",
          "type": "int",
          "setter": "set_overlay",
          "getter": "get_overlay",
          "enum": "GraphNode.Overlay",
          "description": ""
        },
        {
          "name": "resizable",
          "type": "bool",
          "setter": "set_resizable",
          "getter": "is_resizable",
          "description": ""
        },
        {
          "name": "selected",
          "type": "bool",
          "setter": "set_selected",
          "getter": "is_selected",
          "description": ""
        },
        {
          "name": "show_close",
          "type": "bool",
          "setter": "set_show_close_button",
          "getter": "is_close_button_visible",
          "description": ""
        },
        {
          "name": "title",
          "type": "String",
          "setter": "set_title",
          "getter": "get_title",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "breakpoint",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "close",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "close_offset",
          "type": "int",
          "description": ""
        },
        {
          "name": "comment",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "commentfocus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "defaultfocus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "defaultframe",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "frame",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "port",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "port_offset",
          "type": "int",
          "description": ""
        },
        {
          "name": "position",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "resizer",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "selectedframe",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "title_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "title_offset",
          "type": "int",
          "description": ""
        }
      ]
    },
    "CollisionPolygon2D": {
      "name": "CollisionPolygon2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Defines a 2D collision polygon.",
      "description": "Provides a 2D collision polygon to a [CollisionObject2D] parent. Polygon can be drawn in the editor or specified by a list of vertices.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "BUILD_SOLIDS",
          "value": "0",
          "enum": "BuildMode",
          "description": "Collisions will include the polygon and its contained area."
        },
        {
          "name": "BUILD_SEGMENTS",
          "value": "1",
          "enum": "BuildMode",
          "description": "Collisions will only include the polygon edges."
        }
      ],
      "properties": [
        {
          "name": "build_mode",
          "type": "int",
          "setter": "set_build_mode",
          "getter": "get_build_mode",
          "enum": "CollisionPolygon2D.BuildMode",
          "description": "Collision build mode. Use one of the [code]BUILD_*[/code] constants. Default value: [code]BUILD_SOLIDS[/code]."
        },
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": "If [code]true[/code] no collisions will be detected."
        },
        {
          "name": "one_way_collision",
          "type": "bool",
          "setter": "set_one_way_collision",
          "getter": "is_one_way_collision_enabled",
          "description": "If [code]true[/code] only edges that face up, relative to CollisionPolygon2D's rotation, will collide with other objects."
        },
        {
          "name": "polygon",
          "type": "PoolVector2Array",
          "setter": "set_polygon",
          "getter": "get_polygon",
          "description": "The polygon's list of vertices. The final point will be connected to the first."
        }
      ],
      "theme_properties": []
    },
    "CurveTexture": {
      "name": "CurveTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A texture that shows a curve.",
      "description": "Renders a given [Curve] provided to it. Simplifies the task of drawing curves and/or saving them as image files.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "curve",
          "type": "Curve",
          "setter": "set_curve",
          "getter": "get_curve",
          "description": "The [code]curve[/code] rendered onto the texture."
        },
        {
          "name": "width",
          "type": "int",
          "setter": "set_width",
          "getter": "get_width",
          "description": "The width of the texture."
        }
      ],
      "theme_properties": []
    },
    "StyleBoxFlat": {
      "name": "StyleBoxFlat",
      "inherits": "StyleBox",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Customizable Stylebox with a given set of parameters. (no texture required)",
      "description": "This stylebox can be used to achieve all kinds of looks without the need of a texture. Those properties are customizable:\n\t\t - Color\n\t\t - Border width (individual width for each border)\n\t\t - Rounded corners (individual radius for each corner)\n\t\t - Shadow\n\t\t About corner radius:\n\t\t \tSetting corner radius to high values is allowed. As soon as corners would overlap the stylebox will switch to a relative system. Example:\n\t\t\t[codeblock]\n\t\t\theight = 30\n\t\t\tcorner_radius_top_left = 50\n\t\t\tcorner_radius_bottom_left = 100\n\t\t\t[/codeblock]\n\t\t\tThe relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will [b]never[/b] be more than the height. Result:\n\t\t\t[codeblock]\n\t\t\tcorner_radius_top_left: 10\n\t\t\tcorner_radius_bottom_left: 20\n\t\t\t[/codeblock]",
      "methods": [
        {
          "name": "get_border_width_min",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_border_width_all",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_corner_radius_all",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_corner_radius_individual",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius_top_left",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radius_top_right",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "radius_bottom_right",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "radius_bottom_left",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_all",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_individual",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size_left",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size_top",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "size_right",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "size_bottom",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "anti_aliasing",
          "type": "bool",
          "setter": "set_anti_aliased",
          "getter": "is_anti_aliased",
          "description": "Anti Aliasing draws a small ring around edges. This ring fades to transparent. As a result edges look much smoother. This is only noticeable when using rounded corners."
        },
        {
          "name": "anti_aliasing_size",
          "type": "int",
          "setter": "set_aa_size",
          "getter": "get_aa_size",
          "description": "This changes the size of the faded ring. Higher values can be used to achieve a \"blurry\" effect."
        },
        {
          "name": "bg_color",
          "type": "Color",
          "setter": "set_bg_color",
          "getter": "get_bg_color",
          "description": "The background color of the stylebox."
        },
        {
          "name": "border_blend",
          "type": "bool",
          "setter": "set_border_blend",
          "getter": "get_border_blend",
          "description": "When set to true, the border will fade into the background color."
        },
        {
          "name": "border_color",
          "type": "Color",
          "setter": "set_border_color",
          "getter": "get_border_color",
          "description": "Sets the color of the border."
        },
        {
          "name": "border_width_bottom",
          "type": "int",
          "setter": "set_border_width",
          "getter": "get_border_width",
          "description": "Border width for the bottom border."
        },
        {
          "name": "border_width_left",
          "type": "int",
          "setter": "set_border_width",
          "getter": "get_border_width",
          "description": "Border width for the left border."
        },
        {
          "name": "border_width_right",
          "type": "int",
          "setter": "set_border_width",
          "getter": "get_border_width",
          "description": "Border width for the right border."
        },
        {
          "name": "border_width_top",
          "type": "int",
          "setter": "set_border_width",
          "getter": "get_border_width",
          "description": "Border width for the top border."
        },
        {
          "name": "corner_detail",
          "type": "int",
          "setter": "set_corner_detail",
          "getter": "get_corner_detail",
          "description": "This sets the amount of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value you should take the corner radius ([method set_corner_radius]) into account.\n\t\t\tFor corner radius smaller than 10: 4-5 should be enough\n\t\t\tFor corner radius smaller than 30: 8-12 should be enough ..."
        },
        {
          "name": "corner_radius_bottom_left",
          "type": "int",
          "setter": "set_corner_radius",
          "getter": "get_corner_radius",
          "description": "The corner radius of the bottom left corner. When set to 0 the corner is not rounded."
        },
        {
          "name": "corner_radius_bottom_right",
          "type": "int",
          "setter": "set_corner_radius",
          "getter": "get_corner_radius",
          "description": "The corner radius of the bottom right corner. When set to 0 the corner is not rounded."
        },
        {
          "name": "corner_radius_top_left",
          "type": "int",
          "setter": "set_corner_radius",
          "getter": "get_corner_radius",
          "description": "The corner radius of the top left corner. When set to 0 the corner is not rounded."
        },
        {
          "name": "corner_radius_top_right",
          "type": "int",
          "setter": "set_corner_radius",
          "getter": "get_corner_radius",
          "description": "The corner radius of the top right corner. When set to 0 the corner is not rounded."
        },
        {
          "name": "draw_center",
          "type": "bool",
          "setter": "set_draw_center",
          "getter": "is_draw_center_enabled",
          "description": "Toggels drawing of the inner part of the stylebox."
        },
        {
          "name": "expand_margin_bottom",
          "type": "float",
          "setter": "set_expand_margin",
          "getter": "get_expand_margin",
          "description": "Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with border_width_bottom. To draw a border outside the control rect."
        },
        {
          "name": "expand_margin_left",
          "type": "float",
          "setter": "set_expand_margin",
          "getter": "get_expand_margin",
          "description": "Expands the stylebox outside of the control rect on the left edge. Useful in combination with border_width_left. To draw a border outside the control rect."
        },
        {
          "name": "expand_margin_right",
          "type": "float",
          "setter": "set_expand_margin",
          "getter": "get_expand_margin",
          "description": "Expands the stylebox outside of the control rect on the right edge. Useful in combination with border_width_right. To draw a border outside the control rect."
        },
        {
          "name": "expand_margin_top",
          "type": "float",
          "setter": "set_expand_margin",
          "getter": "get_expand_margin",
          "description": "Expands the stylebox outside of the control rect on the top edge. Useful in combination with border_width_top. To draw a border outside the control rect."
        },
        {
          "name": "shadow_color",
          "type": "Color",
          "setter": "set_shadow_color",
          "getter": "get_shadow_color",
          "description": "The color of the shadow. (This has no effect when shadow_size < 1)"
        },
        {
          "name": "shadow_size",
          "type": "int",
          "setter": "set_shadow_size",
          "getter": "get_shadow_size",
          "description": "The shadow size in pixels."
        }
      ],
      "theme_properties": []
    },
    "GDScriptFunctionState": {
      "name": "GDScriptFunctionState",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "State of a function call after yielding.",
      "description": "Calling [method @GDScript.yield] within a function will cause that function to yield and return its current state as an object of this type. The yielded function call can then be resumed later by calling [method resume] on this state object.",
      "methods": [
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "Check whether the function call may be resumed. This is not the case if the function state was already resumed.\n\t\t\t\tIf [code]extended_check[/code] is enabled, it also checks if the associated script and object still exist. The extended check is done in debug mode as part of [method GDScriptFunctionState.resume], but you can use this if you know you may be trying to resume without knowing for sure the object and/or script have survived up to that point.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "extended_check",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "resume",
          "description": "Resume execution of the yielded function call.\n\t\t\t\tIf handed an argument, return the argument from the [method @GDScript.yield] call in the yielded function call. You can pass e.g. an [Array] to hand multiple arguments.\n\t\t\t\tThis function returns what the resumed function call returns, possibly another function state if yielded again.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "completed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "result",
              "type": "Nil",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsServer": {
      "name": "PhysicsServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Server interface for low level physics access.",
      "description": "Everything related to physics in 3D.",
      "methods": [
        {
          "name": "area_add_shape",
          "description": "Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )"
            }
          ]
        },
        {
          "name": "area_attach_object_instance_id",
          "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_clear_shapes",
          "description": "Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_create",
          "description": "Creates an [Area].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "area_get_object_instance_id",
          "qualifiers": "const",
          "description": "Gets the instance ID of the object the area is assigned to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_param",
          "qualifiers": "const",
          "description": "Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.AreaParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape",
          "qualifiers": "const",
          "description": "Returns the [RID] of the nth shape of an area.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_count",
          "qualifiers": "const",
          "description": "Returns the number of shapes assigned to an area.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_transform",
          "qualifiers": "const",
          "description": "Returns the transform matrix of a shape within an area.",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space",
          "qualifiers": "const",
          "description": "Returns the space assigned to the area.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space_override_mode",
          "qualifiers": "const",
          "description": "Returns the space override mode for the area.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_transform",
          "qualifiers": "const",
          "description": "Returns the transform matrix for an area.",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_is_ray_pickable",
          "qualifiers": "const",
          "description": "If [code]true[/code] area collides with rays.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_remove_shape",
          "description": "Removes a shape from an area. It does not delete the shape, so it can be reassigned later.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_layer",
          "description": "Assigns the area to one or many physics layers.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_mask",
          "description": "Sets which physics layers the area will monitor.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_monitor_callback",
          "description": "Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:\n\t\t\t\t1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.\n\t\t\t\t2: [RID] of the object that entered/exited the area.\n\t\t\t\t3: Instance ID of the object that entered/exited the area.\n\t\t\t\t4: The shape index of the object that entered/exited the area.\n\t\t\t\t5: The shape index of the area where the object entered/exited.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_param",
          "description": "Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.AreaParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_ray_pickable",
          "description": "Sets object pickable with rays.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape",
          "description": "Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape_transform",
          "description": "Sets the transform matrix for an area shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space",
          "description": "Assigns a space to the area.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space_override_mode",
          "description": "Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "PhysicsServer.AreaSpaceOverrideMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_transform",
          "description": "Sets the transform matrix for an area.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_collision_exception",
          "description": "Adds a body to the list of bodies exempt from collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_shape",
          "description": "Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )"
            }
          ]
        },
        {
          "name": "body_apply_impulse",
          "description": "Gives the body a push at a [code]position[/code] in the direction of the [code]impulse[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "impulse",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_apply_torque_impulse",
          "description": "Gives the body a push to rotate it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "impulse",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_attach_object_instance_id",
          "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_clear_shapes",
          "description": "Removes all shapes from a body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_create",
          "description": "Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "PhysicsServer.BodyMode",
              "default_value": "2"
            },
            {
              "index": "1",
              "name": "init_sleeping",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "body_get_collision_layer",
          "qualifiers": "const",
          "description": "Returns the physics layer or layers a body belongs to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_collision_mask",
          "qualifiers": "const",
          "description": "Returns the physics layer or layers a body can collide with.\n-",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_direct_state",
          "description": "Returns the [PhysicsDirectBodyState] of the body.",
          "return_type": "PhysicsDirectBodyState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_kinematic_safe_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_max_contacts_reported",
          "qualifiers": "const",
          "description": "Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_mode",
          "qualifiers": "const",
          "description": "Returns the body mode.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_object_instance_id",
          "qualifiers": "const",
          "description": "Gets the instance ID of the object the area is assigned to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_param",
          "qualifiers": "const",
          "description": "Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.BodyParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape",
          "qualifiers": "const",
          "description": "Returns the [RID] of the nth shape of a body.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_count",
          "qualifiers": "const",
          "description": "Returns the number of shapes assigned to a body.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_transform",
          "qualifiers": "const",
          "description": "Returns the transform matrix of a body shape.",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_space",
          "qualifiers": "const",
          "description": "Returns the [RID] of the space assigned to a body.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_state",
          "qualifiers": "const",
          "description": "Returns a body state.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "enum": "PhysicsServer.BodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_axis_locked",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "PhysicsServer.BodyAxis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_continuous_collision_detection_enabled",
          "qualifiers": "const",
          "description": "If [code]true[/code] the continuous collision detection mode is enabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_omitting_force_integration",
          "qualifiers": "const",
          "description": "Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_ray_pickable",
          "qualifiers": "const",
          "description": "If [code]true[/code] the body can be detected by rays",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_collision_exception",
          "description": "Removes a body from the list of bodies exempt from collisions.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_shape",
          "description": "Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_axis_lock",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "PhysicsServer.BodyAxis",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "lock",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_axis_velocity",
          "description": "Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_layer",
          "description": "Sets the physics layer or layers a body belongs to.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_mask",
          "description": "Sets the physics layer or layers a body can collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_enable_continuous_collision_detection",
          "description": "If [code]true[/code] the continuous collision detection mode is enabled.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_force_integration_callback",
          "description": "Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force integration]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "body_set_kinematic_safe_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_max_contacts_reported",
          "description": "Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_mode",
          "description": "Sets the body mode, from one of the constants BODY_MODE*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "PhysicsServer.BodyMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_omit_force_integration",
          "description": "Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_param",
          "description": "Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.BodyParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_ray_pickable",
          "description": "Sets the body pickable with rays if [code]enabled[/code] is set.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape",
          "description": "Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_transform",
          "description": "Sets the transform matrix for a body shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_space",
          "description": "Assigns a space to the body (see [method create_space]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_state",
          "description": "Sets a body state (see BODY_STATE* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "enum": "PhysicsServer.BodyState",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cone_twist_joint_get_param",
          "qualifiers": "const",
          "description": "Gets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.ConeTwistJointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cone_twist_joint_set_param",
          "description": "Sets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.ConeTwistJointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "free_rid",
          "description": "Destroys any of the objects created by PhysicsServer. If the [RID] passed is not one of the objects that can be created by PhysicsServer, an error will be sent to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_get_flag",
          "description": "Gets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flag",
              "type": "int",
              "enum": "PhysicsServer.G6DOFJointAxisFlag",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_get_param",
          "description": "Gets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.G6DOFJointAxisParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_set_flag",
          "description": "Sets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flag",
              "type": "int",
              "enum": "PhysicsServer.G6DOFJointAxisFlag",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_set_param",
          "description": "Sets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.G6DOFJointAxisParam",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_process_info",
          "description": "Returns an Info defined by the [ProcessInfo] input given.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "process_info",
              "type": "int",
              "enum": "PhysicsServer.ProcessInfo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_get_flag",
          "qualifiers": "const",
          "description": "Gets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flag",
              "type": "int",
              "enum": "PhysicsServer.HingeJointFlag",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_get_param",
          "qualifiers": "const",
          "description": "Gets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.HingeJointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_set_flag",
          "description": "Sets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flag",
              "type": "int",
              "enum": "PhysicsServer.HingeJointFlag",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_set_param",
          "description": "Sets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.HingeJointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_cone_twist",
          "description": "Creates a [ConeTwistJoint].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ref_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_ref_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_generic_6dof",
          "description": "Creates a [Generic6DOFJoint].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ref_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_ref_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_hinge",
          "description": "Creates a [HingeJoint].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "hinge_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "hinge_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_pin",
          "description": "Creates a [PinJoint].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_A",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_B",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_slider",
          "description": "Creates a [SliderJoint].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ref_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_ref_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_solver_priority",
          "qualifiers": "const",
          "description": "Gets the priority value of the Joint.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_type",
          "qualifiers": "const",
          "description": "Returns the type of the Joint.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_set_solver_priority",
          "description": "Sets the priority value of the Joint.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "priority",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_get_local_a",
          "qualifiers": "const",
          "description": "Returns position of the joint in the local space of body a of the joint.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_get_local_b",
          "qualifiers": "const",
          "description": "Returns position of the joint in the local space of body b of the joint.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_get_param",
          "qualifiers": "const",
          "description": "Gets a pin_joint parameter (see PIN_JOINT* constants).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.PinJointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_set_local_a",
          "description": "Sets position of the joint in the local space of body a of the joint.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_A",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_set_local_b",
          "description": "Sets position of the joint in the local space of body b of the joint.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_B",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_set_param",
          "description": "Sets a pin_joint parameter (see PIN_JOINT* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.PinJointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_active",
          "description": "Activates or deactivates the 3D physics engine.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_create",
          "description": "Creates a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "PhysicsServer.ShapeType",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_data",
          "qualifiers": "const",
          "description": "Returns the shape data.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_type",
          "qualifiers": "const",
          "description": "Returns the type of shape (see SHAPE_* constants).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_set_data",
          "description": "Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slider_joint_get_param",
          "qualifiers": "const",
          "description": "Gets a slider_joint parameter (see SLIDER_JOINT* constants).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.SliderJointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slider_joint_set_param",
          "description": "Gets a slider_joint parameter (see SLIDER_JOINT* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.SliderJointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_create",
          "description": "Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "space_get_direct_state",
          "description": "Returns the state of a space, a [PhysicsDirectSpaceState]. This object can be used to make collision/intersection queries.",
          "return_type": "PhysicsDirectSpaceState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_get_param",
          "qualifiers": "const",
          "description": "Returns the value of a space parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.SpaceParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_is_active",
          "qualifiers": "const",
          "description": "Returns whether the space is active.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_active",
          "description": "Marks a space as active. It will not have an effect, unless it is assigned to an area or body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_param",
          "description": "Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.SpaceParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "JOINT_PIN",
          "value": "0",
          "enum": "JointType",
          "description": "The [Joint] is a [PinJoint]."
        },
        {
          "name": "JOINT_HINGE",
          "value": "1",
          "enum": "JointType",
          "description": "The [Joint] is a [HingeJoint]."
        },
        {
          "name": "JOINT_SLIDER",
          "value": "2",
          "enum": "JointType",
          "description": "The [Joint] is a [SliderJoint]."
        },
        {
          "name": "JOINT_CONE_TWIST",
          "value": "3",
          "enum": "JointType",
          "description": "The [Joint] is a [ConeTwistJoint]."
        },
        {
          "name": "JOINT_6DOF",
          "value": "4",
          "enum": "JointType",
          "description": "The [Joint] is a [Generic6DOFJoint]."
        },
        {
          "name": "PIN_JOINT_BIAS",
          "value": "0",
          "enum": "PinJointParam",
          "description": "The strength with which the pinned objects try to stay in positional relation to each other.\n\t\t\tThe higher, the stronger."
        },
        {
          "name": "PIN_JOINT_DAMPING",
          "value": "1",
          "enum": "PinJointParam",
          "description": "The strength with which the pinned objects try to stay in velocity relation to each other.\n\t\t\tThe higher, the stronger."
        },
        {
          "name": "PIN_JOINT_IMPULSE_CLAMP",
          "value": "2",
          "enum": "PinJointParam",
          "description": "If above 0, this value is the maximum value for an impulse that this Joint puts on it's ends."
        },
        {
          "name": "HINGE_JOINT_BIAS",
          "value": "0",
          "enum": "HingeJointParam",
          "description": "The speed with which the two bodies get pulled together when they move in different directions."
        },
        {
          "name": "HINGE_JOINT_LIMIT_UPPER",
          "value": "1",
          "enum": "HingeJointParam",
          "description": "The maximum rotation across the Hinge."
        },
        {
          "name": "HINGE_JOINT_LIMIT_LOWER",
          "value": "2",
          "enum": "HingeJointParam",
          "description": "The minimum rotation across the Hinge."
        },
        {
          "name": "HINGE_JOINT_LIMIT_BIAS",
          "value": "3",
          "enum": "HingeJointParam",
          "description": "The speed with which the rotation across the axis perpendicular to the hinge gets corrected."
        },
        {
          "name": "HINGE_JOINT_LIMIT_SOFTNESS",
          "value": "4",
          "enum": "HingeJointParam",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_RELAXATION",
          "value": "5",
          "enum": "HingeJointParam",
          "description": "The lower this value, the more the rotation gets slowed down."
        },
        {
          "name": "HINGE_JOINT_MOTOR_TARGET_VELOCITY",
          "value": "6",
          "enum": "HingeJointParam",
          "description": "Target speed for the motor."
        },
        {
          "name": "HINGE_JOINT_MOTOR_MAX_IMPULSE",
          "value": "7",
          "enum": "HingeJointParam",
          "description": "Maximum acceleration for the motor."
        },
        {
          "name": "HINGE_JOINT_FLAG_USE_LIMIT",
          "value": "0",
          "enum": "HingeJointFlag",
          "description": "If [code]true[/code] the Hinge has a maximum and a minimum rotation."
        },
        {
          "name": "HINGE_JOINT_FLAG_ENABLE_MOTOR",
          "value": "1",
          "enum": "HingeJointFlag",
          "description": "If [code]true[/code] a motor turns the Hinge"
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_UPPER",
          "value": "0",
          "enum": "SliderJointParam",
          "description": "The maximum difference between the pivot points on their x-axis before damping happens."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_LOWER",
          "value": "1",
          "enum": "SliderJointParam",
          "description": "The minimum difference between the pivot points on their x-axis before damping happens."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "enum": "SliderJointParam",
          "description": "A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION",
          "value": "3",
          "enum": "SliderJointParam",
          "description": "The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_DAMPING",
          "value": "4",
          "enum": "SliderJointParam",
          "description": "The amount of damping once the slider limits are surpassed."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_MOTION_SOFTNESS",
          "value": "5",
          "enum": "SliderJointParam",
          "description": "A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_MOTION_RESTITUTION",
          "value": "6",
          "enum": "SliderJointParam",
          "description": "The amount of restitution inside the slider limits."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_MOTION_DAMPING",
          "value": "7",
          "enum": "SliderJointParam",
          "description": "The amount of damping inside the slider limits."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS",
          "value": "8",
          "enum": "SliderJointParam",
          "description": "A factor applied to the movement across axes orthogonal to the slider."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION",
          "value": "9",
          "enum": "SliderJointParam",
          "description": "The amount of restitution when movement is across axes orthogonal to the slider."
        },
        {
          "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING",
          "value": "10",
          "enum": "SliderJointParam",
          "description": "The amount of damping when movement is across axes orthogonal to the slider."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_UPPER",
          "value": "11",
          "enum": "SliderJointParam",
          "description": "The upper limit of rotation in the slider."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_LOWER",
          "value": "12",
          "enum": "SliderJointParam",
          "description": "The lower limit of rotation in the slider."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS",
          "value": "13",
          "enum": "SliderJointParam",
          "description": "A factor applied to the all rotation once the limit is surpassed."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION",
          "value": "14",
          "enum": "SliderJointParam",
          "description": "The amount of restitution of the rotation when the limit is surpassed."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_DAMPING",
          "value": "15",
          "enum": "SliderJointParam",
          "description": "The amount of damping of the rotation when the limit is surpassed."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS",
          "value": "16",
          "enum": "SliderJointParam",
          "description": "A factor that gets applied to the all rotation in the limits."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION",
          "value": "17",
          "enum": "SliderJointParam",
          "description": "The amount of restitution of the rotation in the limits."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_MOTION_DAMPING",
          "value": "18",
          "enum": "SliderJointParam",
          "description": "The amount of damping of the rotation in the limits."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS",
          "value": "19",
          "enum": "SliderJointParam",
          "description": "A factor that gets applied to the all rotation across axes orthogonal to the slider."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION",
          "value": "20",
          "enum": "SliderJointParam",
          "description": "The amount of restitution of the rotation across axes orthogonal to the slider."
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING",
          "value": "21",
          "enum": "SliderJointParam",
          "description": "The amount of damping of the rotation across axes orthogonal to the slider."
        },
        {
          "name": "SLIDER_JOINT_MAX",
          "value": "22",
          "enum": "SliderJointParam",
          "description": "End flag of SLIDER_JOINT_* constants, used internally."
        },
        {
          "name": "CONE_TWIST_JOINT_SWING_SPAN",
          "value": "0",
          "enum": "ConeTwistJointParam",
          "description": "Swing is rotation from side to side, around the axis perpendicular to the twist axis.\n\t\t\tThe swing span defines, how much rotation will not get corrected allong the swing axis.\n\t\t\tCould be defined as looseness in the [ConeTwistJoint].\n\t\t\tIf below 0.05, this behaviour is locked. Default value: [code]PI/4[/code]."
        },
        {
          "name": "CONE_TWIST_JOINT_TWIST_SPAN",
          "value": "1",
          "enum": "ConeTwistJointParam",
          "description": "Twist is the rotation around the twist axis, this value defined how far the joint can twist.\n\t\t\tTwist is locked if below 0.05."
        },
        {
          "name": "CONE_TWIST_JOINT_BIAS",
          "value": "2",
          "enum": "ConeTwistJointParam",
          "description": "The speed with which the swing or twist will take place.\n\t\t\tThe higher, the faster."
        },
        {
          "name": "CONE_TWIST_JOINT_SOFTNESS",
          "value": "3",
          "enum": "ConeTwistJointParam",
          "description": "The ease with which the Joint twists, if it's too low, it takes more force to twist the joint."
        },
        {
          "name": "CONE_TWIST_JOINT_RELAXATION",
          "value": "4",
          "enum": "ConeTwistJointParam",
          "description": "Defines, how fast the swing- and twist-speed-difference on both sides gets synced."
        },
        {
          "name": "G6DOF_JOINT_LINEAR_LOWER_LIMIT",
          "value": "0",
          "enum": "G6DOFJointAxisParam",
          "description": "The minimum difference between the pivot points' axes."
        },
        {
          "name": "G6DOF_JOINT_LINEAR_UPPER_LIMIT",
          "value": "1",
          "enum": "G6DOFJointAxisParam",
          "description": "The maximum difference between the pivot points' axes."
        },
        {
          "name": "G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "enum": "G6DOFJointAxisParam",
          "description": "A factor that gets applied to the movement across the axes. The lower, the slower the movement."
        },
        {
          "name": "G6DOF_JOINT_LINEAR_RESTITUTION",
          "value": "3",
          "enum": "G6DOFJointAxisParam",
          "description": "The amount of restitution on the axes movement. The lower, the more velocity-energy gets lost."
        },
        {
          "name": "G6DOF_JOINT_LINEAR_DAMPING",
          "value": "4",
          "enum": "G6DOFJointAxisParam",
          "description": "The amount of damping that happens at the linear motion across the axes."
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_LOWER_LIMIT",
          "value": "5",
          "enum": "G6DOFJointAxisParam",
          "description": "The minimum rotation in negative direction to break loose and rotate around the axes."
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_UPPER_LIMIT",
          "value": "6",
          "enum": "G6DOFJointAxisParam",
          "description": "The minimum rotation in positive direction to break loose and rotate around the axes."
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS",
          "value": "7",
          "enum": "G6DOFJointAxisParam",
          "description": "A factor that gets multiplied onto all rotations across the axes."
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_DAMPING",
          "value": "8",
          "enum": "G6DOFJointAxisParam",
          "description": "The amount of rotational damping across the axes. The lower, the more dampening occurs."
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_RESTITUTION",
          "value": "9",
          "enum": "G6DOFJointAxisParam",
          "description": "The amount of rotational restitution across the axes. The lower, the more restitution occurs."
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_FORCE_LIMIT",
          "value": "10",
          "enum": "G6DOFJointAxisParam",
          "description": "The maximum amount of force that can occur, when rotating around the axes."
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_ERP",
          "value": "11",
          "enum": "G6DOFJointAxisParam",
          "description": "When correcting the crossing of limits in rotation across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower."
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY",
          "value": "12",
          "enum": "G6DOFJointAxisParam",
          "description": "Target speed for the motor at the axes."
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT",
          "value": "13",
          "enum": "G6DOFJointAxisParam",
          "description": "Maximum acceleration for the motor at the axes."
        },
        {
          "name": "G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT",
          "value": "0",
          "enum": "G6DOFJointAxisFlag",
          "description": "If [code]set[/code] there is linear motion possible within the given limits."
        },
        {
          "name": "G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT",
          "value": "1",
          "enum": "G6DOFJointAxisFlag",
          "description": "If [code]set[/code] there is rotational motion possible."
        },
        {
          "name": "G6DOF_JOINT_FLAG_ENABLE_MOTOR",
          "value": "2",
          "enum": "G6DOFJointAxisFlag",
          "description": "If [code]set[/code] there is a rotational motor across these axes."
        },
        {
          "name": "SHAPE_PLANE",
          "value": "0",
          "enum": "ShapeType",
          "description": "The [Shape] is a [PlaneShape]."
        },
        {
          "name": "SHAPE_RAY",
          "value": "1",
          "enum": "ShapeType",
          "description": "The [Shape] is a [RayShape]."
        },
        {
          "name": "SHAPE_SPHERE",
          "value": "2",
          "enum": "ShapeType",
          "description": "The [Shape] is a [SphereShape]."
        },
        {
          "name": "SHAPE_BOX",
          "value": "3",
          "enum": "ShapeType",
          "description": "The [Shape] is a [BoxShape]."
        },
        {
          "name": "SHAPE_CAPSULE",
          "value": "4",
          "enum": "ShapeType",
          "description": "The [Shape] is a [CapsuleShape]."
        },
        {
          "name": "SHAPE_CONVEX_POLYGON",
          "value": "5",
          "enum": "ShapeType",
          "description": "The [Shape] is a [ConvexPolygonShape]."
        },
        {
          "name": "SHAPE_CONCAVE_POLYGON",
          "value": "6",
          "enum": "ShapeType",
          "description": "The [Shape] is a [ConcavePolygonShape]."
        },
        {
          "name": "SHAPE_HEIGHTMAP",
          "value": "7",
          "enum": "ShapeType",
          "description": "The [Shape] is a [HeightMapShape]."
        },
        {
          "name": "SHAPE_CUSTOM",
          "value": "8",
          "enum": "ShapeType",
          "description": "This constant is used internally by the engine. Any attempt to create this kind of shape results in an error."
        },
        {
          "name": "AREA_PARAM_GRAVITY",
          "value": "0",
          "enum": "AreaParameter",
          "description": "Constant to set/get gravity strength in an area."
        },
        {
          "name": "AREA_PARAM_GRAVITY_VECTOR",
          "value": "1",
          "enum": "AreaParameter",
          "description": "Constant to set/get gravity vector/center in an area."
        },
        {
          "name": "AREA_PARAM_GRAVITY_IS_POINT",
          "value": "2",
          "enum": "AreaParameter",
          "description": "Constant to set/get whether the gravity vector of an area is a direction, or a center point."
        },
        {
          "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE",
          "value": "3",
          "enum": "AreaParameter",
          "description": "Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance."
        },
        {
          "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION",
          "value": "4",
          "enum": "AreaParameter",
          "description": "This constant was used to set/get the falloff factor for point gravity. It has been superseded by AREA_PARAM_GRAVITY_DISTANCE_SCALE."
        },
        {
          "name": "AREA_PARAM_LINEAR_DAMP",
          "value": "5",
          "enum": "AreaParameter",
          "description": "Constant to set/get the linear dampening factor of an area."
        },
        {
          "name": "AREA_PARAM_ANGULAR_DAMP",
          "value": "6",
          "enum": "AreaParameter",
          "description": "Constant to set/get the angular dampening factor of an area."
        },
        {
          "name": "AREA_PARAM_PRIORITY",
          "value": "7",
          "enum": "AreaParameter",
          "description": "Constant to set/get the priority (order of processing) of an area."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one."
        },
        {
          "name": "BODY_MODE_STATIC",
          "value": "0",
          "enum": "BodyMode",
          "description": "Constant for static bodies."
        },
        {
          "name": "BODY_MODE_KINEMATIC",
          "value": "1",
          "enum": "BodyMode",
          "description": "Constant for kinematic bodies."
        },
        {
          "name": "BODY_MODE_RIGID",
          "value": "2",
          "enum": "BodyMode",
          "description": "Constant for rigid bodies."
        },
        {
          "name": "BODY_MODE_SOFT",
          "value": "3",
          "enum": "BodyMode",
          "description": ""
        },
        {
          "name": "BODY_MODE_CHARACTER",
          "value": "4",
          "enum": "BodyMode",
          "description": "Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics."
        },
        {
          "name": "BODY_PARAM_BOUNCE",
          "value": "0",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's bounce factor."
        },
        {
          "name": "BODY_PARAM_FRICTION",
          "value": "1",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's friction."
        },
        {
          "name": "BODY_PARAM_MASS",
          "value": "2",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's mass."
        },
        {
          "name": "BODY_PARAM_GRAVITY_SCALE",
          "value": "3",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's gravity multiplier."
        },
        {
          "name": "BODY_PARAM_LINEAR_DAMP",
          "value": "4",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's linear dampening factor."
        },
        {
          "name": "BODY_PARAM_ANGULAR_DAMP",
          "value": "5",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's angular dampening factor."
        },
        {
          "name": "BODY_PARAM_MAX",
          "value": "6",
          "enum": "BodyParameter",
          "description": "This is the last ID for body parameters. Any attempt to set this property is ignored. Any attempt to get it returns 0."
        },
        {
          "name": "BODY_STATE_TRANSFORM",
          "value": "0",
          "enum": "BodyState",
          "description": "Constant to set/get the current transform matrix of the body."
        },
        {
          "name": "BODY_STATE_LINEAR_VELOCITY",
          "value": "1",
          "enum": "BodyState",
          "description": "Constant to set/get the current linear velocity of the body."
        },
        {
          "name": "BODY_STATE_ANGULAR_VELOCITY",
          "value": "2",
          "enum": "BodyState",
          "description": "Constant to set/get the current angular velocity of the body."
        },
        {
          "name": "BODY_STATE_SLEEPING",
          "value": "3",
          "enum": "BodyState",
          "description": "Constant to sleep/wake up a body, or to get whether it is sleeping."
        },
        {
          "name": "BODY_STATE_CAN_SLEEP",
          "value": "4",
          "enum": "BodyState",
          "description": "Constant to set/get whether the body can sleep."
        },
        {
          "name": "AREA_BODY_ADDED",
          "value": "0",
          "enum": "AreaBodyStatus",
          "description": "The value of the first parameter and area callback function receives, when an object enters one of its shapes."
        },
        {
          "name": "AREA_BODY_REMOVED",
          "value": "1",
          "enum": "AreaBodyStatus",
          "description": "The value of the first parameter and area callback function receives, when an object exits one of its shapes."
        },
        {
          "name": "INFO_ACTIVE_OBJECTS",
          "value": "0",
          "enum": "ProcessInfo",
          "description": "Constant to get the number of objects that are not sleeping."
        },
        {
          "name": "INFO_COLLISION_PAIRS",
          "value": "1",
          "enum": "ProcessInfo",
          "description": "Constant to get the number of possible collisions."
        },
        {
          "name": "INFO_ISLAND_COUNT",
          "value": "2",
          "enum": "ProcessInfo",
          "description": "Constant to get the number of space regions where a collision could occur."
        },
        {
          "name": "SPACE_PARAM_CONTACT_RECYCLE_RADIUS",
          "value": "0",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated."
        },
        {
          "name": "SPACE_PARAM_CONTACT_MAX_SEPARATION",
          "value": "1",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the maximum distance a shape can be from another before they are considered separated."
        },
        {
          "name": "SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION",
          "value": "2",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision."
        },
        {
          "name": "SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD",
          "value": "3",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given."
        },
        {
          "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD",
          "value": "4",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given."
        },
        {
          "name": "SPACE_PARAM_BODY_TIME_TO_SLEEP",
          "value": "5",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time."
        },
        {
          "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO",
          "value": "6",
          "enum": "SpaceParameter",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS",
          "value": "7",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects \"rebound\", after violating a constraint, to avoid leaving them in that state because of numerical imprecision."
        },
        {
          "name": "BODY_AXIS_LINEAR_X",
          "value": "1",
          "enum": "BodyAxis",
          "description": ""
        },
        {
          "name": "BODY_AXIS_LINEAR_Y",
          "value": "2",
          "enum": "BodyAxis",
          "description": ""
        },
        {
          "name": "BODY_AXIS_LINEAR_Z",
          "value": "4",
          "enum": "BodyAxis",
          "description": ""
        },
        {
          "name": "BODY_AXIS_ANGULAR_X",
          "value": "8",
          "enum": "BodyAxis",
          "description": ""
        },
        {
          "name": "BODY_AXIS_ANGULAR_Y",
          "value": "16",
          "enum": "BodyAxis",
          "description": ""
        },
        {
          "name": "BODY_AXIS_ANGULAR_Z",
          "value": "32",
          "enum": "BodyAxis",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DDirectSpaceState": {
      "name": "Physics2DDirectSpaceState",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Direct access object to a space in the [Physics2DServer].",
      "description": "Direct access object to a space in the [Physics2DServer]. It's used mainly to do queries against objects and areas residing in a given space.",
      "methods": [
        {
          "name": "cast_motion",
          "description": "Checks how far the shape can travel toward a point. Note that both the shape and the motion are supplied through a [Physics2DShapeQueryParameters] object. The method will return an array with two floats between 0 and 1, both representing a fraction of [code]motion[/code]. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be [1, 1].\n\t\t\t\tIf the shape can not move, the array will be empty ([code]dir.empty()==true[/code]).",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_shape",
          "description": "Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        },
        {
          "name": "get_rest_info",
          "description": "Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. If it collides with more than one shape, the nearest one is selected. Note that this method does not take into account the [code]motion[/code] property of the object. The returned object is a dictionary containing the following fields:\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]linear_velocity[/code]: The colliding object's velocity [Vector2]. If the object is an [Area2D], the result is [code](0, 0)[/code].\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]point[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the shape did not intersect anything, then an empty dictionary ([code]dir.empty()==true[/code]) is returned instead.",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersect_point",
          "description": "Checks whether a point is inside any shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tAdditionally, the method can take an array of objects or [RID]s that are to be excluded from collisions, or a bitmask representing the physics layers to check in.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            },
            {
              "index": "2",
              "name": "exclude",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "3",
              "name": "collision_layer",
              "type": "int",
              "default_value": "2147483647"
            }
          ]
        },
        {
          "name": "intersect_ray",
          "description": "Intersects a ray in a given space. The returned object is a dictionary with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]position[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the ray did not intersect anything, then an empty dictionary ([code]dir.empty()==true[/code]) is returned instead.\n\t\t\t\tAdditionally, the method can take an array of objects or [RID]s that are to be excluded from collisions, or a bitmask representing the physics layers to check in.",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "exclude",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "3",
              "name": "collision_layer",
              "type": "int",
              "default_value": "2147483647"
            }
          ]
        },
        {
          "name": "intersect_shape",
          "description": "Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. Note that this method does not take into account the [code]motion[/code] property of the object. The intersected shapes are returned in an array containing dictionaries with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tThe number of intersections can be limited with the second parameter, to reduce the processing time.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StaticBody": {
      "name": "StaticBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Static body for 3D Physics.",
      "description": "Static body for 3D Physics. A static body is a simple body that is not intended to move. They don't consume any CPU resources in contrast to a [RigidBody3D] so they are great for scenario collision.\n\t\tA static body can also be animated by using simulated motion mode. This is useful for implementing functionalities such as moving platforms. When this mode is active the body can be animated and automatically computes linear and angular velocity to apply in that frame and to influence other bodies.\n\t\tAlternatively, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bounce",
          "type": "float",
          "setter": "set_bounce",
          "getter": "get_bounce",
          "description": "The body bounciness."
        },
        {
          "name": "constant_angular_velocity",
          "type": "Vector3",
          "setter": "set_constant_angular_velocity",
          "getter": "get_constant_angular_velocity",
          "description": "The constant angular velocity for the body. This does not rotate the body, but affects other bodies that touch it, as if it was in a state of rotation."
        },
        {
          "name": "constant_linear_velocity",
          "type": "Vector3",
          "setter": "set_constant_linear_velocity",
          "getter": "get_constant_linear_velocity",
          "description": "The constant linear velocity for the body. This does not move the body, but affects other bodies that touch it, as if it was in a state of movement."
        },
        {
          "name": "friction",
          "type": "float",
          "setter": "set_friction",
          "getter": "get_friction",
          "description": "The body friction, from 0 (frictionless) to 1 (full friction)."
        }
      ],
      "theme_properties": []
    },
    "BulletPhysicsServer": {
      "name": "BulletPhysicsServer",
      "inherits": "PhysicsServer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StreamPeerSSL": {
      "name": "StreamPeerSSL",
      "inherits": "StreamPeer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "SSL Stream peer.",
      "description": "SSL Stream peer. This object can be used to connect to SSL servers.",
      "methods": [
        {
          "name": "accept_stream",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "StreamPeer",
              "default_value": ""
            }
          ]
        },
        {
          "name": "connect_to_stream",
          "description": "Connect to a peer using an underlying [StreamPeer] \"stream\", when \"validate_certs\" is true, [code]StreamPeerSSL[/code] will validate that the certificate presented by the peer matches the \"for_hostname\".",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "StreamPeer",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "validate_certs",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "for_hostname",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "disconnect_from_stream",
          "description": "Disconnect from host.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_status",
          "qualifiers": "const",
          "description": "Return the status of the connection, one of STATUS_* enum.",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STATUS_DISCONNECTED",
          "value": "0",
          "enum": "Status",
          "description": "A status representing a [code]StreamPeerSSL[/code] that is disconnected."
        },
        {
          "name": "STATUS_CONNECTED",
          "value": "1",
          "enum": "Status",
          "description": "A status representing a [code]StreamPeerSSL[/code] that is connected to a host."
        },
        {
          "name": "STATUS_ERROR_NO_CERTIFICATE",
          "value": "2",
          "enum": "Status",
          "description": "An errot status that shows the peer did not present a SSL certificate and validation was requested."
        },
        {
          "name": "STATUS_ERROR_HOSTNAME_MISMATCH",
          "value": "3",
          "enum": "Status",
          "description": "An error status that shows a mismatch in the SSL certificate domain presented by the host and the domain requested for validation."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ResourceInteractiveLoader": {
      "name": "ResourceInteractiveLoader",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Interactive Resource Loader.",
      "description": "Interactive Resource Loader. This object is returned by ResourceLoader when performing an interactive load. It allows to load with high granularity, so this is mainly useful for displaying load bars/percentages.",
      "methods": [
        {
          "name": "get_resource",
          "description": "Return the loaded resource (only if loaded). Otherwise, returns null.",
          "return_type": "Resource",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_stage",
          "qualifiers": "const",
          "description": "Return the load stage. The total amount of stages can be queried with [method get_stage_count]",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_stage_count",
          "qualifiers": "const",
          "description": "Return the total amount of stages (calls to [method poll]) needed to completely load this resource.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "poll",
          "description": "Poll the load. If OK is returned, this means poll will have to be called again. If ERR_FILE_EOF is returned, them the load has finished and the resource can be obtained by calling [method get_resource].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "wait",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ResourceImporterTheora": {
      "name": "ResourceImporterTheora",
      "inherits": "ResourceImporter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MeshLibrary": {
      "name": "MeshLibrary",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Library of meshes.",
      "description": "Library of meshes. Contains a list of [Mesh] resources, each with name and ID. Useful for GridMap or painting Terrain.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear the library.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_item",
          "description": "Create a new item in the library, supplied an id.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_item_by_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_list",
          "qualifiers": "const",
          "description": "Return the list of items.",
          "return_type": "PoolIntArray",
          "arguments": []
        },
        {
          "name": "get_item_mesh",
          "qualifiers": "const",
          "description": "Return the mesh of the item.",
          "return_type": "Mesh",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_name",
          "qualifiers": "const",
          "description": "Return the name of the item.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_navmesh",
          "qualifiers": "const",
          "description": "",
          "return_type": "NavigationMesh",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_preview",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_shapes",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_last_unused_item_id",
          "qualifiers": "const",
          "description": "Get an unused id for a new item.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "remove_item",
          "description": "Remove the item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_mesh",
          "description": "Set the mesh of the item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_name",
          "description": "Set the name of the item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_navmesh",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "navmesh",
              "type": "NavigationMesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_preview",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_shapes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shapes",
              "type": "Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MeshDataTool": {
      "name": "MeshDataTool",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit_to_surface",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "ArrayMesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_from_surface",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "ArrayMesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edge_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_edge_faces",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edge_meta",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edge_vertex",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vertex",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_face_edge",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "edge",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_meta",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_vertex",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vertex",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_material",
          "qualifiers": "const",
          "description": "",
          "return_type": "Material",
          "arguments": []
        },
        {
          "name": "get_vertex",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_bones",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertex_edges",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_faces",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_meta",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_tangent",
          "qualifiers": "const",
          "description": "",
          "return_type": "Plane",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_uv",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_uv2",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_weights",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolRealArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edge_meta",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_face_meta",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_material",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vertex",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_bones",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bones",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_meta",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_normal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_tangent",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tangent",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_uv",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_uv2",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "uv2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_weights",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weights",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VehicleWheel": {
      "name": "VehicleWheel",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_skidinfo",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_in_contact",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "damping_compression",
          "type": "float",
          "setter": "set_damping_compression",
          "getter": "get_damping_compression",
          "description": ""
        },
        {
          "name": "damping_relaxation",
          "type": "float",
          "setter": "set_damping_relaxation",
          "getter": "get_damping_relaxation",
          "description": ""
        },
        {
          "name": "suspension_max_force",
          "type": "float",
          "setter": "set_suspension_max_force",
          "getter": "get_suspension_max_force",
          "description": ""
        },
        {
          "name": "suspension_stiffness",
          "type": "float",
          "setter": "set_suspension_stiffness",
          "getter": "get_suspension_stiffness",
          "description": ""
        },
        {
          "name": "suspension_travel",
          "type": "float",
          "setter": "set_suspension_travel",
          "getter": "get_suspension_travel",
          "description": ""
        },
        {
          "name": "use_as_steering",
          "type": "bool",
          "setter": "set_use_as_steering",
          "getter": "is_used_as_steering",
          "description": ""
        },
        {
          "name": "use_as_traction",
          "type": "bool",
          "setter": "set_use_as_traction",
          "getter": "is_used_as_traction",
          "description": ""
        },
        {
          "name": "wheel_friction_slip",
          "type": "float",
          "setter": "set_friction_slip",
          "getter": "get_friction_slip",
          "description": ""
        },
        {
          "name": "wheel_radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": ""
        },
        {
          "name": "wheel_rest_length",
          "type": "float",
          "setter": "set_suspension_rest_length",
          "getter": "get_suspension_rest_length",
          "description": ""
        },
        {
          "name": "wheel_roll_influence",
          "type": "float",
          "setter": "set_roll_influence",
          "getter": "get_roll_influence",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Image": {
      "name": "Image",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Image datatype.",
      "description": "Native image datatype. Contains image data, which can be converted to a [Texture], and several functions to interact with it. The maximum width and height for an [code]Image[/code] is 16384 pixels.",
      "methods": [
        {
          "name": "blend_rect",
          "description": "Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dest[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend_rect_mask",
          "description": "Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image using [code]mask[/code] image at coordinates [code]dst[/code]. Alpha channels are required for both [code]src[/code] and [code]mask[/code]. [code]dst[/code] pixels and [code]src[/code] pixels will blend if the corresponding mask pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "dst",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blit_rect",
          "description": "Copies [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dst[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blit_rect_mask",
          "description": "Blits [code]src_rect[/code] area from [code]src[/code] image to this image at the coordinates given by [code]dst[/code]. [code]src[/code] pixel is copied onto [code]dst[/code] if the corresponding [code]mask[/code] pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "dst",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_mipmaps",
          "description": "Removes the image's mipmaps.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "compress",
          "description": "Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See [code]COMPRESS_*[/code] constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Image.CompressMode",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "source",
              "type": "int",
              "enum": "Image.CompressSource",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "lossy_quality",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "convert",
          "description": "Converts the image's format. See [code]FORMAT_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "default_value": ""
            }
          ]
        },
        {
          "name": "copy_from",
          "description": "Copies [code]src[/code] image to this image.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create",
          "description": "Creates an empty image of given size and format. See [code]FORMAT_*[/code] constants. If [code]use_mipmaps[/code] is true then generate mipmaps for this image. See the [code]generate_mipmaps[/code] method.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "use_mipmaps",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_from_data",
          "description": "Creates a new image of given size and format. See [code]FORMAT_*[/code] constants. Fills the image with the given raw data. If [code]use_mipmaps[/code] is true then generate mipmaps for this image. See the [code]generate_mipmaps[/code] method.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "use_mipmaps",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "crop",
          "description": "Crops the image to the given [code]width[/code] and [code]height[/code]. If the specified size is larger than the current size, the extra area is filled with black pixels.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "decompress",
          "description": "Decompresses the image if it is compressed. Returns an error if decompress function is not available.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "detect_alpha",
          "qualifiers": "const",
          "description": "Returns ALPHA_BLEND if the image has data for alpha values. Returns ALPHA_BIT if all the alpha values are below a certain threshold or the maximum value. Returns ALPHA_NONE if no data for alpha values is found.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "expand_x2_hq2x",
          "description": "Stretches the image and enlarges it by a factor of 2. No interpolation is done.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "fill",
          "description": "Fills the image with a given [Color].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fix_alpha_edges",
          "description": "Blends low-alpha pixels with nearby pixels.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "flip_x",
          "description": "Flips the image horizontally.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "flip_y",
          "description": "Flips the image vertically.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "generate_mipmaps",
          "description": "Generates mipmaps for the image. Mipmaps are pre-calculated and lower resolution copies of the image. Mipmaps are automatically used if the image needs to be scaled down when rendered. This improves image quality and the performance of the rendering. Returns an error if the image is compressed, in a custom format or if the image's width/height is 0.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_data",
          "qualifiers": "const",
          "description": "Returns the image's raw data.",
          "return_type": "PoolByteArray",
          "arguments": []
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "Returns the image's raw data.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Returns the image's height.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mipmap_offset",
          "qualifiers": "const",
          "description": "Returns the offset where the image's mipmap with index [code]mipmap[/code] is stored in the [code]data[/code] dictionary.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "mipmap",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pixel",
          "qualifiers": "const",
          "description": "Returns the color of the pixel at [code](x, y)[/code] if the image is locked. If the image is unlocked it always returns a [Color] with the value [code](0, 0, 0, 1.0)[/code].",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Returns a new image that is a copy of the image's area specified with [code]rect[/code].",
          "return_type": "Image",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Returns the image's size (width and height).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_used_rect",
          "qualifiers": "const",
          "description": "Returns a [Rect2] enclosing the visible portion of the image.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_width",
          "qualifiers": "const",
          "description": "Returns the image's width.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_mipmaps",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the image has generated mipmaps.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_compressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the image is compressed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_empty",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the image has no data.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_invisible",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if all the image's pixels have an alpha value of 0. Returns [code]false[/code] if any pixel has an alpha value higher than 0.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "load",
          "description": "Loads an image from file [code]path[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load_jpg_from_buffer",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load_png_from_buffer",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "lock",
          "description": "Locks the data for writing access.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "normalmap_to_xy",
          "description": "Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normalmap. A normalmap can add lots of detail to a 3D surface without increasing the polygon count.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "premultiply_alpha",
          "description": "Multiplies color values with alpha values. Resulting color values for a pixel are [code](color * alpha)/256[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resize",
          "description": "Resizes the image to the given [code]width[/code] and [code]height[/code]. New pixels are calculated using [code]interpolation[/code]. See [code]interpolation[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "interpolation",
              "type": "int",
              "enum": "Image.Interpolation",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "resize_to_po2",
          "description": "Resizes the image to the nearest power of 2 for the width and height. If [code]square[/code] is [code]true[/code] then set width and height to be the same.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "square",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "save_png",
          "qualifiers": "const",
          "description": "Saves the image as a PNG file to [code]path[/code].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pixel",
          "description": "Sets the [Color] of the pixel at [code](x, y)[/code] if the image is locked. Example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar img = Image.new()\n\t\t\t\timg.create(img_width, img_height, false, Image.FORMAT_RGBA8)\n\t\t\t\timg.lock()\n\t\t\t\timg.set_pixel(x, y, color) # Works\n\t\t\t\timg.unlock()\n\t\t\t\timg.set_pixel(x, y, color) # Does not have an effect\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shrink_x2",
          "description": "Shrinks the image by a factor of 2.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "srgb_to_linear",
          "description": "Converts the raw data from the sRGB colorspace to a linear scale.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unlock",
          "description": "Unlocks the data and prevents changes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FORMAT_L8",
          "value": "0",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_LA8",
          "value": "1",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_R8",
          "value": "2",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RG8",
          "value": "3",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGB8",
          "value": "4",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGBA8",
          "value": "5",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGBA4444",
          "value": "6",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGBA5551",
          "value": "7",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RF",
          "value": "8",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGF",
          "value": "9",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGBF",
          "value": "10",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGBAF",
          "value": "11",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RH",
          "value": "12",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGH",
          "value": "13",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGBH",
          "value": "14",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGBAH",
          "value": "15",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGBE9995",
          "value": "16",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_DXT1",
          "value": "17",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_DXT3",
          "value": "18",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_DXT5",
          "value": "19",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGTC_R",
          "value": "20",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_RGTC_RG",
          "value": "21",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_BPTC_RGBA",
          "value": "22",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_BPTC_RGBF",
          "value": "23",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_BPTC_RGBFU",
          "value": "24",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC2",
          "value": "25",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC2A",
          "value": "26",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC4",
          "value": "27",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC4A",
          "value": "28",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_ETC",
          "value": "29",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_R11",
          "value": "30",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_R11S",
          "value": "31",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RG11",
          "value": "32",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RG11S",
          "value": "33",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RGB8",
          "value": "34",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RGBA8",
          "value": "35",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RGB8A1",
          "value": "36",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "FORMAT_MAX",
          "value": "37",
          "enum": "Format",
          "description": ""
        },
        {
          "name": "INTERPOLATE_NEAREST",
          "value": "0",
          "enum": "Interpolation",
          "description": ""
        },
        {
          "name": "INTERPOLATE_BILINEAR",
          "value": "1",
          "enum": "Interpolation",
          "description": ""
        },
        {
          "name": "INTERPOLATE_CUBIC",
          "value": "2",
          "enum": "Interpolation",
          "description": ""
        },
        {
          "name": "ALPHA_NONE",
          "value": "0",
          "enum": "AlphaMode",
          "description": ""
        },
        {
          "name": "ALPHA_BIT",
          "value": "1",
          "enum": "AlphaMode",
          "description": ""
        },
        {
          "name": "ALPHA_BLEND",
          "value": "2",
          "enum": "AlphaMode",
          "description": ""
        },
        {
          "name": "COMPRESS_S3TC",
          "value": "0",
          "enum": "CompressMode",
          "description": ""
        },
        {
          "name": "COMPRESS_PVRTC2",
          "value": "1",
          "enum": "CompressMode",
          "description": ""
        },
        {
          "name": "COMPRESS_PVRTC4",
          "value": "2",
          "enum": "CompressMode",
          "description": ""
        },
        {
          "name": "COMPRESS_ETC",
          "value": "3",
          "enum": "CompressMode",
          "description": ""
        },
        {
          "name": "COMPRESS_ETC2",
          "value": "4",
          "enum": "CompressMode",
          "description": ""
        },
        {
          "name": "COMPRESS_SOURCE_GENERIC",
          "value": "0",
          "enum": "CompressSource",
          "description": ""
        },
        {
          "name": "COMPRESS_SOURCE_SRGB",
          "value": "1",
          "enum": "CompressSource",
          "description": ""
        },
        {
          "name": "COMPRESS_SOURCE_NORMAL",
          "value": "2",
          "enum": "CompressSource",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "data",
          "type": "Dictionary",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": "Holds all of the image's color data in a given format. See [code]FORMAT_*[/code] constants."
        }
      ],
      "theme_properties": []
    },
    "Physics2DShapeQueryParameters": {
      "name": "Physics2DShapeQueryParameters",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Parameters to be sent to a 2D shape physics query.",
      "description": "This class contains the shape and other parameters for intersection/collision queries.",
      "methods": [
        {
          "name": "set_shape",
          "description": "Set the [Shape2D] that will be used for collision/intersection queries.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Resource",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The physics layer the query should be made on."
        },
        {
          "name": "exclude",
          "type": "Array",
          "setter": "set_exclude",
          "getter": "get_exclude",
          "description": "The list of objects or object [RID]s, that will be excluded from collisions."
        },
        {
          "name": "margin",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "The collision margin for the shape."
        },
        {
          "name": "motion",
          "type": "Vector2",
          "setter": "set_motion",
          "getter": "get_motion",
          "description": "The motion of the shape being queried for."
        },
        {
          "name": "shape_rid",
          "type": "RID",
          "setter": "set_shape_rid",
          "getter": "get_shape_rid",
          "description": "The [RID] of the queried shape. See [method set_shape] also."
        },
        {
          "name": "transform",
          "type": "Transform2D",
          "setter": "set_transform",
          "getter": "get_transform",
          "description": "the transform matrix of the queried shape."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptResourcePath": {
      "name": "VisualScriptResourcePath",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "path",
          "type": "String",
          "setter": "set_resource_path",
          "getter": "get_resource_path",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "BakedLightmap": {
      "name": "BakedLightmap",
      "inherits": "VisualInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "bake",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_node",
              "type": "Node",
              "default_value": "null"
            },
            {
              "index": "1",
              "name": "create_visual_debug",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "debug_bake",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "BAKE_QUALITY_LOW",
          "value": "0",
          "enum": "BakeQuality",
          "description": ""
        },
        {
          "name": "BAKE_QUALITY_MEDIUM",
          "value": "1",
          "enum": "BakeQuality",
          "description": ""
        },
        {
          "name": "BAKE_QUALITY_HIGH",
          "value": "2",
          "enum": "BakeQuality",
          "description": ""
        },
        {
          "name": "BAKE_MODE_CONE_TRACE",
          "value": "0",
          "enum": "BakeMode",
          "description": ""
        },
        {
          "name": "BAKE_MODE_RAY_TRACE",
          "value": "1",
          "enum": "BakeMode",
          "description": ""
        },
        {
          "name": "BAKE_ERROR_OK",
          "value": "0",
          "enum": "BakeError",
          "description": ""
        },
        {
          "name": "BAKE_ERROR_NO_SAVE_PATH",
          "value": "1",
          "enum": "BakeError",
          "description": ""
        },
        {
          "name": "BAKE_ERROR_NO_MESHES",
          "value": "2",
          "enum": "BakeError",
          "description": ""
        },
        {
          "name": "BAKE_ERROR_CANT_CREATE_IMAGE",
          "value": "3",
          "enum": "BakeError",
          "description": ""
        },
        {
          "name": "BAKE_ERROR_USER_ABORTED",
          "value": "4",
          "enum": "BakeError",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "bake_cell_size",
          "type": "float",
          "setter": "set_bake_cell_size",
          "getter": "get_bake_cell_size",
          "description": ""
        },
        {
          "name": "bake_energy",
          "type": "float",
          "setter": "set_energy",
          "getter": "get_energy",
          "description": ""
        },
        {
          "name": "bake_extents",
          "type": "Vector3",
          "setter": "set_extents",
          "getter": "get_extents",
          "description": ""
        },
        {
          "name": "bake_hdr",
          "type": "bool",
          "setter": "set_hdr",
          "getter": "is_hdr",
          "description": ""
        },
        {
          "name": "bake_mode",
          "type": "int",
          "setter": "set_bake_mode",
          "getter": "get_bake_mode",
          "enum": "BakedLightmap.BakeMode",
          "description": ""
        },
        {
          "name": "bake_propagation",
          "type": "float",
          "setter": "set_propagation",
          "getter": "get_propagation",
          "description": ""
        },
        {
          "name": "bake_quality",
          "type": "int",
          "setter": "set_bake_quality",
          "getter": "get_bake_quality",
          "enum": "BakedLightmap.BakeQuality",
          "description": ""
        },
        {
          "name": "capture_cell_size",
          "type": "float",
          "setter": "set_capture_cell_size",
          "getter": "get_capture_cell_size",
          "description": ""
        },
        {
          "name": "image_path",
          "type": "String",
          "setter": "set_image_path",
          "getter": "get_image_path",
          "description": ""
        },
        {
          "name": "light_data",
          "type": "BakedLightmapData",
          "setter": "set_light_data",
          "getter": "get_light_data",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TextEdit": {
      "name": "TextEdit",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Multiline text editing control.",
      "description": "TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.",
      "methods": [
        {
          "name": "add_color_region",
          "description": "Add color region (given the delimiters) and its colors.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "begin_key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end_key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "line_only",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_keyword_color",
          "description": "Add a keyword and its color.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keyword",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "can_fold",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_colors",
          "description": "Clear all the syntax coloring information.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_undo_history",
          "description": "Clear the undo history.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "copy",
          "description": "Copy the current selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "cursor_get_column",
          "qualifiers": "const",
          "description": "Return the column the editing cursor is at.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "cursor_get_line",
          "qualifiers": "const",
          "description": "Return the line the editing cursor is at.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "cursor_set_column",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "adjust_viewport",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "cursor_set_line",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "adjust_viewport",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "2",
              "name": "can_be_hidden",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "cut",
          "description": "Cut the current selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "deselect",
          "description": "Clears the current selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "fold_all_lines",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "fold_line",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_line",
          "qualifiers": "const",
          "description": "Return the text of a specific line.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_line_count",
          "qualifiers": "const",
          "description": "Return the amount of total lines in the text.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_menu",
          "qualifiers": "const",
          "description": "",
          "return_type": "PopupMenu",
          "arguments": []
        },
        {
          "name": "get_selection_from_column",
          "qualifiers": "const",
          "description": "Return the selection begin column.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selection_from_line",
          "qualifiers": "const",
          "description": "Return the selection begin line.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selection_text",
          "qualifiers": "const",
          "description": "Return the text inside the selection.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_selection_to_column",
          "qualifiers": "const",
          "description": "Return the selection end column.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selection_to_line",
          "qualifiers": "const",
          "description": "Return the selection end line.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_word_under_cursor",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "insert_text_at_cursor",
          "description": "Insert a given text at the cursor position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_folded",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_line_hidden",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_selection_active",
          "qualifiers": "const",
          "description": "Return true if the selection is active.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "menu_option",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "option",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "paste",
          "description": "Paste the current selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "redo",
          "description": "Perform redo operation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "search",
          "qualifiers": "const",
          "description": "Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "from_column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Perform selection, from line/column to line/column.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to_line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select_all",
          "description": "Select all the text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_line_as_hidden",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "toggle_fold_line",
          "description": "Toggle the folding of the code block at the given line.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "undo",
          "description": "Perform undo operation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unfold_line",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unhide_all_lines",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "breakpoint_toggled",
          "description": "Emitted when a breakpoint is placed via the breakpoint gutter.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "row",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_changed",
          "description": "Emitted when the cursor changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "request_completion",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "symbol_lookup",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "symbol",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "row",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "text_changed",
          "description": "Emitted when the text changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "SEARCH_MATCH_CASE",
          "value": "1",
          "enum": "SearchFlags",
          "description": "Match case when searching."
        },
        {
          "name": "SEARCH_WHOLE_WORDS",
          "value": "2",
          "enum": "SearchFlags",
          "description": "Match whole words when searching."
        },
        {
          "name": "SEARCH_BACKWARDS",
          "value": "4",
          "enum": "SearchFlags",
          "description": "Search from end to beginning."
        },
        {
          "name": "MENU_CUT",
          "value": "0",
          "enum": "MenuItems",
          "description": "Cuts (Copies and clears) the selected text."
        },
        {
          "name": "MENU_COPY",
          "value": "1",
          "enum": "MenuItems",
          "description": "Copies the selected text."
        },
        {
          "name": "MENU_PASTE",
          "value": "2",
          "enum": "MenuItems",
          "description": "Pastes the clipboard text over the selected text (or at the cursor's position)."
        },
        {
          "name": "MENU_CLEAR",
          "value": "3",
          "enum": "MenuItems",
          "description": "Erases the whole [TextEdit] text."
        },
        {
          "name": "MENU_SELECT_ALL",
          "value": "4",
          "enum": "MenuItems",
          "description": "Selects the whole [TextEdit] text."
        },
        {
          "name": "MENU_UNDO",
          "value": "5",
          "enum": "MenuItems",
          "description": "Undoes the previous action."
        },
        {
          "name": "MENU_MAX",
          "value": "6",
          "enum": "MenuItems",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "caret_blink",
          "type": "bool",
          "setter": "cursor_set_blink_enabled",
          "getter": "cursor_get_blink_enabled",
          "description": "If [code]true[/code] the caret (visual cursor) blinks."
        },
        {
          "name": "caret_blink_speed",
          "type": "float",
          "setter": "cursor_set_blink_speed",
          "getter": "cursor_get_blink_speed",
          "description": "Duration (in seconds) of a caret's blinking cycle."
        },
        {
          "name": "caret_block_mode",
          "type": "bool",
          "setter": "cursor_set_block_mode",
          "getter": "cursor_is_block_mode",
          "description": "If [code]true[/code] the caret displays as a rectangle.\n\t\t\tIf [code]false[/code] the caret displays as a bar."
        },
        {
          "name": "caret_moving_by_right_click",
          "type": "bool",
          "setter": "set_right_click_moves_caret",
          "getter": "is_right_click_moving_caret",
          "description": "If [code]true[/code] a right click moves the cursor at the mouse position before displaying the context menu.\n\t\t\tIf [code]false[/code] the context menu disregards mouse location."
        },
        {
          "name": "context_menu_enabled",
          "type": "bool",
          "setter": "set_context_menu_enabled",
          "getter": "is_context_menu_enabled",
          "description": "If [code]true[/code] a right click displays the context menu."
        },
        {
          "name": "hiding_enabled",
          "type": "int",
          "setter": "set_hiding_enabled",
          "getter": "is_hiding_enabled",
          "description": ""
        },
        {
          "name": "highlight_all_occurrences",
          "type": "bool",
          "setter": "set_highlight_all_occurrences",
          "getter": "is_highlight_all_occurrences_enabled",
          "description": ""
        },
        {
          "name": "highlight_current_line",
          "type": "bool",
          "setter": "set_highlight_current_line",
          "getter": "is_highlight_current_line_enabled",
          "description": "If [code]true[/code] the line containing the cursor is highlighted."
        },
        {
          "name": "override_selected_font_color",
          "type": "bool",
          "setter": "set_override_selected_font_color",
          "getter": "is_overriding_selected_font_color",
          "description": ""
        },
        {
          "name": "readonly",
          "type": "bool",
          "setter": "set_readonly",
          "getter": "is_readonly",
          "description": "If [code]true[/code] read-only mode is enabled. Existing text cannot be modified and new text cannot be added."
        },
        {
          "name": "show_line_numbers",
          "type": "bool",
          "setter": "set_show_line_numbers",
          "getter": "is_show_line_numbers_enabled",
          "description": "If [code]true[/code] line numbers are displayed to the left of the text."
        },
        {
          "name": "smooth_scrolling",
          "type": "bool",
          "setter": "set_smooth_scroll_enable",
          "getter": "is_smooth_scroll_enabled",
          "description": ""
        },
        {
          "name": "syntax_highlighting",
          "type": "bool",
          "setter": "set_syntax_coloring",
          "getter": "is_syntax_coloring_enabled",
          "description": ""
        },
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": "String value of the [TextEdit]."
        },
        {
          "name": "v_scroll_speed",
          "type": "float",
          "setter": "set_v_scroll_speed",
          "getter": "get_v_scroll_speed",
          "description": "If [code]true[/code], enables text wrapping when it goes beyond he edge of what is visible."
        },
        {
          "name": "wrap_lines",
          "type": "bool",
          "setter": "set_wrap",
          "getter": "is_wrapping",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "background_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "brace_mismatch_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "breakpoint_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "caret_background_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "caret_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "code_folding_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "completion_background_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_existing_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_lines",
          "type": "int",
          "description": ""
        },
        {
          "name": "completion_max_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "completion_scroll_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_scroll_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "completion_selected_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "current_line_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "function_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "line_number_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "line_spacing",
          "type": "int",
          "description": ""
        },
        {
          "name": "mark_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "member_variable_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "number_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "read_only",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "symbol_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "tab",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "word_highlighted_color",
          "type": "Color",
          "description": ""
        }
      ]
    },
    "EditorFileSystem": {
      "name": "EditorFileSystem",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Resource filesystem, as the editor sees it.",
      "description": "This object holds information of all resources in the filesystem, their types, etc.",
      "methods": [
        {
          "name": "get_file_type",
          "qualifiers": "const",
          "description": "Get the type of the file, given the full path.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_filesystem",
          "description": "Get the root directory object.",
          "return_type": "EditorFileSystemDirectory",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_filesystem_path",
          "description": "Returns a view into the filesystem at [code]path[/code].",
          "return_type": "EditorFileSystemDirectory",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_scanning_progress",
          "qualifiers": "const",
          "description": "Return the scan progress for 0 to 1 if the FS is being scanned.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_scanning",
          "qualifiers": "const",
          "description": "Return true of the filesystem is being scanned.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "scan",
          "description": "Scan the filesystem for changes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "scan_sources",
          "description": "Check if the source of any imported resource changed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "update_file",
          "description": "Update a file information. Call this if an external program (not Godot) modified the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "filesystem_changed",
          "description": "Emitted if the filesystem changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resources_reimported",
          "description": "Remitted if a resource is reimported.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resources",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sources_changed",
          "description": "Emitted if the source of any imported file changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exist",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ResourceImporterOGGVorbis": {
      "name": "ResourceImporterOGGVorbis",
      "inherits": "ResourceImporter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PCKPacker": {
      "name": "PCKPacker",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_file",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pck_path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "source_path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "flush",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "verbose",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pck_start",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pck_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "alignment",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Curve3D": {
      "name": "Curve3D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Describes a Bezier curve in 3D space.",
      "description": "This class describes a Bezier curve in 3D space. It is mainly used to give a shape to a [Path], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed further calculations up.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds a point to a curve, at \"position\", with control points \"in\" and \"out\".\n\t\t\t\tIf \"at_position\" is given, the point is inserted before the point number \"at_position\", moving that point (and every point after) after the inserted point. If \"at_position\" is not given, or is an illegal value (at_position <0 or at_position >= [method get_point_count]), the point will be appended at the end of the point list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "in",
              "type": "Vector3",
              "default_value": "Vector3( 0, 0, 0 )"
            },
            {
              "index": "2",
              "name": "out",
              "type": "Vector3",
              "default_value": "Vector3( 0, 0, 0 )"
            },
            {
              "index": "3",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear_points",
          "description": "Removes all points from the curve.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_baked_length",
          "qualifiers": "const",
          "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_points",
          "qualifiers": "const",
          "description": "Returns the cache of points as a [PoolVector3Array].",
          "return_type": "PoolVector3Array",
          "arguments": []
        },
        {
          "name": "get_baked_tilts",
          "qualifiers": "const",
          "description": "Returns the cache of tilts as a [RealArray].",
          "return_type": "PoolRealArray",
          "arguments": []
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the number of points describing the curve.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_in",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_out",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "Returns the position of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_tilt",
          "qualifiers": "const",
          "description": "Returns the tilt angle in radians for the point \"idx\". If the index is out of bounds, the function sends an error to the console, and returns 0.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate",
          "qualifiers": "const",
          "description": "Returns the position between the vertex \"idx\" and the vertex \"idx\"+1, where \"t\" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of \"t\" outside the range (0.0 >= t  <=1) give strange, but predictable results.\n\t\t\t\tIf \"idx\" is out of bounds it is truncated to the first or last vertex, and \"t\" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate_baked",
          "qualifiers": "const",
          "description": "Returns a point within the curve at position \"offset\", where \"offset\" is measured as a distance in 3D units along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the \"offset\" lies between, then interpolates the values. This interpolation is cubic if \"cubic\" is set to true, or linear if set to false.\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cubic",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "interpolatef",
          "qualifiers": "const",
          "description": "Returns the position at the vertex \"fofs\". It calls [method interpolate] using the integer part of fofs as \"idx\", and its fractional part as \"t\".",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "fofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Deletes the point \"idx\" from the curve. Sends an error to the console if \"idx\" is out of bounds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_in",
          "description": "Sets the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_out",
          "description": "Sets the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_position",
          "description": "Sets the position for the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_tilt",
          "description": "Sets the tilt angle in radians for the point \"idx\". If the index is out of bounds, the function sends an error to the console.\n\t\t\t\tThe tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a [PathFollow], this tilt is an offset over the natural tilt the PathFollow calculates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tilt",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tessellate",
          "qualifiers": "const",
          "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t\"max_stages\" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t\"tolerance_degrees\" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.",
          "return_type": "PoolVector3Array",
          "arguments": [
            {
              "index": "0",
              "name": "max_stages",
              "type": "int",
              "default_value": "5"
            },
            {
              "index": "1",
              "name": "tolerance_degrees",
              "type": "float",
              "default_value": "4"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bake_interval",
          "type": "float",
          "setter": "set_bake_interval",
          "getter": "get_bake_interval",
          "description": "The distance in meters between two adjacent cached points. Changing it forces the cache to be recomputed the next time the [method get_baked_points] or [method get_baked_length] function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care."
        }
      ],
      "theme_properties": []
    },
    "PathFollow": {
      "name": "PathFollow",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Point sampler for a [Path].",
      "description": "This node takes its parent [Path], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "ROTATION_NONE",
          "value": "0",
          "enum": "RotationMode",
          "description": "Forbids the PathFollow to rotate."
        },
        {
          "name": "ROTATION_Y",
          "value": "1",
          "enum": "RotationMode",
          "description": "Allows the PathFollow to rotate in the Y axis only."
        },
        {
          "name": "ROTATION_XY",
          "value": "2",
          "enum": "RotationMode",
          "description": "Allows the PathFollow to rotate in both the X, and Y axes."
        },
        {
          "name": "ROTATION_XYZ",
          "value": "3",
          "enum": "RotationMode",
          "description": "Allows the PathFollow to rotate in any axis."
        }
      ],
      "properties": [
        {
          "name": "cubic_interp",
          "type": "bool",
          "setter": "set_cubic_interpolation",
          "getter": "get_cubic_interpolation",
          "description": "If [code]true[/code] the position between two cached points is interpolated cubically, and linearly otherwise.\n\t\t\tThe points along the [Curve3D] of the [Path] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\tThere are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations."
        },
        {
          "name": "h_offset",
          "type": "float",
          "setter": "set_h_offset",
          "getter": "get_h_offset",
          "description": "The node's offset along the curve."
        },
        {
          "name": "loop",
          "type": "bool",
          "setter": "set_loop",
          "getter": "has_loop",
          "description": "If [code]true[/code], any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths."
        },
        {
          "name": "offset",
          "type": "float",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path."
        },
        {
          "name": "rotation_mode",
          "type": "int",
          "setter": "set_rotation_mode",
          "getter": "get_rotation_mode",
          "enum": "PathFollow.RotationMode",
          "description": "Allows or forbids rotation on one or more axes, depending on the constants being used."
        },
        {
          "name": "unit_offset",
          "type": "float",
          "setter": "set_unit_offset",
          "getter": "get_unit_offset",
          "description": "The distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length."
        },
        {
          "name": "v_offset",
          "type": "float",
          "setter": "set_v_offset",
          "getter": "get_v_offset",
          "description": "The node's offset perpendicular to the curve."
        }
      ],
      "theme_properties": []
    },
    "NavigationPolygonInstance": {
      "name": "NavigationPolygonInstance",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": ""
        },
        {
          "name": "navpoly",
          "type": "NavigationPolygon",
          "setter": "set_navigation_polygon",
          "getter": "get_navigation_polygon",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Curve": {
      "name": "Curve",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A mathematic curve.",
      "description": "A curve that can be saved and re-used for other objects. By default it ranges between [code]0[/code] and [code]1[/code] on the y-axis and positions points relative to the [code]0.5[/code] y-position.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds a point to the curve. For each side, if the [code]*_mode[/code] is [code]TANGENT_LINEAR[/code], the [code]*_tangent[/code] angle (in degrees) uses the slope of the curve halfway to the adjacent point. Allows custom assignments to the [code]*_tangent[/code] angle if [code]*_mode[/code] is set to [code]TANGENT_FREE[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "left_tangent",
              "type": "float",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "right_tangent",
              "type": "float",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "left_mode",
              "type": "int",
              "enum": "Curve.TangentMode",
              "default_value": "0"
            },
            {
              "index": "4",
              "name": "right_mode",
              "type": "int",
              "enum": "Curve.TangentMode",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "bake",
          "description": "Recomputes the baked cache of points for the curve.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clean_dupes",
          "description": "Removes points that are closer than [code]CMP_EPSILON[/code] (0.00001) units to their neighbor on the curve.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_points",
          "description": "Removes all points from the curve.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_point_left_mode",
          "qualifiers": "const",
          "description": "Returns the left [code]TangentMode[/code] for the point at [code]index[/code].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_left_tangent",
          "qualifiers": "const",
          "description": "Returns the left tangent angle (in degrees) for the point at [code]index[/code].",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "Returns the curve coordinates for the point at [code]index[/code].",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_right_mode",
          "qualifiers": "const",
          "description": "Returns the right [code]TangentMode[/code] for the point at [code]index[/code].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_right_tangent",
          "qualifiers": "const",
          "description": "Returns the right tangent angle (in degrees) for the point at [code]index[/code].",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate",
          "qualifiers": "const",
          "description": "Returns the y value for the point that would exist at x-position [code]offset[/code] along the curve.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate_baked",
          "description": "Returns the y value for the point that would exist at x-position [code]offset[/code] along the curve using the baked cache. Bakes the curve's points if not already baked.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Removes the point at [code]index[/code] from the curve.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_left_mode",
          "description": "Sets the left [code]TangentMode[/code] for the point at [code]index[/code] to [code]mode[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Curve.TangentMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_left_tangent",
          "description": "Sets the left tangent angle for the point at [code]index[/code] to [code]tangent[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tangent",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_offset",
          "description": "Sets the offset from [code]0.5[/code]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_right_mode",
          "description": "Sets the right [code]TangentMode[/code] for the point at [code]index[/code] to [code]mode[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Curve.TangentMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_right_tangent",
          "description": "Sets the right tangent angle for the point at [code]index[/code] to [code]tangent[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tangent",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_value",
          "description": "Assigns the vertical position [code]y[/code] to the point at [code]index[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "range_changed",
          "description": "Emitted when [member max_value] or [member min_value] is changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "TANGENT_FREE",
          "value": "0",
          "enum": "TangentMode",
          "description": "The tangent on this side of the point is user-defined."
        },
        {
          "name": "TANGENT_LINEAR",
          "value": "1",
          "enum": "TangentMode",
          "description": "The curve calculates the tangent on this side of the point as the slope halfway towards the adjacent point."
        },
        {
          "name": "TANGENT_MODE_COUNT",
          "value": "2",
          "enum": "TangentMode",
          "description": "The total number of available tangent modes."
        }
      ],
      "properties": [
        {
          "name": "bake_resolution",
          "type": "int",
          "setter": "set_bake_resolution",
          "getter": "get_bake_resolution",
          "description": "The number of points to include in the baked (i.e. cached) curve data."
        },
        {
          "name": "max_value",
          "type": "float",
          "setter": "set_max_value",
          "getter": "get_max_value",
          "description": "The maximum value the curve can reach. Default value: [code]1[/code]."
        },
        {
          "name": "min_value",
          "type": "float",
          "setter": "set_min_value",
          "getter": "get_min_value",
          "description": "The minimum value the curve can reach. Default value: [code]0[/code]."
        }
      ],
      "theme_properties": []
    },
    "SurfaceTool": {
      "name": "SurfaceTool",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Helper tool to create geometry.",
      "description": "The [code]SurfaceTool[/code] is used to construct a [Mesh] by specifying vertex attributes individually. It can be used to construct a [Mesh] from script. All properties except index need to be added before a call to [method add_vertex]. For example adding vertex colors and UVs looks like\n\t\t[codeblock]\n\t\tvar st = SurfaceTool.new()\n\t\tst.begin(Mesh.PRIMITIVE_TRIANGLES)\n\t\tst.add_color(Color(1, 0, 0))\n\t\tst.add_uv(Vector2(0, 0))\n\t\tst.add_vertex(Vector3(0, 0, 0))\n\t\t[/codeblock]\n\t\tThe [code]SurfaceTool[/code] now contains one vertex of a triangle which has a UV coordinate and a specified [Color]. If another vertex were added without calls to [method add_uv] or [method add_color] then the last values would be used.\n\t\tIt is very important that vertex attributes are passed [b]before[/b] the call to [method add_vertex], failure to do this will result in an error when committing the vertex information to a mesh.",
      "methods": [
        {
          "name": "add_bones",
          "description": "Add an array of bones for the next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bones",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_color",
          "description": "Specify a [Color] for the next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_index",
          "description": "Adds an index to index array if you are using indexed Vertices. Does not need to be called before adding Vertex.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_normal",
          "description": "Specify a normal for the next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_smooth_group",
          "description": "Specify whether current Vertex (if using only Vertex arrays) or current index (if also using index arrays) should utilize smooth normals for normal calculation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "smooth",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_tangent",
          "description": "Specify a Tangent for the next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tangent",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_to_format",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_triangle_fan",
          "description": "Insert a triangle fan made of array data into [Mesh] being constructed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertexes",
              "type": "PoolVector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "2",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": "PoolColorArray(  )"
            },
            {
              "index": "3",
              "name": "uv2s",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "4",
              "name": "normals",
              "type": "PoolVector3Array",
              "default_value": "PoolVector3Array(  )"
            },
            {
              "index": "5",
              "name": "tangents",
              "type": "Array",
              "default_value": "[  ]"
            }
          ]
        },
        {
          "name": "add_uv",
          "description": "Specify UV Coordinate for next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_uv2",
          "description": "Specify an optional second set of UV coordinates for next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_vertex",
          "description": "Specify position of current Vertex. Should be called after specifying other vertex properties (e.g. Color, UV).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertex",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_weights",
          "description": "Specify weight value for next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "weights",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_from",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing",
              "type": "Mesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "begin",
          "description": "Called before adding any Vertices. Takes the primitive type as an argument (e.g. Mesh.PRIMITIVE_TRIANGLES).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "primitive",
              "type": "int",
              "enum": "Mesh.PrimitiveType",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear all information passed into the surface tool so far.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit",
          "description": "Returns a constructed [ArrayMesh] from current information passed in. If an existing [ArrayMesh] is passed in as an argument, will add an extra surface to the existing [ArrayMesh].",
          "return_type": "ArrayMesh",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing",
              "type": "ArrayMesh",
              "default_value": "null"
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": "97792"
            }
          ]
        },
        {
          "name": "create_from",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing",
              "type": "Mesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "deindex",
          "description": "Removes index array by expanding Vertex array.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "generate_normals",
          "description": "Generates normals from Vertices so you do not have to do it manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "generate_tangents",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "index",
          "description": "Shrinks Vertex array by creating an index array. Avoids reusing Vertices.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_material",
          "description": "Sets [Material] to be used by the [Mesh] you are constructing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptIndexGet": {
      "name": "VisualScriptIndexGet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Performance": {
      "name": "Performance",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Exposes performance related data.",
      "description": "This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the [i]Monitor[/i] tab in the editor's [i]Debugger[/i] panel. By using the [method get_monitor] method of this class, you can access this data from your code. Note that a few of these monitors are only available in debug mode and will always return 0 when used in a release build.\n\t\tMany of these monitors are not updated in real-time, so there may be a short delay between changes.",
      "methods": [
        {
          "name": "get_monitor",
          "qualifiers": "const",
          "description": "Returns the value of one of the available monitors. You should provide one of this class's constants as the argument, like this:\n\t\t\t\t[codeblock]\n\t\t\t\tprint(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "monitor",
              "type": "int",
              "enum": "Performance.Monitor",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TIME_FPS",
          "value": "0",
          "enum": "Monitor",
          "description": "Frames per second."
        },
        {
          "name": "TIME_PROCESS",
          "value": "1",
          "enum": "Monitor",
          "description": "Time it took to complete one frame."
        },
        {
          "name": "TIME_PHYSICS_PROCESS",
          "value": "2",
          "enum": "Monitor",
          "description": "Time it took to complete one physics frame."
        },
        {
          "name": "MEMORY_STATIC",
          "value": "3",
          "enum": "Monitor",
          "description": "Static memory currently used, in bytes. Not available in release builds."
        },
        {
          "name": "MEMORY_DYNAMIC",
          "value": "4",
          "enum": "Monitor",
          "description": "Dynamic memory currently used, in bytes. Not available in release builds."
        },
        {
          "name": "MEMORY_STATIC_MAX",
          "value": "5",
          "enum": "Monitor",
          "description": "Available static memory. Not available in release builds."
        },
        {
          "name": "MEMORY_DYNAMIC_MAX",
          "value": "6",
          "enum": "Monitor",
          "description": "Available dynamic memory. Not available in release builds."
        },
        {
          "name": "MEMORY_MESSAGE_BUFFER_MAX",
          "value": "7",
          "enum": "Monitor",
          "description": "Largest amount of memory the message queue buffer has used, in bytes. The message queue is used for deferred functions calls and notifications."
        },
        {
          "name": "OBJECT_COUNT",
          "value": "8",
          "enum": "Monitor",
          "description": "Number of objects currently instanced (including nodes)."
        },
        {
          "name": "OBJECT_RESOURCE_COUNT",
          "value": "9",
          "enum": "Monitor",
          "description": "Number of resources currently used."
        },
        {
          "name": "OBJECT_NODE_COUNT",
          "value": "10",
          "enum": "Monitor",
          "description": "Number of nodes currently instanced. This also includes the root node, as well as any nodes not in the scene tree."
        },
        {
          "name": "RENDER_OBJECTS_IN_FRAME",
          "value": "11",
          "enum": "Monitor",
          "description": "3D objects drawn per frame."
        },
        {
          "name": "RENDER_VERTICES_IN_FRAME",
          "value": "12",
          "enum": "Monitor",
          "description": "Vertices drawn per frame. 3D only."
        },
        {
          "name": "RENDER_MATERIAL_CHANGES_IN_FRAME",
          "value": "13",
          "enum": "Monitor",
          "description": "Material changes per frame. 3D only"
        },
        {
          "name": "RENDER_SHADER_CHANGES_IN_FRAME",
          "value": "14",
          "enum": "Monitor",
          "description": "Shader changes per frame. 3D only."
        },
        {
          "name": "RENDER_SURFACE_CHANGES_IN_FRAME",
          "value": "15",
          "enum": "Monitor",
          "description": "Render surface changes per frame. 3D only."
        },
        {
          "name": "RENDER_DRAW_CALLS_IN_FRAME",
          "value": "16",
          "enum": "Monitor",
          "description": "Draw calls per frame. 3D only."
        },
        {
          "name": "RENDER_VIDEO_MEM_USED",
          "value": "17",
          "enum": "Monitor",
          "description": "Video memory used. Includes both texture and vertex memory."
        },
        {
          "name": "RENDER_TEXTURE_MEM_USED",
          "value": "18",
          "enum": "Monitor",
          "description": "Texture memory used."
        },
        {
          "name": "RENDER_VERTEX_MEM_USED",
          "value": "19",
          "enum": "Monitor",
          "description": "Vertex memory used."
        },
        {
          "name": "RENDER_USAGE_VIDEO_MEM_TOTAL",
          "value": "20",
          "enum": "Monitor",
          "description": ""
        },
        {
          "name": "PHYSICS_2D_ACTIVE_OBJECTS",
          "value": "21",
          "enum": "Monitor",
          "description": "Number of active [RigidBody2D] nodes in the game."
        },
        {
          "name": "PHYSICS_2D_COLLISION_PAIRS",
          "value": "22",
          "enum": "Monitor",
          "description": "Number of collision pairs in the 2D physics engine."
        },
        {
          "name": "PHYSICS_2D_ISLAND_COUNT",
          "value": "23",
          "enum": "Monitor",
          "description": "Number of islands in the 2D physics engine."
        },
        {
          "name": "PHYSICS_3D_ACTIVE_OBJECTS",
          "value": "24",
          "enum": "Monitor",
          "description": "Number of active [RigidBody] and [VehicleBody] nodes in the game."
        },
        {
          "name": "PHYSICS_3D_COLLISION_PAIRS",
          "value": "25",
          "enum": "Monitor",
          "description": "Number of collision pairs in the 3D physics engine."
        },
        {
          "name": "PHYSICS_3D_ISLAND_COUNT",
          "value": "26",
          "enum": "Monitor",
          "description": "Number of islands in the 3D physics engine."
        },
        {
          "name": "MONITOR_MAX",
          "value": "27",
          "enum": "Monitor",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ConcavePolygonShape": {
      "name": "ConcavePolygonShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Concave polygon shape.",
      "description": "Concave polygon shape resource, which can be set into a [PhysicsBody] or area. This shape is created by feeding a list of triangles.",
      "methods": [
        {
          "name": "get_faces",
          "qualifiers": "const",
          "description": "Return the faces (an array of triangles).",
          "return_type": "PoolVector3Array",
          "arguments": []
        },
        {
          "name": "set_faces",
          "description": "Set the faces (an array of triangles).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "faces",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Line2D": {
      "name": "Line2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A 2D line.",
      "description": "A line through several points in 2D space.",
      "methods": [
        {
          "name": "add_point",
          "description": "Add a point at the [code]position[/code]. Appends the point at the end of the line.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the Line2D's amount of points.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "Returns point [code]i[/code]'s position.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "i",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Remove the point at index [code]i[/code] from the line.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "i",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_position",
          "description": "Overwites the position in point [code]i[/code] with the supplied [code]position[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "i",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "LINE_JOINT_SHARP",
          "value": "0",
          "enum": "LineJointMode",
          "description": "The line's joints will be pointy. If [code]sharp_limit[/code] is greater than the rotation of a joint, it becomes a bevel joint instead."
        },
        {
          "name": "LINE_JOINT_BEVEL",
          "value": "1",
          "enum": "LineJointMode",
          "description": "The line's joints will be bevelled/chamfered."
        },
        {
          "name": "LINE_JOINT_ROUND",
          "value": "2",
          "enum": "LineJointMode",
          "description": "The line's joints will be rounded."
        },
        {
          "name": "LINE_CAP_NONE",
          "value": "0",
          "enum": "LineCapMode",
          "description": "Don't have a line cap."
        },
        {
          "name": "LINE_CAP_BOX",
          "value": "1",
          "enum": "LineCapMode",
          "description": "Draws the line cap as a box."
        },
        {
          "name": "LINE_CAP_ROUND",
          "value": "2",
          "enum": "LineCapMode",
          "description": "Draws the line cap as a circle."
        },
        {
          "name": "LINE_TEXTURE_NONE",
          "value": "0",
          "enum": "LineTextureMode",
          "description": "Takes the left pixels of the texture and renders it over the whole line."
        },
        {
          "name": "LINE_TEXTURE_TILE",
          "value": "1",
          "enum": "LineTextureMode",
          "description": "Tiles the texture over the line. The texture need to be imported with Repeat Enabled for it to work properly."
        }
      ],
      "properties": [
        {
          "name": "begin_cap_mode",
          "type": "int",
          "setter": "set_begin_cap_mode",
          "getter": "get_begin_cap_mode",
          "enum": "Line2D.LineCapMode",
          "description": "Controls the style of the line's first point. Use [code]LINE_CAP_*[/code] constants. Default value: [code]LINE_CAP_NONE[/code]."
        },
        {
          "name": "default_color",
          "type": "Color",
          "setter": "set_default_color",
          "getter": "get_default_color",
          "description": "The line's color. Will not be used if a gradient is set."
        },
        {
          "name": "end_cap_mode",
          "type": "int",
          "setter": "set_end_cap_mode",
          "getter": "get_end_cap_mode",
          "enum": "Line2D.LineCapMode",
          "description": "Controls the style of the line's last point. Use [code]LINE_CAP_*[/code] constants. Default value: [code]LINE_CAP_NONE[/code]."
        },
        {
          "name": "gradient",
          "type": "Gradient",
          "setter": "set_gradient",
          "getter": "get_gradient",
          "description": "The gradient is drawn through the whole line from start to finish. The default color will not be used if a gradient is set."
        },
        {
          "name": "joint_mode",
          "type": "int",
          "setter": "set_joint_mode",
          "getter": "get_joint_mode",
          "enum": "Line2D.LineJointMode",
          "description": "The style for the points between the start and the end."
        },
        {
          "name": "points",
          "type": "PoolVector2Array",
          "setter": "set_points",
          "getter": "get_points",
          "description": "The points that form the lines. The line is drawn between every point set in this array."
        },
        {
          "name": "round_precision",
          "type": "int",
          "setter": "set_round_precision",
          "getter": "get_round_precision",
          "description": "The smoothness of the rounded joints and caps. This is only used if a cap or joint is set as round."
        },
        {
          "name": "sharp_limit",
          "type": "float",
          "setter": "set_sharp_limit",
          "getter": "get_sharp_limit",
          "description": "The direction difference in radians between vector points. This value is only used if [code]joint mode[/code] is set to [code]LINE_JOINT_SHARP[/code]."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The texture used for the line's texture. Uses [code]texture_mode[/code] for drawing style."
        },
        {
          "name": "texture_mode",
          "type": "int",
          "setter": "set_texture_mode",
          "getter": "get_texture_mode",
          "enum": "Line2D.LineTextureMode",
          "description": "The style to render the [code]texture[/code] on the line. Use [code]LINE_TEXTURE_*[/code] constants. Default value: [code]LINE_TEXTURE_NONE[/code]."
        },
        {
          "name": "width",
          "type": "float",
          "setter": "set_width",
          "getter": "get_width",
          "description": "The line's width."
        }
      ],
      "theme_properties": []
    },
    "LightOccluder2D": {
      "name": "LightOccluder2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Occludes light cast by a Light2D, casting shadows.",
      "description": "Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an [OccluderPolygon2D] in order for the shadow to be computed.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "light_mask",
          "type": "int",
          "setter": "set_occluder_light_mask",
          "getter": "get_occluder_light_mask",
          "description": "The LightOccluder2D's light mask. The LightOccluder2D will cast shadows only from Light2D(s) that have the same light mask(s)."
        },
        {
          "name": "occluder",
          "type": "OccluderPolygon2D",
          "setter": "set_occluder_polygon",
          "getter": "get_occluder_polygon",
          "description": "The [OccluderPolygon2D] used to compute the shadow."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectPanner": {
      "name": "AudioEffectPanner",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a Panner audio effect to an Audio bus. Pans sound left or right.",
      "description": "Determines how much of an audio signal is sent to the left and right buses.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "pan",
          "type": "float",
          "setter": "set_pan",
          "getter": "get_pan",
          "description": "Pan position. Value can range from -1 (fully left) to 1 (fully right)."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectEQ10": {
      "name": "AudioEffectEQ10",
      "inherits": "AudioEffectEQ",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a 10-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 31 Hz to 16000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.",
      "description": "Frequency bands :\n\t\tBand 1 : 31 Hz\n\t\tBand 2 : 62 Hz\n\t\tBand 3 : 125 Hz\n\t\tBand 4 : 250 Hz\n\t\tBand 5 : 500 Hz\n\t\tBand 6 : 1000 Hz\n\t\tBand 7 : 2000 Hz\n\t\tBand 8 : 4000 Hz\n\t\tBand 9 : 8000 Hz\n\t\tBand 10 : 16000 Hz\n\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ21].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CheckBox": {
      "name": "CheckBox",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Binary choice user interface widget",
      "description": "A checkbox allows the user to make a binary choice (choosing only one of two possible options), for example Answer 'yes' or 'no'.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "check_vadjust",
          "type": "int",
          "description": ""
        },
        {
          "name": "checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "radio_checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "radio_unchecked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "unchecked",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "@C#": {
      "name": "@C#",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ImmediateGeometry": {
      "name": "ImmediateGeometry",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Draws simple geometry from code.",
      "description": "Draws simple geometry from code. Uses a drawing mode similar to OpenGL 1.x.",
      "methods": [
        {
          "name": "add_sphere",
          "description": "Simple helper to draw a uvsphere, with given latitudes, longitude and radius.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lats",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "lons",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "add_uv",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "add_vertex",
          "description": "Adds a vertex with the currently set color/uv/etc.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "begin",
          "description": "Begin drawing (And optionally pass a texture override). When done call end(). For more information on how this works, search for glBegin() glEnd() references.\n\t\t\tFor the type of primitive, use the [Mesh].PRIMITIVE_* enumerations.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "primitive",
              "type": "int",
              "enum": "Mesh.PrimitiveType",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clears everything that was drawn using begin/end.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "end",
          "description": "Ends a drawing context and displays the results.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "The current drawing color.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal",
          "description": "The next vertex's normal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tangent",
          "description": "The next vertex's tangent (and binormal facing).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tangent",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv",
          "description": "The next vertex's UV.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv2",
          "description": "The next vertex's second layer UV.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "WorldEnvironment": {
      "name": "WorldEnvironment",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Default environment properties for the entire scene (post-processing effects, lightning and background settings).",
      "description": "The [code]WorldEnvironment[/code] node is used to configure the default [Environment] for the scene.\n\t\tThe parameters defined in the [code]WorldEnvironment[/code] can be overridden by an [Environment] node set on the current [Camera]. Additionally, only one [code]WorldEnvironment[/code] may be instanced in a given scene at a time.\n\t\tThe [code]WorldEnvironment[/code] allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "environment",
          "type": "Environment",
          "setter": "set_environment",
          "getter": "get_environment",
          "description": "The [Environment] resource used by this [code]WorldEnvironment[/code], defining the default properties."
        }
      ],
      "theme_properties": []
    },
    "QuadMesh": {
      "name": "QuadMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class representing a square mesh.",
      "description": "Class representing a square mesh with size (2,2,0). Consider using a [PlaneMesh] if you require a differently sized plane.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "size",
          "type": "Vector2",
          "setter": "set_size",
          "getter": "get_size",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Curve2D": {
      "name": "Curve2D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Describes a Bezier curve in 2D space.",
      "description": "This class describes a Bezier curve in 2D space. It is mainly used to give a shape to a [Path2D], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed further calculations up.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds a point to a curve, at \"position\", with control points \"in\" and \"out\".\n\t\t\t\tIf \"at_position\" is given, the point is inserted before the point number \"at_position\", moving that point (and every point after) after the inserted point. If \"at_position\" is not given, or is an illegal value (at_position <0 or at_position >= [method get_point_count]), the point will be appended at the end of the point list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "in",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            },
            {
              "index": "2",
              "name": "out",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            },
            {
              "index": "3",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear_points",
          "description": "Removes all points from the curve.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_baked_length",
          "qualifiers": "const",
          "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_points",
          "qualifiers": "const",
          "description": "Returns the cache of points as a [PoolVector2Array].",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the number of points describing the curve.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_in",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_out",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "Returns the position of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate",
          "qualifiers": "const",
          "description": "Returns the position between the vertex \"idx\" and the vertex \"idx\"+1, where \"t\" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of \"t\" outside the range (0.0 >= t  <=1) give strange, but predictable results.\n\t\t\t\tIf \"idx\" is out of bounds it is truncated to the first or last vertex, and \"t\" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate_baked",
          "qualifiers": "const",
          "description": "Returns a point within the curve at position \"offset\", where \"offset\" is measured as a pixel distance along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the \"offset\" lies between, then interpolates the values. This interpolation is cubic if \"cubic\" is set to true, or linear if set to false.\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cubic",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "interpolatef",
          "qualifiers": "const",
          "description": "Returns the position at the vertex \"fofs\". It calls [method interpolate] using the integer part of fofs as \"idx\", and its fractional part as \"t\".",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "fofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Deletes the point \"idx\" from the curve. Sends an error to the console if \"idx\" is out of bounds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_in",
          "description": "Sets the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_out",
          "description": "Sets the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_position",
          "description": "Sets the position for the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tessellate",
          "qualifiers": "const",
          "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t\"max_stages\" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t\"tolerance_degrees\" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.",
          "return_type": "PoolVector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "max_stages",
              "type": "int",
              "default_value": "5"
            },
            {
              "index": "1",
              "name": "tolerance_degrees",
              "type": "float",
              "default_value": "4"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bake_interval",
          "type": "float",
          "setter": "set_bake_interval",
          "getter": "get_bake_interval",
          "description": "The distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time the [method get_baked_points] or [method get_baked_length] function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care."
        }
      ],
      "theme_properties": []
    },
    "FileDialog": {
      "name": "FileDialog",
      "inherits": "ConfirmationDialog",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Dialog for selecting files or directories in the filesystem.",
      "description": "FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.",
      "methods": [
        {
          "name": "add_filter",
          "description": "Add a custom filter. Filter format is: \"mask ; description\", example (C++): dialog->add_filter(\"*.png ; PNG Images\");",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_filters",
          "description": "Clear all the added filters in the dialog.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "deselect_items",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_vbox",
          "description": "Return the vertical box container of the dialog, custom controls can be added to it.",
          "return_type": "VBoxContainer",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "invalidate",
          "description": "Invalidate and update the current dialog content list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "dir_selected",
          "description": "Event emitted when the user selects a directory.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "file_selected",
          "description": "Event emitted when the user selects a file (double clicks it or presses the OK button).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "files_selected",
          "description": "Event emitted when the user selects multiple files.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paths",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MODE_OPEN_FILE",
          "value": "0",
          "enum": "Mode",
          "description": "The dialog allows the selection of one, and only one file."
        },
        {
          "name": "MODE_OPEN_FILES",
          "value": "1",
          "enum": "Mode",
          "description": "The dialog allows the selection of multiple files."
        },
        {
          "name": "MODE_OPEN_DIR",
          "value": "2",
          "enum": "Mode",
          "description": "The dialog functions as a folder selector, disallowing the selection of any file."
        },
        {
          "name": "MODE_OPEN_ANY",
          "value": "3",
          "enum": "Mode",
          "description": "The dialog allows the selection of a file or a directory."
        },
        {
          "name": "MODE_SAVE_FILE",
          "value": "4",
          "enum": "Mode",
          "description": "The dialog will warn when a file exists."
        },
        {
          "name": "ACCESS_RESOURCES",
          "value": "0",
          "enum": "Access",
          "description": "The dialog allows the selection of file and directory."
        },
        {
          "name": "ACCESS_USERDATA",
          "value": "1",
          "enum": "Access",
          "description": "The dialog allows access files under [Resource] path(res://) ."
        },
        {
          "name": "ACCESS_FILESYSTEM",
          "value": "2",
          "enum": "Access",
          "description": "The dialog allows access files in whole file system."
        }
      ],
      "properties": [
        {
          "name": "access",
          "type": "int",
          "setter": "set_access",
          "getter": "get_access",
          "enum": "FileDialog.Access",
          "description": ""
        },
        {
          "name": "current_dir",
          "type": "String",
          "setter": "set_current_dir",
          "getter": "get_current_dir",
          "description": "The current working directory of the file dialog."
        },
        {
          "name": "current_file",
          "type": "String",
          "setter": "set_current_file",
          "getter": "get_current_file",
          "description": "The currently selected file of the file dialog."
        },
        {
          "name": "current_path",
          "type": "String",
          "setter": "set_current_path",
          "getter": "get_current_path",
          "description": "The currently selected file path of the file dialog."
        },
        {
          "name": "filters",
          "type": "PoolStringArray",
          "setter": "set_filters",
          "getter": "get_filters",
          "description": ""
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "FileDialog.Mode",
          "description": ""
        },
        {
          "name": "mode_overrides_title",
          "type": "bool",
          "setter": "set_mode_overrides_title",
          "getter": "is_mode_overriding_title",
          "description": "If [code]true[/code], changing the [code]mode[/code] property will set the window title accordingly (e. g. setting mode to [code]MODE_OPEN_FILE[/code] will change the window title to \"Open a File\")."
        },
        {
          "name": "show_hidden_files",
          "type": "bool",
          "setter": "set_show_hidden_files",
          "getter": "is_showing_hidden_files",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "files_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "folder",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "parent_folder",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "reload",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "JavaScript": {
      "name": "JavaScript",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Singleton that connects the engine with the browser's JavaScript context in HTML5 export.",
      "description": "The JavaScript singleton is implemented only in HTML5 export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs.",
      "methods": [
        {
          "name": "eval",
          "description": "Execute the string [code]code[/code] as JavaScript code within the browser window. This is a call to the actual global JavaScript function [code]eval()[/code].\n\t\t\t\tIf [code]use_global_execution_context[/code] is [code]true[/code], the code will be evaluated in the global execution context. Otherwise, it is evaluated in the execution context of a function within the engine's runtime environment.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "use_global_execution_context",
              "type": "bool",
              "default_value": "false"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Joint2D": {
      "name": "Joint2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base node for all joint constraints in 2D physics.",
      "description": "Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bias",
          "type": "float",
          "setter": "set_bias",
          "getter": "get_bias",
          "description": "When [member node_a] and [member node_b] move in different directions the [code]bias[/code] controls how fast the joint pulls them back to their original position. The lower the [code]bias[/code] the more the two bodies can pull on the joint. Default value: [code]0[/code]"
        },
        {
          "name": "disable_collision",
          "type": "bool",
          "setter": "set_exclude_nodes_from_collision",
          "getter": "get_exclude_nodes_from_collision",
          "description": "If [code]true[/code] [member node_a] and [member node_b] can collide. Default value: [code]false[/code]."
        },
        {
          "name": "node_a",
          "type": "NodePath",
          "setter": "set_node_a",
          "getter": "get_node_a",
          "description": "The first body attached to the joint. Must derive from [PhysicsBody2D]."
        },
        {
          "name": "node_b",
          "type": "NodePath",
          "setter": "set_node_b",
          "getter": "get_node_b",
          "description": "The second body attached to the joint. Must derive from [PhysicsBody2D]."
        }
      ],
      "theme_properties": []
    },
    "Tween": {
      "name": "Tween",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Node useful for animations with unknown start and end points.",
      "description": "Node useful for animations with unknown start and end points, procedural animations, making one node follow another, and other simple behavior.\n\t\tBecause it is easy to get it wrong, here is a quick usage example:\n\t\t[codeblock]\n\t\tvar tween = get_node(\"Tween\")\n\t\ttween.interpolate_property(get_node(\"Node2D_to_move\"), \"transform/origin\", Vector2(0,0), Vector2(100,100), 1, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)\n\t\ttween.start()\n\t\t[/codeblock]\n\t\tSome of the methods of this class require a property name. You can get the property name by hovering over the property in the inspector of the editor.\n\t\tMany of the methods accept [code]trans_type[/code] and [code]ease_type[/code]. The first accepts an TRANS_* constant, and refers to the way the timing of the animation is handled (you might want to see [code]http://easings.net/[/code] for some examples). The second accepts an EASE_* constant, and controls the where [code]trans_type[/code] is applied to the interpolation (in the beginning, the end, or both). If you don't know which transition and easing to pick, you can try different TRANS_* constants with EASE_IN_OUT, and use the one that looks best.",
      "methods": [
        {
          "name": "follow_method",
          "description": "Follow [code]method[/code] of [code]object[/code] and apply the returned value on [code]target_method[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] later. Methods are animated by calling them with consequitive values.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "target_method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "follow_property",
          "description": "Follow [code]property[/code] of [code]object[/code] and apply it on [code]target_property[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Note that [code]target:target_property[/code] would equal [code]object:property[/code] at the end of the tween.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "target_property",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_runtime",
          "qualifiers": "const",
          "description": "Returns the time needed for all tweens to end in seconds, measured from the start. Thus, if you have two tweens, one ending 10 seconds after the start and the other - 20 seconds, it would return 20 seconds, as by that time all tweens would have finished.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "interpolate_callback",
          "description": "Call [code]callback[/code] of [code]object[/code] after [code]duration[/code]. [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "callback",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg1",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "arg2",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "5",
              "name": "arg3",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "6",
              "name": "arg4",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "7",
              "name": "arg5",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "interpolate_deferred_callback",
          "description": "Call [code]callback[/code] of [code]object[/code] after [code]duration[/code] on the main thread (similar to [method Object.call_deferred]). [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "callback",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg1",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "arg2",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "5",
              "name": "arg3",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "6",
              "name": "arg4",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "7",
              "name": "arg5",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "interpolate_method",
          "description": "Animate [code]method[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecutive values.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "interpolate_property",
          "description": "Animate [code]property[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Returns true if any tweens are currently running, and false otherwise. Note that this method doesn't consider tweens that have ended.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove",
          "description": "Stop animating and completely remove a tween, given its object and property/method pair. Passing empty String as key will remove all tweens for given object.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "remove_all",
          "description": "Stop animating and completely remove all tweens.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reset",
          "description": "Resets a tween to the initial value (the one given, not the one before the tween), given its object and property/method pair. Passing empty String as key will reset all tweens for given object.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "reset_all",
          "description": "Resets all tweens to their initial values (the ones given, not those before the tween).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resume",
          "description": "Continue animating a stopped tween, given its object and property/method pair. Passing empty String as key will resume all tweens for given object.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "resume_all",
          "description": "Continue animating all stopped tweens.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "seek",
          "description": "Seek the animation to the given [code]time[/code] in seconds.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_active",
          "description": "Activate/deactivate the tween. You can use this for pausing animations, though [method stop_all] and [method resume_all] might be more fit for this.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "start",
          "description": "Start the tween node. You can define tweens both before and after this.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "stop",
          "description": "Stop animating a tween, given its object and property/method pair. Passing empty String as key will stop all tweens for given object.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "stop_all",
          "description": "Stop animating all tweens.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "targeting_method",
          "description": "Animate [code]method[/code] of [code]object[/code] from the value returned by [code]initial.initial_method[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecutive values.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "initial_method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "targeting_property",
          "description": "Animate [code]property[/code] of [code]object[/code] from the current value of the [code]initial_val[/code] property of [code]initial[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "initial_val",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "tell",
          "qualifiers": "const",
          "description": "Returns the current time of the tween.",
          "return_type": "float",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "tween_completed",
          "description": "This signal is emitted when a tween ends.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tween_started",
          "description": "This signal is emitted when a tween starts.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tween_step",
          "description": "This signal is emitted each step of the tweening.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "elapsed",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "TWEEN_PROCESS_PHYSICS",
          "value": "0",
          "enum": "TweenProcessMode",
          "description": "The [code]Tween[/code] should use [code]_physics_process[/code] for timekeeping when this is enabled."
        },
        {
          "name": "TWEEN_PROCESS_IDLE",
          "value": "1",
          "enum": "TweenProcessMode",
          "description": "The [code]Tween[/code] should use [code]_process[/code] for timekeeping when this is enabled (default)."
        },
        {
          "name": "TRANS_LINEAR",
          "value": "0",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated linearly."
        },
        {
          "name": "TRANS_SINE",
          "value": "1",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated using a sine wave."
        },
        {
          "name": "TRANS_QUINT",
          "value": "2",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated with a quinary (to the power of 5) function."
        },
        {
          "name": "TRANS_QUART",
          "value": "3",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated with a quartic (to the power of 4) function."
        },
        {
          "name": "TRANS_QUAD",
          "value": "4",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated with a quadratic (to the power of 2) function."
        },
        {
          "name": "TRANS_EXPO",
          "value": "5",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated with an exponential (some number to the power of x) function."
        },
        {
          "name": "TRANS_ELASTIC",
          "value": "6",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated with elasticity, wiggling around the edges."
        },
        {
          "name": "TRANS_CUBIC",
          "value": "7",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated with a cubic (to the power of 3) function."
        },
        {
          "name": "TRANS_CIRC",
          "value": "8",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated with a function using square roots."
        },
        {
          "name": "TRANS_BOUNCE",
          "value": "9",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated by bouncing at, but never surpassing, the end."
        },
        {
          "name": "TRANS_BACK",
          "value": "10",
          "enum": "TransitionType",
          "description": "Means that the animation is interpolated backing out at edges."
        },
        {
          "name": "EASE_IN",
          "value": "0",
          "enum": "EaseType",
          "description": "Signifies that the interpolation should be focused in the beginning."
        },
        {
          "name": "EASE_OUT",
          "value": "1",
          "enum": "EaseType",
          "description": "Signifies that the interpolation should be focused in the end."
        },
        {
          "name": "EASE_IN_OUT",
          "value": "2",
          "enum": "EaseType",
          "description": "Signifies that the interpolation should be focused in both ends."
        },
        {
          "name": "EASE_OUT_IN",
          "value": "3",
          "enum": "EaseType",
          "description": "Signifies that the interpolation should be focused in both ends, but they should be switched (a bit hard to explain, try it for yourself to be sure)."
        }
      ],
      "properties": [
        {
          "name": "playback_process_mode",
          "type": "int",
          "setter": "set_tween_process_mode",
          "getter": "get_tween_process_mode",
          "enum": "Tween.TweenProcessMode",
          "description": ""
        },
        {
          "name": "playback_speed",
          "type": "float",
          "setter": "set_speed_scale",
          "getter": "get_speed_scale",
          "description": "The speed multiplier of the tween. Set it to 1 for normal speed, 2 for two times nromal speed, and 0.5 for half of the normal speed. Setting it to 0 would pause the animation, but you might consider using [method set_active] or [method stop_all] and [method resume_all] for this."
        },
        {
          "name": "repeat",
          "type": "bool",
          "setter": "set_repeat",
          "getter": "is_repeat",
          "description": "If [code]true[/code], the tween will repeat."
        }
      ],
      "theme_properties": []
    },
    "Sprite3D": {
      "name": "Sprite3D",
      "inherits": "SpriteBase3D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "2D Sprite node in 3D world.",
      "description": "A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.",
      "methods": [],
      "signals": [
        {
          "name": "frame_changed",
          "description": "Emitted when the [member frame] changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "frame",
          "type": "int",
          "setter": "set_frame",
          "getter": "get_frame",
          "description": "Current frame to display from sprite sheet. [member vframes] or [member hframes] must be greater than 1."
        },
        {
          "name": "hframes",
          "type": "int",
          "setter": "set_hframes",
          "getter": "get_hframes",
          "description": "The number of columns in the sprite sheet."
        },
        {
          "name": "region_enabled",
          "type": "bool",
          "setter": "set_region",
          "getter": "is_region",
          "description": "If [code]true[/code] texture will be cut from a larger atlas texture. See [member region_rect]. Default value: [code]false[/code]."
        },
        {
          "name": "region_rect",
          "type": "Rect2",
          "setter": "set_region_rect",
          "getter": "get_region_rect",
          "description": "The region of the atlas texture to display. [member region_enabled] must be [code]true[/code]."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "[Texture] object to draw."
        },
        {
          "name": "vframes",
          "type": "int",
          "setter": "set_vframes",
          "getter": "get_vframes",
          "description": "The number of rows in the sprite sheet."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptSwitch": {
      "name": "VisualScriptSwitch",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Branches program flow based on a given input's value.",
      "description": "Branches the flow based on an input's value. Use \"Case Count\" in the Inspector to set the number of branches and each comparison's optional type.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence: [code]'input' is[/code]\n\t\t- Data (variant): [code]=[/code]\n\t\t- Data (variant): [code]=[/code] (optional)\n\t\t- Data (variant): [code]input[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence\n\t\t- Sequence (optional)\n\t\t- Sequence: [code]done[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamPlayer3D": {
      "name": "AudioStreamPlayer3D",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Plays 3D sound in 3D space",
      "description": "Plays a sound effect with directed sound effects, dampens with distance if needed, generates effect of hearable position in space.",
      "methods": [
        {
          "name": "get_playback_position",
          "description": "Returns the position in the [AudioStream].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Plays the audio from the given position 'from_position', in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_position",
              "type": "float",
              "default_value": "0.0"
            }
          ]
        },
        {
          "name": "seek",
          "description": "Sets the position from which audio will be played, in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stops the audio.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "finished",
          "description": "Fires when the audio stops playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "ATTENUATION_INVERSE_DISTANCE",
          "value": "0",
          "enum": "AttenuationModel",
          "description": "Linear dampening of loudness according to distance."
        },
        {
          "name": "ATTENUATION_INVERSE_SQUARE_DISTANCE",
          "value": "1",
          "enum": "AttenuationModel",
          "description": "Squared dampening of loudness according to distance."
        },
        {
          "name": "ATTENUATION_LOGARITHMIC",
          "value": "2",
          "enum": "AttenuationModel",
          "description": "Logarithmic dampening of loudness according to distance."
        },
        {
          "name": "OUT_OF_RANGE_MIX",
          "value": "0",
          "enum": "OutOfRangeMode",
          "description": "Mix this audio in, even when it's out of range."
        },
        {
          "name": "OUT_OF_RANGE_PAUSE",
          "value": "1",
          "enum": "OutOfRangeMode",
          "description": "Pause this audio when it gets out of range."
        },
        {
          "name": "DOPPLER_TRACKING_DISABLED",
          "value": "0",
          "enum": "DopplerTracking",
          "description": "Disables doppler tracking."
        },
        {
          "name": "DOPPLER_TRACKING_IDLE_STEP",
          "value": "1",
          "enum": "DopplerTracking",
          "description": "Executes doppler tracking in idle step."
        },
        {
          "name": "DOPPLER_TRACKING_PHYSICS_STEP",
          "value": "2",
          "enum": "DopplerTracking",
          "description": "Executes doppler tracking in physics step."
        }
      ],
      "properties": [
        {
          "name": "area_mask",
          "type": "int",
          "setter": "set_area_mask",
          "getter": "get_area_mask",
          "description": "Areas in which this sound plays."
        },
        {
          "name": "attenuation_filter_cutoff_hz",
          "type": "float",
          "setter": "set_attenuation_filter_cutoff_hz",
          "getter": "get_attenuation_filter_cutoff_hz",
          "description": "Dampens audio above this frequency, in Hz."
        },
        {
          "name": "attenuation_filter_db",
          "type": "float",
          "setter": "set_attenuation_filter_db",
          "getter": "get_attenuation_filter_db",
          "description": "Amount how much the filter affects the loudness, in dB."
        },
        {
          "name": "attenuation_model",
          "type": "int",
          "setter": "set_attenuation_model",
          "getter": "get_attenuation_model",
          "enum": "AudioStreamPlayer3D.AttenuationModel",
          "description": "Decides if audio should get quieter with distance linearly, quadratically or logarithmically."
        },
        {
          "name": "autoplay",
          "type": "bool",
          "setter": "set_autoplay",
          "getter": "is_autoplay_enabled",
          "description": "If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code]."
        },
        {
          "name": "bus",
          "type": "String",
          "setter": "set_bus",
          "getter": "get_bus",
          "description": "Bus on which this audio is playing."
        },
        {
          "name": "doppler_tracking",
          "type": "int",
          "setter": "set_doppler_tracking",
          "getter": "get_doppler_tracking",
          "enum": "AudioStreamPlayer3D.DopplerTracking",
          "description": "Decides in which step the Doppler effect should be calculated."
        },
        {
          "name": "emission_angle_degrees",
          "type": "float",
          "setter": "set_emission_angle",
          "getter": "get_emission_angle",
          "description": "The angle in which the audio reaches cameras undampened."
        },
        {
          "name": "emission_angle_enabled",
          "type": "bool",
          "setter": "set_emission_angle_enabled",
          "getter": "is_emission_angle_enabled",
          "description": "If [code]true[/code] the audio should be dampened according to the direction of the sound."
        },
        {
          "name": "emission_angle_filter_attenuation_db",
          "type": "float",
          "setter": "set_emission_angle_filter_attenuation_db",
          "getter": "get_emission_angle_filter_attenuation_db",
          "description": "dampens audio if camera is outside of 'emission_angle_degrees' and 'emission_angle_enabled' is set by this factor, in dB."
        },
        {
          "name": "max_db",
          "type": "float",
          "setter": "set_max_db",
          "getter": "get_max_db",
          "description": "Sets the absolute maximum of the soundlevel, in dB."
        },
        {
          "name": "max_distance",
          "type": "float",
          "setter": "set_max_distance",
          "getter": "get_max_distance",
          "description": "Sets the distance from which the 'out_of_range_mode' takes effect. Has no effect if set to 0."
        },
        {
          "name": "out_of_range_mode",
          "type": "int",
          "setter": "set_out_of_range_mode",
          "getter": "get_out_of_range_mode",
          "enum": "AudioStreamPlayer3D.OutOfRangeMode",
          "description": "Decides if audio should pause when source is outside of 'max_distance' range."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "is_playing",
          "description": "If [code]true[/code], audio is playing."
        },
        {
          "name": "stream",
          "type": "AudioStream",
          "setter": "set_stream",
          "getter": "get_stream",
          "description": "The [AudioStream] object to be played."
        },
        {
          "name": "unit_db",
          "type": "float",
          "setter": "set_unit_db",
          "getter": "get_unit_db",
          "description": "Base sound level unaffected by dampening, in dB."
        },
        {
          "name": "unit_size",
          "type": "float",
          "setter": "set_unit_size",
          "getter": "get_unit_size",
          "description": "Factor for the attenuation effect."
        }
      ],
      "theme_properties": []
    },
    "Gradient": {
      "name": "Gradient",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Color interpolator node.",
      "description": "Given a set of colors, this node will interpolate them in order, meaning, that if you have color 1, color 2 and color3, the ramp will interpolate (generate the colors between two colors) from color 1 to color 2 and from color 2 to color 3. Initially the ramp will have 2 colors (black and white), one (black) at ramp lower offset offset 0 and the other (white) at the ramp higher offset 1.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds the specified color to the end of the ramp, with the specified offset",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Returns the color of the ramp color at index [i]point[/i]",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Returns the offset of the ramp color at index [i]point[/i]",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the number of colors in the ramp",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "interpolate",
          "description": "Returns the interpolated color specified by [i]offset[/i]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Removes the color at the index [i]offset[/i]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color",
          "description": "Sets the color of the ramp color at index [i]point[/i]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Sets the offset for the ramp color at index [i]point[/i]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "colors",
          "type": "PoolColorArray",
          "setter": "set_colors",
          "getter": "get_colors",
          "description": "Gradient's colors returned as a [PoolColorArray]."
        },
        {
          "name": "offsets",
          "type": "PoolRealArray",
          "setter": "set_offsets",
          "getter": "get_offsets",
          "description": "Gradient's offsets returned as a [PoolRealArray]."
        }
      ],
      "theme_properties": []
    },
    "PhysicsDirectBodyState": {
      "name": "PhysicsDirectBodyState",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_force",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "force",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_impulse",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "j",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_torqe_impulse",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "j",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_object",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_velocity_at_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_contact_local_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_space_state",
          "description": "",
          "return_type": "PhysicsDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "integrate_forces",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "angular_velocity",
          "type": "Vector3",
          "setter": "set_angular_velocity",
          "getter": "get_angular_velocity",
          "description": "The angular velocity of the body."
        },
        {
          "name": "center_of_mass",
          "type": "Vector3",
          "setter": "",
          "getter": "get_center_of_mass",
          "description": ""
        },
        {
          "name": "inverse_inertia",
          "type": "Vector3",
          "setter": "",
          "getter": "get_inverse_inertia",
          "description": "The inverse of the inertia of the body."
        },
        {
          "name": "inverse_mass",
          "type": "float",
          "setter": "",
          "getter": "get_inverse_mass",
          "description": "The inverse of the mass of the body."
        },
        {
          "name": "linear_velocity",
          "type": "Vector3",
          "setter": "set_linear_velocity",
          "getter": "get_linear_velocity",
          "description": "The linear velocity of the body."
        },
        {
          "name": "principal_inertia_axes",
          "type": "Basis",
          "setter": "",
          "getter": "get_principal_inertia_axes",
          "description": ""
        },
        {
          "name": "sleeping",
          "type": "bool",
          "setter": "set_sleep_state",
          "getter": "is_sleeping",
          "description": "[code]true[/code] if this body is currently sleeping (not active)."
        },
        {
          "name": "step",
          "type": "float",
          "setter": "",
          "getter": "get_step",
          "description": "The timestep (delta) used for the simulation."
        },
        {
          "name": "total_angular_damp",
          "type": "float",
          "setter": "",
          "getter": "get_total_angular_damp",
          "description": "The rate at which the body stops rotating, if there are not any other forces moving it."
        },
        {
          "name": "total_gravity",
          "type": "Vector3",
          "setter": "",
          "getter": "get_total_gravity",
          "description": "The total gravity vector being currently applied to this body."
        },
        {
          "name": "total_linear_damp",
          "type": "float",
          "setter": "",
          "getter": "get_total_linear_damp",
          "description": "The rate at which the body stops moving, if there are not any other forces moving it."
        },
        {
          "name": "transform",
          "type": "Transform",
          "setter": "set_transform",
          "getter": "get_transform",
          "description": "The transformation matrix of the body."
        }
      ],
      "theme_properties": []
    },
    "HSplitContainer": {
      "name": "HSplitContainer",
      "inherits": "SplitContainer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Horizontal split container.",
      "description": "Horizontal split container. See [SplitContainer]. This goes from left to right.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "autohide",
          "type": "int",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "SceneState": {
      "name": "SceneState",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A script interface to a scene file's data.",
      "description": "Maintains a list of resources, nodes, exported and overridden properties, and built-in scripts associated with a scene.",
      "methods": [
        {
          "name": "get_connection_binds",
          "qualifiers": "const",
          "description": "Returns the list of bound parameters for the signal at [code]idx[/code].",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_count",
          "qualifiers": "const",
          "description": "Returns the number of signal connections in the scene.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_connection_flags",
          "qualifiers": "const",
          "description": "Returns the flags for the signal at [code]idx[/code]. See [Object]'s [code]CONNECT_*[/code] flags.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_method",
          "qualifiers": "const",
          "description": "Returns the method connected to the signal at [code]idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_signal",
          "qualifiers": "const",
          "description": "Returns the name of the signal at [code]idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_source",
          "qualifiers": "const",
          "description": "Returns the path to the node that owns the signal at [code]idx[/code], relative to the root node.",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_target",
          "qualifiers": "const",
          "description": "Returns the path to the node that owns the method connected to the signal at [code]idx[/code], relative to the root node.",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_count",
          "qualifiers": "const",
          "description": "Returns the number of nodes in the scene.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node_groups",
          "qualifiers": "const",
          "description": "Returns the list of group names associated with the node at [code]idx[/code].",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_instance",
          "qualifiers": "const",
          "description": "Returns the scene for the node at [code]idx[/code] or [code]null[/code] if the node is not an instance.",
          "return_type": "PackedScene",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_instance_placeholder",
          "qualifiers": "const",
          "description": "Returns the path to the represented scene file if the node at [code]idx[/code] is an [InstancePlaceholder].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_name",
          "qualifiers": "const",
          "description": "Returns the name of the node at [code]idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_owner_path",
          "qualifiers": "const",
          "description": "Returns the path to the owner of the node at [code]idx[/code], relative to the root node.",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_path",
          "qualifiers": "const",
          "description": "Returns the path to the node at [code]idx[/code].",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "for_parent",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_node_property_count",
          "qualifiers": "const",
          "description": "Returns the number of exported or overridden properties for the node at [code]idx[/code].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_property_name",
          "qualifiers": "const",
          "description": "Returns the name of the property at [code]prop_idx[/code] for the node at [code]idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "prop_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_property_value",
          "qualifiers": "const",
          "description": "Returns the value of the property at [code]prop_idx[/code] for the node at [code]idx[/code].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "prop_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_type",
          "qualifiers": "const",
          "description": "Returns the type of the node at [code]idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_node_instance_placeholder",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the node at [code]idx[/code] is an [InstancePlaceholder].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "GEN_EDIT_STATE_DISABLED",
          "value": "0",
          "enum": "GenEditState",
          "description": "If passed to [method PackedScene.instance], blocks edits to the scene state."
        },
        {
          "name": "GEN_EDIT_STATE_INSTANCE",
          "value": "1",
          "enum": "GenEditState",
          "description": "If passed to [method PackedScene.instance], provides inherited scene resources to the local scene. Requires tools compiled."
        },
        {
          "name": "GEN_EDIT_STATE_MAIN",
          "value": "2",
          "enum": "GenEditState",
          "description": "If passed to [method PackedScene.instance], provides local scene resources to the local scene. Only the main scene should receive the main edit state. Requires tools compiled."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ARVROrigin": {
      "name": "ARVROrigin",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Our origin point in AR/VR.",
      "description": "This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world.\n\t\tThere should be only one of these nodes in your scene and you must have one. All the ARVRCamera, ARVRController and ARVRAnchor nodes should be direct children of this node for spatial tracking to work correctly.\n\t\tIt is the position of this node that you update when you're character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point.\n\t\tSo say that your character is driving a car, the ARVROrigin node should be a child node of this car. If you implement a teleport system to move your character, you change the position of this node. Etc.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "world_scale",
          "type": "float",
          "setter": "set_world_scale",
          "getter": "get_world_scale",
          "description": "Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 meter in the real world.\n\t\t\tNote that this method is a passthrough to the [ARVRServer] itself."
        }
      ],
      "theme_properties": []
    },
    "JSONParseResult": {
      "name": "JSONParseResult",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Data class wrapper for decoded JSON.",
      "description": "Returned by [method JSON.parse], [code]JSONParseResult[/code] contains decoded JSON or error information if JSON source not successfully parsed. You can check if JSON source was successfully parsed with [code]if json_result.error == 0[/code].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "error",
          "type": "int",
          "setter": "set_error",
          "getter": "get_error",
          "enum": "Error",
          "description": "The error type if JSON source was not successfully parsed. See [@GlobalScope] ERR_* constants."
        },
        {
          "name": "error_line",
          "type": "int",
          "setter": "set_error_line",
          "getter": "get_error_line",
          "description": "The line number where the error occurred if JSON source was not successfully parsed."
        },
        {
          "name": "error_string",
          "type": "String",
          "setter": "set_error_string",
          "getter": "get_error_string",
          "description": "The error message if JSON source was not successfully parsed. See [@GlobalScope] ERR_* constants."
        },
        {
          "name": "result",
          "type": "Variant",
          "setter": "set_result",
          "getter": "get_result",
          "description": "A [Variant] containing the parsed JSON. Use typeof() to check if it is what you expect. For example, if JSON source starts with curly braces ([code]{}[/code]) a [Dictionary] will be returned, if JSON source starts with braces ([code][][/code]) an [Array] will be returned.\n\t\t\t[i]Be aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to float types.[/i]\n\t\t\t[codeblock]\n\t\t\tp = JSON.parse('[\"hello\", \"world\", \"!\"]')\n\t\t\tif typeof(p) == TYPE_ARRAY:\n\t\t\t    print(p[0]) # prints 'hello'\n\t\t\telse:\n\t\t\t    print(\"unexpected results\")\n\t\t\t[/codeblock]"
        }
      ],
      "theme_properties": []
    },
    "SegmentShape2D": {
      "name": "SegmentShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Segment shape for 2D collisions.",
      "description": "Segment shape for 2D collisions. Consists of two points, [code]a[/code] and [code]b[/code].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "a",
          "type": "Vector2",
          "setter": "set_a",
          "getter": "get_a",
          "description": "The segment's first point position."
        },
        {
          "name": "b",
          "type": "Vector2",
          "setter": "set_b",
          "getter": "get_b",
          "description": "The segment's second point position."
        }
      ],
      "theme_properties": []
    },
    "PhysicsBody": {
      "name": "PhysicsBody",
      "inherits": "CollisionObject",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for all objects affected by physics in 3D space.",
      "description": "PhysicsBody is an abstract base class for implementing a physics body. All *Body types inherit from it.",
      "methods": [
        {
          "name": "add_collision_exception_with",
          "description": "Adds a body to the list of bodies that this body can't collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_collision_exception_with",
          "description": "Removes a body from the list of bodies that this body can't collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The physics layers this area is in.\n\t\t\tCollidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.\n\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The physics layers this area can scan for collisions."
        }
      ],
      "theme_properties": []
    },
    "Camera": {
      "name": "Camera",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Camera node, displays from a point of view.",
      "description": "Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the Camera will register in the global viewport. In other words, a Camera just provides [i]3D[/i] display capabilities to a [Viewport], and, without one, a scene registered in that [Viewport] (or higher viewports) can't be displayed.",
      "methods": [
        {
          "name": "clear_current",
          "description": "If this is the current Camera, remove it from being current. If it is inside the node tree, request to make the next Camera current, if any.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_camera_transform",
          "qualifiers": "const",
          "description": "Get the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the [Node] transform.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "is_position_behind",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the given position is behind the Camera.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "world_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_current",
          "description": "Make this camera the current Camera for the [Viewport] (see class description). If the Camera Node is outside the scene tree, it will attempt to become current once it's added.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "project_local_ray_normal",
          "qualifiers": "const",
          "description": "Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "project_position",
          "qualifiers": "const",
          "description": "Returns how a 2D coordinate in the Viewport rectangle maps to a 3D point in worldspace.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "project_ray_normal",
          "qualifiers": "const",
          "description": "Returns a normal vector in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "project_ray_origin",
          "qualifiers": "const",
          "description": "Returns a 3D position in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_orthogonal",
          "description": "Set the camera projection to orthogonal mode, by specifying a width and the [i]near[/i] and [i]far[/i] clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels)",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "z_near",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_far",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_perspective",
          "description": "Set the camera projection to perspective mode, by specifying a [i]FOV[/i] Y angle in degrees (FOV means Field of View), and the [i]near[/i] and [i]far[/i] clip planes in worldspace units.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fov",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "z_near",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_far",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unproject_position",
          "qualifiers": "const",
          "description": "Returns how a 3D point in worldspace maps to a 2D coordinate in the [Viewport] rectangle.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "world_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PROJECTION_PERSPECTIVE",
          "value": "0",
          "enum": "Projection",
          "description": "Perspective Projection (object's size on the screen becomes smaller when far away)."
        },
        {
          "name": "PROJECTION_ORTHOGONAL",
          "value": "1",
          "enum": "Projection",
          "description": "Orthogonal Projection (objects remain the same size on the screen no matter how far away they are)."
        },
        {
          "name": "KEEP_WIDTH",
          "value": "0",
          "enum": "KeepAspect",
          "description": "Preserves the horizontal aspect ratio."
        },
        {
          "name": "KEEP_HEIGHT",
          "value": "1",
          "enum": "KeepAspect",
          "description": "Preserves the vertical aspect ratio."
        },
        {
          "name": "DOPPLER_TRACKING_DISABLED",
          "value": "0",
          "enum": "DopplerTracking",
          "description": "Disable Doppler effect simulation (default)."
        },
        {
          "name": "DOPPLER_TRACKING_IDLE_STEP",
          "value": "1",
          "enum": "DopplerTracking",
          "description": "Simulate Doppler effect by tracking positions of objects that are changed in [code]_process[/code]. Changes in the relative velocity of this Camera compared to those objects affect how Audio is perceived (changing the Audio's [code]pitch shift[/code])."
        },
        {
          "name": "DOPPLER_TRACKING_PHYSICS_STEP",
          "value": "2",
          "enum": "DopplerTracking",
          "description": "Simulate Doppler effect by tracking positions of objects that are changed in [code]_physics_process[/code]. Changes in the relative velocity of this Camera compared to those objects affect how Audio is perceived (changing the Audio's [code]pitch shift[/code])."
        }
      ],
      "properties": [
        {
          "name": "cull_mask",
          "type": "int",
          "setter": "set_cull_mask",
          "getter": "get_cull_mask",
          "description": "The culling mask that describes which 3D render layers are rendered by this camera."
        },
        {
          "name": "current",
          "type": "bool",
          "setter": "set_current",
          "getter": "is_current",
          "description": "If [code]true[/code] the ancestor [Viewport] is currently using this Camera. Default value: [code]false[/code]."
        },
        {
          "name": "doppler_tracking",
          "type": "int",
          "setter": "set_doppler_tracking",
          "getter": "get_doppler_tracking",
          "enum": "Camera.DopplerTracking",
          "description": "If not [code]DOPPLER_TRACKING_DISABLED[/code] this Camera will simulate the Doppler effect for objects changed in particular [code]_process[/code] methods. Default value: [code]DOPPLER_TRACKING_DISABLED[/code]."
        },
        {
          "name": "environment",
          "type": "Environment",
          "setter": "set_environment",
          "getter": "get_environment",
          "description": "Set the [Environment] to use for this Camera."
        },
        {
          "name": "far",
          "type": "float",
          "setter": "set_zfar",
          "getter": "get_zfar",
          "description": "The distance to the far culling boundary for this Camera relative to its local z-axis."
        },
        {
          "name": "fov",
          "type": "float",
          "setter": "set_fov",
          "getter": "get_fov",
          "description": "The camera's field of view angle (in degrees). Only applicable in perspective mode. Since [member keep_aspect] locks one axis, [code]fov[/code] sets the other axis' field of view angle."
        },
        {
          "name": "h_offset",
          "type": "float",
          "setter": "set_h_offset",
          "getter": "get_h_offset",
          "description": "The horizontal (X) offset of the Camear viewport."
        },
        {
          "name": "keep_aspect",
          "type": "int",
          "setter": "set_keep_aspect_mode",
          "getter": "get_keep_aspect_mode",
          "enum": "Camera.KeepAspect",
          "description": "The axis to lock during [member fov]/[member size] adjustments."
        },
        {
          "name": "near",
          "type": "float",
          "setter": "set_znear",
          "getter": "get_znear",
          "description": "The distance to the near culling boundary for this Camera relative to its local z-axis."
        },
        {
          "name": "projection",
          "type": "int",
          "setter": "set_projection",
          "getter": "get_projection",
          "enum": "Camera.Projection",
          "description": "The camera's projection mode. In [code]PROJECTION_PERSPECTIVE[/code] mode, objects' z-distance from the camera's local space scales their perceived size."
        },
        {
          "name": "size",
          "type": "float",
          "setter": "set_size",
          "getter": "get_size",
          "description": "The camera's size measured as 1/2 the width or height. Only applicable in orthogonal mode. Since [member keep_aspect] locks on axis, [code]size[/code] sets the other axis' size length."
        },
        {
          "name": "v_offset",
          "type": "float",
          "setter": "set_v_offset",
          "getter": "get_v_offset",
          "description": "The horizontal (Y) offset of the Camear viewport."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptVariableSet": {
      "name": "VisualScriptVariableSet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Changes a variable's value.",
      "description": "Changes a variable's value to the given input.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence\n\t\t- Data (variant): [code]set[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "var_name",
          "type": "String",
          "setter": "set_variable",
          "getter": "get_variable",
          "description": "The variable's name."
        }
      ],
      "theme_properties": []
    },
    "TextureButton": {
      "name": "TextureButton",
      "inherits": "BaseButton",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Texture-based button. Supports Pressed, Hover, Disabled and Focused states.",
      "description": "[code]TextureButton[/code] has the same functionality as [Button], except it uses sprites instead of Godot's [Theme] resource. It is faster to create, but it doesn't support localization like more complex Controls.\n\t\tThe Normal state's texture is required. Others are optional.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "STRETCH_SCALE",
          "value": "0",
          "enum": "StretchMode",
          "description": "Scale to fit the node's bounding rectangle."
        },
        {
          "name": "STRETCH_TILE",
          "value": "1",
          "enum": "StretchMode",
          "description": "Tile inside the node's bounding rectangle."
        },
        {
          "name": "STRETCH_KEEP",
          "value": "2",
          "enum": "StretchMode",
          "description": "The texture keeps its original size and stays in the bounding rectangle's top-left corner."
        },
        {
          "name": "STRETCH_KEEP_CENTERED",
          "value": "3",
          "enum": "StretchMode",
          "description": "The texture keeps its original size and stays centered in the node's bounding rectangle."
        },
        {
          "name": "STRETCH_KEEP_ASPECT",
          "value": "4",
          "enum": "StretchMode",
          "description": "Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio."
        },
        {
          "name": "STRETCH_KEEP_ASPECT_CENTERED",
          "value": "5",
          "enum": "StretchMode",
          "description": "Scale the texture to fit the node's bounding rectangle, center it, and maintain its aspect ratio."
        },
        {
          "name": "STRETCH_KEEP_ASPECT_COVERED",
          "value": "6",
          "enum": "StretchMode",
          "description": "Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits."
        }
      ],
      "properties": [
        {
          "name": "expand",
          "type": "bool",
          "setter": "set_expand",
          "getter": "get_expand",
          "description": "If [code]true[/code] the texture stretches to the edges of the node's bounding rectangle using the [member stretch_mode]. If [code]false[/code] the texture will not scale with the node. Default value: [code]false[/code]."
        },
        {
          "name": "stretch_mode",
          "type": "int",
          "setter": "set_stretch_mode",
          "getter": "get_stretch_mode",
          "enum": "TextureButton.StretchMode",
          "description": "Controls the texture's behavior when you resize the node's bounding rectangle, [b]only if[/b] [member expand] is [code]true[/code]. Set it to one of the [code]STRETCH_*[/code] constants. See the constants to learn more."
        },
        {
          "name": "texture_click_mask",
          "type": "BitMap",
          "setter": "set_click_mask",
          "getter": "get_click_mask",
          "description": "Pure black and white [Bitmap] image to use for click detection. On the mask, white pixels represent the button's clickable area. Use it to create buttons with curved shapes."
        },
        {
          "name": "texture_disabled",
          "type": "Texture",
          "setter": "set_disabled_texture",
          "getter": "get_disabled_texture",
          "description": "Texture to display when the node is disabled. See [member BaseButton.disabled]."
        },
        {
          "name": "texture_focused",
          "type": "Texture",
          "setter": "set_focused_texture",
          "getter": "get_focused_texture",
          "description": "Texture to display when the node has mouse or keyboard focus."
        },
        {
          "name": "texture_hover",
          "type": "Texture",
          "setter": "set_hover_texture",
          "getter": "get_hover_texture",
          "description": "Texture to display when the mouse hovers the node."
        },
        {
          "name": "texture_normal",
          "type": "Texture",
          "setter": "set_normal_texture",
          "getter": "get_normal_texture",
          "description": "Texture to display by default, when the node is [b]not[/b] in the disabled, focused, hover or pressed state."
        },
        {
          "name": "texture_pressed",
          "type": "Texture",
          "setter": "set_pressed_texture",
          "getter": "get_pressed_texture",
          "description": "Texture to display on mouse down over the node, if the node has keyboard focus and the player presses the enter key or if the player presses the [member BaseButton.shortcut] key."
        }
      ],
      "theme_properties": []
    },
    "PoolColorArray": {
      "name": "PoolColorArray",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Array of Colors",
      "description": "Array of Color, Contains colors. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolColorArray",
          "description": "Create from a generic array.",
          "return_type": "PoolColorArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append a [code]PoolColorArray[/code] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append a value to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [Color] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ParticlesMaterial": {
      "name": "ParticlesMaterial",
      "inherits": "Material",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Particle properties for [Particles] and [Particles2D] nodes.",
      "description": "ParticlesMaterial defines particle properties and behavior. It is used in the [code]process_material[/code] of [Particles] and [Particles2D] emitter nodes.\n\t\tSome of this material's properties are applied to each particle when emitted, while others can have a [CurveTexture] applied to vary values over the lifetime of the particle.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_INITIAL_LINEAR_VELOCITY",
          "value": "0",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set initial velocity properties."
        },
        {
          "name": "PARAM_ANGULAR_VELOCITY",
          "value": "1",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set angular velocity properties."
        },
        {
          "name": "PARAM_ORBIT_VELOCITY",
          "value": "2",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set orbital_velocity properties."
        },
        {
          "name": "PARAM_LINEAR_ACCEL",
          "value": "3",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set linear acceleration properties."
        },
        {
          "name": "PARAM_RADIAL_ACCEL",
          "value": "4",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set radial acceleration properties."
        },
        {
          "name": "PARAM_TANGENTIAL_ACCEL",
          "value": "5",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set tangential acceleration properties."
        },
        {
          "name": "PARAM_DAMPING",
          "value": "6",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set damping properties."
        },
        {
          "name": "PARAM_ANGLE",
          "value": "7",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set angle properties."
        },
        {
          "name": "PARAM_SCALE",
          "value": "8",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set scale properties."
        },
        {
          "name": "PARAM_HUE_VARIATION",
          "value": "9",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set hue_variation properties."
        },
        {
          "name": "PARAM_ANIM_SPEED",
          "value": "10",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set animation speed properties."
        },
        {
          "name": "PARAM_ANIM_OFFSET",
          "value": "11",
          "enum": "Parameter",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set animation offset properties."
        },
        {
          "name": "PARAM_MAX",
          "value": "12",
          "enum": "Parameter",
          "description": ""
        },
        {
          "name": "FLAG_ALIGN_Y_TO_VELOCITY",
          "value": "0",
          "enum": "Flags",
          "description": "Use with [method set_flag] to set [member flag_align_y]."
        },
        {
          "name": "FLAG_ROTATE_Y",
          "value": "1",
          "enum": "Flags",
          "description": "Use with [method set_flag] to set [member flag_rotate_y]"
        },
        {
          "name": "FLAG_MAX",
          "value": "4",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "EMISSION_SHAPE_POINT",
          "value": "0",
          "enum": "EmissionShape",
          "description": "All particles will be emitted from a single point."
        },
        {
          "name": "EMISSION_SHAPE_SPHERE",
          "value": "1",
          "enum": "EmissionShape",
          "description": "Particles will be emitted in the volume of a sphere."
        },
        {
          "name": "EMISSION_SHAPE_BOX",
          "value": "2",
          "enum": "EmissionShape",
          "description": "Particles will be emitted in the volume of a box."
        },
        {
          "name": "EMISSION_SHAPE_POINTS",
          "value": "3",
          "enum": "EmissionShape",
          "description": ""
        },
        {
          "name": "EMISSION_SHAPE_DIRECTED_POINTS",
          "value": "4",
          "enum": "EmissionShape",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "angle",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial rotation applied to each particle."
        },
        {
          "name": "angle_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's rotation will be animated along this [CurveTexture]."
        },
        {
          "name": "angle_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Rotation randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "angular_velocity",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial angular velocity applied to each particle."
        },
        {
          "name": "angular_velocity_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's angular velocity will vary along this [CurveTexture]."
        },
        {
          "name": "angular_velocity_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Angular velocity randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "anim_loop",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": "If [code]true[/code] animation will loop. Default value: [code]false[/code]."
        },
        {
          "name": "anim_offset",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Particle animation offset."
        },
        {
          "name": "anim_offset_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's animation offset will vary along this [CurveTexture]."
        },
        {
          "name": "anim_offset_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Animation offset randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "anim_speed",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Particle animation speed."
        },
        {
          "name": "anim_speed_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's animation speed will vary along this [CurveTexture]."
        },
        {
          "name": "anim_speed_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Animation speed randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": "Each particle's initial color. If the [Particle2D]'s [code]texture[/code] is defined, it will be multiplied by this color."
        },
        {
          "name": "color_ramp",
          "type": "Texture",
          "setter": "set_color_ramp",
          "getter": "get_color_ramp",
          "description": "Each particle's color will vary along this [GradientTexture]."
        },
        {
          "name": "damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The rate at which particles lose velocity."
        },
        {
          "name": "damping_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Damping will vary along this [CurveTexture]."
        },
        {
          "name": "damping_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Damping randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "emission_box_extents",
          "type": "Vector3",
          "setter": "set_emission_box_extents",
          "getter": "get_emission_box_extents",
          "description": "The box's extents if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_BOX[/code]."
        },
        {
          "name": "emission_color_texture",
          "type": "Texture",
          "setter": "set_emission_color_texture",
          "getter": "get_emission_color_texture",
          "description": ""
        },
        {
          "name": "emission_normal_texture",
          "type": "Texture",
          "setter": "set_emission_normal_texture",
          "getter": "get_emission_normal_texture",
          "description": ""
        },
        {
          "name": "emission_point_count",
          "type": "int",
          "setter": "set_emission_point_count",
          "getter": "get_emission_point_count",
          "description": "The number of emission points if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_POINTS[/code] or [code]EMISSION_SHAPE_DIRECTED_POINTS[/code]."
        },
        {
          "name": "emission_point_texture",
          "type": "Texture",
          "setter": "set_emission_point_texture",
          "getter": "get_emission_point_texture",
          "description": ""
        },
        {
          "name": "emission_shape",
          "type": "int",
          "setter": "set_emission_shape",
          "getter": "get_emission_shape",
          "enum": "ParticlesMaterial.EmissionShape",
          "description": "Particles will be emitted inside this region. Use [code]EMISSION_SHAPE_*[/code] constants for values. Default value: [code]EMISSION_SHAPE_POINT[/code]."
        },
        {
          "name": "emission_sphere_radius",
          "type": "float",
          "setter": "set_emission_sphere_radius",
          "getter": "get_emission_sphere_radius",
          "description": "The sphere's radius if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_SPHERE[/code]."
        },
        {
          "name": "flag_align_y",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flag_disable_z",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": "If [code]true[/code] particles will not move on the z axis. Default value: [code]true[/code] for [Particles2D], [code]false[/code] for [Particles]."
        },
        {
          "name": "flag_rotate_y",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flatness",
          "type": "float",
          "setter": "set_flatness",
          "getter": "get_flatness",
          "description": ""
        },
        {
          "name": "gravity",
          "type": "Vector3",
          "setter": "set_gravity",
          "getter": "get_gravity",
          "description": "Gravity applied to every particle. Default value: [code](0, 98, 0)[/code]."
        },
        {
          "name": "hue_variation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial hue variation applied to each particle."
        },
        {
          "name": "hue_variation_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's hue will vary along this [CurveTexture]."
        },
        {
          "name": "hue_variation_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Hue variation randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "initial_velocity",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial velocity for each particle."
        },
        {
          "name": "initial_velocity_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Initial velocity randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "linear_accel",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Linear acceleration applied to each particle."
        },
        {
          "name": "linear_accel_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's linear acceleration will vary along this [CurveTexture]."
        },
        {
          "name": "linear_accel_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Linear acceleration randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "orbit_velocity",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Orbital velocity applied to each particle."
        },
        {
          "name": "orbit_velocity_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's orbital velocity will vary along this [CurveTexture]."
        },
        {
          "name": "orbit_velocity_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Orbital velocity randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "radial_accel",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Linear acceleration applied to each particle."
        },
        {
          "name": "radial_accel_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's radial acceleration will vary along this [CurveTexture]."
        },
        {
          "name": "radial_accel_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Radial acceleration randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "scale",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial scale applied to each particle."
        },
        {
          "name": "scale_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's scale will vary along this [CurveTexture]."
        },
        {
          "name": "scale_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Scale randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "spread",
          "type": "float",
          "setter": "set_spread",
          "getter": "get_spread",
          "description": "Each particle's initial direction range from [code]+spread[/code] to [code]-spread[/code] degrees. Default value: [code]45[/code]."
        },
        {
          "name": "tangential_accel",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity."
        },
        {
          "name": "tangential_accel_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's tangential acceleration will vary along this [CurveTexture]."
        },
        {
          "name": "tangential_accel_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Tangential acceleration randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "trail_color_modifier",
          "type": "GradientTexture",
          "setter": "set_trail_color_modifier",
          "getter": "get_trail_color_modifier",
          "description": "Trail particles' color will vary along this [GradientTexture]."
        },
        {
          "name": "trail_divisor",
          "type": "int",
          "setter": "set_trail_divisor",
          "getter": "get_trail_divisor",
          "description": "Emitter will emit [code]amount[/code] divided by [code]trail_divisor[/code] particles. The remaining particles will be used as trail(s)."
        },
        {
          "name": "trail_size_modifier",
          "type": "CurveTexture",
          "setter": "set_trail_size_modifier",
          "getter": "get_trail_size_modifier",
          "description": "Trail particles' size will vary along this [CurveTexture]."
        }
      ],
      "theme_properties": []
    },
    "ARVRCamera": {
      "name": "ARVRCamera",
      "inherits": "Camera",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A camera node with a few overrules for AR/VR applied such as location tracking.",
      "description": "This is a helper spatial node for our camera, note that if stereoscopic rendering is applicable (VR-HMD) most of the camera properties are ignored as the HMD information overrides them. The only properties that can be trusted are the near and far planes.\n\t\tThe position and orientation of this node is automatically updated by the ARVR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that in contrast to the ARVR Controller the render thread has access to the most up to date tracking data of the HMD and the location of the ARVRCamera can lag a few milliseconds behind what is used for rendering as a result.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HSeparator": {
      "name": "HSeparator",
      "inherits": "Separator",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Horizontal separator.",
      "description": "Horizontal separator. See [Separator]. It is used to separate objects vertically, though (but it looks horizontal!).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "separator",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ScrollContainer": {
      "name": "ScrollContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A helper node for displaying scrollable elements (e.g. lists).",
      "description": "A ScrollContainer node with a [Control] child and scrollbar child ([HScrollbar], [VScrollBar], or both) will only draw the Control within the ScrollContainer area.  Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer.  Scrollbars will also automatically resize the grabber based on the minimum_size of the Control relative to the ScrollContainer.  Works great with a [Panel] control.  You can set EXPAND on children size flags, so they will upscale to ScrollContainer size if ScrollContainer size is bigger (scroll is invisible for chosen dimension).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "scroll_horizontal",
          "type": "int",
          "setter": "set_h_scroll",
          "getter": "get_h_scroll",
          "description": "The current horizontal scroll value."
        },
        {
          "name": "scroll_horizontal_enabled",
          "type": "bool",
          "setter": "set_enable_h_scroll",
          "getter": "is_h_scroll_enabled",
          "description": "If [code]true[/code], enables horizontal scrolling."
        },
        {
          "name": "scroll_vertical",
          "type": "int",
          "setter": "set_v_scroll",
          "getter": "get_v_scroll",
          "description": "The current horizontal scroll value."
        },
        {
          "name": "scroll_vertical_enabled",
          "type": "bool",
          "setter": "set_enable_v_scroll",
          "getter": "is_v_scroll_enabled",
          "description": "If [code]true[/code], enables vertical scrolling."
        }
      ],
      "theme_properties": []
    },
    "PackedScene": {
      "name": "PackedScene",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "An abstraction of a serialized scene.",
      "description": "A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself.\n\t\tTODO: explain ownership, and that node does not need to own itself",
      "methods": [
        {
          "name": "can_instance",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the scene file has nodes.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_state",
          "description": "Returns the [code]SceneState[/code] representing the scene file contents.",
          "return_type": "SceneState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "instance",
          "qualifiers": "const",
          "description": "Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers the [enum Object.NOTIFICATION_INSTANCED] notification on the root node.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "edit_state",
              "type": "int",
              "enum": "PackedScene.GenEditState",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "pack",
          "description": "Pack will ignore any sub-nodes not owned by given node. See [method Node.set_owner].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "GEN_EDIT_STATE_DISABLED",
          "value": "0",
          "enum": "GenEditState",
          "description": "If passed to [method instance], blocks edits to the scene state."
        },
        {
          "name": "GEN_EDIT_STATE_INSTANCE",
          "value": "1",
          "enum": "GenEditState",
          "description": "If passed to [method instance], provides local scene resources to the local scene. Requires tools compiled."
        },
        {
          "name": "GEN_EDIT_STATE_MAIN",
          "value": "2",
          "enum": "GenEditState",
          "description": "If passed to [method instance], provides local scene resources to the local scene. Only the main scene should receive the main edit state. Requires tools compiled."
        }
      ],
      "properties": [
        {
          "name": "_bundled",
          "type": "Dictionary",
          "setter": "_set_bundled_scene",
          "getter": "_get_bundled_scene",
          "description": "A dictionary representation of the scene contents.\n\t\t\tAvailable keys include \"rnames\" and \"variants\" for resources, \"node_count\", \"nodes\", \"node_paths\" for nodes, \"editable_instances\" for base scene children overrides, \"conn_count\" and \"conns\" for signal connections, and \"version\" for the format style of the PackedScene."
        }
      ],
      "theme_properties": []
    },
    "ScrollBar": {
      "name": "ScrollBar",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for scroll bars.",
      "description": "Scrollbars are a [Range] based [Control], that display a draggable area (the size of the page). Horizontal ([HScrollBar]) and Vertical ([VScrollBar]) versions are available.",
      "methods": [],
      "signals": [
        {
          "name": "scrolling",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "custom_step",
          "type": "float",
          "setter": "set_custom_step",
          "getter": "get_custom_step",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Mesh": {
      "name": "Mesh",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A [Resource] that contains vertex-array based geometry.",
      "description": "Mesh is a type of [Resource] that contains vertex-array based geometry, divided in [i]surfaces[/i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.",
      "methods": [
        {
          "name": "create_convex_shape",
          "qualifiers": "const",
          "description": "Calculate a [ConvexPolygonShape] from the mesh.",
          "return_type": "Shape",
          "arguments": []
        },
        {
          "name": "create_outline",
          "qualifiers": "const",
          "description": "Calculate an outline mesh at a defined offset (margin) from the original mesh. Note: Typically returns the vertices in reverse order (e.g. clockwise to anti-clockwise).",
          "return_type": "Mesh",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_trimesh_shape",
          "qualifiers": "const",
          "description": "Calculate a [ConcavePolygonShape] from the mesh.",
          "return_type": "Shape",
          "arguments": []
        },
        {
          "name": "generate_triangle_mesh",
          "qualifiers": "const",
          "description": "Generate a [TriangleMesh] from the mesh.",
          "return_type": "TriangleMesh",
          "arguments": []
        },
        {
          "name": "get_faces",
          "qualifiers": "const",
          "description": "Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle.",
          "return_type": "PoolVector3Array",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PRIMITIVE_POINTS",
          "value": "0",
          "enum": "PrimitiveType",
          "description": "Render array as points (one vertex equals one point)."
        },
        {
          "name": "PRIMITIVE_LINES",
          "value": "1",
          "enum": "PrimitiveType",
          "description": "Render array as lines (every two vertices a line is created)."
        },
        {
          "name": "PRIMITIVE_LINE_STRIP",
          "value": "2",
          "enum": "PrimitiveType",
          "description": "Render array as line strip."
        },
        {
          "name": "PRIMITIVE_LINE_LOOP",
          "value": "3",
          "enum": "PrimitiveType",
          "description": "Render array as line loop (like line strip, but closed)."
        },
        {
          "name": "PRIMITIVE_TRIANGLES",
          "value": "4",
          "enum": "PrimitiveType",
          "description": "Render array as triangles (every three vertices a triangle is created)."
        },
        {
          "name": "PRIMITIVE_TRIANGLE_STRIP",
          "value": "5",
          "enum": "PrimitiveType",
          "description": "Render array as triangle strips."
        },
        {
          "name": "PRIMITIVE_TRIANGLE_FAN",
          "value": "6",
          "enum": "PrimitiveType",
          "description": "Render array as triangle fans."
        },
        {
          "name": "BLEND_SHAPE_MODE_NORMALIZED",
          "value": "0",
          "enum": "BlendShapeMode",
          "description": ""
        },
        {
          "name": "BLEND_SHAPE_MODE_RELATIVE",
          "value": "1",
          "enum": "BlendShapeMode",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_VERTEX",
          "value": "1",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_NORMAL",
          "value": "2",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_TANGENT",
          "value": "4",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_COLOR",
          "value": "8",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV",
          "value": "16",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV2",
          "value": "32",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_BONES",
          "value": "64",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_WEIGHTS",
          "value": "128",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_INDEX",
          "value": "256",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_BASE",
          "value": "9",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_VERTEX",
          "value": "512",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_NORMAL",
          "value": "1024",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_TANGENT",
          "value": "2048",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_COLOR",
          "value": "4096",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_TEX_UV",
          "value": "8192",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_TEX_UV2",
          "value": "16384",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_BONES",
          "value": "32768",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_WEIGHTS",
          "value": "65536",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_INDEX",
          "value": "131072",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FLAG_USE_2D_VERTICES",
          "value": "262144",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FLAG_USE_16_BIT_BONES",
          "value": "524288",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_DEFAULT",
          "value": "97792",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_VERTEX",
          "value": "0",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_NORMAL",
          "value": "1",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_TANGENT",
          "value": "2",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_COLOR",
          "value": "3",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_TEX_UV",
          "value": "4",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_TEX_UV2",
          "value": "5",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_BONES",
          "value": "6",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_WEIGHTS",
          "value": "7",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_INDEX",
          "value": "8",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_MAX",
          "value": "9",
          "enum": "ArrayType",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "lightmap_size_hint",
          "type": "Vector2",
          "setter": "set_lightmap_size_hint",
          "getter": "get_lightmap_size_hint",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptClassConstant": {
      "name": "VisualScriptClassConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Gets a constant from a given class.",
      "description": "This node returns a constant from a given class, such as [@GlobalScope.TYPE_INT]. See the given class' documentation for available constants.\n\t\t[b]Input Ports:[/b]\n\t\tnone\n\t\t[b]Output Ports:[/b]\n\t\t- Data (variant): [code]value[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": "The constant's parent class."
        },
        {
          "name": "constant",
          "type": "String",
          "setter": "set_class_constant",
          "getter": "get_class_constant",
          "description": "The constant to return. See the given class for its available constants."
        }
      ],
      "theme_properties": []
    },
    "Translation": {
      "name": "Translation",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Language Translation.",
      "description": "Translations are resources that can be loaded/unloaded on demand. They map a string to another string.",
      "methods": [
        {
          "name": "add_message",
          "description": "Add a message for translation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src_message",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xlated_message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_message",
          "description": "Erase a message.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src_message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_message",
          "qualifiers": "const",
          "description": "Return a message for translation.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "src_message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_message_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_message_list",
          "qualifiers": "const",
          "description": "Return all the messages (keys).",
          "return_type": "PoolStringArray",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "locale",
          "type": "String",
          "setter": "set_locale",
          "getter": "get_locale",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "LinkButton": {
      "name": "LinkButton",
      "inherits": "BaseButton",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Simple button used to represent a link to some resource",
      "description": "This kind of buttons are primarily used when the interaction with the button causes a context change (like linking to a web page).",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "UNDERLINE_MODE_ALWAYS",
          "value": "0",
          "enum": "UnderlineMode",
          "description": "The LinkButton will always show an underline at the bottom of its text"
        },
        {
          "name": "UNDERLINE_MODE_ON_HOVER",
          "value": "1",
          "enum": "UnderlineMode",
          "description": "The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it."
        },
        {
          "name": "UNDERLINE_MODE_NEVER",
          "value": "2",
          "enum": "UnderlineMode",
          "description": "The LinkButton will never show an underline at the bottom of its text."
        }
      ],
      "properties": [
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": ""
        },
        {
          "name": "underline",
          "type": "int",
          "setter": "set_underline_mode",
          "getter": "get_underline_mode",
          "enum": "LinkButton.UnderlineMode",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "underline_spacing",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Range": {
      "name": "Range",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Abstract base class for range-based controls.",
      "description": "Range is a base class for [Control] nodes that change a floating point [i]value[/i] between a [i]minimum[/i] and a [i]maximum[/i], using [i]step[/i] and [i]page[/i], for example a [ScrollBar].",
      "methods": [
        {
          "name": "share",
          "description": "Binds two Ranges together along with any Ranges previously grouped with either of them. When any of Range's member variables change, it will share the new value with all other Ranges in its group.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unshare",
          "description": "Stop Range from sharing its member variables with any other Range.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "changed",
          "description": "This signal is emitted when min, max, range or step change.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "value_changed",
          "description": "This signal is emitted when value changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "exp_edit",
          "type": "bool",
          "setter": "set_exp_ratio",
          "getter": "is_ratio_exp",
          "description": "If [code]true[/code] and [code]min_value[/code] is greater than 0, [code]value[/code] will be represented exponentially rather than linearly."
        },
        {
          "name": "max_value",
          "type": "float",
          "setter": "set_max",
          "getter": "get_max",
          "description": "Maximum value. Range is clamped if [code]value[/code] is greater than [code]max_value[/code]. Default value: 100."
        },
        {
          "name": "min_value",
          "type": "float",
          "setter": "set_min",
          "getter": "get_min",
          "description": "Minimum value. Range is clamped if [code]value[/code] is less than [code]min_value[/code]. Default value: 0."
        },
        {
          "name": "page",
          "type": "float",
          "setter": "set_page",
          "getter": "get_page",
          "description": "Page size. Used mainly for [ScrollBar]. ScrollBar's length is its size multiplied by [code]page[/code] over the difference between [code]min_value[/code] and [code]max_value[/code]."
        },
        {
          "name": "ratio",
          "type": "float",
          "setter": "set_as_ratio",
          "getter": "get_as_ratio",
          "description": "The value mapped between 0 and 1."
        },
        {
          "name": "rounded",
          "type": "bool",
          "setter": "set_use_rounded_values",
          "getter": "is_using_rounded_values",
          "description": "If [code]true[/code], [code]value[/code] will always be rounded to the nearest integer."
        },
        {
          "name": "step",
          "type": "float",
          "setter": "set_step",
          "getter": "get_step",
          "description": "If greater than 0, [code]value[/code] will always be rounded to a multiple of [code]step[/code]. If [code]rounded[/code] is also [code]true[/code], [code]value[/code] will first be rounded to a multiple of [code]step[/code] then rounded to the nearest integer."
        },
        {
          "name": "value",
          "type": "float",
          "setter": "set_value",
          "getter": "get_value",
          "description": "Range's current value."
        }
      ],
      "theme_properties": []
    },
    "EditorFileSystemDirectory": {
      "name": "EditorFileSystemDirectory",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A diretory for the resource filesystem.",
      "description": "A more generalized, low-level variation of the directory concept.",
      "methods": [
        {
          "name": "find_dir_index",
          "qualifiers": "const",
          "description": "Returns the index of the directory with name [code]name[/code] or [code]-1[/code] if not found.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_file_index",
          "qualifiers": "const",
          "description": "Returns the index of the file with name [code]name[/code] or [code]-1[/code] if not found.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_file",
          "qualifiers": "const",
          "description": "Returns the name of the file at index [code]idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_file_count",
          "qualifiers": "const",
          "description": "Returns the number of files in this directory.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_file_import_is_valid",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the file at index [code]idx[/code] imported properly.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_file_path",
          "qualifiers": "const",
          "description": "Returns the path to the file at index [code]idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_file_type",
          "qualifiers": "const",
          "description": "Returns the file extension of the file at index [code]idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_name",
          "description": "Returns the name of this directory.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_parent",
          "description": "Returns the parent directory for this directory or null if called on a directory at [code]res://[/code] or [code]user://[/code].",
          "return_type": "EditorFileSystemDirectory",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_path",
          "qualifiers": "const",
          "description": "Returns the path to this directory.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_subdir",
          "description": "Returns the subdirectory at index [code]idx[/code].",
          "return_type": "EditorFileSystemDirectory",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_subdir_count",
          "qualifiers": "const",
          "description": "Returns the number of subdirectories in this directory.",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ViewportTexture": {
      "name": "ViewportTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "viewport_path",
          "type": "NodePath",
          "setter": "set_viewport_path_in_scene",
          "getter": "get_viewport_path_in_scene",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "OptionButton": {
      "name": "OptionButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Button control that provides selectable options when pressed.",
      "description": "OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the \"current\" item and is displayed as the button text.",
      "methods": [
        {
          "name": "add_icon_item",
          "description": "Add an item, with a \"texture\" icon, text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_item",
          "description": "Add an item, with text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_separator",
          "description": "Add a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear",
          "description": "Clear all the items in the [code]OptionButton[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_item_count",
          "qualifiers": "const",
          "description": "Return the amount of items in the OptionButton.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_icon",
          "qualifiers": "const",
          "description": "Return the icon of the item at index \"idx\".",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_id",
          "qualifiers": "const",
          "description": "Return the ID of the item at index \"idx\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_text",
          "qualifiers": "const",
          "description": "Return the text of the item at index \"idx\".",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_popup",
          "qualifiers": "const",
          "description": "Return the [PopupMenu] contained in this button.",
          "return_type": "PopupMenu",
          "arguments": []
        },
        {
          "name": "get_selected_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selected_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "is_item_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_item",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Select an item by index and make it the current item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon",
          "description": "Set the icon of an item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_id",
          "description": "Set the ID of an item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_metadata",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_text",
          "description": "Set the text of an item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "item_selected",
          "description": "This signal is emitted when the current item was changed by the user. ID of the item selected is passed as argument (if no IDs were added, ID will be just the item index).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ID",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "selected",
          "type": "int",
          "setter": "_select_int",
          "getter": "get_selected",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "arrow",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "arrow_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ConvexPolygonShape": {
      "name": "ConvexPolygonShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Convex polygon shape for 3D physics.",
      "description": "Convex polygon shape resource, which can be added to a [PhysicsBody] or area.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "points",
          "type": "PoolVector3Array",
          "setter": "set_points",
          "getter": "get_points",
          "description": "The list of 3D points forming the convex polygon shape."
        }
      ],
      "theme_properties": []
    },
    "Polygon2D": {
      "name": "Polygon2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A 2D polygon.",
      "description": "A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "antialiased",
          "type": "bool",
          "setter": "set_antialiased",
          "getter": "get_antialiased",
          "description": "If [code]true[/code] polygon edges will be anti-aliased. Default value: [code]false[/code]."
        },
        {
          "name": "color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": "The polygon's fill color. If [code]texture[/code] is defined, it will be multiplied by this color. It will also be the default color for vertices not set in [code]vertex_colors[/code]."
        },
        {
          "name": "invert_border",
          "type": "float",
          "setter": "set_invert_border",
          "getter": "get_invert_border",
          "description": "Added padding applied to the bounding box when using [code]invert[/code]. Setting this value too small may result in a \"Bad Polygon\" error. Default value: [code]100[/code]."
        },
        {
          "name": "invert_enable",
          "type": "bool",
          "setter": "set_invert",
          "getter": "get_invert",
          "description": "If [code]true[/code] polygon will be inverted, containing the area outside the defined points and extending to the [code]invert_border[/code]. Default value: [code]false[/code]."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The offset applied to each vertex."
        },
        {
          "name": "polygon",
          "type": "PoolVector2Array",
          "setter": "set_polygon",
          "getter": "get_polygon",
          "description": "The polygon's list of vertices. The final point will be connected to the first."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The polygon's fill texture. Use [code]uv[/code] to set texture coordinates."
        },
        {
          "name": "texture_offset",
          "type": "Vector2",
          "setter": "set_texture_offset",
          "getter": "get_texture_offset",
          "description": "Amount to offset the polygon's [code]texture[/code]. If [code](0, 0)[/code] the texture's origin (its top-left corner) will be placed at the polygon's [code]position[/code]."
        },
        {
          "name": "texture_rotation",
          "type": "float",
          "setter": "set_texture_rotation_degrees",
          "getter": "get_texture_rotation_degrees",
          "description": "The texture's rotation in radians."
        },
        {
          "name": "texture_rotation_degrees",
          "type": "float",
          "setter": "set_texture_rotation_degrees",
          "getter": "get_texture_rotation_degrees",
          "description": "The texture's rotation in degrees."
        },
        {
          "name": "texture_scale",
          "type": "Vector2",
          "setter": "set_texture_scale",
          "getter": "get_texture_scale",
          "description": "Amount to multiply the [code]uv[/code] coordinates when using a [code]texture[/code]. Larger values make the texture smaller, and vice versa."
        },
        {
          "name": "uv",
          "type": "PoolVector2Array",
          "setter": "set_uv",
          "getter": "get_uv",
          "description": "Texture coordinates for each vertex of the polygon. There should be one [code]uv[/code] per polygon vertex. If there are fewer, undefined vertices will use [code](0, 0)[/code]."
        },
        {
          "name": "vertex_colors",
          "type": "PoolColorArray",
          "setter": "set_vertex_colors",
          "getter": "get_vertex_colors",
          "description": "Color for each vertex. Colors are interpolated between vertices, resulting in smooth gradients. There should be one per polygon vertex. If there are fewer, undefined vertices will use [code]color[/code]."
        }
      ],
      "theme_properties": []
    },
    "SpatialVelocityTracker": {
      "name": "SpatialVelocityTracker",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_tracked_linear_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "reset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "track_physics_step",
          "type": "bool",
          "setter": "set_track_physics_step",
          "getter": "is_tracking_physics_step",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Semaphore": {
      "name": "Semaphore",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A synchronization Semaphore.",
      "description": "A synchronization Semaphore. Element used to synchronize multiple [Thread]s. Initialized to zero on creation. Be careful to avoid deadlocks. For a binary version, see [Mutex].",
      "methods": [
        {
          "name": "post",
          "description": "Lowers the [code]Semaphore[/code], allowing one more thread in. Returns [OK] on success, [ERR_BUSY] otherwise.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "wait",
          "description": "Tries to wait for the [code]Semaphore[/code], if its value is zero, blocks until non-zero. Returns [OK] on success, [ERR_BUSY] otherwise.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionShape2D": {
      "name": "CollisionShape2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Node that represents collision shape data in 2D space.",
      "description": "Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area2D] to give it a detection shape, or add it to a [PhysicsBody2D] to give create solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": "A disabled collision shape has no effect in the world."
        },
        {
          "name": "one_way_collision",
          "type": "bool",
          "setter": "set_one_way_collision",
          "getter": "is_one_way_collision_enabled",
          "description": "Sets whether this collision shape should only detect collision on one side (top or bottom)."
        },
        {
          "name": "shape",
          "type": "Shape2D",
          "setter": "set_shape",
          "getter": "get_shape",
          "description": "The actual shape owned by this collision shape."
        }
      ],
      "theme_properties": []
    },
    "float": {
      "name": "float",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Float built-in type",
      "description": "Float built-in type.",
      "methods": [
        {
          "name": "float",
          "description": "Cast a [bool] value to a floating point value, [code]float(true)[/code] will be equals to 1.0 and [code]float(false)[/code] will be equals to 0.0.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "float",
          "description": "Cast an [int] value to a floating point value, [code]float(1)[/code] will be equals to 1.0.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "float",
          "description": "Cast a [String] value to a floating point value. This method accepts float value strings like [code] '1.23' [/code] and exponential notation strings for its parameter so calling [code] float('1e3') [/code] will return 1000.0 and calling [code] float('1e-3') [/code] will return -0.001.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DServer": {
      "name": "Physics2DServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Physics 2D Server.",
      "description": "Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.",
      "methods": [
        {
          "name": "area_add_shape",
          "description": "Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform2D",
              "default_value": "Transform2D( 1, 0, 0, 1, 0, 0 )"
            }
          ]
        },
        {
          "name": "area_attach_object_instance_id",
          "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_clear_shapes",
          "description": "Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_create",
          "description": "Creates an [Area2D].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "area_get_object_instance_id",
          "qualifiers": "const",
          "description": "Gets the instance ID of the object the area is assigned to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_param",
          "qualifiers": "const",
          "description": "Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.AreaParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape",
          "qualifiers": "const",
          "description": "Returns the [RID] of the nth shape of an area.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_count",
          "qualifiers": "const",
          "description": "Returns the number of shapes assigned to an area.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_transform",
          "qualifiers": "const",
          "description": "Returns the transform matrix of a shape within an area.",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space",
          "qualifiers": "const",
          "description": "Returns the space assigned to the area.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space_override_mode",
          "qualifiers": "const",
          "description": "Returns the space override mode for the area.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_transform",
          "qualifiers": "const",
          "description": "Returns the transform matrix for an area.",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_remove_shape",
          "description": "Removes a shape from an area. It does not delete the shape, so it can be reassigned later.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_layer",
          "description": "Assigns the area to one or many physics layers.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_mask",
          "description": "Sets which physics layers the area will monitor.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_monitor_callback",
          "description": "Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:\n\t\t\t\t1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.\n\t\t\t\t2: [RID] of the object that entered/exited the area.\n\t\t\t\t3: Instance ID of the object that entered/exited the area.\n\t\t\t\t4: The shape index of the object that entered/exited the area.\n\t\t\t\t5: The shape index of the area where the object entered/exited.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_param",
          "description": "Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.AreaParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape",
          "description": "Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape_disabled",
          "description": "Disables a given shape in an area.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape_transform",
          "description": "Sets the transform matrix for an area shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space",
          "description": "Assigns a space to the area.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space_override_mode",
          "description": "Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Physics2DServer.AreaSpaceOverrideMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_transform",
          "description": "Sets the transform matrix for an area.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_collision_exception",
          "description": "Adds a body to the list of bodies exempt from collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_force",
          "description": "Adds a positioned force to the applied force and torque. As with [method body_apply_impulse], both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "force",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_shape",
          "description": "Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform2D",
              "default_value": "Transform2D( 1, 0, 0, 1, 0, 0 )"
            }
          ]
        },
        {
          "name": "body_apply_impulse",
          "description": "Adds a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "impulse",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_attach_object_instance_id",
          "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_clear_shapes",
          "description": "Removes all shapes from a body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_create",
          "description": "Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "body_get_collision_layer",
          "qualifiers": "const",
          "description": "Returns the physics layer or layers a body belongs to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_collision_mask",
          "qualifiers": "const",
          "description": "Returns the physics layer or layers a body can collide with.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_continuous_collision_detection_mode",
          "qualifiers": "const",
          "description": "Returns the continuous collision detection mode.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_direct_state",
          "description": "Returns the [Physics2DDirectBodyState] of the body.",
          "return_type": "Physics2DDirectBodyState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_max_contacts_reported",
          "qualifiers": "const",
          "description": "Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_mode",
          "qualifiers": "const",
          "description": "Returns the body mode.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_object_instance_id",
          "qualifiers": "const",
          "description": "Gets the instance ID of the object the area is assigned to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_param",
          "qualifiers": "const",
          "description": "Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.BodyParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape",
          "qualifiers": "const",
          "description": "Returns the [RID] of the nth shape of a body.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_count",
          "qualifiers": "const",
          "description": "Returns the number of shapes assigned to a body.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_metadata",
          "qualifiers": "const",
          "description": "Returns the metadata of a shape of a body.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_transform",
          "qualifiers": "const",
          "description": "Returns the transform matrix of a body shape.",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_space",
          "qualifiers": "const",
          "description": "Returns the [RID] of the space assigned to a body.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_state",
          "qualifiers": "const",
          "description": "Returns a body state.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "enum": "Physics2DServer.BodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_omitting_force_integration",
          "qualifiers": "const",
          "description": "Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_collision_exception",
          "description": "Removes a body from the list of bodies exempt from collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_shape",
          "description": "Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_axis_velocity",
          "description": "Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis_velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_layer",
          "description": "Sets the physics layer or layers a body belongs to.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_mask",
          "description": "Sets the physics layer or layers a body can collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_continuous_collision_detection_mode",
          "description": "Sets the continuous collision detection mode from any of the CCD_MODE_* constants.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Physics2DServer.CCDMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_force_integration_callback",
          "description": "Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force integration]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "body_set_max_contacts_reported",
          "description": "Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_mode",
          "description": "Sets the body mode, from one of the constants BODY_MODE*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Physics2DServer.BodyMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_omit_force_integration",
          "description": "Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_param",
          "description": "Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.BodyParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape",
          "description": "Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_as_one_way_collision",
          "description": "Enables one way collision on body if [code]enable[/code] is [code]true[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_disabled",
          "description": "Disables shape in body if [code]disable[/code] is [code]true[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_metadata",
          "description": "Sets metadata of a shape within a body. This metadata is different from [method Object.set_meta], and can be retrieved on shape queries.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_transform",
          "description": "Sets the transform matrix for a body shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_space",
          "description": "Assigns a space to the body (see [method create_space]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_state",
          "description": "Sets a body state (see BODY_STATE* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "enum": "Physics2DServer.BodyState",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_test_motion",
          "description": "Returns whether a body can move from a given point in a given direction. Apart from the boolean return value, a [Physics2DTestMotionResult] can be passed to return additional information in.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "margin",
              "type": "float",
              "default_value": "0.08"
            },
            {
              "index": "4",
              "name": "result",
              "type": "Physics2DTestMotionResult",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "capsule_shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "circle_shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "concave_polygon_shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "convex_polygon_shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "damped_spring_joint_create",
          "description": "Creates a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anchor_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anchor_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_a",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body_b",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "damped_string_joint_get_param",
          "qualifiers": "const",
          "description": "Returns the value of a damped spring joint parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.DampedStringParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "damped_string_joint_set_param",
          "description": "Sets a damped spring joint parameter. Parameters are explained in the DAMPED_STRING* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.DampedStringParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "free_rid",
          "description": "Destroys any of the objects created by Physics2DServer. If the [RID] passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_process_info",
          "description": "Returns information about the current state of the 2D physics engine. The states are listed under the INFO_* constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "process_info",
              "type": "int",
              "enum": "Physics2DServer.ProcessInfo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "groove_joint_create",
          "description": "Creates a groove joint between two bodies. If not specified, the bodyies are assumed to be the joint itself.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "groove1_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "groove2_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "anchor_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body_a",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "body_b",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_param",
          "qualifiers": "const",
          "description": "Returns the value of a joint parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.JointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_type",
          "qualifiers": "const",
          "description": "Returns the type of a joint (see JOINT_* constants).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_set_param",
          "description": "Sets a joint parameter. Parameters are explained in the JOINT_PARAM* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.JointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "line_shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pin_joint_create",
          "description": "Creates a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anchor",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body_a",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_b",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ray_shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rectangle_shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "segment_shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_active",
          "description": "Activates or deactivates the 2D physics engine.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_data",
          "qualifiers": "const",
          "description": "Returns the shape data.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_type",
          "qualifiers": "const",
          "description": "Returns the type of shape (see SHAPE_* constants).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_set_data",
          "description": "Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_create",
          "description": "Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "space_get_direct_state",
          "description": "Returns the state of a space, a [Physics2DDirectSpaceState]. This object can be used to make collision/intersection queries.",
          "return_type": "Physics2DDirectSpaceState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_get_param",
          "qualifiers": "const",
          "description": "Returns the value of a space parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.SpaceParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_is_active",
          "qualifiers": "const",
          "description": "Returns whether the space is active.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_active",
          "description": "Marks a space as active. It will not have an effect, unless it is assigned to an area or body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_param",
          "description": "Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.SpaceParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SPACE_PARAM_CONTACT_RECYCLE_RADIUS",
          "value": "0",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated."
        },
        {
          "name": "SPACE_PARAM_CONTACT_MAX_SEPARATION",
          "value": "1",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the maximum distance a shape can be from another before they are considered separated."
        },
        {
          "name": "SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION",
          "value": "2",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision."
        },
        {
          "name": "SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD",
          "value": "3",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given."
        },
        {
          "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD",
          "value": "4",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given."
        },
        {
          "name": "SPACE_PARAM_BODY_TIME_TO_SLEEP",
          "value": "5",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time."
        },
        {
          "name": "SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS",
          "value": "6",
          "enum": "SpaceParameter",
          "description": "Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects \"rebound\", after violating a constraint, to avoid leaving them in that state because of numerical imprecision."
        },
        {
          "name": "SHAPE_LINE",
          "value": "0",
          "enum": "ShapeType",
          "description": "This is the constant for creating line shapes. A line shape is an infinite line with an origin point, and a normal. Thus, it can be used for front/behind checks."
        },
        {
          "name": "SHAPE_RAY",
          "value": "1",
          "enum": "ShapeType",
          "description": ""
        },
        {
          "name": "SHAPE_SEGMENT",
          "value": "2",
          "enum": "ShapeType",
          "description": "This is the constant for creating segment shapes. A segment shape is a line from a point A to a point B. It can be checked for intersections."
        },
        {
          "name": "SHAPE_CIRCLE",
          "value": "3",
          "enum": "ShapeType",
          "description": "This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks."
        },
        {
          "name": "SHAPE_RECTANGLE",
          "value": "4",
          "enum": "ShapeType",
          "description": "This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks."
        },
        {
          "name": "SHAPE_CAPSULE",
          "value": "5",
          "enum": "ShapeType",
          "description": "This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks."
        },
        {
          "name": "SHAPE_CONVEX_POLYGON",
          "value": "6",
          "enum": "ShapeType",
          "description": "This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks. Unlike the method [method CollisionPolygon2D.set_polygon], polygons modified with [method shape_set_data] do not verify that the points supplied form is a convex polygon."
        },
        {
          "name": "SHAPE_CONCAVE_POLYGON",
          "value": "7",
          "enum": "ShapeType",
          "description": "This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks."
        },
        {
          "name": "SHAPE_CUSTOM",
          "value": "8",
          "enum": "ShapeType",
          "description": "This constant is used internally by the engine. Any attempt to create this kind of shape results in an error."
        },
        {
          "name": "AREA_PARAM_GRAVITY",
          "value": "0",
          "enum": "AreaParameter",
          "description": "Constant to set/get gravity strength in an area."
        },
        {
          "name": "AREA_PARAM_GRAVITY_VECTOR",
          "value": "1",
          "enum": "AreaParameter",
          "description": "Constant to set/get gravity vector/center in an area."
        },
        {
          "name": "AREA_PARAM_GRAVITY_IS_POINT",
          "value": "2",
          "enum": "AreaParameter",
          "description": "Constant to set/get whether the gravity vector of an area is a direction, or a center point."
        },
        {
          "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE",
          "value": "3",
          "enum": "AreaParameter",
          "description": "Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance."
        },
        {
          "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION",
          "value": "4",
          "enum": "AreaParameter",
          "description": "This constant was used to set/get the falloff factor for point gravity. It has been superseded by AREA_PARAM_GRAVITY_DISTANCE_SCALE."
        },
        {
          "name": "AREA_PARAM_LINEAR_DAMP",
          "value": "5",
          "enum": "AreaParameter",
          "description": "Constant to set/get the linear dampening factor of an area."
        },
        {
          "name": "AREA_PARAM_ANGULAR_DAMP",
          "value": "6",
          "enum": "AreaParameter",
          "description": "Constant to set/get the angular dampening factor of an area."
        },
        {
          "name": "AREA_PARAM_PRIORITY",
          "value": "7",
          "enum": "AreaParameter",
          "description": "Constant to set/get the priority (order of processing) of an area."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "enum": "AreaSpaceOverrideMode",
          "description": "This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one."
        },
        {
          "name": "BODY_MODE_STATIC",
          "value": "0",
          "enum": "BodyMode",
          "description": "Constant for static bodies."
        },
        {
          "name": "BODY_MODE_KINEMATIC",
          "value": "1",
          "enum": "BodyMode",
          "description": "Constant for kinematic bodies."
        },
        {
          "name": "BODY_MODE_RIGID",
          "value": "2",
          "enum": "BodyMode",
          "description": "Constant for rigid bodies."
        },
        {
          "name": "BODY_MODE_CHARACTER",
          "value": "3",
          "enum": "BodyMode",
          "description": "Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics."
        },
        {
          "name": "BODY_PARAM_BOUNCE",
          "value": "0",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's bounce factor."
        },
        {
          "name": "BODY_PARAM_FRICTION",
          "value": "1",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's friction."
        },
        {
          "name": "BODY_PARAM_MASS",
          "value": "2",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's mass."
        },
        {
          "name": "BODY_PARAM_INERTIA",
          "value": "3",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's inertia."
        },
        {
          "name": "BODY_PARAM_GRAVITY_SCALE",
          "value": "4",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's gravity multiplier."
        },
        {
          "name": "BODY_PARAM_LINEAR_DAMP",
          "value": "5",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's linear dampening factor."
        },
        {
          "name": "BODY_PARAM_ANGULAR_DAMP",
          "value": "6",
          "enum": "BodyParameter",
          "description": "Constant to set/get a body's angular dampening factor."
        },
        {
          "name": "BODY_PARAM_MAX",
          "value": "7",
          "enum": "BodyParameter",
          "description": "This is the last ID for body parameters. Any attempt to set this property is ignored. Any attempt to get it returns 0."
        },
        {
          "name": "BODY_STATE_TRANSFORM",
          "value": "0",
          "enum": "BodyState",
          "description": "Constant to set/get the current transform matrix of the body."
        },
        {
          "name": "BODY_STATE_LINEAR_VELOCITY",
          "value": "1",
          "enum": "BodyState",
          "description": "Constant to set/get the current linear velocity of the body."
        },
        {
          "name": "BODY_STATE_ANGULAR_VELOCITY",
          "value": "2",
          "enum": "BodyState",
          "description": "Constant to set/get the current angular velocity of the body."
        },
        {
          "name": "BODY_STATE_SLEEPING",
          "value": "3",
          "enum": "BodyState",
          "description": "Constant to sleep/wake up a body, or to get whether it is sleeping."
        },
        {
          "name": "BODY_STATE_CAN_SLEEP",
          "value": "4",
          "enum": "BodyState",
          "description": "Constant to set/get whether the body can sleep."
        },
        {
          "name": "JOINT_PIN",
          "value": "0",
          "enum": "JointType",
          "description": "Constant to create pin joints."
        },
        {
          "name": "JOINT_GROOVE",
          "value": "1",
          "enum": "JointType",
          "description": "Constant to create groove joints."
        },
        {
          "name": "JOINT_DAMPED_SPRING",
          "value": "2",
          "enum": "JointType",
          "description": "Constant to create damped spring joints."
        },
        {
          "name": "JOINT_PARAM_BIAS",
          "value": "0",
          "enum": "JointParam",
          "description": ""
        },
        {
          "name": "JOINT_PARAM_MAX_BIAS",
          "value": "1",
          "enum": "JointParam",
          "description": ""
        },
        {
          "name": "JOINT_PARAM_MAX_FORCE",
          "value": "2",
          "enum": "JointParam",
          "description": ""
        },
        {
          "name": "DAMPED_STRING_REST_LENGTH",
          "value": "0",
          "enum": "DampedStringParam",
          "description": "Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart."
        },
        {
          "name": "DAMPED_STRING_STIFFNESS",
          "value": "1",
          "enum": "DampedStringParam",
          "description": "Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length."
        },
        {
          "name": "DAMPED_STRING_DAMPING",
          "value": "2",
          "enum": "DampedStringParam",
          "description": "Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping)."
        },
        {
          "name": "CCD_MODE_DISABLED",
          "value": "0",
          "enum": "CCDMode",
          "description": "Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects."
        },
        {
          "name": "CCD_MODE_CAST_RAY",
          "value": "1",
          "enum": "CCDMode",
          "description": "Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise."
        },
        {
          "name": "CCD_MODE_CAST_SHAPE",
          "value": "2",
          "enum": "CCDMode",
          "description": "Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise."
        },
        {
          "name": "AREA_BODY_ADDED",
          "value": "0",
          "enum": "AreaBodyStatus",
          "description": "The value of the first parameter and area callback function receives, when an object enters one of its shapes."
        },
        {
          "name": "AREA_BODY_REMOVED",
          "value": "1",
          "enum": "AreaBodyStatus",
          "description": "The value of the first parameter and area callback function receives, when an object exits one of its shapes."
        },
        {
          "name": "INFO_ACTIVE_OBJECTS",
          "value": "0",
          "enum": "ProcessInfo",
          "description": "Constant to get the number of objects that are not sleeping."
        },
        {
          "name": "INFO_COLLISION_PAIRS",
          "value": "1",
          "enum": "ProcessInfo",
          "description": "Constant to get the number of possible collisions."
        },
        {
          "name": "INFO_ISLAND_COUNT",
          "value": "2",
          "enum": "ProcessInfo",
          "description": "Constant to get the number of space regions where a collision could occur."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptCondition": {
      "name": "VisualScriptCondition",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A Visual Script node which branches the flow.",
      "description": "A Visual Script node that checks a [bool] input port. If [code]true[/code] it will exit via the “true” sequence port. If [code]false[/code] it will exit via the \"false\" sequence port. After exiting either, it exits via the “done” port. Sequence ports may be left disconnected.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence: [code]if (cond) is[/code]\n\t\t- Data (boolean): [code]cond[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence: [code]true[/code]\n\t\t- Sequence: [code]false[/code]\n\t\t- Sequence: [code]done[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorInterface": {
      "name": "EditorInterface",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Editor interface and main components.",
      "description": "Editor interface. Allows saving and (re-)loading scenes, rendering mesh previews, inspecting and editing resources and objects and provides access to [EditorSettings], [EditorFileSystem], [EditorResourcePreview]\\ er, [ScriptEditor], the editor viewport, as well as information about scenes. Also see [EditorPlugin] and [EditorScript].",
      "methods": [
        {
          "name": "edit_resource",
          "description": "Edits the given [Resource].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_base_control",
          "description": "Returns the base [Control].",
          "return_type": "Control",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_edited_scene_root",
          "description": "Returns the edited scene's root [Node].",
          "return_type": "Node",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_editor_settings",
          "description": "Returns the [EditorSettings].",
          "return_type": "EditorSettings",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_editor_viewport",
          "description": "Returns the editor [Viewport].",
          "return_type": "Control",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_open_scenes",
          "qualifiers": "const",
          "description": "Returns an [Array] of the currently opened scenes.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_resource_filesystem",
          "description": "Returns the [EditorFileSystem].",
          "return_type": "EditorFileSystem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_resource_previewer",
          "description": "Returns the [EditorResourcePreview]\\ er.",
          "return_type": "EditorResourcePreview",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_script_editor",
          "description": "Returns the [ScriptEditor].",
          "return_type": "ScriptEditor",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_selected_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_selection",
          "description": "Returns the [EditorSelection].",
          "return_type": "EditorSelection",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inspect_object",
          "description": "Shows the given property on the given [code]object[/code] in the Editor's Inspector dock.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "for_property",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "make_mesh_previews",
          "description": "Returns mesh previews rendered at the given size as an [Array] of [Texture]s.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "meshes",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "preview_size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_scene_from_path",
          "description": "Opens the scene at the given path.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene_filepath",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reload_scene_from_path",
          "description": "Reloads the scene at the given path.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene_filepath",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save_scene",
          "description": "Saves the scene. Returns either OK or ERR_CANT_CREATE. See [@GlobalScope] constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "save_scene_as",
          "description": "Saves the scene as a file at [code]path[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "with_preview",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "select_file",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_file",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PopupPanel": {
      "name": "PopupPanel",
      "inherits": "Popup",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class for displaying popups with a panel background.",
      "description": "Class for displaying popups with a panel background. In some cases it might be simpler to use than [Popup], since it provides a configurable background. If you are making windows, better check [WindowDialog].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ProgressBar": {
      "name": "ProgressBar",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "General purpose progress bar.",
      "description": "General purpose progress bar. Shows fill percentage from right to left.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "percent_visible",
          "type": "bool",
          "setter": "set_percent_visible",
          "getter": "is_percent_visible",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "fg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_shadow",
          "type": "Color",
          "description": ""
        }
      ]
    },
    "EditorResourceConversionPlugin": {
      "name": "EditorResourceConversionPlugin",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "_convert",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Resource",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_converts_to",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "String",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectHighPassFilter": {
      "name": "AudioEffectHighPassFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a high pass filter to the Audio Bus.",
      "description": "Cuts frequencies lower than the [member cutoff_hz] and allows higher frequencies to pass.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptVariableGet": {
      "name": "VisualScriptVariableGet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Gets a variable's value.",
      "description": "Returns a variable's value. \"Var Name\" must be supplied, with an optional type.\n\t\t[b]Input Ports:[/b]\n\t\tnone\n\t\t[b]Output Ports:[/b]\n\t\t- Data (variant): [code]value[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "var_name",
          "type": "String",
          "setter": "set_variable",
          "getter": "get_variable",
          "description": "The variable's name."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptOperator": {
      "name": "VisualScriptOperator",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "[b]Input Ports:[/b]\n\t\t- Data (variant): [code]A[/code]\n\t\t- Data (variant): [code]B[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Data (variant): [code]result[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "operator",
          "type": "int",
          "setter": "set_operator",
          "getter": "get_operator",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "type",
          "type": "int",
          "setter": "set_typed",
          "getter": "get_typed",
          "enum": "Variant.Type",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "InputEventPanGesture": {
      "name": "InputEventPanGesture",
      "inherits": "InputEventGesture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "delta",
          "type": "Vector2",
          "setter": "set_delta",
          "getter": "get_delta",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "SpatialMaterial": {
      "name": "SpatialMaterial",
      "inherits": "Material",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "TEXTURE_ALBEDO",
          "value": "0",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_METALLIC",
          "value": "1",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_ROUGHNESS",
          "value": "2",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_EMISSION",
          "value": "3",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_NORMAL",
          "value": "4",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_RIM",
          "value": "5",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_CLEARCOAT",
          "value": "6",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_FLOWMAP",
          "value": "7",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_AMBIENT_OCCLUSION",
          "value": "8",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_DEPTH",
          "value": "9",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_SUBSURFACE_SCATTERING",
          "value": "10",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_TRANSMISSION",
          "value": "11",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_REFRACTION",
          "value": "12",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_DETAIL_MASK",
          "value": "13",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_DETAIL_ALBEDO",
          "value": "14",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_DETAIL_NORMAL",
          "value": "15",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "TEXTURE_MAX",
          "value": "16",
          "enum": "TextureParam",
          "description": ""
        },
        {
          "name": "DETAIL_UV_1",
          "value": "0",
          "enum": "DetailUV",
          "description": ""
        },
        {
          "name": "DETAIL_UV_2",
          "value": "1",
          "enum": "DetailUV",
          "description": ""
        },
        {
          "name": "FEATURE_TRANSPARENT",
          "value": "0",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_EMISSION",
          "value": "1",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_NORMAL_MAPPING",
          "value": "2",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_RIM",
          "value": "3",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_CLEARCOAT",
          "value": "4",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_ANISOTROPY",
          "value": "5",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_AMBIENT_OCCLUSION",
          "value": "6",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_DEPTH_MAPPING",
          "value": "7",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_SUBSURACE_SCATTERING",
          "value": "8",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_TRANSMISSION",
          "value": "9",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_REFRACTION",
          "value": "10",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_DETAIL",
          "value": "11",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "FEATURE_MAX",
          "value": "12",
          "enum": "Feature",
          "description": ""
        },
        {
          "name": "BLEND_MODE_MIX",
          "value": "0",
          "enum": "BlendMode",
          "description": ""
        },
        {
          "name": "BLEND_MODE_ADD",
          "value": "1",
          "enum": "BlendMode",
          "description": ""
        },
        {
          "name": "BLEND_MODE_SUB",
          "value": "2",
          "enum": "BlendMode",
          "description": ""
        },
        {
          "name": "BLEND_MODE_MUL",
          "value": "3",
          "enum": "BlendMode",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_OPAQUE_ONLY",
          "value": "0",
          "enum": "DepthDrawMode",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_ALWAYS",
          "value": "1",
          "enum": "DepthDrawMode",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_DISABLED",
          "value": "2",
          "enum": "DepthDrawMode",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_ALPHA_OPAQUE_PREPASS",
          "value": "3",
          "enum": "DepthDrawMode",
          "description": ""
        },
        {
          "name": "CULL_BACK",
          "value": "0",
          "enum": "CullMode",
          "description": ""
        },
        {
          "name": "CULL_FRONT",
          "value": "1",
          "enum": "CullMode",
          "description": ""
        },
        {
          "name": "CULL_DISABLED",
          "value": "2",
          "enum": "CullMode",
          "description": ""
        },
        {
          "name": "FLAG_UNSHADED",
          "value": "0",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_USE_VERTEX_LIGHTING",
          "value": "1",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_DISABLE_DEPTH_TEST",
          "value": "2",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_ALBEDO_FROM_VERTEX_COLOR",
          "value": "3",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_SRGB_VERTEX_COLOR",
          "value": "4",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_USE_POINT_SIZE",
          "value": "5",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_FIXED_SIZE",
          "value": "6",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_UV1_USE_TRIPLANAR",
          "value": "7",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_UV2_USE_TRIPLANAR",
          "value": "8",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_AO_ON_UV2",
          "value": "10",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_EMISSION_ON_UV2",
          "value": "11",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_USE_ALPHA_SCISSOR",
          "value": "12",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_TRIPLANAR_USE_WORLD",
          "value": "9",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_ALBEDO_TEXTURE_FORCE_SRGB",
          "value": "13",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "14",
          "enum": "Flags",
          "description": ""
        },
        {
          "name": "DIFFUSE_BURLEY",
          "value": "0",
          "enum": "DiffuseMode",
          "description": ""
        },
        {
          "name": "DIFFUSE_LAMBERT",
          "value": "1",
          "enum": "DiffuseMode",
          "description": ""
        },
        {
          "name": "DIFFUSE_LAMBERT_WRAP",
          "value": "2",
          "enum": "DiffuseMode",
          "description": ""
        },
        {
          "name": "DIFFUSE_OREN_NAYAR",
          "value": "3",
          "enum": "DiffuseMode",
          "description": ""
        },
        {
          "name": "DIFFUSE_TOON",
          "value": "4",
          "enum": "DiffuseMode",
          "description": ""
        },
        {
          "name": "SPECULAR_SCHLICK_GGX",
          "value": "0",
          "enum": "SpecularMode",
          "description": ""
        },
        {
          "name": "SPECULAR_BLINN",
          "value": "1",
          "enum": "SpecularMode",
          "description": ""
        },
        {
          "name": "SPECULAR_PHONG",
          "value": "2",
          "enum": "SpecularMode",
          "description": ""
        },
        {
          "name": "SPECULAR_TOON",
          "value": "3",
          "enum": "SpecularMode",
          "description": ""
        },
        {
          "name": "SPECULAR_DISABLED",
          "value": "4",
          "enum": "SpecularMode",
          "description": ""
        },
        {
          "name": "BILLBOARD_DISABLED",
          "value": "0",
          "enum": "BillboardMode",
          "description": ""
        },
        {
          "name": "BILLBOARD_ENABLED",
          "value": "1",
          "enum": "BillboardMode",
          "description": ""
        },
        {
          "name": "BILLBOARD_FIXED_Y",
          "value": "2",
          "enum": "BillboardMode",
          "description": ""
        },
        {
          "name": "BILLBOARD_PARTICLES",
          "value": "3",
          "enum": "BillboardMode",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_RED",
          "value": "0",
          "enum": "TextureChannel",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_GREEN",
          "value": "1",
          "enum": "TextureChannel",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_BLUE",
          "value": "2",
          "enum": "TextureChannel",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_ALPHA",
          "value": "3",
          "enum": "TextureChannel",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_GRAYSCALE",
          "value": "4",
          "enum": "TextureChannel",
          "description": ""
        },
        {
          "name": "EMISSION_OP_ADD",
          "value": "0",
          "enum": "EmissionOperator",
          "description": ""
        },
        {
          "name": "EMISSION_OP_MULTIPLY",
          "value": "1",
          "enum": "EmissionOperator",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "albedo_color",
          "type": "Color",
          "setter": "set_albedo",
          "getter": "get_albedo",
          "description": ""
        },
        {
          "name": "albedo_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "anisotropy",
          "type": "float",
          "setter": "set_anisotropy",
          "getter": "get_anisotropy",
          "description": ""
        },
        {
          "name": "anisotropy_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "anisotropy_flowmap",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "ao_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "ao_light_affect",
          "type": "float",
          "setter": "set_ao_light_affect",
          "getter": "get_ao_light_affect",
          "description": ""
        },
        {
          "name": "ao_on_uv2",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "ao_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "ao_texture_channel",
          "type": "int",
          "setter": "set_ao_texture_channel",
          "getter": "get_ao_texture_channel",
          "enum": "SpatialMaterial.TextureChannel",
          "description": ""
        },
        {
          "name": "clearcoat",
          "type": "float",
          "setter": "set_clearcoat",
          "getter": "get_clearcoat",
          "description": ""
        },
        {
          "name": "clearcoat_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "clearcoat_gloss",
          "type": "float",
          "setter": "set_clearcoat_gloss",
          "getter": "get_clearcoat_gloss",
          "description": ""
        },
        {
          "name": "clearcoat_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "depth_deep_parallax",
          "type": "bool",
          "setter": "set_depth_deep_parallax",
          "getter": "is_depth_deep_parallax_enabled",
          "description": ""
        },
        {
          "name": "depth_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "depth_max_layers",
          "type": "int",
          "setter": "set_depth_deep_parallax_max_layers",
          "getter": "get_depth_deep_parallax_max_layers",
          "description": ""
        },
        {
          "name": "depth_min_layers",
          "type": "int",
          "setter": "set_depth_deep_parallax_min_layers",
          "getter": "get_depth_deep_parallax_min_layers",
          "description": ""
        },
        {
          "name": "depth_scale",
          "type": "float",
          "setter": "set_depth_scale",
          "getter": "get_depth_scale",
          "description": ""
        },
        {
          "name": "depth_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "detail_albedo",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "detail_blend_mode",
          "type": "int",
          "setter": "set_detail_blend_mode",
          "getter": "get_detail_blend_mode",
          "enum": "SpatialMaterial.BlendMode",
          "description": ""
        },
        {
          "name": "detail_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "detail_mask",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "detail_normal",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "detail_uv_layer",
          "type": "int",
          "setter": "set_detail_uv",
          "getter": "get_detail_uv",
          "enum": "SpatialMaterial.DetailUV",
          "description": ""
        },
        {
          "name": "distance_fade_enable",
          "type": "bool",
          "setter": "set_distance_fade",
          "getter": "is_distance_fade_enabled",
          "description": ""
        },
        {
          "name": "distance_fade_max_distance",
          "type": "float",
          "setter": "set_distance_fade_max_distance",
          "getter": "get_distance_fade_max_distance",
          "description": ""
        },
        {
          "name": "distance_fade_min_distance",
          "type": "float",
          "setter": "set_distance_fade_min_distance",
          "getter": "get_distance_fade_min_distance",
          "description": ""
        },
        {
          "name": "emission",
          "type": "Color",
          "setter": "set_emission",
          "getter": "get_emission",
          "description": ""
        },
        {
          "name": "emission_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "emission_energy",
          "type": "float",
          "setter": "set_emission_energy",
          "getter": "get_emission_energy",
          "description": ""
        },
        {
          "name": "emission_on_uv2",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "emission_operator",
          "type": "int",
          "setter": "set_emission_operator",
          "getter": "get_emission_operator",
          "enum": "SpatialMaterial.EmissionOperator",
          "description": ""
        },
        {
          "name": "emission_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "flags_albedo_tex_force_srgb",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_fixed_size",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_no_depth_test",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_transparent",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "flags_unshaded",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_use_point_size",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_vertex_lighting",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_world_triplanar",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "metallic",
          "type": "float",
          "setter": "set_metallic",
          "getter": "get_metallic",
          "description": ""
        },
        {
          "name": "metallic_specular",
          "type": "float",
          "setter": "set_specular",
          "getter": "get_specular",
          "description": ""
        },
        {
          "name": "metallic_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "metallic_texture_channel",
          "type": "int",
          "setter": "set_metallic_texture_channel",
          "getter": "get_metallic_texture_channel",
          "enum": "SpatialMaterial.TextureChannel",
          "description": ""
        },
        {
          "name": "normal_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "normal_scale",
          "type": "float",
          "setter": "set_normal_scale",
          "getter": "get_normal_scale",
          "description": ""
        },
        {
          "name": "normal_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "params_alpha_scissor_threshold",
          "type": "float",
          "setter": "set_alpha_scissor_threshold",
          "getter": "get_alpha_scissor_threshold",
          "description": ""
        },
        {
          "name": "params_billboard_mode",
          "type": "int",
          "setter": "set_billboard_mode",
          "getter": "get_billboard_mode",
          "enum": "SpatialMaterial.BillboardMode",
          "description": ""
        },
        {
          "name": "params_blend_mode",
          "type": "int",
          "setter": "set_blend_mode",
          "getter": "get_blend_mode",
          "enum": "SpatialMaterial.BlendMode",
          "description": ""
        },
        {
          "name": "params_cull_mode",
          "type": "int",
          "setter": "set_cull_mode",
          "getter": "get_cull_mode",
          "enum": "SpatialMaterial.CullMode",
          "description": ""
        },
        {
          "name": "params_depth_draw_mode",
          "type": "int",
          "setter": "set_depth_draw_mode",
          "getter": "get_depth_draw_mode",
          "enum": "SpatialMaterial.DepthDrawMode",
          "description": ""
        },
        {
          "name": "params_diffuse_mode",
          "type": "int",
          "setter": "set_diffuse_mode",
          "getter": "get_diffuse_mode",
          "enum": "SpatialMaterial.DiffuseMode",
          "description": ""
        },
        {
          "name": "params_grow",
          "type": "bool",
          "setter": "set_grow_enabled",
          "getter": "is_grow_enabled",
          "description": ""
        },
        {
          "name": "params_grow_amount",
          "type": "float",
          "setter": "set_grow",
          "getter": "get_grow",
          "description": ""
        },
        {
          "name": "params_line_width",
          "type": "float",
          "setter": "set_line_width",
          "getter": "get_line_width",
          "description": ""
        },
        {
          "name": "params_point_size",
          "type": "float",
          "setter": "set_point_size",
          "getter": "get_point_size",
          "description": ""
        },
        {
          "name": "params_specular_mode",
          "type": "int",
          "setter": "set_specular_mode",
          "getter": "get_specular_mode",
          "enum": "SpatialMaterial.SpecularMode",
          "description": ""
        },
        {
          "name": "params_use_alpha_scissor",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "particles_anim_h_frames",
          "type": "int",
          "setter": "set_particles_anim_h_frames",
          "getter": "get_particles_anim_h_frames",
          "description": ""
        },
        {
          "name": "particles_anim_loop",
          "type": "int",
          "setter": "set_particles_anim_loop",
          "getter": "get_particles_anim_loop",
          "description": ""
        },
        {
          "name": "particles_anim_v_frames",
          "type": "int",
          "setter": "set_particles_anim_v_frames",
          "getter": "get_particles_anim_v_frames",
          "description": ""
        },
        {
          "name": "proximity_fade_distance",
          "type": "float",
          "setter": "set_proximity_fade_distance",
          "getter": "get_proximity_fade_distance",
          "description": ""
        },
        {
          "name": "proximity_fade_enable",
          "type": "bool",
          "setter": "set_proximity_fade",
          "getter": "is_proximity_fade_enabled",
          "description": ""
        },
        {
          "name": "refraction_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "refraction_scale",
          "type": "float",
          "setter": "set_refraction",
          "getter": "get_refraction",
          "description": ""
        },
        {
          "name": "refraction_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "refraction_texture_channel",
          "type": "int",
          "setter": "set_refraction_texture_channel",
          "getter": "get_refraction_texture_channel",
          "enum": "SpatialMaterial.TextureChannel",
          "description": ""
        },
        {
          "name": "rim",
          "type": "float",
          "setter": "set_rim",
          "getter": "get_rim",
          "description": ""
        },
        {
          "name": "rim_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "rim_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "rim_tint",
          "type": "float",
          "setter": "set_rim_tint",
          "getter": "get_rim_tint",
          "description": ""
        },
        {
          "name": "roughness",
          "type": "float",
          "setter": "set_roughness",
          "getter": "get_roughness",
          "description": ""
        },
        {
          "name": "roughness_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "roughness_texture_channel",
          "type": "int",
          "setter": "set_roughness_texture_channel",
          "getter": "get_roughness_texture_channel",
          "enum": "SpatialMaterial.TextureChannel",
          "description": ""
        },
        {
          "name": "subsurf_scatter_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "subsurf_scatter_strength",
          "type": "float",
          "setter": "set_subsurface_scattering_strength",
          "getter": "get_subsurface_scattering_strength",
          "description": ""
        },
        {
          "name": "subsurf_scatter_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "transmission",
          "type": "Color",
          "setter": "set_transmission",
          "getter": "get_transmission",
          "description": ""
        },
        {
          "name": "transmission_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "transmission_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "uv1_offset",
          "type": "Vector3",
          "setter": "set_uv1_offset",
          "getter": "get_uv1_offset",
          "description": ""
        },
        {
          "name": "uv1_scale",
          "type": "Vector3",
          "setter": "set_uv1_scale",
          "getter": "get_uv1_scale",
          "description": ""
        },
        {
          "name": "uv1_triplanar",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "uv1_triplanar_sharpness",
          "type": "float",
          "setter": "set_uv1_triplanar_blend_sharpness",
          "getter": "get_uv1_triplanar_blend_sharpness",
          "description": ""
        },
        {
          "name": "uv2_offset",
          "type": "Vector3",
          "setter": "set_uv2_offset",
          "getter": "get_uv2_offset",
          "description": ""
        },
        {
          "name": "uv2_scale",
          "type": "Vector3",
          "setter": "set_uv2_scale",
          "getter": "get_uv2_scale",
          "description": ""
        },
        {
          "name": "uv2_triplanar",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "uv2_triplanar_sharpness",
          "type": "float",
          "setter": "set_uv2_triplanar_blend_sharpness",
          "getter": "get_uv2_triplanar_blend_sharpness",
          "description": ""
        },
        {
          "name": "vertex_color_is_srgb",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "vertex_color_use_as_albedo",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Texture": {
      "name": "Texture",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Texture for 2D and 3D.",
      "description": "A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D [Sprite] or GUI [Control].",
      "methods": [
        {
          "name": "draw",
          "qualifiers": "const",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "3",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tile",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_rect_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "6",
              "name": "clip_uv",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "Image",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the texture height.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Return the texture size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_width",
          "qualifiers": "const",
          "description": "Return the texture width.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_alpha",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAGS_DEFAULT",
          "value": "7",
          "enum": "Flags",
          "description": "Default flags. Generate mipmaps, repeat, and filter are enabled."
        },
        {
          "name": "FLAG_MIPMAPS",
          "value": "1",
          "enum": "Flags",
          "description": "Generate mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio."
        },
        {
          "name": "FLAG_REPEAT",
          "value": "2",
          "enum": "Flags",
          "description": "Repeats texture (instead of clamp to edge)."
        },
        {
          "name": "FLAG_FILTER",
          "value": "4",
          "enum": "Flags",
          "description": "Magnifying filter, to enable smooth zooming in of the texture."
        },
        {
          "name": "FLAG_ANISOTROPIC_FILTER",
          "value": "8",
          "enum": "Flags",
          "description": "Anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.\n\t\t\tMore effective on planes often shown going to the horrizon as those textures (Walls or Ground for example) get squashed in the viewport to different aspect ratios and regular mipmaps keep the aspect ratio so they don't optimize storage that well in those cases."
        },
        {
          "name": "FLAG_CONVERT_TO_LINEAR",
          "value": "16",
          "enum": "Flags",
          "description": "Converts texture to SRGB color space."
        },
        {
          "name": "FLAG_MIRRORED_REPEAT",
          "value": "32",
          "enum": "Flags",
          "description": "Repeats texture with alternate sections mirrored."
        },
        {
          "name": "FLAG_VIDEO_SURFACE",
          "value": "4096",
          "enum": "Flags",
          "description": "Texture is a video surface."
        }
      ],
      "properties": [
        {
          "name": "flags",
          "type": "int",
          "setter": "set_flags",
          "getter": "get_flags",
          "description": "The texture's flags."
        }
      ],
      "theme_properties": []
    },
    "Container": {
      "name": "Container",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base node for containers.",
      "description": "Base node for containers. A [code]Container[/code] contains other controls and automatically arranges them in a certain way.\n\t\tA Control can inherit this to create custom container classes.",
      "methods": [
        {
          "name": "fit_child_in_rect",
          "description": "Fit a child control in a given rect. This is mainly a helper for creating custom container classes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child",
              "type": "Control",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_sort",
          "description": "Queue resort of the contained children. This is called automatically anyway, but can be called upon request.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "sort_children",
          "description": "Emitted when sorting the children is needed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_SORT_CHILDREN",
          "value": "50",
          "description": "Notification for when sorting the children, it must be obeyed immediately."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptSceneTree": {
      "name": "VisualScriptSceneTree",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptLocalVar": {
      "name": "VisualScriptLocalVar",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Gets a local variable's value.",
      "description": "Returns a local variable's value. \"Var Name\" must be supplied, with an optional type.\n\t\t[b]Input Ports:[/b]\n\t\tnone\n\t\t[b]Output Ports:[/b]\n\t\t- Data (variant): [code]get[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "type",
          "type": "int",
          "setter": "set_var_type",
          "getter": "get_var_type",
          "enum": "Variant.Type",
          "description": "The local variable's type."
        },
        {
          "name": "var_name",
          "type": "String",
          "setter": "set_var_name",
          "getter": "get_var_name",
          "description": "The local variable's name."
        }
      ],
      "theme_properties": []
    },
    "VisualServer": {
      "name": "VisualServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Server for anything visible.",
      "description": "Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.\n\t\tThe visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.",
      "methods": [
        {
          "name": "black_bars_set_images",
          "description": "Sets images to be rendered in the window margin.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "top",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "right",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "bottom",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "black_bars_set_margins",
          "description": "Sets margin size, where black bars (or images, if [method black_bars_set_images] was used) are rendered.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "top",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "right",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "bottom",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_create",
          "description": "Creates a canvas and returns the assigned [RID].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "canvas_item_add_circle",
          "description": "Adds a circle command to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pos",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_clip_ignore",
          "description": "If ignore is [code]true[/code], the VisualServer does not perform clipping.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ignore",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_line",
          "description": "Adds a line command to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "5",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "canvas_item_add_mesh",
          "description": "Adds a [Mesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "skeleton",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_multimesh",
          "description": "Adds a [MultiMesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "skeleton",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_nine_patch",
          "description": "Adds a nine patch image to the [CanvasItem]'s draw commands.\n\t\t\t\tSee [NinePatchRect] for more explanation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "source",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "topleft",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "bottomright",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "x_axis_mode",
              "type": "int",
              "enum": "VisualServer.NinePatchAxisMode",
              "default_value": "0"
            },
            {
              "index": "7",
              "name": "y_axis_mode",
              "type": "int",
              "enum": "VisualServer.NinePatchAxisMode",
              "default_value": "0"
            },
            {
              "index": "8",
              "name": "draw_center",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "9",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "10",
              "name": "normal_map",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_particles",
          "description": "Adds a particles system to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "particles",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "normal_map",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "h_frames",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "v_frames",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_polygon",
          "description": "Adds a polygon to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "4",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "canvas_item_add_polyline",
          "description": "Adds a polyline, which is a line from multiple points with a width, to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "4",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "canvas_item_add_primitive",
          "description": "Adds a primitive to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "6",
              "name": "normal_map",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_rect",
          "description": "Adds a rectangle to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_set_transform",
          "description": "Adds a [Transform2D] command to the [CanvasItem]'s draw commands.\n\t\t\t\tThis sets the extra_matrix uniform when executed. This affects the later command's of the canvas item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_texture_rect",
          "description": "Adds a textured rect to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "tile",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "5",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "6",
              "name": "normal_map",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_add_texture_rect_region",
          "description": "Adds a texture rect with region setting to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "5",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "6",
              "name": "normal_map",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "clip_uv",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "canvas_item_add_triangle_array",
          "description": "Adds a triangle array to the [CanvasItem]'s draw commands.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "indices",
              "type": "PoolIntArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "5",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "count",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "7",
              "name": "normal_map",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_clear",
          "description": "Clears the [CanvasItem] and removes all commands in it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_create",
          "description": "Creates a new [CanvasItem] and returns its [RID].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "canvas_item_set_clip",
          "description": "Sets clipping for the [CanvasItem].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "clip",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_copy_to_backbuffer",
          "description": "Sets the [CanvasItem] to copy a rect to the backbuffer.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_custom_rect",
          "description": "Defines a custom drawing rectangle for the [CanvasItem].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "use_custom_rect",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "rect",
              "type": "Rect2",
              "default_value": "Rect2( 0, 0, 0, 0 )"
            }
          ]
        },
        {
          "name": "canvas_item_set_distance_field_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_draw_behind_parent",
          "description": "Sets [CanvasItem] to be drawn behind its parent.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_draw_index",
          "description": "Sets the index for the [CanvasItem].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_light_mask",
          "description": "The light mask. See [LightOccluder2D] for more information on light masks.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_material",
          "description": "Sets a new material to the [CanvasItem].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_modulate",
          "description": "Sets the color that modulates the [CanvasItem] and its children.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_parent",
          "description": "Sets the parent for the [CanvasItem].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parent",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_self_modulate",
          "description": "Sets the color that modulates the [CanvasItem] without children.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_sort_children_by_y",
          "description": "Sets if [CanvasItem]'s children should be sorted by y-position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_transform",
          "description": "Sets the [CanvasItem]'s [Transform2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_use_parent_material",
          "description": "Sets if the [CanvasItem] uses its parent's material.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_visible",
          "description": "Sets if the canvas item (including its children) is visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_z_as_relative_to_parent",
          "description": "If this is enabled, the z-index of the parent will be added to the children's z-index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_item_set_z_index",
          "description": "Sets the [CanvasItem]'s z-index, i.e. its draw order (lower indexes are drawn first).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "z_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_attach_to_canvas",
          "description": "Attaches the canvas light to the canvas. Removes it from its previous canvas.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "canvas",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_create",
          "description": "Creates a canvas light.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "canvas_light_occluder_attach_to_canvas",
          "description": "Attaches a light occluder to the canvas. Removes it from its previous canvas.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "occluder",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "canvas",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_occluder_create",
          "description": "Creates a light occluder.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "canvas_light_occluder_set_enabled",
          "description": "Enables or disables light occluder.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "occluder",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_occluder_set_light_mask",
          "description": "The light mask. See [LightOccluder2D] for more information on light masks",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "occluder",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_occluder_set_polygon",
          "description": "Sets a light occluder's polygon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "occluder",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "polygon",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_occluder_set_transform",
          "description": "Sets a light occluder's [Transform2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "occluder",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_color",
          "description": "Sets the color for a light.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_enabled",
          "description": "Enables or disables a canvas light.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_energy",
          "description": "Sets a canvas light's energy.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_height",
          "description": "Sets a canvas light's height.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_item_cull_mask",
          "description": "The light mask. See [LightOccluder2D] for more information on light masks",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_item_shadow_cull_mask",
          "description": "The shadow mask. binary about which layers this canvas light affects which canvas item's shadows. See [LightOccluder2D] for more information on light masks.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_layer_range",
          "description": "The layer range that gets rendered with this light.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min_layer",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max_layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_mode",
          "description": "The mode of the light, see CANVAS_LIGHT_MODE_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "VisualServer.CanvasLightMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_shadow_buffer_size",
          "description": "Sets the width of the shadow buffer, size gets scaled to the next power of two for this.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_shadow_color",
          "description": "Sets the color of the canvas light's shadow.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_shadow_enabled",
          "description": "Enables or disables the canvas light's shadow.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_shadow_filter",
          "description": "Sets the canvas light's shadow's filter, see CANVAS_LIGHT_SHADOW_FILTER_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "filter",
              "type": "int",
              "enum": "VisualServer.CanvasLightShadowFilter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_shadow_gradient_length",
          "description": "Sets the length of the shadow's gradient.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_shadow_smooth",
          "description": "Smoothens the shadow. The lower, the more smooth.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "smooth",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_texture_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_transform",
          "description": "Sets the canvas light's [Transform2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_light_set_z_range",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min_z",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max_z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_occluder_polygon_create",
          "description": "Creates a new light occluder polygon.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "canvas_occluder_polygon_set_cull_mode",
          "description": "Sets an occluder polygons cull mode. See CANVAS_OCCLUDER_POLYGON_CULL_MODE_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "occluder_polygon",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "VisualServer.CanvasOccluderPolygonCullMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_occluder_polygon_set_shape",
          "description": "Sets the shape of the occluder polygon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "occluder_polygon",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "closed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_occluder_polygon_set_shape_as_lines",
          "description": "Sets the shape of the occluder polygon as lines.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "occluder_polygon",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_set_item_mirroring",
          "description": "A copy of the canvas item will be drawn with a local offset of the mirroring [Vector2].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "canvas",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "mirroring",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "canvas_set_modulate",
          "description": "Modulates all colors in the given canvas.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "canvas",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw",
          "description": "Draws a frame.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "swap_buffers",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "finish",
          "description": "Removes buffers and clears testcubes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_draw",
          "description": "Draws a frame. Same as [method draw].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "swap_buffers",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "force_sync",
          "description": "Syncronizes threads.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "free_rid",
          "description": "Tries to free an object in the VisualServer.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_render_info",
          "description": "Returns a certain information, see RENDER_INFO_* for options.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "info",
              "type": "int",
              "enum": "VisualServer.RenderInfo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_test_cube",
          "description": "Returns the id of the test cube. Creates one if none exists.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_test_texture",
          "description": "Returns the id of the test texture. Creates one if none exists.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_white_texture",
          "description": "Returns the id of a white texture. Creates one if none exists.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_changed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if changes have been made to the VisualServer's data. [method draw] is usually called if this happens.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_feature",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "feature",
              "type": "int",
              "enum": "VisualServer.Features",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_os_feature",
          "qualifiers": "const",
          "description": "Returns true, if the OS supports a certain feature. Features might be s3tc, etc, etc2 and pvrtc,",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "feature",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "init",
          "description": "Initializes the visual server.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "make_sphere_mesh",
          "description": "Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "latitudes",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "longitudes",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_create",
          "description": "Returns an empty material.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "material_get_param",
          "qualifiers": "const",
          "description": "Returns the value of a certain material's parameter.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parameter",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_get_shader",
          "qualifiers": "const",
          "description": "Returns the shader of a certain material's shader. Returns an empty RID if the material doesn't have a shader.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "shader_material",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_line_width",
          "description": "Sets a materials line width.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "width",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_next_pass",
          "description": "Sets an objects next material.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "next_material",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_param",
          "description": "Sets a materials parameter.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parameter",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_render_priority",
          "description": "Sets a material's render priority.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "priority",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "material_set_shader",
          "description": "Sets a shader material's shader.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader_material",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shader",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_add_surface_from_arrays",
          "description": "Adds a surface generated from the Arrays to a mesh. See PRIMITIVE_TYPE_* constants for types.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "primtive",
              "type": "int",
              "enum": "VisualServer.PrimitiveType",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arrays",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "blend_shapes",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "4",
              "name": "compress_format",
              "type": "int",
              "default_value": "97792"
            }
          ]
        },
        {
          "name": "mesh_clear",
          "description": "Removes all surfaces from a mesh.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_create",
          "description": "Creates a new mesh.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mesh_get_blend_shape_count",
          "qualifiers": "const",
          "description": "Returns a mesh's blend shape count.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_get_blend_shape_mode",
          "qualifiers": "const",
          "description": "Returns a mesh's blend shape mode.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_get_custom_aabb",
          "qualifiers": "const",
          "description": "Returns a mesh's custom aabb.",
          "return_type": "AABB",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_get_surface_count",
          "qualifiers": "const",
          "description": "Returns a mesh's number of surfaces.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_remove_surface",
          "description": "Removes a mesh's surface.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_set_blend_shape_count",
          "description": "Sets a mesh's blend shape count.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_set_blend_shape_mode",
          "description": "Sets a mesh's blend shape mode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "VisualServer.BlendShapeMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_set_custom_aabb",
          "description": "Sets a mesh's custom aabb.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "aabb",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_aabb",
          "qualifiers": "const",
          "description": "Returns a mesh's surface's aabb.",
          "return_type": "AABB",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_array",
          "qualifiers": "const",
          "description": "Returns a mesh's surface's vertex buffer.",
          "return_type": "PoolByteArray",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_array_index_len",
          "qualifiers": "const",
          "description": "Returns a mesh's surface's amount of indices.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_array_len",
          "qualifiers": "const",
          "description": "Returns a mesh's surface's amount of vertices.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_arrays",
          "qualifiers": "const",
          "description": "Returns a mesh's surface's buffer arrays.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_blend_shape_arrays",
          "qualifiers": "const",
          "description": "Returns a mesh's surface's arrays for blend shapes",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_format",
          "qualifiers": "const",
          "description": "Returns the format of a mesh's surface.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_index_array",
          "qualifiers": "const",
          "description": "Returns a mesh's surface's index buffer.",
          "return_type": "PoolByteArray",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_material",
          "qualifiers": "const",
          "description": "Returns a mesh's surface's material.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_primitive_type",
          "qualifiers": "const",
          "description": "Returns the primitive type of a mesh's surface.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_get_skeleton_aabb",
          "qualifiers": "const",
          "description": "Returns the aabb of a mesh's surface's skeleton.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mesh_surface_set_material",
          "description": "Sets a mesh's surface's material.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "material",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "request_frame_drawn_callback",
          "description": "Schedules a callback to the corresponding named 'method' on 'where' after a frame has been drawn.\n\t\t\t\tThe callback method must use only 1 argument which will be called with 'userdata'.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "where",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "userdata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_boot_image",
          "description": "Sets a boot image. The color defines the background color and if scale is [code]true[/code], the image will be scaled to fit the screen size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "scale",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_debug_generate_wireframes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "generate",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_clear_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shader_create",
          "description": "Creates an empty shader.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "shader_get_code",
          "qualifiers": "const",
          "description": "Returns a shader's code.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shader_get_default_texture_param",
          "qualifiers": "const",
          "description": "Returns a default texture from a shader searched by name.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shader_get_param_list",
          "qualifiers": "const",
          "description": "Returns the parameters of a shader.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shader_set_code",
          "description": "Sets a shader's code.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "code",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shader_set_default_texture_param",
          "description": "Sets a shader's default texture. Overwrites the texture given by name.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sky_create",
          "description": "Creates an empty sky.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sky_set_texture",
          "description": "Sets a sky's texture.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sky",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cube_map",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "radiance_size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sync",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "texture_allocate",
          "description": "Allocates space for a texture's image or video.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "texture_create",
          "description": "Creates an empty texture.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "texture_create_from_image",
          "description": "Creates a texture, allocates the space for an image, and fills in the image.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "texture_debug_usage",
          "description": "Returns a list of all the textures and their information.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "texture_get_data",
          "qualifiers": "const",
          "description": "Returns a copy of a texture's image unless it's a CubeMap, in which case it returns the [RID] of the image at one of the cubes sides.",
          "return_type": "Image",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cube_side",
              "type": "int",
              "enum": "VisualServer.CubeMapSide",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "texture_get_flags",
          "qualifiers": "const",
          "description": "Returns the flags of a texture.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_get_format",
          "qualifiers": "const",
          "description": "Returns the format of the texture's image.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_get_height",
          "qualifiers": "const",
          "description": "Returns the texture's height.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_get_path",
          "qualifiers": "const",
          "description": "Returns the texture's path.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_get_texid",
          "qualifiers": "const",
          "description": "Returns the opengl id of the texture's image.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_get_width",
          "qualifiers": "const",
          "description": "Returns the texture's width.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_set_data",
          "description": "Sets the texture's image data. If it's a CubeMap, it sets the image data at a cube side.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "image",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "cube_side",
              "type": "int",
              "enum": "VisualServer.CubeMapSide",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "texture_set_flags",
          "description": "Sets the texture's flags. See [enum TextureFlags] for options",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_set_path",
          "description": "Sets the texture's path.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_set_shrink_all_x2_on_set_data",
          "description": "If [code]true[/code], sets internal processes to shrink all image data to half the size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shrink",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_set_size_override",
          "description": "Overwrites the texture's width and height.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "height",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "textures_keep_original",
          "description": "If [code]true[/code], the image will be stored in the texture's images array if overwritten.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_attach_camera",
          "description": "Sets a viewport's camera.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "camera",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_attach_canvas",
          "description": "Sets a viewport's canvas.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "canvas",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_attach_to_screen",
          "description": "Attaches a viewport to a screen.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": "Rect2( 0, 0, 0, 0 )"
            },
            {
              "index": "2",
              "name": "screen",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "viewport_create",
          "description": "Creates an empty viewport.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "viewport_detach",
          "description": "Detaches the viewport from the screen.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_get_render_info",
          "description": "Returns a viewport's render info. for options see VIEWPORT_RENDER_INFO* constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "info",
              "type": "int",
              "enum": "VisualServer.ViewportRenderInfo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_get_texture",
          "qualifiers": "const",
          "description": "Returns the viewport's last rendered frame.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_remove_canvas",
          "description": "Detaches a viewport from a canvas and vice versa.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "canvas",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_active",
          "description": "If [code]true[/code], sets the viewport active, else sets it inactive.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_canvas_layer",
          "description": "Sets the renderlayer for a viewport's canvas.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "canvas",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_canvas_transform",
          "description": "Sets the transformation of a viewport's canvas.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "canvas",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "offset",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_clear_mode",
          "description": "Sets the clear mode of a viewport. See VIEWPORT_CLEAR_MODE_* constants for options.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "clear_mode",
              "type": "int",
              "enum": "VisualServer.ViewportClearMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_debug_draw",
          "description": "Sets the debug draw mode of a viewport. See VIEWPORT_DEBUG_DRAW_* constants for options.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "draw",
              "type": "int",
              "enum": "VisualServer.ViewportDebugDraw",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_disable_3d",
          "description": "If [code]true[/code] a viewport's 3D rendering should be disabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_disable_environment",
          "description": "If [code]true[/code] rendering of a viewport's environment should be disabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_global_canvas_transform",
          "description": "Sets the viewport's global transformation matrix.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_hdr",
          "description": "If [code]true[/code] the viewport should render to hdr.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_hide_canvas",
          "description": "If [code]true[/code] the viewport's canvas should not be rendered.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "hidden",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_hide_scenario",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "hidden",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_msaa",
          "description": "Sets the anti-aliasing mode. see [enum ViewportMSAA] for options.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "msaa",
              "type": "int",
              "enum": "VisualServer.ViewportMSAA",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_parent_viewport",
          "description": "Sets the viewport's parent to another viewport.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parent_viewport",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_scenario",
          "description": "Sets a viewport's scenario.\n\t\t\t\tThe scenario contains information about the [enum ScenarioDebugMode], environment information, reflection atlas etc.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scenario",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_shadow_atlas_quadrant_subdivision",
          "description": "Sets the shadow atlas quadrant's subdivision.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "quadrant",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "subdivision",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_shadow_atlas_size",
          "description": "Sets the size of the shadow atlas's images.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_size",
          "description": "Sets the viewport's width and height.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "height",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_transparent_background",
          "description": "If [code]true[/code] the viewport should render its background as transparent.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_update_mode",
          "description": "Sets when the viewport should be updated. See VIEWPORT_UPDATE_MODE_* constants for options.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "update_mode",
              "type": "int",
              "enum": "VisualServer.ViewportUpdateMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_usage",
          "description": "Sets what should be rendered in the viewport. See VIEWPORT_USAGE_* constants for options.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "usage",
              "type": "int",
              "enum": "VisualServer.ViewportUsage",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_use_arvr",
          "description": "If [code]true[/code] the viewport should use augmented or virtual reality technologies. See [ARVRInterface].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "use_arvr",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_set_vflip",
          "description": "If [code]true[/code] the viewport's rendering should be flipped vertically.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "frame_drawn_in_thread",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NO_INDEX_ARRAY",
          "value": "-1",
          "description": "Marks an error that shows that the index array is empty."
        },
        {
          "name": "ARRAY_WEIGHTS_SIZE",
          "value": "4",
          "description": ""
        },
        {
          "name": "CANVAS_ITEM_Z_MIN",
          "value": "-4096",
          "description": "The minimum Z-layer for canvas items."
        },
        {
          "name": "CANVAS_ITEM_Z_MAX",
          "value": "4096",
          "description": "The maximum Z-layer for canvas items."
        },
        {
          "name": "MAX_GLOW_LEVELS",
          "value": "7",
          "description": ""
        },
        {
          "name": "MAX_CURSORS",
          "value": "8",
          "description": ""
        },
        {
          "name": "MATERIAL_RENDER_PRIORITY_MIN",
          "value": "-128",
          "description": "The minimum renderpriority of all materials."
        },
        {
          "name": "MATERIAL_RENDER_PRIORITY_MAX",
          "value": "127",
          "description": "The maximum renderpriority of all materials."
        },
        {
          "name": "CUBEMAP_LEFT",
          "value": "0",
          "enum": "CubeMapSide",
          "description": "Marks the left side of a cubemap."
        },
        {
          "name": "CUBEMAP_RIGHT",
          "value": "1",
          "enum": "CubeMapSide",
          "description": "Marks the right side of a cubemap."
        },
        {
          "name": "CUBEMAP_BOTTOM",
          "value": "2",
          "enum": "CubeMapSide",
          "description": "Marks the bottom side of a cubemap."
        },
        {
          "name": "CUBEMAP_TOP",
          "value": "3",
          "enum": "CubeMapSide",
          "description": "Marks the top side of a cubemap."
        },
        {
          "name": "CUBEMAP_FRONT",
          "value": "4",
          "enum": "CubeMapSide",
          "description": "Marks the front side of a cubemap."
        },
        {
          "name": "CUBEMAP_BACK",
          "value": "5",
          "enum": "CubeMapSide",
          "description": "Marks the back side of a cubemap."
        },
        {
          "name": "TEXTURE_FLAG_MIPMAPS",
          "value": "1",
          "enum": "TextureFlags",
          "description": "Generate mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio."
        },
        {
          "name": "TEXTURE_FLAG_REPEAT",
          "value": "2",
          "enum": "TextureFlags",
          "description": "Repeat (instead of clamp to edge)."
        },
        {
          "name": "TEXTURE_FLAG_FILTER",
          "value": "4",
          "enum": "TextureFlags",
          "description": "Turn on magnifying filter, to enable smooth zooming in of the texture."
        },
        {
          "name": "TEXTURE_FLAG_ANISOTROPIC_FILTER",
          "value": "8",
          "enum": "TextureFlags",
          "description": "Anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.\n\t\t\tMore effective on planes often shown going to the horrizon as those textures (Walls or Ground for example) get squashed in the viewport to different aspect ratios and regular mipmaps keep the aspect ratio so they don't optimize storage that well in those cases."
        },
        {
          "name": "TEXTURE_FLAG_CONVERT_TO_LINEAR",
          "value": "16",
          "enum": "TextureFlags",
          "description": "Converts texture to SRGB color space."
        },
        {
          "name": "TEXTURE_FLAG_MIRRORED_REPEAT",
          "value": "32",
          "enum": "TextureFlags",
          "description": "Repeat texture with alternate sections mirrored."
        },
        {
          "name": "TEXTURE_FLAG_CUBEMAP",
          "value": "2048",
          "enum": "TextureFlags",
          "description": "Texture is a cubemap."
        },
        {
          "name": "TEXTURE_FLAG_USED_FOR_STREAMING",
          "value": "4096",
          "enum": "TextureFlags",
          "description": "Texture is a video surface."
        },
        {
          "name": "TEXTURE_FLAGS_DEFAULT",
          "value": "7",
          "enum": "TextureFlags",
          "description": "Default flags. Generate mipmaps, repeat, and filter are enabled."
        },
        {
          "name": "SHADER_SPATIAL",
          "value": "0",
          "enum": "ShaderMode",
          "description": "Shader is a 3D shader."
        },
        {
          "name": "SHADER_CANVAS_ITEM",
          "value": "1",
          "enum": "ShaderMode",
          "description": "Shader is a 2D shader."
        },
        {
          "name": "SHADER_PARTICLES",
          "value": "2",
          "enum": "ShaderMode",
          "description": "Shader is a particle shader."
        },
        {
          "name": "SHADER_MAX",
          "value": "3",
          "enum": "ShaderMode",
          "description": "Marks maximum of the shader types array. used internally."
        },
        {
          "name": "ARRAY_VERTEX",
          "value": "0",
          "enum": "ArrayType",
          "description": "Array is a vertex array."
        },
        {
          "name": "ARRAY_NORMAL",
          "value": "1",
          "enum": "ArrayType",
          "description": "Array is a normal array."
        },
        {
          "name": "ARRAY_TANGENT",
          "value": "2",
          "enum": "ArrayType",
          "description": "Array is a tangent array."
        },
        {
          "name": "ARRAY_COLOR",
          "value": "3",
          "enum": "ArrayType",
          "description": "Array is a color array."
        },
        {
          "name": "ARRAY_TEX_UV",
          "value": "4",
          "enum": "ArrayType",
          "description": "Array is a uv coordinates array."
        },
        {
          "name": "ARRAY_TEX_UV2",
          "value": "5",
          "enum": "ArrayType",
          "description": "Array is a uv coordinates array for the second uv coordinates."
        },
        {
          "name": "ARRAY_BONES",
          "value": "6",
          "enum": "ArrayType",
          "description": "Array contains bone information."
        },
        {
          "name": "ARRAY_WEIGHTS",
          "value": "7",
          "enum": "ArrayType",
          "description": "Array is weight information."
        },
        {
          "name": "ARRAY_INDEX",
          "value": "8",
          "enum": "ArrayType",
          "description": "Array is index array."
        },
        {
          "name": "ARRAY_MAX",
          "value": "9",
          "enum": "ArrayType",
          "description": "Marks the maximum of the array types. Used internally."
        },
        {
          "name": "ARRAY_FORMAT_VERTEX",
          "value": "1",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a vertex array."
        },
        {
          "name": "ARRAY_FORMAT_NORMAL",
          "value": "2",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a normal array."
        },
        {
          "name": "ARRAY_FORMAT_TANGENT",
          "value": "4",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a tangent array."
        },
        {
          "name": "ARRAY_FORMAT_COLOR",
          "value": "8",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a color array."
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV",
          "value": "16",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a uv coordinates array."
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV2",
          "value": "32",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a uv coordinates array for the second uv coordinates."
        },
        {
          "name": "ARRAY_FORMAT_BONES",
          "value": "64",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a bone information array."
        },
        {
          "name": "ARRAY_FORMAT_WEIGHTS",
          "value": "128",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a weights array."
        },
        {
          "name": "ARRAY_FORMAT_INDEX",
          "value": "256",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a index array."
        },
        {
          "name": "ARRAY_COMPRESS_VERTEX",
          "value": "512",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a compressed (half float) vertex array."
        },
        {
          "name": "ARRAY_COMPRESS_NORMAL",
          "value": "1024",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a compressed (half float) normal array."
        },
        {
          "name": "ARRAY_COMPRESS_TANGENT",
          "value": "2048",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a compressed (half float) tangent array."
        },
        {
          "name": "ARRAY_COMPRESS_COLOR",
          "value": "4096",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a compressed (half float) color array."
        },
        {
          "name": "ARRAY_COMPRESS_TEX_UV",
          "value": "8192",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a compressed (half float) uv coordinates array."
        },
        {
          "name": "ARRAY_COMPRESS_TEX_UV2",
          "value": "16384",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a compressed (half float) uv coordinates array for the second uv coordinates."
        },
        {
          "name": "ARRAY_COMPRESS_BONES",
          "value": "32768",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_WEIGHTS",
          "value": "65536",
          "enum": "ArrayFormat",
          "description": "Flag used to mark a compressed (half float) weight array."
        },
        {
          "name": "ARRAY_COMPRESS_INDEX",
          "value": "131072",
          "enum": "ArrayFormat",
          "description": ""
        },
        {
          "name": "ARRAY_FLAG_USE_2D_VERTICES",
          "value": "262144",
          "enum": "ArrayFormat",
          "description": "Flag used to mark that the array contains 2D vertices."
        },
        {
          "name": "ARRAY_FLAG_USE_16_BIT_BONES",
          "value": "524288",
          "enum": "ArrayFormat",
          "description": "Flag used to mark that the array uses 16 bit bones instead of 8 bit."
        },
        {
          "name": "ARRAY_COMPRESS_DEFAULT",
          "value": "97792",
          "enum": "ArrayFormat",
          "description": "Used to set flags ARRAY_COMPRESS_VERTEX, ARRAY_COMPRESS_NORMAL, ARRAY_COMPRESS_TANGENT, ARRAY_COMPRESS_COLOR, ARRAY_COMPRESS_TEX_UV, ARRAY_COMPRESS_TEX_UV2 and ARRAY_COMPRESS_WEIGHTS quickly."
        },
        {
          "name": "PRIMITIVE_POINTS",
          "value": "0",
          "enum": "PrimitiveType",
          "description": "Primitive to draw consists of points."
        },
        {
          "name": "PRIMITIVE_LINES",
          "value": "1",
          "enum": "PrimitiveType",
          "description": "Primitive to draw consists of lines."
        },
        {
          "name": "PRIMITIVE_LINE_STRIP",
          "value": "2",
          "enum": "PrimitiveType",
          "description": "Primitive to draw consists of a line strip from start to end."
        },
        {
          "name": "PRIMITIVE_LINE_LOOP",
          "value": "3",
          "enum": "PrimitiveType",
          "description": "Primitive to draw consists of a line loop (a line strip with a line between the last and the first vertex)."
        },
        {
          "name": "PRIMITIVE_TRIANGLES",
          "value": "4",
          "enum": "PrimitiveType",
          "description": "Primitive to draw consists of triangles."
        },
        {
          "name": "PRIMITIVE_TRIANGLE_STRIP",
          "value": "5",
          "enum": "PrimitiveType",
          "description": "Primitive to draw consists of a triangle strip (the last 3 vertices are always combined to make a triangle)."
        },
        {
          "name": "PRIMITIVE_TRIANGLE_FAN",
          "value": "6",
          "enum": "PrimitiveType",
          "description": "Primitive to draw consists of a triangle strip (the last 2 vertices are always combined with the first to make a triangle)."
        },
        {
          "name": "PRIMITIVE_MAX",
          "value": "7",
          "enum": "PrimitiveType",
          "description": "Marks the primitive types endpoint. used internally."
        },
        {
          "name": "BLEND_SHAPE_MODE_NORMALIZED",
          "value": "0",
          "enum": "BlendShapeMode",
          "description": ""
        },
        {
          "name": "BLEND_SHAPE_MODE_RELATIVE",
          "value": "1",
          "enum": "BlendShapeMode",
          "description": ""
        },
        {
          "name": "LIGHT_DIRECTIONAL",
          "value": "0",
          "enum": "LightType",
          "description": "Is a directional (sun) light."
        },
        {
          "name": "LIGHT_OMNI",
          "value": "1",
          "enum": "LightType",
          "description": "is an omni light."
        },
        {
          "name": "LIGHT_SPOT",
          "value": "2",
          "enum": "LightType",
          "description": "is an spot light."
        },
        {
          "name": "LIGHT_PARAM_ENERGY",
          "value": "0",
          "enum": "LightParam",
          "description": "The light's energy."
        },
        {
          "name": "LIGHT_PARAM_SPECULAR",
          "value": "2",
          "enum": "LightParam",
          "description": "The light's influence on specularity."
        },
        {
          "name": "LIGHT_PARAM_RANGE",
          "value": "3",
          "enum": "LightParam",
          "description": "The light's range."
        },
        {
          "name": "LIGHT_PARAM_ATTENUATION",
          "value": "4",
          "enum": "LightParam",
          "description": "The light's attenuation."
        },
        {
          "name": "LIGHT_PARAM_SPOT_ANGLE",
          "value": "5",
          "enum": "LightParam",
          "description": "The spotlight's angle."
        },
        {
          "name": "LIGHT_PARAM_SPOT_ATTENUATION",
          "value": "6",
          "enum": "LightParam",
          "description": "The spotlight's attenuation."
        },
        {
          "name": "LIGHT_PARAM_CONTACT_SHADOW_SIZE",
          "value": "7",
          "enum": "LightParam",
          "description": "Scales the shadow color."
        },
        {
          "name": "LIGHT_PARAM_SHADOW_MAX_DISTANCE",
          "value": "8",
          "enum": "LightParam",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET",
          "value": "9",
          "enum": "LightParam",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET",
          "value": "10",
          "enum": "LightParam",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET",
          "value": "11",
          "enum": "LightParam",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_SHADOW_NORMAL_BIAS",
          "value": "12",
          "enum": "LightParam",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_SHADOW_BIAS",
          "value": "13",
          "enum": "LightParam",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_SHADOW_BIAS_SPLIT_SCALE",
          "value": "14",
          "enum": "LightParam",
          "description": ""
        },
        {
          "name": "LIGHT_PARAM_MAX",
          "value": "15",
          "enum": "LightParam",
          "description": "The light parameters endpoint. Used internally."
        },
        {
          "name": "VIEWPORT_UPDATE_DISABLED",
          "value": "0",
          "enum": "ViewportUpdateMode",
          "description": ""
        },
        {
          "name": "VIEWPORT_UPDATE_ONCE",
          "value": "1",
          "enum": "ViewportUpdateMode",
          "description": ""
        },
        {
          "name": "VIEWPORT_UPDATE_WHEN_VISIBLE",
          "value": "2",
          "enum": "ViewportUpdateMode",
          "description": ""
        },
        {
          "name": "VIEWPORT_UPDATE_ALWAYS",
          "value": "3",
          "enum": "ViewportUpdateMode",
          "description": ""
        },
        {
          "name": "VIEWPORT_CLEAR_ALWAYS",
          "value": "0",
          "enum": "ViewportClearMode",
          "description": "The viewport is always cleared before drawing."
        },
        {
          "name": "VIEWPORT_CLEAR_NEVER",
          "value": "1",
          "enum": "ViewportClearMode",
          "description": "The viewport is never cleared before drawing."
        },
        {
          "name": "VIEWPORT_CLEAR_ONLY_NEXT_FRAME",
          "value": "2",
          "enum": "ViewportClearMode",
          "description": "The viewport is cleared once, then the clear mode is set to [VIEWPORT_CLEAR_NEVER]."
        },
        {
          "name": "VIEWPORT_MSAA_DISABLED",
          "value": "0",
          "enum": "ViewportMSAA",
          "description": "Multisample antialiasing is disabled."
        },
        {
          "name": "VIEWPORT_MSAA_2X",
          "value": "1",
          "enum": "ViewportMSAA",
          "description": "Multisample antialiasing is set to 2X."
        },
        {
          "name": "VIEWPORT_MSAA_4X",
          "value": "2",
          "enum": "ViewportMSAA",
          "description": "Multisample antialiasing is set to 4X."
        },
        {
          "name": "VIEWPORT_MSAA_8X",
          "value": "3",
          "enum": "ViewportMSAA",
          "description": "Multisample antialiasing is set to 8X."
        },
        {
          "name": "VIEWPORT_MSAA_16X",
          "value": "4",
          "enum": "ViewportMSAA",
          "description": "Multisample antialiasing is set to 16X."
        },
        {
          "name": "VIEWPORT_USAGE_2D",
          "value": "0",
          "enum": "ViewportUsage",
          "description": "The Viewport does not render 3D but samples."
        },
        {
          "name": "VIEWPORT_USAGE_2D_NO_SAMPLING",
          "value": "1",
          "enum": "ViewportUsage",
          "description": "The Viewport does not render 3D and does not sample."
        },
        {
          "name": "VIEWPORT_USAGE_3D",
          "value": "2",
          "enum": "ViewportUsage",
          "description": "The Viewport renders 3D with effects."
        },
        {
          "name": "VIEWPORT_USAGE_3D_NO_EFFECTS",
          "value": "3",
          "enum": "ViewportUsage",
          "description": "The Viewport renders 3D but without effects."
        },
        {
          "name": "VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME",
          "value": "0",
          "enum": "ViewportRenderInfo",
          "description": ""
        },
        {
          "name": "VIEWPORT_RENDER_INFO_VERTICES_IN_FRAME",
          "value": "1",
          "enum": "ViewportRenderInfo",
          "description": ""
        },
        {
          "name": "VIEWPORT_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME",
          "value": "2",
          "enum": "ViewportRenderInfo",
          "description": ""
        },
        {
          "name": "VIEWPORT_RENDER_INFO_SHADER_CHANGES_IN_FRAME",
          "value": "3",
          "enum": "ViewportRenderInfo",
          "description": ""
        },
        {
          "name": "VIEWPORT_RENDER_INFO_SURFACE_CHANGES_IN_FRAME",
          "value": "4",
          "enum": "ViewportRenderInfo",
          "description": ""
        },
        {
          "name": "VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME",
          "value": "5",
          "enum": "ViewportRenderInfo",
          "description": ""
        },
        {
          "name": "VIEWPORT_RENDER_INFO_MAX",
          "value": "6",
          "enum": "ViewportRenderInfo",
          "description": "Marks end of VIEWPORT_RENDER_INFO* constants. Used internally."
        },
        {
          "name": "VIEWPORT_DEBUG_DRAW_DISABLED",
          "value": "0",
          "enum": "ViewportDebugDraw",
          "description": "Debug draw is disabled. Default setting."
        },
        {
          "name": "VIEWPORT_DEBUG_DRAW_UNSHADED",
          "value": "1",
          "enum": "ViewportDebugDraw",
          "description": "Debug draw sets objects to unshaded."
        },
        {
          "name": "VIEWPORT_DEBUG_DRAW_OVERDRAW",
          "value": "2",
          "enum": "ViewportDebugDraw",
          "description": "Overwrites clear color to [code](0,0,0,0)[/code]."
        },
        {
          "name": "VIEWPORT_DEBUG_DRAW_WIREFRAME",
          "value": "3",
          "enum": "ViewportDebugDraw",
          "description": "Debug draw draws objects in wireframe."
        },
        {
          "name": "SCENARIO_DEBUG_DISABLED",
          "value": "0",
          "enum": "ScenarioDebugMode",
          "description": ""
        },
        {
          "name": "SCENARIO_DEBUG_WIREFRAME",
          "value": "1",
          "enum": "ScenarioDebugMode",
          "description": ""
        },
        {
          "name": "SCENARIO_DEBUG_OVERDRAW",
          "value": "2",
          "enum": "ScenarioDebugMode",
          "description": ""
        },
        {
          "name": "SCENARIO_DEBUG_SHADELESS",
          "value": "3",
          "enum": "ScenarioDebugMode",
          "description": ""
        },
        {
          "name": "INSTANCE_NONE",
          "value": "0",
          "enum": "InstanceType",
          "description": "The instance does not have a type."
        },
        {
          "name": "INSTANCE_MESH",
          "value": "1",
          "enum": "InstanceType",
          "description": "The instance is a mesh."
        },
        {
          "name": "INSTANCE_MULTIMESH",
          "value": "2",
          "enum": "InstanceType",
          "description": "The instance is a multimesh."
        },
        {
          "name": "INSTANCE_IMMEDIATE",
          "value": "3",
          "enum": "InstanceType",
          "description": "The instance is an immediate geometry."
        },
        {
          "name": "INSTANCE_PARTICLES",
          "value": "4",
          "enum": "InstanceType",
          "description": "The instance is a particle emitter."
        },
        {
          "name": "INSTANCE_LIGHT",
          "value": "5",
          "enum": "InstanceType",
          "description": "The instance is a light."
        },
        {
          "name": "INSTANCE_REFLECTION_PROBE",
          "value": "6",
          "enum": "InstanceType",
          "description": ""
        },
        {
          "name": "INSTANCE_GI_PROBE",
          "value": "7",
          "enum": "InstanceType",
          "description": ""
        },
        {
          "name": "INSTANCE_LIGHTMAP_CAPTURE",
          "value": "8",
          "enum": "InstanceType",
          "description": ""
        },
        {
          "name": "INSTANCE_MAX",
          "value": "9",
          "enum": "InstanceType",
          "description": "The max value for INSTANCE_* constants, used internally."
        },
        {
          "name": "INSTANCE_GEOMETRY_MASK",
          "value": "30",
          "enum": "InstanceType",
          "description": "A combination of the flags of geometry instances (mesh, multimesh, immediate and particles)."
        },
        {
          "name": "NINE_PATCH_STRETCH",
          "value": "0",
          "enum": "NinePatchAxisMode",
          "description": "The nine patch gets stretched where needed."
        },
        {
          "name": "NINE_PATCH_TILE",
          "value": "1",
          "enum": "NinePatchAxisMode",
          "description": "The nine patch gets filled with tiles where needed."
        },
        {
          "name": "NINE_PATCH_TILE_FIT",
          "value": "2",
          "enum": "NinePatchAxisMode",
          "description": "The nine patch gets filled with tiles where needed and stretches them a bit if needed."
        },
        {
          "name": "CANVAS_LIGHT_MODE_ADD",
          "value": "0",
          "enum": "CanvasLightMode",
          "description": "Adds light color additive to the canvas."
        },
        {
          "name": "CANVAS_LIGHT_MODE_SUB",
          "value": "1",
          "enum": "CanvasLightMode",
          "description": "Adds light color subtractive to the canvas."
        },
        {
          "name": "CANVAS_LIGHT_MODE_MIX",
          "value": "2",
          "enum": "CanvasLightMode",
          "description": "The light adds color depending on transparency."
        },
        {
          "name": "CANVAS_LIGHT_MODE_MASK",
          "value": "3",
          "enum": "CanvasLightMode",
          "description": "The light adds color depending on mask."
        },
        {
          "name": "CANVAS_LIGHT_FILTER_NONE",
          "value": "0",
          "enum": "CanvasLightShadowFilter",
          "description": ""
        },
        {
          "name": "CANVAS_LIGHT_FILTER_PCF3",
          "value": "1",
          "enum": "CanvasLightShadowFilter",
          "description": ""
        },
        {
          "name": "CANVAS_LIGHT_FILTER_PCF5",
          "value": "2",
          "enum": "CanvasLightShadowFilter",
          "description": ""
        },
        {
          "name": "CANVAS_LIGHT_FILTER_PCF7",
          "value": "3",
          "enum": "CanvasLightShadowFilter",
          "description": ""
        },
        {
          "name": "CANVAS_LIGHT_FILTER_PCF9",
          "value": "4",
          "enum": "CanvasLightShadowFilter",
          "description": ""
        },
        {
          "name": "CANVAS_LIGHT_FILTER_PCF13",
          "value": "5",
          "enum": "CanvasLightShadowFilter",
          "description": ""
        },
        {
          "name": "CANVAS_OCCLUDER_POLYGON_CULL_DISABLED",
          "value": "0",
          "enum": "CanvasOccluderPolygonCullMode",
          "description": "Culling of the canvas occluder is disabled."
        },
        {
          "name": "CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE",
          "value": "1",
          "enum": "CanvasOccluderPolygonCullMode",
          "description": "Culling of the canvas occluder is clockwise."
        },
        {
          "name": "CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE",
          "value": "2",
          "enum": "CanvasOccluderPolygonCullMode",
          "description": "Culling of the canvas occluder is counterclockwise."
        },
        {
          "name": "INFO_OBJECTS_IN_FRAME",
          "value": "0",
          "enum": "RenderInfo",
          "description": "The amount of objects in the frame."
        },
        {
          "name": "INFO_VERTICES_IN_FRAME",
          "value": "1",
          "enum": "RenderInfo",
          "description": "The amount of vertices in the frame."
        },
        {
          "name": "INFO_MATERIAL_CHANGES_IN_FRAME",
          "value": "2",
          "enum": "RenderInfo",
          "description": "The amount of modified materials in the frame."
        },
        {
          "name": "INFO_SHADER_CHANGES_IN_FRAME",
          "value": "3",
          "enum": "RenderInfo",
          "description": "The amount of shader rebinds in the frame."
        },
        {
          "name": "INFO_SURFACE_CHANGES_IN_FRAME",
          "value": "4",
          "enum": "RenderInfo",
          "description": "The amount of surface changes in the frame."
        },
        {
          "name": "INFO_DRAW_CALLS_IN_FRAME",
          "value": "5",
          "enum": "RenderInfo",
          "description": "The amount of draw calls in frame."
        },
        {
          "name": "INFO_USAGE_VIDEO_MEM_TOTAL",
          "value": "6",
          "enum": "RenderInfo",
          "description": ""
        },
        {
          "name": "INFO_VIDEO_MEM_USED",
          "value": "7",
          "enum": "RenderInfo",
          "description": "The amount of vertex memory and texture memory used."
        },
        {
          "name": "INFO_TEXTURE_MEM_USED",
          "value": "8",
          "enum": "RenderInfo",
          "description": "The amount of texture memory used."
        },
        {
          "name": "INFO_VERTEX_MEM_USED",
          "value": "9",
          "enum": "RenderInfo",
          "description": "The amount of vertex memory used."
        },
        {
          "name": "FEATURE_SHADERS",
          "value": "0",
          "enum": "Features",
          "description": ""
        },
        {
          "name": "FEATURE_MULTITHREADED",
          "value": "1",
          "enum": "Features",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Tabs": {
      "name": "Tabs",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Tabs Control.",
      "description": "Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interact with children.",
      "methods": [
        {
          "name": "add_tab",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "ensure_tab_visible",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_offset_buttons_visible",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_tab_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_rect",
          "qualifiers": "const",
          "description": "Returns tab [Rect2] with local position and size.",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_title",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_tab",
          "description": "Rearrange tab.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_tab",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_icon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_title",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "reposition_active_tab_request",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx_to",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "right_button_pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_clicked",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_close",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_hover",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "enum": "TabAlign",
          "description": ""
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "enum": "TabAlign",
          "description": ""
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "enum": "TabAlign",
          "description": ""
        },
        {
          "name": "ALIGN_MAX",
          "value": "3",
          "enum": "TabAlign",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_SHOW_NEVER",
          "value": "0",
          "enum": "CloseButtonDisplayPolicy",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_SHOW_ACTIVE_ONLY",
          "value": "1",
          "enum": "CloseButtonDisplayPolicy",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_SHOW_ALWAYS",
          "value": "2",
          "enum": "CloseButtonDisplayPolicy",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_MAX",
          "value": "3",
          "enum": "CloseButtonDisplayPolicy",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "current_tab",
          "type": "int",
          "setter": "set_current_tab",
          "getter": "get_current_tab",
          "description": ""
        },
        {
          "name": "scrolling_enabled",
          "type": "bool",
          "setter": "set_scrolling_enabled",
          "getter": "get_scrolling_enabled",
          "description": ""
        },
        {
          "name": "tab_align",
          "type": "int",
          "setter": "set_tab_align",
          "getter": "get_tab_align",
          "enum": "Tabs.TabAlign",
          "description": ""
        },
        {
          "name": "tab_close_display_policy",
          "type": "int",
          "setter": "set_tab_close_display_policy",
          "getter": "get_tab_close_display_policy",
          "enum": "Tabs.CloseButtonDisplayPolicy",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "button",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "close",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color_bg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_fg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "label_valign_bg",
          "type": "int",
          "description": ""
        },
        {
          "name": "label_valign_fg",
          "type": "int",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tab_bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tab_fg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "top_margin",
          "type": "int",
          "description": ""
        }
      ]
    },
    "RayShape2D": {
      "name": "RayShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Ray shape for 2D collisions.",
      "description": "Ray shape for 2D collisions. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "length",
          "type": "float",
          "setter": "set_length",
          "getter": "get_length",
          "description": "The ray's length."
        }
      ],
      "theme_properties": []
    },
    "StaticBody2D": {
      "name": "StaticBody2D",
      "inherits": "PhysicsBody2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Static body for 2D Physics.",
      "description": "Static body for 2D Physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms.\n\t\tAdditionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bounce",
          "type": "float",
          "setter": "set_bounce",
          "getter": "get_bounce",
          "description": "The body's bounciness. Values range from [code]0[/code] (no bounce) to [code]1[/code] (full bounciness)."
        },
        {
          "name": "constant_angular_velocity",
          "type": "float",
          "setter": "set_constant_angular_velocity",
          "getter": "get_constant_angular_velocity",
          "description": "Constant angular velocity for the body. This does not rotate the body, but affects colliding bodies, as if it were rotating."
        },
        {
          "name": "constant_linear_velocity",
          "type": "Vector2",
          "setter": "set_constant_linear_velocity",
          "getter": "get_constant_linear_velocity",
          "description": "Constant linear velocity for the body. This does not move the body, but affects colliding bodies, as if it were moving."
        },
        {
          "name": "friction",
          "type": "float",
          "setter": "set_friction",
          "getter": "get_friction",
          "description": "The body's friction. Values range from [code]0[/code] (no friction) to [code]1[/code] (full friction)."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptSelect": {
      "name": "VisualScriptSelect",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Chooses between two input values.",
      "description": "Chooses between two input values based on a Boolean condition.\n\t\t[b]Input Ports:[/b]\n\t\t- Data (boolean): [code]cond[/code]\n\t\t- Data (variant): [code]a[/code]\n\t\t- Data (variant): [code]b[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Data (variant): [code]out[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "type",
          "type": "int",
          "setter": "set_typed",
          "getter": "get_typed",
          "enum": "Variant.Type",
          "description": "The input variables' type."
        }
      ],
      "theme_properties": []
    },
    "EditorResourcePreview": {
      "name": "EditorResourcePreview",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Helper to generate previews of resources or files.",
      "description": "This object is used to generate previews for resources of files.",
      "methods": [
        {
          "name": "add_preview_generator",
          "description": "Create an own, custom preview generator.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "generator",
              "type": "EditorResourcePreviewGenerator",
              "default_value": ""
            }
          ]
        },
        {
          "name": "check_for_invalidation",
          "description": "Check if the resource changed, if so it will be invalidated and the corresponding signal emitted.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_edited_resource_preview",
          "description": "Queue a resource being edited for preview (using an instance). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "receiver_func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_resource_preview",
          "description": "Queue a resource file for preview (using a path). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "receiver_func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_preview_generator",
          "description": "Remove a custom preview generator.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "generator",
              "type": "EditorResourcePreviewGenerator",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "preview_invalidated",
          "description": "If a preview was invalidated (changed) this signal will emit (using the path of the preview)",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamOGGVorbis": {
      "name": "AudioStreamOGGVorbis",
      "inherits": "AudioStream",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "OGG Vorbis audio stream driver.",
      "description": "OGG Vorbis audio stream driver.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "loop",
          "type": "bool",
          "setter": "set_loop",
          "getter": "has_loop",
          "description": ""
        },
        {
          "name": "loop_offset",
          "type": "float",
          "setter": "set_loop_offset",
          "getter": "get_loop_offset",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "IP_Unix": {
      "name": "IP_Unix",
      "inherits": "IP",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Unix IP support. See [IP].",
      "description": "Unix-specific implementation of IP support functions. See [IP].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Control": {
      "name": "Control",
      "inherits": "CanvasItem",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "All User Interface nodes inherit from Control. Features anchors and margins to adapt its position and size to its parent.",
      "description": "Base class for all User Interface or [i]UI[/i] related nodes. [code]Control[/code] features a bounding rectangle that defines its extents, an anchor position relative to its parent and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.\n\t\tFor more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from [code]Control[/code] and [Container] nodes.\n\t\t[b]User Interface nodes and input[/b]\n\t\tGodot sends input events to the scene's root node first, by calling [method Node._input]. [method Node._input] forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls [method MainLoop._input_event]. Call [method accept_event] so no other node receives the event. Once you accepted an input, it becomes handled so [method Node._unhandled_input] will not process it.\n\t\tOnly one [code]Control[/code] node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call [method set_focus_mode]. [code]Control[/code] nodes lose focus when another node grabs it, or if you hide the node in focus.\n\t\tCall [method set_ignore_mouse] to tell a [code]Control[/code] node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.\n\t\t[Theme] resources change the Control's appearance. If you change the [Theme] on a [code]Control[/code] node, it affects all of its children. To override some of the theme's parameters, call one of the [code]add_*_override[/code] methods, like [method add_font_override]. You can override the theme with the inspector.",
      "methods": [
        {
          "name": "_get_minimum_size",
          "qualifiers": "virtual",
          "description": "Returns the minimum size this Control can shrink to. The node can never be smaller than this minimum size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "_gui_input",
          "qualifiers": "virtual",
          "description": "The node's parent forwards input events to this method. Use it to process and accept inputs on UI elements. See [method accept_event].\n\t\t\t\tReplaces Godot 2's [code]_input_event[/code].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "accept_event",
          "description": "Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to [method Node._unhandled_input] or [method Node._unhandled_key_input].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "add_color_override",
          "description": "Overrides the color in the [theme] resource the node uses.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_constant_override",
          "description": "Overrides an integer constant in the [Theme] resource the node uses. If the [code]constant[/code] is invalid, Godot clears the override. See [member Theme.INVALID_CONSTANT] for more information.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "constant",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_font_override",
          "description": "Overrides the [code]name[/code] font in the [theme] resource the node uses. If [code]font[/code] is empty, Godot clears the override.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_icon_override",
          "description": "Overrides the [code]name[/code] icon in the [theme] resource the node uses. If [code]icon[/code] is empty, Godot clears the override.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_shader_override",
          "description": "Overrides the [code]name[/code] shader in the [theme] resource the node uses. If [code]shader[/code] is empty, Godot clears the override.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shader",
              "type": "Shader",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_stylebox_override",
          "description": "Overrides the [code]name[/code] [Stylebox] in the [theme] resource the node uses. If [code]stylebox[/code] is empty, Godot clears the override.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "stylebox",
              "type": "StyleBox",
              "default_value": ""
            }
          ]
        },
        {
          "name": "can_drop_data",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "drop_data",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "force_drag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "preview",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_begin",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_combined_minimum_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_cursor_shape",
          "qualifiers": "const",
          "description": "Returns the mouse cursor shape the control displays on mouse hover, one of the [code]CURSOR_*[/code] constants.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "get_drag_data",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_end",
          "qualifiers": "const",
          "description": "Returns MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_focus_owner",
          "qualifiers": "const",
          "description": "Return which control is owning the keyboard focus, or null if no one.",
          "return_type": "Control",
          "arguments": []
        },
        {
          "name": "get_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "Font",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_global_rect",
          "qualifiers": "const",
          "description": "Return position and size of the Control, relative to the top-left corner of the [i]window[/i] Control. This is a helper (see [method get_global_position], [method get_size]).",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_minimum_size",
          "qualifiers": "const",
          "description": "Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_parent_area_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_parent_control",
          "qualifiers": "const",
          "description": "",
          "return_type": "Control",
          "arguments": []
        },
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Return position and size of the Control, relative to the top-left corner of the parent Control. This is a helper (see [method get_position], [method get_size]).",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "qualifiers": "const",
          "description": "Return the rotation (in radians)",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "StyleBox",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_tooltip",
          "qualifiers": "const",
          "description": "Return the tooltip, which will appear when the cursor is resting over this control.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "at_position",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "grab_click_focus",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "grab_focus",
          "description": "Steal the focus from another control and become the focused control (see [method set_focus_mode]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_color_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_constant_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_focus",
          "qualifiers": "const",
          "description": "Return whether the Control is the current focused control (see [method set_focus_mode]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_font_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_icon_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_point",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_shader_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_stylebox_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "minimum_size_changed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "release_focus",
          "description": "Give up the focus, no other control will be able to receive keyboard input.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_anchor",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anchor",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "keep_margin",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "push_opposite_anchor",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "set_anchor_and_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anchor",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "push_opposite_anchor",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_anchors_and_margins_preset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "enum": "Control.LayoutPreset",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resize_mode",
              "type": "int",
              "enum": "Control.LayoutPresetMode",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "margin",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_anchors_preset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "enum": "Control.LayoutPreset",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "keep_margin",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_begin",
          "description": "Sets MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drag_forwarding",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drag_preview",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_end",
          "description": "Sets MARGIN_RIGHT and MARGIN_BOTTOM at the same time. This is a helper (see [method set_margin]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margins_preset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "enum": "Control.LayoutPreset",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resize_mode",
              "type": "int",
              "enum": "Control.LayoutPresetMode",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "margin",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_rotation",
          "description": "Set the rotation (in radians).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show_modal",
          "description": "Display a Control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exclusive",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "warp_mouse",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "focus_entered",
          "description": "Emitted when the node gains keyboard focus.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "focus_exited",
          "description": "Emitted when the node loses keyboard focus.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "gui_input",
          "description": "Emitted when the node receives an [InputEvent].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ev",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "minimum_size_changed",
          "description": "Emitted when the node's minimum size changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "modal_closed",
          "description": "Emitted when a modal [code]Control[/code] is closed. See [method show_modal].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_entered",
          "description": "Emitted when the mouse enters the control's [code]Rect[/code] area, provided its [member mouse_filter] lets the event reach it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_exited",
          "description": "Emitted when the mouse leaves the control's [code]Rect[/code] area, provided its [member mouse_filter] lets the event reach it.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resized",
          "description": "Emitted when the control changes size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "size_flags_changed",
          "description": "Emitted when one of the size flags changes. See [member size_flags_horizontal] and [member size_flags_vertical].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "FOCUS_NONE",
          "value": "0",
          "enum": "FocusMode",
          "description": "The node cannot grab focus. Use with [member set_focus_mode]."
        },
        {
          "name": "FOCUS_CLICK",
          "value": "1",
          "enum": "FocusMode",
          "description": "The node can only grab focus on mouse clicks. Use with [member set_focus_mode]."
        },
        {
          "name": "FOCUS_ALL",
          "value": "2",
          "enum": "FocusMode",
          "description": "The node can grab focus on mouse click or using the arrows and the Tab keys on the keyboard. Use with [member set_focus_mode]."
        },
        {
          "name": "NOTIFICATION_RESIZED",
          "value": "40",
          "description": "Sent when the node changes size. Use [member rect_size] to get the new size."
        },
        {
          "name": "NOTIFICATION_MOUSE_ENTER",
          "value": "41",
          "description": "Sent when the mouse pointer enters the node's [code]Rect[/code] area."
        },
        {
          "name": "NOTIFICATION_MOUSE_EXIT",
          "value": "42",
          "description": "Sent when the mouse pointer exits the node's [code]Rect[/code] area."
        },
        {
          "name": "NOTIFICATION_FOCUS_ENTER",
          "value": "43",
          "description": "Sent when the node grabs focus."
        },
        {
          "name": "NOTIFICATION_FOCUS_EXIT",
          "value": "44",
          "description": "Sent when the node loses focus."
        },
        {
          "name": "NOTIFICATION_THEME_CHANGED",
          "value": "45",
          "description": "Sent when the node's [member theme] changes, right before Godot redraws the [code]Control[/code]. Happens when you call one of the [code]add_*_override[/code]"
        },
        {
          "name": "NOTIFICATION_MODAL_CLOSE",
          "value": "46",
          "description": "Sent when an open modal dialog closes. See [member show_modal]."
        },
        {
          "name": "CURSOR_ARROW",
          "value": "0",
          "enum": "CursorShape",
          "description": "Show the system's arrow mouse cursor when the user hovers the node. Use with [method set_default_cursor_shape]."
        },
        {
          "name": "CURSOR_IBEAM",
          "value": "1",
          "enum": "CursorShape",
          "description": "Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to \"I\". It tells the user they can highlight or insert text."
        },
        {
          "name": "CURSOR_POINTING_HAND",
          "value": "2",
          "enum": "CursorShape",
          "description": "Show the system's pointing hand mouse cursor when the user hovers the node."
        },
        {
          "name": "CURSOR_CROSS",
          "value": "3",
          "enum": "CursorShape",
          "description": "Show the system's cross mouse cursor when the user hovers the node."
        },
        {
          "name": "CURSOR_WAIT",
          "value": "4",
          "enum": "CursorShape",
          "description": "Show the system's wait mouse cursor, often an hourglass, when the user hovers the node."
        },
        {
          "name": "CURSOR_BUSY",
          "value": "5",
          "enum": "CursorShape",
          "description": "Show the system's busy mouse cursor when the user hovers the node. Often an hourglass."
        },
        {
          "name": "CURSOR_DRAG",
          "value": "6",
          "enum": "CursorShape",
          "description": "Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock."
        },
        {
          "name": "CURSOR_CAN_DROP",
          "value": "7",
          "enum": "CursorShape",
          "description": "Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock."
        },
        {
          "name": "CURSOR_FORBIDDEN",
          "value": "8",
          "enum": "CursorShape",
          "description": "Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle."
        },
        {
          "name": "CURSOR_VSIZE",
          "value": "9",
          "enum": "CursorShape",
          "description": "Show the system's vertical resize mouse cursor when the user hovers the node. A double headed vertical arrow. It tells the user they can resize the window or the panel vertically."
        },
        {
          "name": "CURSOR_HSIZE",
          "value": "10",
          "enum": "CursorShape",
          "description": "Show the system's horizontal resize mouse cursor when the user hovers the node. A double headed horizontal arrow. It tells the user they can resize the window or the panel horizontally."
        },
        {
          "name": "CURSOR_BDIAGSIZE",
          "value": "11",
          "enum": "CursorShape",
          "description": "Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically."
        },
        {
          "name": "CURSOR_FDIAGSIZE",
          "value": "12",
          "enum": "CursorShape",
          "description": "Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the top left to the bottom right, the opposite of [code]CURSOR_BDIAGSIZE[/code]. It tells the user they can resize the window or the panel both horizontally and vertically."
        },
        {
          "name": "CURSOR_MOVE",
          "value": "13",
          "enum": "CursorShape",
          "description": "Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely."
        },
        {
          "name": "CURSOR_VSPLIT",
          "value": "14",
          "enum": "CursorShape",
          "description": "Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as [code]CURSOR_VSIZE[/code]."
        },
        {
          "name": "CURSOR_HSPLIT",
          "value": "15",
          "enum": "CursorShape",
          "description": "Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as [code]CURSOR_HSIZE[/code]."
        },
        {
          "name": "CURSOR_HELP",
          "value": "16",
          "enum": "CursorShape",
          "description": "Show the system's help mouse cursor when the user hovers the node, a question mark."
        },
        {
          "name": "PRESET_TOP_LEFT",
          "value": "0",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the top-left of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_TOP_RIGHT",
          "value": "1",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the top-right of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_BOTTOM_LEFT",
          "value": "2",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the bottom-left of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_BOTTOM_RIGHT",
          "value": "3",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the bottom-right of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER_LEFT",
          "value": "4",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the center of the left edge of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER_TOP",
          "value": "5",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the center of the top edge of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER_RIGHT",
          "value": "6",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the center of the right edge of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER_BOTTOM",
          "value": "7",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the center of the bottom edge of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER",
          "value": "8",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the center of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_LEFT_WIDE",
          "value": "9",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the left edge of the parent container. The left margin becomes relative to the left edge and the top margin relative to the top left corner of the node's parent. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_TOP_WIDE",
          "value": "10",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the top edge of the parent container. The left margin becomes relative to the top left corner, the top margin relative to the top edge, and the right margin relative to the top right corner of the node's parent. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_RIGHT_WIDE",
          "value": "11",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the right edge of the parent container. The right margin becomes relative to the right edge and the top margin relative to the top right corner of the node's parent. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_BOTTOM_WIDE",
          "value": "12",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the bottom edge of the parent container. The left margin becomes relative to the bottom left corner, the bottom margin relative to the bottom edge, and the right margin relative to the bottom right corner of the node's parent. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_VCENTER_WIDE",
          "value": "13",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to a vertical line that cuts the parent container in half. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_HCENTER_WIDE",
          "value": "14",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to a horizontal line that cuts the parent container in half. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_WIDE",
          "value": "15",
          "enum": "LayoutPreset",
          "description": "Snap all 4 anchors to the respective corners of the parent container. Set all 4 margins to 0 after you applied this preset and the [code]Control[/code] will fit its parent container. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_MODE_MINSIZE",
          "value": "0",
          "enum": "LayoutPresetMode",
          "description": ""
        },
        {
          "name": "PRESET_MODE_KEEP_WIDTH",
          "value": "1",
          "enum": "LayoutPresetMode",
          "description": ""
        },
        {
          "name": "PRESET_MODE_KEEP_HEIGHT",
          "value": "2",
          "enum": "LayoutPresetMode",
          "description": ""
        },
        {
          "name": "PRESET_MODE_KEEP_SIZE",
          "value": "3",
          "enum": "LayoutPresetMode",
          "description": ""
        },
        {
          "name": "SIZE_FILL",
          "value": "1",
          "enum": "SizeFlags",
          "description": "Tells the parent [Container] to expand the bounds of this node to fill all the available space without pushing any other node. Use with [member size_flags_horizontal] and [member size_flags_vertical]."
        },
        {
          "name": "SIZE_EXPAND",
          "value": "2",
          "enum": "SizeFlags",
          "description": "Tells the parent [Container] to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See [member size_flags_stretch_ratio]. Use with [member size_flags_horizontal] and [member size_flags_vertical]."
        },
        {
          "name": "SIZE_EXPAND_FILL",
          "value": "3",
          "enum": "SizeFlags",
          "description": "Sets the node's size flags to both fill and expand. See the 2 constants above for more information."
        },
        {
          "name": "SIZE_SHRINK_CENTER",
          "value": "4",
          "enum": "SizeFlags",
          "description": "Tells the parent [Container] to center the node in itself. It centers the [code]Control[/code] based on its bounding box, so it doesn't work with the fill or expand size flags. Use with [member size_flags_horizontal] and [member size_flags_vertical]."
        },
        {
          "name": "SIZE_SHRINK_END",
          "value": "8",
          "enum": "SizeFlags",
          "description": "Tells the parent [Container] to align the node with its end, either the bottom or the right edge. It doesn't work with the fill or expand size flags. Use with [member size_flags_horizontal] and [member size_flags_vertical]."
        },
        {
          "name": "MOUSE_FILTER_STOP",
          "value": "0",
          "enum": "MouseFilter",
          "description": "The control will receive mouse button input events through [method _gui_input] if clicked on. These events are automatically marked as handled and they will not propagate further to other controls."
        },
        {
          "name": "MOUSE_FILTER_PASS",
          "value": "1",
          "enum": "MouseFilter",
          "description": "The control will receive mouse button input events through [method _gui_input] if clicked on. If this control does not handle the event, the parent control (if any) will be considered for a mouse click, and so on until there is no more parent control to potentially handle it. Even if no control handled it at all, the event will still be handled automatically."
        },
        {
          "name": "MOUSE_FILTER_IGNORE",
          "value": "2",
          "enum": "MouseFilter",
          "description": "The control will not receive mouse button input events through [method _gui_input] and will not block other controls from receiving these events. These events will also not be handled automatically."
        },
        {
          "name": "GROW_DIRECTION_BEGIN",
          "value": "0",
          "enum": "GrowDirection",
          "description": ""
        },
        {
          "name": "GROW_DIRECTION_END",
          "value": "1",
          "enum": "GrowDirection",
          "description": ""
        },
        {
          "name": "ANCHOR_BEGIN",
          "value": "0",
          "enum": "Anchor",
          "description": "Snaps one of the 4 anchor's sides to the origin of the node's [code]Rect[/code], in the top left. Use it with one of the [code]anchor_*[/code] member variables, like [member anchor_left]. To change all 4 anchors at once, use [method set_anchors_preset]."
        },
        {
          "name": "ANCHOR_END",
          "value": "1",
          "enum": "Anchor",
          "description": "Snaps one of the 4 anchor's sides to the end of the node's [code]Rect[/code], in the bottom right. Use it with one of the [code]anchor_*[/code] member variables, like [member anchor_left]. To change all 4 anchors at once, use [method set_anchors_preset]."
        }
      ],
      "properties": [
        {
          "name": "anchor_bottom",
          "type": "float",
          "setter": "_set_anchor",
          "getter": "get_anchor",
          "description": "Anchors the bottom edge of the node to the origin, the center, or the end of its parent container. It changes how the bottom margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code]."
        },
        {
          "name": "anchor_left",
          "type": "float",
          "setter": "_set_anchor",
          "getter": "get_anchor",
          "description": "Anchors the left edge of the node to the origin, the center or the end of its parent container. It changes how the left margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code]."
        },
        {
          "name": "anchor_right",
          "type": "float",
          "setter": "_set_anchor",
          "getter": "get_anchor",
          "description": "Anchors the right edge of the node to the origin, the center or the end of its parent container. It changes how the right margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code]."
        },
        {
          "name": "anchor_top",
          "type": "float",
          "setter": "_set_anchor",
          "getter": "get_anchor",
          "description": "Anchors the top edge of the node to the origin, the center or the end of its parent container. It changes how the top margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code]."
        },
        {
          "name": "focus_mode",
          "type": "int",
          "setter": "set_focus_mode",
          "getter": "get_focus_mode",
          "enum": "Control.FocusMode",
          "description": "The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard signals."
        },
        {
          "name": "focus_neighbour_bottom",
          "type": "NodePath",
          "setter": "set_focus_neighbour",
          "getter": "get_focus_neighbour",
          "description": "Tells Godot which node it should give keyboard focus to if the user presses Tab, the down arrow on the keyboard, or down on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one.\n\t\t\tIf the user presses Tab, Godot will give focus to the closest node to the right first, then to the bottom. If the user presses Shift+Tab, Godot will look to the left of the node, then above it."
        },
        {
          "name": "focus_neighbour_left",
          "type": "NodePath",
          "setter": "set_focus_neighbour",
          "getter": "get_focus_neighbour",
          "description": "Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the left arrow on the keyboard or left on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the left of this one."
        },
        {
          "name": "focus_neighbour_right",
          "type": "NodePath",
          "setter": "set_focus_neighbour",
          "getter": "get_focus_neighbour",
          "description": "Tells Godot which node it should give keyboard focus to if the user presses Tab, the right arrow on the keyboard or right on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one."
        },
        {
          "name": "focus_neighbour_top",
          "type": "NodePath",
          "setter": "set_focus_neighbour",
          "getter": "get_focus_neighbour",
          "description": "Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the top arrow on the keyboard or top on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one."
        },
        {
          "name": "focus_next",
          "type": "NodePath",
          "setter": "set_focus_next",
          "getter": "get_focus_next",
          "description": ""
        },
        {
          "name": "focus_previous",
          "type": "NodePath",
          "setter": "set_focus_previous",
          "getter": "get_focus_previous",
          "description": ""
        },
        {
          "name": "grow_horizontal",
          "type": "int",
          "setter": "set_h_grow_direction",
          "getter": "get_h_grow_direction",
          "enum": "Control.GrowDirection",
          "description": ""
        },
        {
          "name": "grow_vertical",
          "type": "int",
          "setter": "set_v_grow_direction",
          "getter": "get_v_grow_direction",
          "enum": "Control.GrowDirection",
          "description": ""
        },
        {
          "name": "hint_tooltip",
          "type": "String",
          "setter": "set_tooltip",
          "getter": "_get_tooltip",
          "description": "Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments."
        },
        {
          "name": "margin_bottom",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "Distance between the node's bottom edge and its parent container, based on [member anchor_bottom].\n\t\t\tMargins are often controlled by one or multiple parent [Container] nodes. Margins update automatically when you move or resize the node."
        },
        {
          "name": "margin_left",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "Distance between the node's left edge and its parent container, based on [member anchor_left]."
        },
        {
          "name": "margin_right",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "Distance between the node's right edge and its parent container, based on [member anchor_right]."
        },
        {
          "name": "margin_top",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "Distance between the node's top edge and its parent container, based on [member anchor_top]."
        },
        {
          "name": "mouse_default_cursor_shape",
          "type": "int",
          "setter": "set_default_cursor_shape",
          "getter": "get_default_cursor_shape",
          "enum": "Control.CursorShape",
          "description": "The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors."
        },
        {
          "name": "mouse_filter",
          "type": "int",
          "setter": "set_mouse_filter",
          "getter": "get_mouse_filter",
          "enum": "Control.MouseFilter",
          "description": "Controls whether the control will be able to receive mouse button input events through [method _gui_input] and how these events should be handled. Use one of the [code]MOUSE_FILTER_*[/code] constants. See the constants to learn what each does."
        },
        {
          "name": "rect_clip_content",
          "type": "bool",
          "setter": "set_clip_contents",
          "getter": "is_clipping_contents",
          "description": ""
        },
        {
          "name": "rect_global_position",
          "type": "Vector2",
          "setter": "set_global_position",
          "getter": "get_global_position",
          "description": "The node's global position, relative to the world (usually to the top-left corner of the window)."
        },
        {
          "name": "rect_min_size",
          "type": "Vector2",
          "setter": "set_custom_minimum_size",
          "getter": "get_custom_minimum_size",
          "description": "The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes."
        },
        {
          "name": "rect_pivot_offset",
          "type": "Vector2",
          "setter": "set_pivot_offset",
          "getter": "get_pivot_offset",
          "description": "By default, the node's pivot is its top-left corner. When you change its [member rect_scale], it will scale around this pivot. Set this property to [member rect_size] / 2 to center the pivot in the node's rectangle."
        },
        {
          "name": "rect_position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by [member rect_pivot_offset]."
        },
        {
          "name": "rect_rotation",
          "type": "float",
          "setter": "set_rotation_degrees",
          "getter": "get_rotation_degrees",
          "description": "The node's rotation around its pivot, in degrees. See [member rect_pivot_offset] to change the pivot's position."
        },
        {
          "name": "rect_scale",
          "type": "Vector2",
          "setter": "set_scale",
          "getter": "get_scale",
          "description": "The node's scale, relative to its [member rect_size]. Change this property to scale the node around its [member rect_pivot_offset]."
        },
        {
          "name": "rect_size",
          "type": "Vector2",
          "setter": "set_size",
          "getter": "get_size",
          "description": "The size of the node's bounding rectangle, in pixels. [Container] nodes update this property automatically."
        },
        {
          "name": "size_flags_horizontal",
          "type": "int",
          "setter": "set_h_size_flags",
          "getter": "get_h_size_flags",
          "description": "Tells the parent [Container] nodes how they should resize and place the node on the X axis. Use one of the [code]SIZE_*[/code] constants to change the flags. See the constants to learn what each does."
        },
        {
          "name": "size_flags_stretch_ratio",
          "type": "float",
          "setter": "set_stretch_ratio",
          "getter": "get_stretch_ratio",
          "description": "If the node and at least one of its neighbours uses the [code]SIZE_EXPAND[/code] size flag, the parent [Container] will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbour a ratio of 1, this node will take two thirds of the available space."
        },
        {
          "name": "size_flags_vertical",
          "type": "int",
          "setter": "set_v_size_flags",
          "getter": "get_v_size_flags",
          "description": "Tells the parent [Container] nodes how they should resize and place the node on the Y axis. Use one of the [code]SIZE_*[/code] constants to change the flags. See the constants to learn what each does."
        },
        {
          "name": "theme",
          "type": "Theme",
          "setter": "set_theme",
          "getter": "get_theme",
          "description": "Changing this property replaces the current [Theme] resource this node and all its [code]Control[/code] children use."
        }
      ],
      "theme_properties": []
    },
    "InputEventJoypadButton": {
      "name": "InputEventJoypadButton",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Input event for gamepad buttons.",
      "description": "Input event type for gamepad buttons. For joysticks see [InputEventJoypadMotion].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "button_index",
          "type": "int",
          "setter": "set_button_index",
          "getter": "get_button_index",
          "description": "Button identifier. One of the [code]JOY_BUTTON_*[/code] constants from [@global Scope]."
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "If [code]true[/code] the button's state is pressed. If [code]false[/code] the button's state is released."
        },
        {
          "name": "pressure",
          "type": "float",
          "setter": "set_pressure",
          "getter": "get_pressure",
          "description": "Represents the pressure the user puts on the button with his finger, if the controller supports it. Ranges from [code]0[/code] to [code]1[/code]."
        }
      ],
      "theme_properties": []
    },
    "Thread": {
      "name": "Thread",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A unit of execution in a process.",
      "description": "A unit of execution in a process. Can run methods on [Object]s simultaneously. The use of synchronization via [Mutex], [Semaphore] is advised if working with shared objects.",
      "methods": [
        {
          "name": "get_id",
          "qualifiers": "const",
          "description": "Returns the current [code]Thread[/code]s id, uniquely identifying it among all threads.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Returns true if this [code]Thread[/code] is currently active. An active [code]Thread[/code] cannot start work on a new method but can be joined with [method wait_to_finish].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "start",
          "description": "Starts a new [code]Thread[/code] that runs \"method\" on object \"instance\" with \"userdata\" passed as an argument. The \"priority\" of the [code]Thread[/code] can be changed by passing a PRIORITY_* enum.\n\t\t\t\tReturns OK on success, or ERR_CANT_CREATE on failure.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "userdata",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "3",
              "name": "priority",
              "type": "int",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "wait_to_finish",
          "description": "Joins the [code]Thread[/code] and waits for it to finish. Returns what the method called returned.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PRIORITY_LOW",
          "value": "0",
          "enum": "Priority",
          "description": ""
        },
        {
          "name": "PRIORITY_NORMAL",
          "value": "1",
          "enum": "Priority",
          "description": ""
        },
        {
          "name": "PRIORITY_HIGH",
          "value": "2",
          "enum": "Priority",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "OmniLight": {
      "name": "OmniLight",
      "inherits": "Light",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "OmniDirectional Light, such as a light bulb or a candle.",
      "description": "An OmniDirectional light is a type of [Light] node that emits lights in all directions. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light].",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "SHADOW_DUAL_PARABOLOID",
          "value": "0",
          "enum": "ShadowMode",
          "description": ""
        },
        {
          "name": "SHADOW_CUBE",
          "value": "1",
          "enum": "ShadowMode",
          "description": ""
        },
        {
          "name": "SHADOW_DETAIL_VERTICAL",
          "value": "0",
          "enum": "ShadowDetail",
          "description": ""
        },
        {
          "name": "SHADOW_DETAIL_HORIZONTAL",
          "value": "1",
          "enum": "ShadowDetail",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "omni_attenuation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "omni_range",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "omni_shadow_detail",
          "type": "int",
          "setter": "set_shadow_detail",
          "getter": "get_shadow_detail",
          "enum": "OmniLight.ShadowDetail",
          "description": ""
        },
        {
          "name": "omni_shadow_mode",
          "type": "int",
          "setter": "set_shadow_mode",
          "getter": "get_shadow_mode",
          "enum": "OmniLight.ShadowMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ARVRInterfaceGDNative": {
      "name": "ARVRInterfaceGDNative",
      "inherits": "ARVRInterface",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "GDNative wrapper for an ARVR interface",
      "description": "This is a wrapper class for GDNative implementations of the ARVR interface. To use a GDNative ARVR interface simply instantiate this object and set your GDNative library containing the ARVR interface implementation.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ItemList": {
      "name": "ItemList",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Control that provides a list of selectable items (and/or icons) in a single column, or optionally in multiple columns.",
      "description": "This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons,\n\t\tor both text and icon.  Tooltips are supported and may be different for every item in the list.  Selectable items in the list\n\t\tmay be selected or deselected and multiple selection may be enabled.  Selection with right mouse button may also be enabled\n\t\tto allow use of popup context menus.  Items may also be 'activated' with a double click (or Enter key).",
      "methods": [
        {
          "name": "add_icon_item",
          "description": "Adds an item to the item list with no text, only an icon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selectable",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "add_item",
          "description": "Adds an item to the item list with specified text.  Specify an icon of null for a list item with no icon.\n\t\t\t\tIf selectable is true the list item will be selectable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "2",
              "name": "selectable",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Remove all items from the list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "ensure_current_is_visible",
          "description": "Ensure selection is visible, adjusting the scroll position as necessary.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_item_at_position",
          "qualifiers": "const",
          "description": "Given a position within the control return the item (if any) at that point.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "exact",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_item_count",
          "qualifiers": "const",
          "description": "Return count of items currently in the item list.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_custom_bg_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_icon_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_text",
          "qualifiers": "const",
          "description": "Return the text for specified item index.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_tooltip",
          "qualifiers": "const",
          "description": "Return tooltip hint for specified item index.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_selected_items",
          "description": "Returns the list of selected indexes.",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_v_scroll",
          "description": "Returns the current vertical scroll bar for the List.",
          "return_type": "VScrollBar",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_item_disabled",
          "qualifiers": "const",
          "description": "Returns whether or not the item at the specified index is disabled",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_selectable",
          "qualifiers": "const",
          "description": "Returns whether or not the item at the specified index is selectable.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_tooltip_enabled",
          "qualifiers": "const",
          "description": "Returns whether the tooltip is enabled for specified item index.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_selected",
          "qualifiers": "const",
          "description": "Returns whether or not item at the specified index is currently selected.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_item",
          "description": "Remove item at specified index from the list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Select the item at the specified index.\n\t\t\t\tNote:  This method does not trigger the item selection signal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "single",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "set_item_custom_bg_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "custom_bg_color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_disabled",
          "description": "Disable (or enable) item at specified index.\n\t\t\t\tDisabled items are not be selectable and do not fire activation (Enter or double-click) signals.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon",
          "description": "Set (or replace) icon of the item at the specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon_region",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_metadata",
          "description": "Sets a value (of any type) to be stored with the item at the specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_selectable",
          "description": "Allow or disallow selection of the item at the specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selectable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_text",
          "description": "Sets text of item at specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_tooltip",
          "description": "Sets tooltip hint for item at specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_tooltip_enabled",
          "description": "Sets whether the tooltip is enabled for specified item index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sort_items_by_text",
          "description": "Sorts items in the list by their text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unselect",
          "description": "Ensure item at specified index is not selected.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "item_activated",
          "description": "Fired when specified list item is activated via double click or Enter.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_rmb_selected",
          "description": "Fired when specified list item has been selected via right mouse clicking.\n\t\t\t\tThe click position is also provided to allow appropriate popup of context menus\n\t\t\t\tat the correct location.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "at_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_selected",
          "description": "Fired when specified item has been selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multi_selected",
          "description": "Fired when a multiple selection is altered on a list allowing multiple selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selected",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "nothing_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rmb_clicked",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "at_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ICON_MODE_TOP",
          "value": "0",
          "enum": "IconMode",
          "description": ""
        },
        {
          "name": "ICON_MODE_LEFT",
          "value": "1",
          "enum": "IconMode",
          "description": ""
        },
        {
          "name": "SELECT_SINGLE",
          "value": "0",
          "enum": "SelectMode",
          "description": ""
        },
        {
          "name": "SELECT_MULTI",
          "value": "1",
          "enum": "SelectMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "allow_rmb_select",
          "type": "bool",
          "setter": "set_allow_rmb_select",
          "getter": "get_allow_rmb_select",
          "description": ""
        },
        {
          "name": "auto_height",
          "type": "bool",
          "setter": "set_auto_height",
          "getter": "has_auto_height",
          "description": ""
        },
        {
          "name": "fixed_column_width",
          "type": "int",
          "setter": "set_fixed_column_width",
          "getter": "get_fixed_column_width",
          "description": ""
        },
        {
          "name": "fixed_icon_size",
          "type": "Vector2",
          "setter": "set_fixed_icon_size",
          "getter": "get_fixed_icon_size",
          "description": ""
        },
        {
          "name": "icon_mode",
          "type": "int",
          "setter": "set_icon_mode",
          "getter": "get_icon_mode",
          "enum": "ItemList.IconMode",
          "description": ""
        },
        {
          "name": "icon_scale",
          "type": "float",
          "setter": "set_icon_scale",
          "getter": "get_icon_scale",
          "description": ""
        },
        {
          "name": "max_columns",
          "type": "int",
          "setter": "set_max_columns",
          "getter": "get_max_columns",
          "description": ""
        },
        {
          "name": "max_text_lines",
          "type": "int",
          "setter": "set_max_text_lines",
          "getter": "get_max_text_lines",
          "description": ""
        },
        {
          "name": "same_column_width",
          "type": "bool",
          "setter": "set_same_column_width",
          "getter": "is_same_column_width",
          "description": ""
        },
        {
          "name": "select_mode",
          "type": "int",
          "setter": "set_select_mode",
          "getter": "get_select_mode",
          "enum": "ItemList.SelectMode",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "bg_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "cursor",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "cursor_unfocused",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "guide_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "icon_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "line_separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "selected",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selected_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "VideoStreamWebm": {
      "name": "VideoStreamWebm",
      "inherits": "VideoStream",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_file",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_file",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Font": {
      "name": "Font",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Internationalized font and text drawing support.",
      "description": "Font contains a unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. TODO check wikipedia for graph of ascent/baseline/descent/height/etc.",
      "methods": [
        {
          "name": "draw",
          "qualifiers": "const",
          "description": "Draw \"string\" into a canvas item using the font at a given position, with \"modulate\" color, and optionally clipping the width. \"position\" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "string",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "clip_w",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "draw_char",
          "qualifiers": "const",
          "description": "Draw character \"char\" into a canvas item using the font at a given position, with \"modulate\" color, and optionally kerning if \"next\" is passed. clipping the width. \"position\" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "char",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "next",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "4",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            }
          ]
        },
        {
          "name": "get_ascent",
          "qualifiers": "const",
          "description": "Return the font ascent (number of pixels above the baseline).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_descent",
          "qualifiers": "const",
          "description": "Return the font descent (number of pixels below the baseline).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the total font height (ascent plus descent) in pixels.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_string_size",
          "qualifiers": "const",
          "description": "Return the size of a string, taking kerning and advance into account.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_distance_field_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "update_changes",
          "description": "After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PlaneShape": {
      "name": "PlaneShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "plane",
          "type": "Plane",
          "setter": "set_plane",
          "getter": "get_plane",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ResourceImporterWebm": {
      "name": "ResourceImporterWebm",
      "inherits": "ResourceImporter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectFilter": {
      "name": "AudioEffectFilter",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a filter to the Audio Bus.",
      "description": "Allows frequencies other than the [member cutoff_hz] to pass.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "FILTER_6DB",
          "value": "0",
          "enum": "FilterDB",
          "description": ""
        },
        {
          "name": "FILTER_12DB",
          "value": "1",
          "enum": "FilterDB",
          "description": ""
        },
        {
          "name": "FILTER_18DB",
          "value": "2",
          "enum": "FilterDB",
          "description": ""
        },
        {
          "name": "FILTER_24DB",
          "value": "3",
          "enum": "FilterDB",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "cutoff_hz",
          "type": "float",
          "setter": "set_cutoff",
          "getter": "get_cutoff",
          "description": "Threshold frequency for the filter."
        },
        {
          "name": "db",
          "type": "int",
          "setter": "set_db",
          "getter": "get_db",
          "enum": "AudioEffectFilter.FilterDB",
          "description": ""
        },
        {
          "name": "gain",
          "type": "float",
          "setter": "set_gain",
          "getter": "get_gain",
          "description": "Gain amount of the frequencies after the filter."
        },
        {
          "name": "resonance",
          "type": "float",
          "setter": "set_resonance",
          "getter": "get_resonance",
          "description": "Amount of boost in the overtones near the cutoff frequency."
        }
      ],
      "theme_properties": []
    },
    "RayShape": {
      "name": "RayShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Ray shape for 3D collisions.",
      "description": "Ray shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "length",
          "type": "float",
          "setter": "set_length",
          "getter": "get_length",
          "description": "The ray's length."
        }
      ],
      "theme_properties": []
    },
    "KinematicCollision": {
      "name": "KinematicCollision",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Collision data for KinematicBody collisions.",
      "description": "Contains collision data for KinematicBody collisions. When a [KinematicBody] is moved using [method KinematicBody.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision object is returned.\n\t\tThis object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collider",
          "type": "Object",
          "setter": "",
          "getter": "get_collider",
          "description": "The colliding body."
        },
        {
          "name": "collider_id",
          "type": "int",
          "setter": "",
          "getter": "get_collider_id",
          "description": "The colliding body's unique [RID]."
        },
        {
          "name": "collider_metadata",
          "type": "Variant",
          "setter": "",
          "getter": "get_collider_metadata",
          "description": "The colliding body's metadata. See [Object]."
        },
        {
          "name": "collider_shape",
          "type": "Object",
          "setter": "",
          "getter": "get_collider_shape",
          "description": "The colliding body's shape."
        },
        {
          "name": "collider_shape_index",
          "type": "int",
          "setter": "",
          "getter": "get_collider_shape_index",
          "description": "The colliding shape's index. See [CollisionObject]."
        },
        {
          "name": "collider_velocity",
          "type": "Vector3",
          "setter": "",
          "getter": "get_collider_velocity",
          "description": "The colliding object's velocity."
        },
        {
          "name": "local_shape",
          "type": "Object",
          "setter": "",
          "getter": "get_local_shape",
          "description": "The moving object's colliding shape."
        },
        {
          "name": "normal",
          "type": "Vector3",
          "setter": "",
          "getter": "get_normal",
          "description": "The colliding body's shape's normal at the point of collision."
        },
        {
          "name": "position",
          "type": "Vector3",
          "setter": "",
          "getter": "get_position",
          "description": "The point of collision."
        },
        {
          "name": "remainder",
          "type": "Vector3",
          "setter": "",
          "getter": "get_remainder",
          "description": "The moving object's remaining movement vector."
        },
        {
          "name": "travel",
          "type": "Vector3",
          "setter": "",
          "getter": "get_travel",
          "description": "The distance the moving object traveled before collision."
        }
      ],
      "theme_properties": []
    },
    "EncodedObjectAsID": {
      "name": "EncodedObjectAsID",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_object_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_object_id",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptComment": {
      "name": "VisualScriptComment",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A Visual Script node used to annotate the script.",
      "description": "A Visual Script node used to display annotations in the script, so that code may be documented.\n\t\tComment nodes can be resized so they encompass a group of nodes.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "description",
          "type": "String",
          "setter": "set_description",
          "getter": "get_description",
          "description": "The text inside the comment node."
        },
        {
          "name": "size",
          "type": "Vector2",
          "setter": "set_size",
          "getter": "get_size",
          "description": "The comment node's size (in pixels)."
        },
        {
          "name": "title",
          "type": "String",
          "setter": "set_title",
          "getter": "get_title",
          "description": "The comment node's title."
        }
      ],
      "theme_properties": []
    },
    "EditorResourcePreviewGenerator": {
      "name": "EditorResourcePreviewGenerator",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Custom generator of previews.",
      "description": "Custom code to generate previews. Please check \"file_dialog/thumbnail_size\" in EditorSettings to find out the right size to do previews at.",
      "methods": [
        {
          "name": "generate",
          "qualifiers": "virtual",
          "description": "Generate a preview from a given resource. This must be always implemented.\n\t\t\tReturning an empty texture is an OK way to fail and let another generator take care.\n\t\t\tCare must be taken because this function is always called from a thread (not the main thread).",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generate_from_path",
          "qualifiers": "virtual",
          "description": "Generate a preview directly from a path, implementing this is optional, as default code will load and call generate()\n\t\t\tReturning an empty texture is an OK way to fail and let another generator take care.\n\t\t\tCare must be taken because this function is always called from a thread (not the main thread).",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "handles",
          "qualifiers": "virtual",
          "description": "Return if your generator supports this resource type.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ColorRect": {
      "name": "ColorRect",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Colored rect for canvas.",
      "description": "An object that is represented on the canvas as a rect with color. [Color] is used to set or get color info for the rect.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_frame_color",
          "getter": "get_frame_color",
          "description": "The color to fill the [code]ColorRect[/code].\n\t\t\t[codeblock]\n\t\t\t$ColorRect.color = Color(1, 0, 0, 1) # Set ColorRect node's color to red\n\t\t\t[/codeblock]"
        }
      ],
      "theme_properties": []
    },
    "File": {
      "name": "File",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Type to handle file reading and writing operations.",
      "description": "File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.\n\t\tHere's a sample on how to write and read from a file:\n\t\t[codeblock]\n\t\tfunc save(content):\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", file.WRITE)\n\t\t    file.store_string(content)\n\t\t    file.close()\n\n\t\tfunc load():\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", file.READ)\n\t\t    var content = file.get_as_text()\n\t\t    file.close()\n\t\t    return content\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "close",
          "description": "Closes the currently opened file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "eof_reached",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the file cursor has reached the end of the file.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "file_exists",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the file exists in the given path.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_16",
          "qualifiers": "const",
          "description": "Returns the next 16 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_32",
          "qualifiers": "const",
          "description": "Returns the next 32 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_64",
          "qualifiers": "const",
          "description": "Returns the next 64 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_8",
          "qualifiers": "const",
          "description": "Returns the next 8 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_as_text",
          "qualifiers": "const",
          "description": "Returns the whole file as a [String].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_buffer",
          "qualifiers": "const",
          "description": "Returns next [code]len[/code] bytes of the file as a [PoolByteArray].",
          "return_type": "PoolByteArray",
          "arguments": [
            {
              "index": "0",
              "name": "len",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_csv_line",
          "qualifiers": "const",
          "description": "Returns the next value of the file in CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default \",\" (comma).",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "delim",
              "type": "String",
              "default_value": "\",\""
            }
          ]
        },
        {
          "name": "get_double",
          "qualifiers": "const",
          "description": "Returns the next 64 bits from the file as a floating point number.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_error",
          "qualifiers": "const",
          "description": "Returns the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [@GlobalScope].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_float",
          "qualifiers": "const",
          "description": "Returns the next 32 bits from the file as a floating point number.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_len",
          "qualifiers": "const",
          "description": "Returns the size of the file in bytes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_line",
          "qualifiers": "const",
          "description": "Returns the next line of the file as a [String].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_md5",
          "qualifiers": "const",
          "description": "Returns an MD5 String representing the file at the given path or an empty [String] on failure.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_modified_time",
          "qualifiers": "const",
          "description": "Returns the last time the [code]file[/code] was modified in unix timestamp format or returns a [String] \"ERROR IN [code]file[/code]\". This unix timestamp can be converted to datetime by using [method OS.get_datetime_from_unix_time].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pascal_string",
          "description": "Returns a [String] saved in Pascal format from the file.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "Returns the file cursor's position.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_real",
          "qualifiers": "const",
          "description": "Returns the next bits from the file as a floating point number.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sha256",
          "qualifiers": "const",
          "description": "Returns a SHA-256 [String] representing the file at the given path or an empty [String] on failure.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_var",
          "qualifiers": "const",
          "description": "Returns the next [Variant] value from the file.",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "is_open",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the file is currently opened.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "open",
          "description": "Opens the file for writing or reading, depending on the flags.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_compressed",
          "description": "Opens a compressed file for reading or writing. Use COMPRESSION_* constants to set [code]compression_mode[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "compression_mode",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "open_encrypted",
          "description": "Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "key",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_encrypted_with_pass",
          "description": "Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "pass",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek",
          "description": "Change the file reading/writing cursor to the specified position (in bytes from the beginning of the file).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek_end",
          "description": "Changes the file reading/writing cursor to the specified position (in bytes from the end of the file). Note that this is an offset, so you should use negative numbers or the cursor will be at the end of the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "store_16",
          "description": "Stores an integer as 16 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_32",
          "description": "Stores an integer as 32 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_64",
          "description": "Stores an integer as 64 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_8",
          "description": "Stores an integer as 8 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_buffer",
          "description": "Stores the given array of bytes in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_double",
          "description": "Stores a floating point number as 64 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_float",
          "description": "Stores a floating point number as 32 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_line",
          "description": "Stores the given [String] as a line in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_pascal_string",
          "description": "Stores the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_real",
          "description": "Stores a floating point number in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_string",
          "description": "Stores the given [String] in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_var",
          "description": "Stores any Variant value in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "READ",
          "value": "1",
          "enum": "ModeFlags",
          "description": "Opens the file for read operations."
        },
        {
          "name": "WRITE",
          "value": "2",
          "enum": "ModeFlags",
          "description": "Opens the file for write operations. Create it if the file does not exist and truncate if it exists."
        },
        {
          "name": "READ_WRITE",
          "value": "3",
          "enum": "ModeFlags",
          "description": "Opens the file for read and write operations. Does not truncate the file."
        },
        {
          "name": "WRITE_READ",
          "value": "7",
          "enum": "ModeFlags",
          "description": "Opens the file for read and write operations. Create it if the file does not exist and truncate if it exists."
        },
        {
          "name": "COMPRESSION_FASTLZ",
          "value": "0",
          "enum": "CompressionMode",
          "description": "Uses the FastLZ compression method."
        },
        {
          "name": "COMPRESSION_DEFLATE",
          "value": "1",
          "enum": "CompressionMode",
          "description": "Uses the Deflate compression method."
        },
        {
          "name": "COMPRESSION_ZSTD",
          "value": "2",
          "enum": "CompressionMode",
          "description": "Uses the Zstd compression method."
        },
        {
          "name": "COMPRESSION_GZIP",
          "value": "3",
          "enum": "CompressionMode",
          "description": "Uses the gzip compression method."
        }
      ],
      "properties": [
        {
          "name": "endian_swap",
          "type": "bool",
          "setter": "set_endian_swap",
          "getter": "get_endian_swap",
          "description": "If [code]true[/code] the file's endianness is swapped. Use this if you're dealing with files written in big endian machines.\n\t\t\tNote that this is about the file format, not CPU type. This is always reseted to [code]false[/code] whenever you open the file."
        }
      ],
      "theme_properties": []
    },
    "NavigationMesh": {
      "name": "NavigationMesh",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_polygon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_polygons",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_from_mesh",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_polygon",
          "description": "",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_polygon_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertices",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector3Array",
          "arguments": []
        },
        {
          "name": "set_vertices",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertices",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SAMPLE_PARTITION_WATERSHED",
          "value": "0",
          "description": ""
        },
        {
          "name": "SAMPLE_PARTITION_MONOTONE",
          "value": "1",
          "description": ""
        },
        {
          "name": "SAMPLE_PARTITION_LAYERS",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "agent/height",
          "type": "float",
          "setter": "set_agent_height",
          "getter": "get_agent_height",
          "description": ""
        },
        {
          "name": "agent/max_climb",
          "type": "float",
          "setter": "set_agent_max_climb",
          "getter": "get_agent_max_climb",
          "description": ""
        },
        {
          "name": "agent/max_slope",
          "type": "float",
          "setter": "set_agent_max_slope",
          "getter": "get_agent_max_slope",
          "description": ""
        },
        {
          "name": "agent/radius",
          "type": "float",
          "setter": "set_agent_radius",
          "getter": "get_agent_radius",
          "description": ""
        },
        {
          "name": "cell/height",
          "type": "float",
          "setter": "set_cell_height",
          "getter": "get_cell_height",
          "description": ""
        },
        {
          "name": "cell/size",
          "type": "float",
          "setter": "set_cell_size",
          "getter": "get_cell_size",
          "description": ""
        },
        {
          "name": "detail/sample_distance",
          "type": "float",
          "setter": "set_detail_sample_distance",
          "getter": "get_detail_sample_distance",
          "description": ""
        },
        {
          "name": "detail/sample_max_error",
          "type": "float",
          "setter": "set_detail_sample_max_error",
          "getter": "get_detail_sample_max_error",
          "description": ""
        },
        {
          "name": "edge/max_error",
          "type": "float",
          "setter": "set_edge_max_error",
          "getter": "get_edge_max_error",
          "description": ""
        },
        {
          "name": "edge/max_length",
          "type": "float",
          "setter": "set_edge_max_length",
          "getter": "get_edge_max_length",
          "description": ""
        },
        {
          "name": "filter/filter_walkable_low_height_spans",
          "type": "bool",
          "setter": "set_filter_walkable_low_height_spans",
          "getter": "get_filter_walkable_low_height_spans",
          "description": ""
        },
        {
          "name": "filter/ledge_spans",
          "type": "bool",
          "setter": "set_filter_ledge_spans",
          "getter": "get_filter_ledge_spans",
          "description": ""
        },
        {
          "name": "filter/low_hanging_obstacles",
          "type": "bool",
          "setter": "set_filter_low_hanging_obstacles",
          "getter": "get_filter_low_hanging_obstacles",
          "description": ""
        },
        {
          "name": "polygon/verts_per_poly",
          "type": "float",
          "setter": "set_verts_per_poly",
          "getter": "get_verts_per_poly",
          "description": ""
        },
        {
          "name": "region/merge_size",
          "type": "float",
          "setter": "set_region_merge_size",
          "getter": "get_region_merge_size",
          "description": ""
        },
        {
          "name": "region/min_size",
          "type": "float",
          "setter": "set_region_min_size",
          "getter": "get_region_min_size",
          "description": ""
        },
        {
          "name": "sample_partition_type/sample_partition_type",
          "type": "int",
          "setter": "set_sample_partition_type",
          "getter": "get_sample_partition_type",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "StreamPeer": {
      "name": "StreamPeer",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Abstraction and base class for stream-based protocols.",
      "description": "StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or Unix Sockets). It provides an API for sending and receiving data through streams as raw data or strings.",
      "methods": [
        {
          "name": "get_16",
          "description": "Get a signed 16 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_32",
          "description": "Get a signed 32 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_64",
          "description": "Get a signed 64 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_8",
          "description": "Get a signed byte from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_available_bytes",
          "qualifiers": "const",
          "description": "Return the amount of bytes this [code]StreamPeer[/code] has available.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_data",
          "description": "Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an Error code and a data array.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_double",
          "description": "Get a double-precision float from the stream.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_float",
          "description": "Get a single-precision float from the stream.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_partial_data",
          "description": "Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an Error code, and a data array.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_string",
          "description": "Get a string with byte-length \"bytes\" from the stream.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_u16",
          "description": "Get an unsigned 16 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_u32",
          "description": "Get an unsigned 32 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_u64",
          "description": "Get an unsigned 64 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_u8",
          "description": "Get an unsigned byte from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_utf8_string",
          "description": "Get a utf8 string with byte-length \"bytes\" from the stream (this decodes the string sent as utf8).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_var",
          "description": "Get a Variant from the stream.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "put_16",
          "description": "Put a signed 16 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_32",
          "description": "Put a signed 32 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_64",
          "description": "Put a signed 64 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_8",
          "description": "Put a signed byte into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_data",
          "description": "Send a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an Error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_double",
          "description": "Put a double-precision float into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_float",
          "description": "Put a single-precision float into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_partial_data",
          "description": "Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an Error code and an integer, describing how much data was actually sent.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u16",
          "description": "Put an unsigned 16 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u32",
          "description": "Put an unsigned 32 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u64",
          "description": "Put an unsigned 64 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u8",
          "description": "Put an unsigned byte into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_utf8_string",
          "description": "Put a zero-terminated utf8 string into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_var",
          "description": "Put a Variant into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "big_endian",
          "type": "bool",
          "setter": "set_big_endian",
          "getter": "is_big_endian_enabled",
          "description": "If [code]true[/code], this [code]StreamPeer[/code] will using big-endian format for encoding and decoding."
        }
      ],
      "theme_properties": []
    },
    "ProximityGroup": {
      "name": "ProximityGroup",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "General purpose proximity-detection node.",
      "description": "General purpose proximity-detection node.",
      "methods": [
        {
          "name": "broadcast",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parameters",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "broadcast",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parameters",
              "type": "Array",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MODE_PROXY",
          "value": "0",
          "enum": "DispatchMode",
          "description": ""
        },
        {
          "name": "MODE_SIGNAL",
          "value": "1",
          "enum": "DispatchMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "dispatch_mode",
          "type": "int",
          "setter": "set_dispatch_mode",
          "getter": "get_dispatch_mode",
          "enum": "ProximityGroup.DispatchMode",
          "description": ""
        },
        {
          "name": "grid_radius",
          "type": "Vector3",
          "setter": "set_grid_radius",
          "getter": "get_grid_radius",
          "description": ""
        },
        {
          "name": "group_name",
          "type": "String",
          "setter": "set_group_name",
          "getter": "get_group_name",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Vector3": {
      "name": "Vector3",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Vector class, which performs basic 3D vector math operations.",
      "description": "Vector3 is one of the core classes of the engine, and includes several built-in helper functions to perform basic vector math operations.",
      "methods": [
        {
          "name": "Vector3",
          "description": "Returns a Vector3 with the given components.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "Returns a new vector with all components in absolute values (i.e. positive).",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "angle_to",
          "description": "Returns the vector's minimum angle to the vector [code]to[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bounce",
          "description": "Bounce returns the vector \"bounced off\" from the given plane, specified by its normal vector.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ceil",
          "description": "Returns a new vector with all components rounded up.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "cross",
          "description": "Returns the cross product with [code]b[/code].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubic_interpolate",
          "description": "Performs a cubic interpolation between vectors [code]pre_a[/code], [code]a[/code], [code]b[/code], [code]post_b[/code] ([code]a[/code] is current), by the given amount (t). (t) should be a float of 0.0-1.0, a percentage of how far along the interpolation is.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pre_a",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "post_b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_squared_to",
          "description": "Returns the squared distance to [code]b[/code]. Prefer this function over distance_to if you need to sort vectors or need the squared distance for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_to",
          "description": "Returns the distance to b.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dot",
          "description": "Returns the dot product with b.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "floor",
          "description": "Returns a new vector with all components rounded down.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the vector. This is the same as Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z )",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_normalized",
          "description": "Returns whether the vector is normalized or not.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length",
          "description": "Returns the length of the vector.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length_squared",
          "description": "Returns the length of the vector, squared. Prefer this function over \"length\" if you need to sort vectors or need the squared length for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "linear_interpolate",
          "description": "Linearly interpolates the vector to a given one (b), by the given amount (t). (t) should be a float of 0.0-1.0, a percentage of how far along the interpolation is.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "max_axis",
          "description": "Returns AXIS_X, AXIS_Y or AXIS_Z depending on which axis is the largest.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "min_axis",
          "description": "Returns AXIS_X, AXIS_Y or AXIS_Z depending on which axis is the smallest.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "normalized",
          "description": "Returns a copy of the normalized vector to unit length. This is the same as v / v.length().",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "outer",
          "description": "Returns the outer product with b.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reflect",
          "description": "Reflects the vector along the given plane, specified by its normal vector.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotated",
          "description": "Rotates the vector around some axis by phi radians. The axis must be a normalized vector.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slide",
          "description": "Slide returns the component of the vector along the given plane, specified by its normal vector.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "snapped",
          "description": "Returns a copy of the vector, snapped to the lowest neared multiple.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_diagonal_matrix",
          "description": "Returns a diagonal matrix with the vector as main diagonal.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "AXIS_X",
          "value": "0",
          "description": "Enumerated value for the X axis. Returned by functions like max_axis or min_axis."
        },
        {
          "name": "AXIS_Y",
          "value": "1",
          "description": "Enumerated value for the Y axis."
        },
        {
          "name": "AXIS_Z",
          "value": "2",
          "description": "Enumerated value for the Z axis."
        }
      ],
      "properties": [
        {
          "name": "x",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "X component of the vector."
        },
        {
          "name": "y",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Y component of the vector."
        },
        {
          "name": "z",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Z component of the vector."
        }
      ],
      "theme_properties": []
    },
    "PrimitiveMesh": {
      "name": "PrimitiveMesh",
      "inherits": "Mesh",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.",
      "description": "Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.",
      "methods": [
        {
          "name": "get_mesh_arrays",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "material",
          "type": "Material",
          "setter": "set_material",
          "getter": "get_material",
          "description": "The current [Material] of the primitive mesh."
        }
      ],
      "theme_properties": []
    },
    "Node2D": {
      "name": "Node2D",
      "inherits": "CanvasItem",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A 2D game object, parent of all 2D related nodes. Has a position, rotation, scale and Z-index.",
      "description": "A 2D game object, with a position, rotation and scale. All 2D physics nodes and sprites inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control on the node's render order.",
      "methods": [
        {
          "name": "apply_scale",
          "description": "Multiplies the current scale by the 'ratio' vector.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_angle_to",
          "qualifiers": "const",
          "description": "Returns the angle between the node and the 'point' in radians.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_relative_transform_to_parent",
          "qualifiers": "const",
          "description": "Returns the [Transform2D] relative to this node's parent.",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "parent",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "global_translate",
          "description": "Adds the 'offset' vector to the node's global position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "look_at",
          "description": "Rotates the node so it points towards the 'point'.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_local_x",
          "description": "Applies a local translation on the node's X axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is false, normalizes the movement.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scaled",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "move_local_y",
          "description": "Applies a local translation on the node's Y axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is false, normalizes the movement.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scaled",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "rotate",
          "description": "Applies a rotation to the node, in radians, starting from its current rotation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_global",
          "qualifiers": "const",
          "description": "Converts a local point's coordinates to global coordinates.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "local_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_local",
          "qualifiers": "const",
          "description": "Converts a global point's coordinates to local coordinates.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "global_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translate",
          "description": "Translates the node by the given [code]offset[/code] in local coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "global_position",
          "type": "Vector2",
          "setter": "set_global_position",
          "getter": "get_global_position",
          "description": "Global position."
        },
        {
          "name": "global_rotation",
          "type": "float",
          "setter": "set_global_rotation",
          "getter": "get_global_rotation",
          "description": "Global rotation in radians."
        },
        {
          "name": "global_rotation_degrees",
          "type": "float",
          "setter": "set_global_rotation_degrees",
          "getter": "get_global_rotation_degrees",
          "description": "Global rotation in degrees."
        },
        {
          "name": "global_scale",
          "type": "Vector2",
          "setter": "set_global_scale",
          "getter": "get_global_scale",
          "description": "Global scale."
        },
        {
          "name": "global_transform",
          "type": "Transform2D",
          "setter": "set_global_transform",
          "getter": "get_global_transform",
          "description": "Global [Transform2D]."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "Position, relative to the node's parent."
        },
        {
          "name": "rotation",
          "type": "float",
          "setter": "set_rotation",
          "getter": "get_rotation",
          "description": "Rotation in radians, relative to the node's parent."
        },
        {
          "name": "rotation_degrees",
          "type": "float",
          "setter": "set_rotation_degrees",
          "getter": "get_rotation_degrees",
          "description": "Rotation in degrees, relative to the node's parent."
        },
        {
          "name": "scale",
          "type": "Vector2",
          "setter": "set_scale",
          "getter": "get_scale",
          "description": "The node's scale. Unscaled value: [code](1, 1)[/code]"
        },
        {
          "name": "transform",
          "type": "Transform2D",
          "setter": "set_transform",
          "getter": "get_transform",
          "description": "Local [Transform2D]."
        },
        {
          "name": "z_as_relative",
          "type": "bool",
          "setter": "set_z_as_relative",
          "getter": "is_z_relative",
          "description": "If [code]true[/code] the node's Z-index is relative to its parent's Z-index. If this node's Z-index is 2 and its parent's effective Z-index is 3, then this node's effective Z-index will be 2 + 3 = 5."
        },
        {
          "name": "z_index",
          "type": "int",
          "setter": "set_z_index",
          "getter": "get_z_index",
          "description": "Z-index. Controls the order in which the nodes render. A node with a higher Z-index will display in front of others."
        }
      ],
      "theme_properties": []
    },
    "StyleBoxEmpty": {
      "name": "StyleBoxEmpty",
      "inherits": "StyleBox",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Empty stylebox (does not display anything).",
      "description": "Empty stylebox (really does not display anything).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventGesture": {
      "name": "InputEventGesture",
      "inherits": "InputEventWithModifiers",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Vector2": {
      "name": "Vector2",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Vector used for 2D Math.",
      "description": "2-element structure that can be used to represent positions in 2d-space, or any other pair of numeric values.",
      "methods": [
        {
          "name": "Vector2",
          "description": "Constructs a new Vector2 from the given x and y.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "Returns a new vector with all components in absolute values (i.e. positive).",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "angle",
          "description": "Returns the result of atan2 when called with the Vector's x and y as parameters (Math::atan2(x,y)).\n\t\t\t\tBe aware that it therefore returns an angle oriented clockwise with regard to the (0, 1) unit vector, and not an angle oriented counter-clockwise with regard to the (1, 0) unit vector (which would be the typical trigonometric representation of the angle when calling Math::atan2(y,x)).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "angle_to",
          "description": "Returns the angle in radians between the two vectors.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "angle_to_point",
          "description": "Returns the angle in radians between the line connecting the two points and the x coordinate.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "aspect",
          "description": "Returns the ratio of X to Y.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "bounce",
          "description": "Bounce returns the vector \"bounced off\" from the given plane, specified by its normal vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clamped",
          "description": "Returns the vector with a maximum length.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubic_interpolate",
          "description": "Cubicly interpolates between this Vector and \"b\", using \"pre_a\" and \"post_b\" as handles, and returning the result at position \"t\". \"t\" should be a float of 0.0-1.0, a percentage of how far along the interpolation is.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pre_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "post_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_squared_to",
          "description": "Returns the squared distance to vector \"b\". Prefer this function over \"distance_to\" if you need to sort vectors or need the squared distance for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_to",
          "description": "Returns the distance to vector \"b\".",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dot",
          "description": "Returns the dot product with vector \"b\".",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "floor",
          "description": "Remove the fractional part of x and y.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_normalized",
          "description": "Returns whether the vector is normalized or not.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length",
          "description": "Returns the length of the vector.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length_squared",
          "description": "Returns the squared length of the vector. Prefer this function over \"length\" if you need to sort vectors or need the squared length for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "linear_interpolate",
          "description": "Returns the result of the linear interpolation between this vector and \"b\", by amount \"t\". \"t\" should be a float of 0.0-1.0, a percentage of how far along the interpolation is.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "normalized",
          "description": "Returns a normalized vector to unit length.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reflect",
          "description": "Reflects the vector along the given plane, specified by its normal vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotated",
          "description": "Rotates the vector by \"phi\" radians.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slide",
          "description": "Slide returns the component of the vector along the given plane, specified by its normal vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "snapped",
          "description": "Snaps the vector to a grid with the given size.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tangent",
          "description": "Returns a perpendicular vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "x",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "X component of the vector."
        },
        {
          "name": "y",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Y component of the vector."
        }
      ],
      "theme_properties": []
    },
    "PanoramaSky": {
      "name": "PanoramaSky",
      "inherits": "Sky",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "panorama",
          "type": "Texture",
          "setter": "set_panorama",
          "getter": "get_panorama",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "HScrollBar": {
      "name": "HScrollBar",
      "inherits": "ScrollBar",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Horizontal scroll bar.",
      "description": "Horizontal scroll bar. See [ScrollBar]. This one goes from left (min) to right (max).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "scroll",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "scroll_focus",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "StyleBox": {
      "name": "StyleBox",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for drawing stylized boxes for the UI.",
      "description": "StyleBox is [Resource] that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.",
      "methods": [
        {
          "name": "draw",
          "qualifiers": "const",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_center_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "Return the offset of margin \"margin\" (see MARGIN_* enum).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_minimum_size",
          "qualifiers": "const",
          "description": "Return the minimum size that this stylebox can be shrunk to.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the \"offset\" of a stylebox, this is a helper function, like writing [code]Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))[/code].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "test_mask",
          "qualifiers": "const",
          "description": "Test a position in a rectangle, return whether it passes the mask test.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "content_margin_bottom",
          "type": "float",
          "setter": "set_default_margin",
          "getter": "get_default_margin",
          "description": ""
        },
        {
          "name": "content_margin_left",
          "type": "float",
          "setter": "set_default_margin",
          "getter": "get_default_margin",
          "description": ""
        },
        {
          "name": "content_margin_right",
          "type": "float",
          "setter": "set_default_margin",
          "getter": "get_default_margin",
          "description": ""
        },
        {
          "name": "content_margin_top",
          "type": "float",
          "setter": "set_default_margin",
          "getter": "get_default_margin",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Dictionary": {
      "name": "Dictionary",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Dictionary type.",
      "description": "Dictionary type. Associative container which contains values referenced by unique keys. Dictionaries are always passed by reference.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear the dictionary, removing all key/value pairs.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "duplicate",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "empty",
          "description": "Return true if the dictionary is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "erase",
          "description": "Erase a dictionary key/value pair by key.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has",
          "description": "Return true if the dictionary has a given key.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_all",
          "description": "Return true if the dictionary has all of the keys in the given array.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keys",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hash",
          "description": "Return a hashed integer value representing the dictionary contents.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "keys",
          "description": "Return the list of keys in the [code]Dictionary[/code].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "size",
          "description": "Return the size of the dictionary (in pairs).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "values",
          "description": "Return the list of values in the [code]Dictionary[/code].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ProjectSettings": {
      "name": "ProjectSettings",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Contains global variables accessible from everywhere.",
      "description": "Contains global variables accessible from everywhere. Use \"ProjectSettings.get_setting(variable)\", \"ProjectSettings.set_setting(variable,value)\" or \"ProjectSettings.has_setting(variable)\" to access them. Variables stored in project.godot are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.",
      "methods": [
        {
          "name": "add_property_info",
          "description": "Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@GlobalScope]), and optionally hint:[int](see PROPERTY_HINT_* in [@GlobalScope]), hint_string:[String].\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tProjectSettings.set(\"category/property_name\", 0)\n\n\t\t\t\tvar property_info = {\n\t\t\t\t    \"name\": \"category/property_name\",\n\t\t\t\t    \"type\": TYPE_INT,\n\t\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t\t}\n\n\t\t\t\tProjectSettings.add_property_info(property_info)\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hint",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the whole configuration (not recommended, may break things).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_order",
          "qualifiers": "const",
          "description": "Return the order of a configuration value (influences when saved to the config file).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_setting",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "globalize_path",
          "qualifiers": "const",
          "description": "Convert a localized path (res://) to a full native OS path.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_setting",
          "qualifiers": "const",
          "description": "Return true if a configuration value is present.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load_resource_pack",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pack",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "localize_path",
          "qualifiers": "const",
          "description": "Convert a path to a localized path (res:// path).",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "property_can_revert",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "property_get_revert",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "save_custom",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_initial_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_order",
          "description": "Set the order of a configuration value (influences when saved to the config file).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_setting",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventScreenTouch": {
      "name": "InputEventScreenTouch",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Input event type for screen touch events.\n\t\t(only available on mobile devices)",
      "description": "Stores multi-touch press/release information. Supports touch press, touch release and [member index] for multi-touch count and order.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "index",
          "type": "int",
          "setter": "set_index",
          "getter": "get_index",
          "description": "Touch index in the case of a multi-touch event. One index = one finger."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "Touch position."
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "If [code]true[/code] the touch's state is pressed. If [code]false[/code] the touch's state is released."
        }
      ],
      "theme_properties": []
    },
    "IP": {
      "name": "IP",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Internet protocol (IP) support functions like DNS resolution.",
      "description": "IP contains support functions for the Internet Protocol (IP). TCP/IP support is in different classes (see [StreamPeerTCP] and [TCP_Server]). IP provides DNS hostname resolution support, both blocking and threaded.",
      "methods": [
        {
          "name": "clear_cache",
          "description": "Removes all of a \"hostname\"'s cached references. If no \"hostname\" is given then all cached IP addresses are removed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hostname",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "erase_resolve_item",
          "description": "Removes a given item \"id\" from the queue. This should be used to free a queue after it has completed to enable more queries to happen.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_local_addresses",
          "qualifiers": "const",
          "description": "Returns all of the user's current IPv4 and IPv6 addresses as an array.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_resolve_item_address",
          "qualifiers": "const",
          "description": "Returns a queued hostname's IP address, given its queue \"id\". Returns an empty string on error or if resolution hasn't happened yet (see [method get_resolve_item_status]).",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resolve_item_status",
          "qualifiers": "const",
          "description": "Returns a queued hostname's status as a RESOLVER_STATUS_* constant, given its queue \"id\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resolve_hostname",
          "description": "Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the TYPE_* constant given as \"ip_type\".",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ip_type",
              "type": "int",
              "enum": "IP.Type",
              "default_value": "3"
            }
          ]
        },
        {
          "name": "resolve_hostname_queue_item",
          "description": "Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the TYPE_* constant given as \"ip_type\". Returns the queue ID if successful, or RESOLVER_INVALID_ID on error.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ip_type",
              "type": "int",
              "enum": "IP.Type",
              "default_value": "3"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "RESOLVER_STATUS_NONE",
          "value": "0",
          "enum": "ResolverStatus",
          "description": "DNS hostname resolver status: No status."
        },
        {
          "name": "RESOLVER_STATUS_WAITING",
          "value": "1",
          "enum": "ResolverStatus",
          "description": "DNS hostname resolver status: Waiting."
        },
        {
          "name": "RESOLVER_STATUS_DONE",
          "value": "2",
          "enum": "ResolverStatus",
          "description": "DNS hostname resolver status: Done."
        },
        {
          "name": "RESOLVER_STATUS_ERROR",
          "value": "3",
          "enum": "ResolverStatus",
          "description": "DNS hostname resolver status: Error."
        },
        {
          "name": "RESOLVER_MAX_QUERIES",
          "value": "32",
          "description": "Maximum number of concurrent DNS resolver queries allowed, [code]RESOLVER_INVALID_ID[/code] is returned if exceeded."
        },
        {
          "name": "RESOLVER_INVALID_ID",
          "value": "-1",
          "description": "Invalid ID constant. Returned if [code]RESOLVER_MAX_QUERIES[/code] is exceeded."
        },
        {
          "name": "TYPE_NONE",
          "value": "0",
          "enum": "Type",
          "description": "Address type: None."
        },
        {
          "name": "TYPE_IPV4",
          "value": "1",
          "enum": "Type",
          "description": "Address type: Internet protocol version 4 (IPv4)."
        },
        {
          "name": "TYPE_IPV6",
          "value": "2",
          "enum": "Type",
          "description": "Address type: Internet protocol version 6 (IPv6)."
        },
        {
          "name": "TYPE_ANY",
          "value": "3",
          "enum": "Type",
          "description": "Address type: Any."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Listener": {
      "name": "Listener",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear_current",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_listener_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "is_current",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_current",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorSelection": {
      "name": "EditorSelection",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Manages the SceneTree selection in the editor.",
      "description": "This object manages the SceneTree selection in the editor.",
      "methods": [
        {
          "name": "add_node",
          "description": "Add a node to the selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_selected_nodes",
          "description": "Get the list of selected nodes.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_transformable_selected_nodes",
          "description": "Get the list of selected nodes, optimized for transform operations (ie, moving them, rotating, etc). This list avoids situations where a node is selected and also chid/grandchild.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_node",
          "description": "Remove a node from the selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "selection_changed",
          "description": "Emitted when the selection changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventAction": {
      "name": "InputEventAction",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Input event type for actions.",
      "description": "Contains a generic action which can be targeted from several type of inputs. Actions can be created from the project settings menu [code]Project > Project Settings > Input Map[/code]. See [method Node._input].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "action",
          "type": "String",
          "setter": "set_action",
          "getter": "get_action",
          "description": "The action's name. Actions are accessed via this [String]."
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "If [code]true[/code] the action's state is pressed. If [code]false[/code] the action's state is released."
        }
      ],
      "theme_properties": []
    },
    "Plane": {
      "name": "Plane",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Plane in hessian form.",
      "description": "Plane represents a normalized plane equation. Basically, \"normal\" is the normal of the plane (a,b,c normalized), and \"d\" is the distance from the origin to the plane (in the direction of \"normal\"). \"Over\" or \"Above\" the plane is considered the side of the plane towards where the normal is pointing.",
      "methods": [
        {
          "name": "Plane",
          "description": "Creates a plane from the three parameters \"a\", \"b\", \"c\" and \"d\".",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "b",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "c",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "d",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Plane",
          "description": "Creates a plane from three points.",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "v2",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "v3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Plane",
          "description": "Creates a plane from the normal and the plane's distance to the origin.",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "d",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "center",
          "description": "Returns the center of the plane.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "distance_to",
          "description": "Returns the shortest distance from the plane to the position \"point\".",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_any_point",
          "description": "Returns a point on the plane.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "description": "Returns true if \"point\" is inside the plane (by a very minimum threshold).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "epsilon",
              "type": "float",
              "default_value": "0.00001"
            }
          ]
        },
        {
          "name": "intersect_3",
          "description": "Returns the intersection point of the three planes \"b\", \"c\" and this plane. If no intersection is found null is returned.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Plane",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "c",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_ray",
          "description": "Returns the intersection point of a ray consisting of the position \"from\" and the direction normal \"dir\" with this plane. If no intersection is found null is returned.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dir",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_segment",
          "description": "Returns the intersection point of a segment from position \"begin\" to position \"end\" with this plane. If no intersection is found null is returned.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "begin",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_point_over",
          "description": "Returns true if \"point\" is located above the plane.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "normalized",
          "description": "Returns a copy of the plane, normalized.",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "project",
          "description": "Returns the orthogonal projection of point \"p\" into a point in the plane.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "d",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "normal",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "x",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "z",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "@GlobalScope": {
      "name": "@GlobalScope",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Global scope constants and variables.",
      "description": "Global scope constants and variables. This is all that resides in the globals, constants regarding error codes, scancodes, property hints, etc. It's not much.\n\t\tSingletons are also documented here, since they can be accessed from anywhere.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "MARGIN_LEFT",
          "value": "0",
          "enum": "Margin",
          "description": "Left margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "MARGIN_TOP",
          "value": "1",
          "enum": "Margin",
          "description": "Top margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "MARGIN_RIGHT",
          "value": "2",
          "enum": "Margin",
          "description": "Right margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "MARGIN_BOTTOM",
          "value": "3",
          "enum": "Margin",
          "description": "Bottom margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "CORNER_TOP_LEFT",
          "value": "0",
          "enum": "Corner",
          "description": ""
        },
        {
          "name": "CORNER_TOP_RIGHT",
          "value": "1",
          "enum": "Corner",
          "description": ""
        },
        {
          "name": "CORNER_BOTTOM_RIGHT",
          "value": "2",
          "enum": "Corner",
          "description": ""
        },
        {
          "name": "CORNER_BOTTOM_LEFT",
          "value": "3",
          "enum": "Corner",
          "description": ""
        },
        {
          "name": "VERTICAL",
          "value": "1",
          "enum": "Orientation",
          "description": "General vertical alignment, used usually for [Separator], [ScrollBar], [Slider], etc."
        },
        {
          "name": "HORIZONTAL",
          "value": "0",
          "enum": "Orientation",
          "description": "General horizontal alignment, used usually for [Separator], [ScrollBar], [Slider], etc."
        },
        {
          "name": "HALIGN_LEFT",
          "value": "0",
          "enum": "HAlign",
          "description": "Horizontal left alignment, usually for text-derived classes."
        },
        {
          "name": "HALIGN_CENTER",
          "value": "1",
          "enum": "HAlign",
          "description": "Horizontal center alignment, usually for text-derived classes."
        },
        {
          "name": "HALIGN_RIGHT",
          "value": "2",
          "enum": "HAlign",
          "description": "Horizontal right alignment, usually for text-derived classes."
        },
        {
          "name": "VALIGN_TOP",
          "value": "0",
          "enum": "VAlign",
          "description": "Vertical top alignment, usually for text-derived classes."
        },
        {
          "name": "VALIGN_CENTER",
          "value": "1",
          "enum": "VAlign",
          "description": "Vertical center alignment, usually for text-derived classes."
        },
        {
          "name": "VALIGN_BOTTOM",
          "value": "2",
          "enum": "VAlign",
          "description": "Vertical bottom alignment, usually for text-derived classes."
        },
        {
          "name": "SPKEY",
          "value": "16777216",
          "description": "Scancodes with this bit applied are non printable."
        },
        {
          "name": "KEY_ESCAPE",
          "value": "16777217",
          "enum": "KeyList",
          "description": "Escape Key"
        },
        {
          "name": "KEY_TAB",
          "value": "16777218",
          "enum": "KeyList",
          "description": "Tab Key"
        },
        {
          "name": "KEY_BACKTAB",
          "value": "16777219",
          "enum": "KeyList",
          "description": "Shift-Tab Key"
        },
        {
          "name": "KEY_BACKSPACE",
          "value": "16777220",
          "enum": "KeyList",
          "description": "Backspace Key"
        },
        {
          "name": "KEY_ENTER",
          "value": "16777221",
          "enum": "KeyList",
          "description": "Return Key (On Main Keyboard)"
        },
        {
          "name": "KEY_KP_ENTER",
          "value": "16777222",
          "enum": "KeyList",
          "description": "Enter Key (On Numpad)"
        },
        {
          "name": "KEY_INSERT",
          "value": "16777223",
          "enum": "KeyList",
          "description": "Insert Key"
        },
        {
          "name": "KEY_DELETE",
          "value": "16777224",
          "enum": "KeyList",
          "description": "Delete Key"
        },
        {
          "name": "KEY_PAUSE",
          "value": "16777225",
          "enum": "KeyList",
          "description": "Pause Key"
        },
        {
          "name": "KEY_PRINT",
          "value": "16777226",
          "enum": "KeyList",
          "description": "Printscreen Key"
        },
        {
          "name": "KEY_SYSREQ",
          "value": "16777227",
          "enum": "KeyList",
          "description": "System Request Key"
        },
        {
          "name": "KEY_CLEAR",
          "value": "16777228",
          "enum": "KeyList",
          "description": "Clear Key"
        },
        {
          "name": "KEY_HOME",
          "value": "16777229",
          "enum": "KeyList",
          "description": "Home Key"
        },
        {
          "name": "KEY_END",
          "value": "16777230",
          "enum": "KeyList",
          "description": "End Key"
        },
        {
          "name": "KEY_LEFT",
          "value": "16777231",
          "enum": "KeyList",
          "description": "Left Arrow Key"
        },
        {
          "name": "KEY_UP",
          "value": "16777232",
          "enum": "KeyList",
          "description": "Up Arrow Key"
        },
        {
          "name": "KEY_RIGHT",
          "value": "16777233",
          "enum": "KeyList",
          "description": "Right Arrow Key"
        },
        {
          "name": "KEY_DOWN",
          "value": "16777234",
          "enum": "KeyList",
          "description": "Down Arrow Key"
        },
        {
          "name": "KEY_PAGEUP",
          "value": "16777235",
          "enum": "KeyList",
          "description": "Pageup Key"
        },
        {
          "name": "KEY_PAGEDOWN",
          "value": "16777236",
          "enum": "KeyList",
          "description": "Pagedown Key"
        },
        {
          "name": "KEY_SHIFT",
          "value": "16777237",
          "enum": "KeyList",
          "description": "Shift Key"
        },
        {
          "name": "KEY_CONTROL",
          "value": "16777238",
          "enum": "KeyList",
          "description": "Control Key"
        },
        {
          "name": "KEY_META",
          "value": "16777239",
          "enum": "KeyList",
          "description": "Meta Key"
        },
        {
          "name": "KEY_ALT",
          "value": "16777240",
          "enum": "KeyList",
          "description": "Alt Key"
        },
        {
          "name": "KEY_CAPSLOCK",
          "value": "16777241",
          "enum": "KeyList",
          "description": "Capslock Key"
        },
        {
          "name": "KEY_NUMLOCK",
          "value": "16777242",
          "enum": "KeyList",
          "description": "Numlock Key"
        },
        {
          "name": "KEY_SCROLLLOCK",
          "value": "16777243",
          "enum": "KeyList",
          "description": "Scrolllock Key"
        },
        {
          "name": "KEY_F1",
          "value": "16777244",
          "enum": "KeyList",
          "description": "F1 Key"
        },
        {
          "name": "KEY_F2",
          "value": "16777245",
          "enum": "KeyList",
          "description": "F2 Key"
        },
        {
          "name": "KEY_F3",
          "value": "16777246",
          "enum": "KeyList",
          "description": "F3 Key"
        },
        {
          "name": "KEY_F4",
          "value": "16777247",
          "enum": "KeyList",
          "description": "F4 Key"
        },
        {
          "name": "KEY_F5",
          "value": "16777248",
          "enum": "KeyList",
          "description": "F5 Key"
        },
        {
          "name": "KEY_F6",
          "value": "16777249",
          "enum": "KeyList",
          "description": "F6 Key"
        },
        {
          "name": "KEY_F7",
          "value": "16777250",
          "enum": "KeyList",
          "description": "F7 Key"
        },
        {
          "name": "KEY_F8",
          "value": "16777251",
          "enum": "KeyList",
          "description": "F8 Key"
        },
        {
          "name": "KEY_F9",
          "value": "16777252",
          "enum": "KeyList",
          "description": "F9 Key"
        },
        {
          "name": "KEY_F10",
          "value": "16777253",
          "enum": "KeyList",
          "description": "F10 Key"
        },
        {
          "name": "KEY_F11",
          "value": "16777254",
          "enum": "KeyList",
          "description": "F11 Key"
        },
        {
          "name": "KEY_F12",
          "value": "16777255",
          "enum": "KeyList",
          "description": "F12 Key"
        },
        {
          "name": "KEY_F13",
          "value": "16777256",
          "enum": "KeyList",
          "description": "F13 Key"
        },
        {
          "name": "KEY_F14",
          "value": "16777257",
          "enum": "KeyList",
          "description": "F14 Key"
        },
        {
          "name": "KEY_F15",
          "value": "16777258",
          "enum": "KeyList",
          "description": "F15 Key"
        },
        {
          "name": "KEY_F16",
          "value": "16777259",
          "enum": "KeyList",
          "description": "F16 Key"
        },
        {
          "name": "KEY_KP_MULTIPLY",
          "value": "16777345",
          "enum": "KeyList",
          "description": "Multiply Key on Numpad"
        },
        {
          "name": "KEY_KP_DIVIDE",
          "value": "16777346",
          "enum": "KeyList",
          "description": "Divide Key on Numpad"
        },
        {
          "name": "KEY_KP_SUBTRACT",
          "value": "16777347",
          "enum": "KeyList",
          "description": "Subtract Key on Numpad"
        },
        {
          "name": "KEY_KP_PERIOD",
          "value": "16777348",
          "enum": "KeyList",
          "description": "Period Key on Numpad"
        },
        {
          "name": "KEY_KP_ADD",
          "value": "16777349",
          "enum": "KeyList",
          "description": "Add Key on Numpad"
        },
        {
          "name": "KEY_KP_0",
          "value": "16777350",
          "enum": "KeyList",
          "description": "Number 0 on Numpad"
        },
        {
          "name": "KEY_KP_1",
          "value": "16777351",
          "enum": "KeyList",
          "description": "Number 1 on Numpad"
        },
        {
          "name": "KEY_KP_2",
          "value": "16777352",
          "enum": "KeyList",
          "description": "Number 2 on Numpad"
        },
        {
          "name": "KEY_KP_3",
          "value": "16777353",
          "enum": "KeyList",
          "description": "Number 3 on Numpad"
        },
        {
          "name": "KEY_KP_4",
          "value": "16777354",
          "enum": "KeyList",
          "description": "Number 4 on Numpad"
        },
        {
          "name": "KEY_KP_5",
          "value": "16777355",
          "enum": "KeyList",
          "description": "Number 5 on Numpad"
        },
        {
          "name": "KEY_KP_6",
          "value": "16777356",
          "enum": "KeyList",
          "description": "Number 6 on Numpad"
        },
        {
          "name": "KEY_KP_7",
          "value": "16777357",
          "enum": "KeyList",
          "description": "Number 7 on Numpad"
        },
        {
          "name": "KEY_KP_8",
          "value": "16777358",
          "enum": "KeyList",
          "description": "Number 8 on Numpad"
        },
        {
          "name": "KEY_KP_9",
          "value": "16777359",
          "enum": "KeyList",
          "description": "Number 9 on Numpad"
        },
        {
          "name": "KEY_SUPER_L",
          "value": "16777260",
          "enum": "KeyList",
          "description": "Left Super Key (Windows Key)"
        },
        {
          "name": "KEY_SUPER_R",
          "value": "16777261",
          "enum": "KeyList",
          "description": "Right Super Key (Windows Key)"
        },
        {
          "name": "KEY_MENU",
          "value": "16777262",
          "enum": "KeyList",
          "description": "Context menu key"
        },
        {
          "name": "KEY_HYPER_L",
          "value": "16777263",
          "enum": "KeyList",
          "description": "Left Hyper Key"
        },
        {
          "name": "KEY_HYPER_R",
          "value": "16777264",
          "enum": "KeyList",
          "description": "Right Hyper Key"
        },
        {
          "name": "KEY_HELP",
          "value": "16777265",
          "enum": "KeyList",
          "description": "Help key"
        },
        {
          "name": "KEY_DIRECTION_L",
          "value": "16777266",
          "enum": "KeyList",
          "description": "Left Direction Key"
        },
        {
          "name": "KEY_DIRECTION_R",
          "value": "16777267",
          "enum": "KeyList",
          "description": "Right Direction Key"
        },
        {
          "name": "KEY_BACK",
          "value": "16777280",
          "enum": "KeyList",
          "description": "Back key"
        },
        {
          "name": "KEY_FORWARD",
          "value": "16777281",
          "enum": "KeyList",
          "description": "Forward key"
        },
        {
          "name": "KEY_STOP",
          "value": "16777282",
          "enum": "KeyList",
          "description": "Stop key"
        },
        {
          "name": "KEY_REFRESH",
          "value": "16777283",
          "enum": "KeyList",
          "description": "Refresh key"
        },
        {
          "name": "KEY_VOLUMEDOWN",
          "value": "16777284",
          "enum": "KeyList",
          "description": "Volume down key"
        },
        {
          "name": "KEY_VOLUMEMUTE",
          "value": "16777285",
          "enum": "KeyList",
          "description": "Mute volume key"
        },
        {
          "name": "KEY_VOLUMEUP",
          "value": "16777286",
          "enum": "KeyList",
          "description": "Volume up key"
        },
        {
          "name": "KEY_BASSBOOST",
          "value": "16777287",
          "enum": "KeyList",
          "description": "Bass Boost Key"
        },
        {
          "name": "KEY_BASSUP",
          "value": "16777288",
          "enum": "KeyList",
          "description": "Bass Up Key"
        },
        {
          "name": "KEY_BASSDOWN",
          "value": "16777289",
          "enum": "KeyList",
          "description": "Bass Down Key"
        },
        {
          "name": "KEY_TREBLEUP",
          "value": "16777290",
          "enum": "KeyList",
          "description": "Treble Up Key"
        },
        {
          "name": "KEY_TREBLEDOWN",
          "value": "16777291",
          "enum": "KeyList",
          "description": "Treble Down Key"
        },
        {
          "name": "KEY_MEDIAPLAY",
          "value": "16777292",
          "enum": "KeyList",
          "description": "Media play key"
        },
        {
          "name": "KEY_MEDIASTOP",
          "value": "16777293",
          "enum": "KeyList",
          "description": "Media stop key"
        },
        {
          "name": "KEY_MEDIAPREVIOUS",
          "value": "16777294",
          "enum": "KeyList",
          "description": "Previous song key"
        },
        {
          "name": "KEY_MEDIANEXT",
          "value": "16777295",
          "enum": "KeyList",
          "description": "Next song key"
        },
        {
          "name": "KEY_MEDIARECORD",
          "value": "16777296",
          "enum": "KeyList",
          "description": "Media record key"
        },
        {
          "name": "KEY_HOMEPAGE",
          "value": "16777297",
          "enum": "KeyList",
          "description": "Home page key"
        },
        {
          "name": "KEY_FAVORITES",
          "value": "16777298",
          "enum": "KeyList",
          "description": "Favorites key"
        },
        {
          "name": "KEY_SEARCH",
          "value": "16777299",
          "enum": "KeyList",
          "description": "Search key"
        },
        {
          "name": "KEY_STANDBY",
          "value": "16777300",
          "enum": "KeyList",
          "description": "Standby Key"
        },
        {
          "name": "KEY_OPENURL",
          "value": "16777301",
          "enum": "KeyList",
          "description": "Open URL / Launch Browser Key"
        },
        {
          "name": "KEY_LAUNCHMAIL",
          "value": "16777302",
          "enum": "KeyList",
          "description": "Launch Mail Key"
        },
        {
          "name": "KEY_LAUNCHMEDIA",
          "value": "16777303",
          "enum": "KeyList",
          "description": "Launch Media Key"
        },
        {
          "name": "KEY_LAUNCH0",
          "value": "16777304",
          "enum": "KeyList",
          "description": "Launch Shortcut 0 Key"
        },
        {
          "name": "KEY_LAUNCH1",
          "value": "16777305",
          "enum": "KeyList",
          "description": "Launch Shortcut 1 Key"
        },
        {
          "name": "KEY_LAUNCH2",
          "value": "16777306",
          "enum": "KeyList",
          "description": "Launch Shortcut 2 Key"
        },
        {
          "name": "KEY_LAUNCH3",
          "value": "16777307",
          "enum": "KeyList",
          "description": "Launch Shortcut 3 Key"
        },
        {
          "name": "KEY_LAUNCH4",
          "value": "16777308",
          "enum": "KeyList",
          "description": "Launch Shortcut 4 Key"
        },
        {
          "name": "KEY_LAUNCH5",
          "value": "16777309",
          "enum": "KeyList",
          "description": "Launch Shortcut 5 Key"
        },
        {
          "name": "KEY_LAUNCH6",
          "value": "16777310",
          "enum": "KeyList",
          "description": "Launch Shortcut 6 Key"
        },
        {
          "name": "KEY_LAUNCH7",
          "value": "16777311",
          "enum": "KeyList",
          "description": "Launch Shortcut 7 Key"
        },
        {
          "name": "KEY_LAUNCH8",
          "value": "16777312",
          "enum": "KeyList",
          "description": "Launch Shortcut 8 Key"
        },
        {
          "name": "KEY_LAUNCH9",
          "value": "16777313",
          "enum": "KeyList",
          "description": "Launch Shortcut 9 Key"
        },
        {
          "name": "KEY_LAUNCHA",
          "value": "16777314",
          "enum": "KeyList",
          "description": "Launch Shortcut A Key"
        },
        {
          "name": "KEY_LAUNCHB",
          "value": "16777315",
          "enum": "KeyList",
          "description": "Launch Shortcut B Key"
        },
        {
          "name": "KEY_LAUNCHC",
          "value": "16777316",
          "enum": "KeyList",
          "description": "Launch Shortcut C Key"
        },
        {
          "name": "KEY_LAUNCHD",
          "value": "16777317",
          "enum": "KeyList",
          "description": "Launch Shortcut D Key"
        },
        {
          "name": "KEY_LAUNCHE",
          "value": "16777318",
          "enum": "KeyList",
          "description": "Launch Shortcut E Key"
        },
        {
          "name": "KEY_LAUNCHF",
          "value": "16777319",
          "enum": "KeyList",
          "description": "Launch Shortcut F Key"
        },
        {
          "name": "KEY_UNKNOWN",
          "value": "33554431",
          "enum": "KeyList",
          "description": "Unknown Key"
        },
        {
          "name": "KEY_SPACE",
          "value": "32",
          "enum": "KeyList",
          "description": "Space Key"
        },
        {
          "name": "KEY_EXCLAM",
          "value": "33",
          "enum": "KeyList",
          "description": "! key"
        },
        {
          "name": "KEY_QUOTEDBL",
          "value": "34",
          "enum": "KeyList",
          "description": "\" key"
        },
        {
          "name": "KEY_NUMBERSIGN",
          "value": "35",
          "enum": "KeyList",
          "description": "# key"
        },
        {
          "name": "KEY_DOLLAR",
          "value": "36",
          "enum": "KeyList",
          "description": "$ key"
        },
        {
          "name": "KEY_PERCENT",
          "value": "37",
          "enum": "KeyList",
          "description": "% key"
        },
        {
          "name": "KEY_AMPERSAND",
          "value": "38",
          "enum": "KeyList",
          "description": "& key"
        },
        {
          "name": "KEY_APOSTROPHE",
          "value": "39",
          "enum": "KeyList",
          "description": "' key"
        },
        {
          "name": "KEY_PARENLEFT",
          "value": "40",
          "enum": "KeyList",
          "description": "( key"
        },
        {
          "name": "KEY_PARENRIGHT",
          "value": "41",
          "enum": "KeyList",
          "description": ") key"
        },
        {
          "name": "KEY_ASTERISK",
          "value": "42",
          "enum": "KeyList",
          "description": "* key"
        },
        {
          "name": "KEY_PLUS",
          "value": "43",
          "enum": "KeyList",
          "description": "+ key"
        },
        {
          "name": "KEY_COMMA",
          "value": "44",
          "enum": "KeyList",
          "description": ", key"
        },
        {
          "name": "KEY_MINUS",
          "value": "45",
          "enum": "KeyList",
          "description": "- key"
        },
        {
          "name": "KEY_PERIOD",
          "value": "46",
          "enum": "KeyList",
          "description": ". key"
        },
        {
          "name": "KEY_SLASH",
          "value": "47",
          "enum": "KeyList",
          "description": "/ key"
        },
        {
          "name": "KEY_0",
          "value": "48",
          "enum": "KeyList",
          "description": "Number 0"
        },
        {
          "name": "KEY_1",
          "value": "49",
          "enum": "KeyList",
          "description": "Number 1"
        },
        {
          "name": "KEY_2",
          "value": "50",
          "enum": "KeyList",
          "description": "Number 2"
        },
        {
          "name": "KEY_3",
          "value": "51",
          "enum": "KeyList",
          "description": "Number 3"
        },
        {
          "name": "KEY_4",
          "value": "52",
          "enum": "KeyList",
          "description": "Number 4"
        },
        {
          "name": "KEY_5",
          "value": "53",
          "enum": "KeyList",
          "description": "Number 5"
        },
        {
          "name": "KEY_6",
          "value": "54",
          "enum": "KeyList",
          "description": "Number 6"
        },
        {
          "name": "KEY_7",
          "value": "55",
          "enum": "KeyList",
          "description": "Number 7"
        },
        {
          "name": "KEY_8",
          "value": "56",
          "enum": "KeyList",
          "description": "Number 8"
        },
        {
          "name": "KEY_9",
          "value": "57",
          "enum": "KeyList",
          "description": "Number 9"
        },
        {
          "name": "KEY_COLON",
          "value": "58",
          "enum": "KeyList",
          "description": ": key"
        },
        {
          "name": "KEY_SEMICOLON",
          "value": "59",
          "enum": "KeyList",
          "description": "; key"
        },
        {
          "name": "KEY_LESS",
          "value": "60",
          "enum": "KeyList",
          "description": "Lower than key"
        },
        {
          "name": "KEY_EQUAL",
          "value": "61",
          "enum": "KeyList",
          "description": "= key"
        },
        {
          "name": "KEY_GREATER",
          "value": "62",
          "enum": "KeyList",
          "description": "Greater than key"
        },
        {
          "name": "KEY_QUESTION",
          "value": "63",
          "enum": "KeyList",
          "description": "? key"
        },
        {
          "name": "KEY_AT",
          "value": "64",
          "enum": "KeyList",
          "description": "@ key"
        },
        {
          "name": "KEY_A",
          "value": "65",
          "enum": "KeyList",
          "description": "A Key"
        },
        {
          "name": "KEY_B",
          "value": "66",
          "enum": "KeyList",
          "description": "B Key"
        },
        {
          "name": "KEY_C",
          "value": "67",
          "enum": "KeyList",
          "description": "C Key"
        },
        {
          "name": "KEY_D",
          "value": "68",
          "enum": "KeyList",
          "description": "D Key"
        },
        {
          "name": "KEY_E",
          "value": "69",
          "enum": "KeyList",
          "description": "E Key"
        },
        {
          "name": "KEY_F",
          "value": "70",
          "enum": "KeyList",
          "description": "F Key"
        },
        {
          "name": "KEY_G",
          "value": "71",
          "enum": "KeyList",
          "description": "G Key"
        },
        {
          "name": "KEY_H",
          "value": "72",
          "enum": "KeyList",
          "description": "H Key"
        },
        {
          "name": "KEY_I",
          "value": "73",
          "enum": "KeyList",
          "description": "I Key"
        },
        {
          "name": "KEY_J",
          "value": "74",
          "enum": "KeyList",
          "description": "J Key"
        },
        {
          "name": "KEY_K",
          "value": "75",
          "enum": "KeyList",
          "description": "K Key"
        },
        {
          "name": "KEY_L",
          "value": "76",
          "enum": "KeyList",
          "description": "L Key"
        },
        {
          "name": "KEY_M",
          "value": "77",
          "enum": "KeyList",
          "description": "M Key"
        },
        {
          "name": "KEY_N",
          "value": "78",
          "enum": "KeyList",
          "description": "N Key"
        },
        {
          "name": "KEY_O",
          "value": "79",
          "enum": "KeyList",
          "description": "O Key"
        },
        {
          "name": "KEY_P",
          "value": "80",
          "enum": "KeyList",
          "description": "P Key"
        },
        {
          "name": "KEY_Q",
          "value": "81",
          "enum": "KeyList",
          "description": "Q Key"
        },
        {
          "name": "KEY_R",
          "value": "82",
          "enum": "KeyList",
          "description": "R Key"
        },
        {
          "name": "KEY_S",
          "value": "83",
          "enum": "KeyList",
          "description": "S Key"
        },
        {
          "name": "KEY_T",
          "value": "84",
          "enum": "KeyList",
          "description": "T Key"
        },
        {
          "name": "KEY_U",
          "value": "85",
          "enum": "KeyList",
          "description": "U Key"
        },
        {
          "name": "KEY_V",
          "value": "86",
          "enum": "KeyList",
          "description": "V Key"
        },
        {
          "name": "KEY_W",
          "value": "87",
          "enum": "KeyList",
          "description": "W Key"
        },
        {
          "name": "KEY_X",
          "value": "88",
          "enum": "KeyList",
          "description": "X Key"
        },
        {
          "name": "KEY_Y",
          "value": "89",
          "enum": "KeyList",
          "description": "Y Key"
        },
        {
          "name": "KEY_Z",
          "value": "90",
          "enum": "KeyList",
          "description": "Z Key"
        },
        {
          "name": "KEY_BRACKETLEFT",
          "value": "91",
          "enum": "KeyList",
          "description": "[ key"
        },
        {
          "name": "KEY_BACKSLASH",
          "value": "92",
          "enum": "KeyList",
          "description": "\\ key"
        },
        {
          "name": "KEY_BRACKETRIGHT",
          "value": "93",
          "enum": "KeyList",
          "description": "] key"
        },
        {
          "name": "KEY_ASCIICIRCUM",
          "value": "94",
          "enum": "KeyList",
          "description": "^ key"
        },
        {
          "name": "KEY_UNDERSCORE",
          "value": "95",
          "enum": "KeyList",
          "description": "_ key"
        },
        {
          "name": "KEY_QUOTELEFT",
          "value": "96",
          "enum": "KeyList",
          "description": "Left Quote Key"
        },
        {
          "name": "KEY_BRACELEFT",
          "value": "123",
          "enum": "KeyList",
          "description": "{ key"
        },
        {
          "name": "KEY_BAR",
          "value": "124",
          "enum": "KeyList",
          "description": "| key"
        },
        {
          "name": "KEY_BRACERIGHT",
          "value": "125",
          "enum": "KeyList",
          "description": "} key"
        },
        {
          "name": "KEY_ASCIITILDE",
          "value": "126",
          "enum": "KeyList",
          "description": "~ key"
        },
        {
          "name": "KEY_NOBREAKSPACE",
          "value": "160",
          "enum": "KeyList",
          "description": ""
        },
        {
          "name": "KEY_EXCLAMDOWN",
          "value": "161",
          "enum": "KeyList",
          "description": ""
        },
        {
          "name": "KEY_CENT",
          "value": "162",
          "enum": "KeyList",
          "description": "¢ key"
        },
        {
          "name": "KEY_STERLING",
          "value": "163",
          "enum": "KeyList",
          "description": ""
        },
        {
          "name": "KEY_CURRENCY",
          "value": "164",
          "enum": "KeyList",
          "description": ""
        },
        {
          "name": "KEY_YEN",
          "value": "165",
          "enum": "KeyList",
          "description": "Yen Key"
        },
        {
          "name": "KEY_BROKENBAR",
          "value": "166",
          "enum": "KeyList",
          "description": "¦ key"
        },
        {
          "name": "KEY_SECTION",
          "value": "167",
          "enum": "KeyList",
          "description": "§ key"
        },
        {
          "name": "KEY_DIAERESIS",
          "value": "168",
          "enum": "KeyList",
          "description": "¨ key"
        },
        {
          "name": "KEY_COPYRIGHT",
          "value": "169",
          "enum": "KeyList",
          "description": "© key"
        },
        {
          "name": "KEY_ORDFEMININE",
          "value": "170",
          "enum": "KeyList",
          "description": ""
        },
        {
          "name": "KEY_GUILLEMOTLEFT",
          "value": "171",
          "enum": "KeyList",
          "description": "« key"
        },
        {
          "name": "KEY_NOTSIGN",
          "value": "172",
          "enum": "KeyList",
          "description": "» key"
        },
        {
          "name": "KEY_HYPHEN",
          "value": "173",
          "enum": "KeyList",
          "description": "‐ key"
        },
        {
          "name": "KEY_REGISTERED",
          "value": "174",
          "enum": "KeyList",
          "description": "® key"
        },
        {
          "name": "KEY_MACRON",
          "value": "175",
          "enum": "KeyList",
          "description": "Macron Key"
        },
        {
          "name": "KEY_DEGREE",
          "value": "176",
          "enum": "KeyList",
          "description": "° key"
        },
        {
          "name": "KEY_PLUSMINUS",
          "value": "177",
          "enum": "KeyList",
          "description": "± key"
        },
        {
          "name": "KEY_TWOSUPERIOR",
          "value": "178",
          "enum": "KeyList",
          "description": "² key"
        },
        {
          "name": "KEY_THREESUPERIOR",
          "value": "179",
          "enum": "KeyList",
          "description": "³ key"
        },
        {
          "name": "KEY_ACUTE",
          "value": "180",
          "enum": "KeyList",
          "description": "´ key"
        },
        {
          "name": "KEY_MU",
          "value": "181",
          "enum": "KeyList",
          "description": "µ key"
        },
        {
          "name": "KEY_PARAGRAPH",
          "value": "182",
          "enum": "KeyList",
          "description": "Paragraph Key"
        },
        {
          "name": "KEY_PERIODCENTERED",
          "value": "183",
          "enum": "KeyList",
          "description": "· key"
        },
        {
          "name": "KEY_CEDILLA",
          "value": "184",
          "enum": "KeyList",
          "description": "¬ key"
        },
        {
          "name": "KEY_ONESUPERIOR",
          "value": "185",
          "enum": "KeyList",
          "description": "¹ key"
        },
        {
          "name": "KEY_MASCULINE",
          "value": "186",
          "enum": "KeyList",
          "description": "♂ key"
        },
        {
          "name": "KEY_GUILLEMOTRIGHT",
          "value": "187",
          "enum": "KeyList",
          "description": "» key"
        },
        {
          "name": "KEY_ONEQUARTER",
          "value": "188",
          "enum": "KeyList",
          "description": "¼ key"
        },
        {
          "name": "KEY_ONEHALF",
          "value": "189",
          "enum": "KeyList",
          "description": "½ key"
        },
        {
          "name": "KEY_THREEQUARTERS",
          "value": "190",
          "enum": "KeyList",
          "description": "¾ key"
        },
        {
          "name": "KEY_QUESTIONDOWN",
          "value": "191",
          "enum": "KeyList",
          "description": "¿ key"
        },
        {
          "name": "KEY_AGRAVE",
          "value": "192",
          "enum": "KeyList",
          "description": "à key"
        },
        {
          "name": "KEY_AACUTE",
          "value": "193",
          "enum": "KeyList",
          "description": "á key"
        },
        {
          "name": "KEY_ACIRCUMFLEX",
          "value": "194",
          "enum": "KeyList",
          "description": "â key"
        },
        {
          "name": "KEY_ATILDE",
          "value": "195",
          "enum": "KeyList",
          "description": "ã key"
        },
        {
          "name": "KEY_ADIAERESIS",
          "value": "196",
          "enum": "KeyList",
          "description": "ä key"
        },
        {
          "name": "KEY_ARING",
          "value": "197",
          "enum": "KeyList",
          "description": "å key"
        },
        {
          "name": "KEY_AE",
          "value": "198",
          "enum": "KeyList",
          "description": "æ key"
        },
        {
          "name": "KEY_CCEDILLA",
          "value": "199",
          "enum": "KeyList",
          "description": "ç key"
        },
        {
          "name": "KEY_EGRAVE",
          "value": "200",
          "enum": "KeyList",
          "description": "è key"
        },
        {
          "name": "KEY_EACUTE",
          "value": "201",
          "enum": "KeyList",
          "description": "é key"
        },
        {
          "name": "KEY_ECIRCUMFLEX",
          "value": "202",
          "enum": "KeyList",
          "description": "ê key"
        },
        {
          "name": "KEY_EDIAERESIS",
          "value": "203",
          "enum": "KeyList",
          "description": "ë key"
        },
        {
          "name": "KEY_IGRAVE",
          "value": "204",
          "enum": "KeyList",
          "description": "ì key"
        },
        {
          "name": "KEY_IACUTE",
          "value": "205",
          "enum": "KeyList",
          "description": "í key"
        },
        {
          "name": "KEY_ICIRCUMFLEX",
          "value": "206",
          "enum": "KeyList",
          "description": "î key"
        },
        {
          "name": "KEY_IDIAERESIS",
          "value": "207",
          "enum": "KeyList",
          "description": "ë key"
        },
        {
          "name": "KEY_ETH",
          "value": "208",
          "enum": "KeyList",
          "description": "ð key"
        },
        {
          "name": "KEY_NTILDE",
          "value": "209",
          "enum": "KeyList",
          "description": "ñ key"
        },
        {
          "name": "KEY_OGRAVE",
          "value": "210",
          "enum": "KeyList",
          "description": "ò key"
        },
        {
          "name": "KEY_OACUTE",
          "value": "211",
          "enum": "KeyList",
          "description": "ó key"
        },
        {
          "name": "KEY_OCIRCUMFLEX",
          "value": "212",
          "enum": "KeyList",
          "description": "ô key"
        },
        {
          "name": "KEY_OTILDE",
          "value": "213",
          "enum": "KeyList",
          "description": "õ key"
        },
        {
          "name": "KEY_ODIAERESIS",
          "value": "214",
          "enum": "KeyList",
          "description": "ö key"
        },
        {
          "name": "KEY_MULTIPLY",
          "value": "215",
          "enum": "KeyList",
          "description": "× key"
        },
        {
          "name": "KEY_OOBLIQUE",
          "value": "216",
          "enum": "KeyList",
          "description": "ø key"
        },
        {
          "name": "KEY_UGRAVE",
          "value": "217",
          "enum": "KeyList",
          "description": "ù key"
        },
        {
          "name": "KEY_UACUTE",
          "value": "218",
          "enum": "KeyList",
          "description": "ú key"
        },
        {
          "name": "KEY_UCIRCUMFLEX",
          "value": "219",
          "enum": "KeyList",
          "description": "û key"
        },
        {
          "name": "KEY_UDIAERESIS",
          "value": "220",
          "enum": "KeyList",
          "description": "ü key"
        },
        {
          "name": "KEY_YACUTE",
          "value": "221",
          "enum": "KeyList",
          "description": "ý key"
        },
        {
          "name": "KEY_THORN",
          "value": "222",
          "enum": "KeyList",
          "description": "þ key"
        },
        {
          "name": "KEY_SSHARP",
          "value": "223",
          "enum": "KeyList",
          "description": "ß key"
        },
        {
          "name": "KEY_DIVISION",
          "value": "247",
          "enum": "KeyList",
          "description": "÷ key"
        },
        {
          "name": "KEY_YDIAERESIS",
          "value": "255",
          "enum": "KeyList",
          "description": "ÿ key"
        },
        {
          "name": "KEY_CODE_MASK",
          "value": "33554431",
          "enum": "KeyModifierMask",
          "description": "Key Code Mask"
        },
        {
          "name": "KEY_MODIFIER_MASK",
          "value": "-16777216",
          "enum": "KeyModifierMask",
          "description": "Modifier Key Mask"
        },
        {
          "name": "KEY_MASK_SHIFT",
          "value": "33554432",
          "enum": "KeyModifierMask",
          "description": "Shift Key Mask"
        },
        {
          "name": "KEY_MASK_ALT",
          "value": "67108864",
          "enum": "KeyModifierMask",
          "description": "Alt Key Mask"
        },
        {
          "name": "KEY_MASK_META",
          "value": "134217728",
          "enum": "KeyModifierMask",
          "description": "Meta Key Mask"
        },
        {
          "name": "KEY_MASK_CTRL",
          "value": "268435456",
          "enum": "KeyModifierMask",
          "description": "CTRL Key Mask"
        },
        {
          "name": "KEY_MASK_CMD",
          "value": "268435456",
          "enum": "KeyModifierMask",
          "description": "CMD Key Mask"
        },
        {
          "name": "KEY_MASK_KPAD",
          "value": "536870912",
          "enum": "KeyModifierMask",
          "description": "Keypad Key Mask"
        },
        {
          "name": "KEY_MASK_GROUP_SWITCH",
          "value": "1073741824",
          "enum": "KeyModifierMask",
          "description": "Group Switch Key Mask"
        },
        {
          "name": "BUTTON_LEFT",
          "value": "1",
          "enum": "ButtonList",
          "description": "Left Mouse Button"
        },
        {
          "name": "BUTTON_RIGHT",
          "value": "2",
          "enum": "ButtonList",
          "description": "Right Mouse Button"
        },
        {
          "name": "BUTTON_MIDDLE",
          "value": "3",
          "enum": "ButtonList",
          "description": "Middle Mouse Button"
        },
        {
          "name": "BUTTON_WHEEL_UP",
          "value": "4",
          "enum": "ButtonList",
          "description": "Mouse wheel up"
        },
        {
          "name": "BUTTON_WHEEL_DOWN",
          "value": "5",
          "enum": "ButtonList",
          "description": "Mouse wheel down"
        },
        {
          "name": "BUTTON_WHEEL_LEFT",
          "value": "6",
          "enum": "ButtonList",
          "description": "Mouse wheel left button"
        },
        {
          "name": "BUTTON_WHEEL_RIGHT",
          "value": "7",
          "enum": "ButtonList",
          "description": "Mouse wheel right button"
        },
        {
          "name": "BUTTON_MASK_LEFT",
          "value": "1",
          "enum": "ButtonList",
          "description": "Left Mouse Button Mask"
        },
        {
          "name": "BUTTON_MASK_RIGHT",
          "value": "2",
          "enum": "ButtonList",
          "description": "Right Mouse Button Mask"
        },
        {
          "name": "BUTTON_MASK_MIDDLE",
          "value": "4",
          "enum": "ButtonList",
          "description": "Middle Mouse Button Mask"
        },
        {
          "name": "JOY_BUTTON_0",
          "value": "0",
          "enum": "JoystickList",
          "description": "Joypad Button 0"
        },
        {
          "name": "JOY_BUTTON_1",
          "value": "1",
          "enum": "JoystickList",
          "description": "Joypad Button 1"
        },
        {
          "name": "JOY_BUTTON_2",
          "value": "2",
          "enum": "JoystickList",
          "description": "Joypad Button 2"
        },
        {
          "name": "JOY_BUTTON_3",
          "value": "3",
          "enum": "JoystickList",
          "description": "Joypad Button 3"
        },
        {
          "name": "JOY_BUTTON_4",
          "value": "4",
          "enum": "JoystickList",
          "description": "Joypad Button 4"
        },
        {
          "name": "JOY_BUTTON_5",
          "value": "5",
          "enum": "JoystickList",
          "description": "Joypad Button 5"
        },
        {
          "name": "JOY_BUTTON_6",
          "value": "6",
          "enum": "JoystickList",
          "description": "Joypad Button 6"
        },
        {
          "name": "JOY_BUTTON_7",
          "value": "7",
          "enum": "JoystickList",
          "description": "Joypad Button 7"
        },
        {
          "name": "JOY_BUTTON_8",
          "value": "8",
          "enum": "JoystickList",
          "description": "Joypad Button 8"
        },
        {
          "name": "JOY_BUTTON_9",
          "value": "9",
          "enum": "JoystickList",
          "description": "Joypad Button 9"
        },
        {
          "name": "JOY_BUTTON_10",
          "value": "10",
          "enum": "JoystickList",
          "description": "Joypad Button 10"
        },
        {
          "name": "JOY_BUTTON_11",
          "value": "11",
          "enum": "JoystickList",
          "description": "Joypad Button 11"
        },
        {
          "name": "JOY_BUTTON_12",
          "value": "12",
          "enum": "JoystickList",
          "description": "Joypad Button 12"
        },
        {
          "name": "JOY_BUTTON_13",
          "value": "13",
          "enum": "JoystickList",
          "description": "Joypad Button 13"
        },
        {
          "name": "JOY_BUTTON_14",
          "value": "14",
          "enum": "JoystickList",
          "description": "Joypad Button 14"
        },
        {
          "name": "JOY_BUTTON_15",
          "value": "15",
          "enum": "JoystickList",
          "description": "Joypad Button 15"
        },
        {
          "name": "JOY_BUTTON_MAX",
          "value": "16",
          "enum": "JoystickList",
          "description": "Joypad Button 16"
        },
        {
          "name": "JOY_SONY_CIRCLE",
          "value": "1",
          "enum": "JoystickList",
          "description": "DUALSHOCK circle button"
        },
        {
          "name": "JOY_SONY_X",
          "value": "0",
          "enum": "JoystickList",
          "description": "DUALSHOCK X button"
        },
        {
          "name": "JOY_SONY_SQUARE",
          "value": "2",
          "enum": "JoystickList",
          "description": "DUALSHOCK square button"
        },
        {
          "name": "JOY_SONY_TRIANGLE",
          "value": "3",
          "enum": "JoystickList",
          "description": "DUALSHOCK triangle button"
        },
        {
          "name": "JOY_XBOX_B",
          "value": "1",
          "enum": "JoystickList",
          "description": "XBOX controller B button"
        },
        {
          "name": "JOY_XBOX_A",
          "value": "0",
          "enum": "JoystickList",
          "description": "XBOX controller A button"
        },
        {
          "name": "JOY_XBOX_X",
          "value": "2",
          "enum": "JoystickList",
          "description": "XBOX controller X button"
        },
        {
          "name": "JOY_XBOX_Y",
          "value": "3",
          "enum": "JoystickList",
          "description": "XBOX controller Y button"
        },
        {
          "name": "JOY_DS_A",
          "value": "1",
          "enum": "JoystickList",
          "description": "DualShock controller A button"
        },
        {
          "name": "JOY_DS_B",
          "value": "0",
          "enum": "JoystickList",
          "description": "DualShock controller B button"
        },
        {
          "name": "JOY_DS_X",
          "value": "3",
          "enum": "JoystickList",
          "description": "DualShock controller X button"
        },
        {
          "name": "JOY_DS_Y",
          "value": "2",
          "enum": "JoystickList",
          "description": "DualShock controller Y button"
        },
        {
          "name": "JOY_SELECT",
          "value": "10",
          "enum": "JoystickList",
          "description": "Joypad Button Select"
        },
        {
          "name": "JOY_START",
          "value": "11",
          "enum": "JoystickList",
          "description": "Joypad Button Start"
        },
        {
          "name": "JOY_DPAD_UP",
          "value": "12",
          "enum": "JoystickList",
          "description": "Joypad DPad Up"
        },
        {
          "name": "JOY_DPAD_DOWN",
          "value": "13",
          "enum": "JoystickList",
          "description": "Joypad DPad Down"
        },
        {
          "name": "JOY_DPAD_LEFT",
          "value": "14",
          "enum": "JoystickList",
          "description": "Joypad DPad Left"
        },
        {
          "name": "JOY_DPAD_RIGHT",
          "value": "15",
          "enum": "JoystickList",
          "description": "Joypad DPad Right"
        },
        {
          "name": "JOY_L",
          "value": "4",
          "enum": "JoystickList",
          "description": "Joypad Left Shoulder Button"
        },
        {
          "name": "JOY_L2",
          "value": "6",
          "enum": "JoystickList",
          "description": "Joypad Left Trigger"
        },
        {
          "name": "JOY_L3",
          "value": "8",
          "enum": "JoystickList",
          "description": "Joypad Left Stick Click"
        },
        {
          "name": "JOY_R",
          "value": "5",
          "enum": "JoystickList",
          "description": "Joypad Right Shoulder Button"
        },
        {
          "name": "JOY_R2",
          "value": "7",
          "enum": "JoystickList",
          "description": "Joypad Right Trigger"
        },
        {
          "name": "JOY_R3",
          "value": "9",
          "enum": "JoystickList",
          "description": "Joypad Right Stick Click"
        },
        {
          "name": "JOY_AXIS_0",
          "value": "0",
          "enum": "JoystickList",
          "description": "Joypad Left Stick Horizontal Axis"
        },
        {
          "name": "JOY_AXIS_1",
          "value": "1",
          "enum": "JoystickList",
          "description": "Joypad Left Stick Vertical Axis"
        },
        {
          "name": "JOY_AXIS_2",
          "value": "2",
          "enum": "JoystickList",
          "description": "Joypad Right Stick Horizontal Axis"
        },
        {
          "name": "JOY_AXIS_3",
          "value": "3",
          "enum": "JoystickList",
          "description": "Joypad Right Stick Vertical Axis"
        },
        {
          "name": "JOY_AXIS_4",
          "value": "4",
          "enum": "JoystickList",
          "description": ""
        },
        {
          "name": "JOY_AXIS_5",
          "value": "5",
          "enum": "JoystickList",
          "description": ""
        },
        {
          "name": "JOY_AXIS_6",
          "value": "6",
          "enum": "JoystickList",
          "description": "Joypad Left Trigger Analog Axis"
        },
        {
          "name": "JOY_AXIS_7",
          "value": "7",
          "enum": "JoystickList",
          "description": "Joypad Right Trigger Analog Axis"
        },
        {
          "name": "JOY_AXIS_8",
          "value": "8",
          "enum": "JoystickList",
          "description": ""
        },
        {
          "name": "JOY_AXIS_9",
          "value": "9",
          "enum": "JoystickList",
          "description": ""
        },
        {
          "name": "JOY_AXIS_MAX",
          "value": "10",
          "enum": "JoystickList",
          "description": ""
        },
        {
          "name": "JOY_ANALOG_LX",
          "value": "0",
          "enum": "JoystickList",
          "description": "Joypad Left Stick Horizontal Axis"
        },
        {
          "name": "JOY_ANALOG_LY",
          "value": "1",
          "enum": "JoystickList",
          "description": "Joypad Left Stick Vertical Axis"
        },
        {
          "name": "JOY_ANALOG_RX",
          "value": "2",
          "enum": "JoystickList",
          "description": "Joypad Right Stick Horizontal Axis"
        },
        {
          "name": "JOY_ANALOG_RY",
          "value": "3",
          "enum": "JoystickList",
          "description": "Joypad Right Stick Vertical Axis"
        },
        {
          "name": "JOY_ANALOG_L2",
          "value": "6",
          "enum": "JoystickList",
          "description": "Joypad Left Analog Trigger"
        },
        {
          "name": "JOY_ANALOG_R2",
          "value": "7",
          "enum": "JoystickList",
          "description": "Joypad Right Analog Trigger"
        },
        {
          "name": "OK",
          "value": "0",
          "enum": "Error",
          "description": "Functions that return Error return OK when no error occurred. Most functions don't return errors and/or just print errors to STDOUT."
        },
        {
          "name": "FAILED",
          "value": "1",
          "enum": "Error",
          "description": "Generic error."
        },
        {
          "name": "ERR_UNAVAILABLE",
          "value": "2",
          "enum": "Error",
          "description": "Unavailable error"
        },
        {
          "name": "ERR_UNCONFIGURED",
          "value": "3",
          "enum": "Error",
          "description": "Unconfigured error"
        },
        {
          "name": "ERR_UNAUTHORIZED",
          "value": "4",
          "enum": "Error",
          "description": "Unauthorized error"
        },
        {
          "name": "ERR_PARAMETER_RANGE_ERROR",
          "value": "5",
          "enum": "Error",
          "description": "Parameter range error"
        },
        {
          "name": "ERR_OUT_OF_MEMORY",
          "value": "6",
          "enum": "Error",
          "description": "Out of memory (OOM) error"
        },
        {
          "name": "ERR_FILE_NOT_FOUND",
          "value": "7",
          "enum": "Error",
          "description": "File: Not found error"
        },
        {
          "name": "ERR_FILE_BAD_DRIVE",
          "value": "8",
          "enum": "Error",
          "description": "File: Bad drive error"
        },
        {
          "name": "ERR_FILE_BAD_PATH",
          "value": "9",
          "enum": "Error",
          "description": "File: Bad path error"
        },
        {
          "name": "ERR_FILE_NO_PERMISSION",
          "value": "10",
          "enum": "Error",
          "description": "File: No permission error"
        },
        {
          "name": "ERR_FILE_ALREADY_IN_USE",
          "value": "11",
          "enum": "Error",
          "description": "File: Already in use error"
        },
        {
          "name": "ERR_FILE_CANT_OPEN",
          "value": "12",
          "enum": "Error",
          "description": "File: Can't open error"
        },
        {
          "name": "ERR_FILE_CANT_WRITE",
          "value": "13",
          "enum": "Error",
          "description": "File: Can't write error"
        },
        {
          "name": "ERR_FILE_CANT_READ",
          "value": "14",
          "enum": "Error",
          "description": "File: Can't read error"
        },
        {
          "name": "ERR_FILE_UNRECOGNIZED",
          "value": "15",
          "enum": "Error",
          "description": "File: Unrecognized error"
        },
        {
          "name": "ERR_FILE_CORRUPT",
          "value": "16",
          "enum": "Error",
          "description": "File: Corrupt error"
        },
        {
          "name": "ERR_FILE_MISSING_DEPENDENCIES",
          "value": "17",
          "enum": "Error",
          "description": "File: Missing dependencies error"
        },
        {
          "name": "ERR_FILE_EOF",
          "value": "18",
          "enum": "Error",
          "description": "File: End of file (EOF) error"
        },
        {
          "name": "ERR_CANT_OPEN",
          "value": "19",
          "enum": "Error",
          "description": "Can't open error"
        },
        {
          "name": "ERR_CANT_CREATE",
          "value": "20",
          "enum": "Error",
          "description": "Can't create error"
        },
        {
          "name": "ERR_PARSE_ERROR",
          "value": "43",
          "enum": "Error",
          "description": "Parse error"
        },
        {
          "name": "ERR_QUERY_FAILED",
          "value": "21",
          "enum": "Error",
          "description": "Query failed error"
        },
        {
          "name": "ERR_ALREADY_IN_USE",
          "value": "22",
          "enum": "Error",
          "description": "Already in use error"
        },
        {
          "name": "ERR_LOCKED",
          "value": "23",
          "enum": "Error",
          "description": "Locked error"
        },
        {
          "name": "ERR_TIMEOUT",
          "value": "24",
          "enum": "Error",
          "description": "Timeout error"
        },
        {
          "name": "ERR_CANT_ACQUIRE_RESOURCE",
          "value": "28",
          "enum": "Error",
          "description": "Can't acquire resource error"
        },
        {
          "name": "ERR_INVALID_DATA",
          "value": "30",
          "enum": "Error",
          "description": "Invalid data error"
        },
        {
          "name": "ERR_INVALID_PARAMETER",
          "value": "31",
          "enum": "Error",
          "description": "Invalid parameter error"
        },
        {
          "name": "ERR_ALREADY_EXISTS",
          "value": "32",
          "enum": "Error",
          "description": "Already exists error"
        },
        {
          "name": "ERR_DOES_NOT_EXIST",
          "value": "33",
          "enum": "Error",
          "description": "Does not exist error"
        },
        {
          "name": "ERR_DATABASE_CANT_READ",
          "value": "34",
          "enum": "Error",
          "description": "Database: Read error"
        },
        {
          "name": "ERR_DATABASE_CANT_WRITE",
          "value": "35",
          "enum": "Error",
          "description": "Database: Write error"
        },
        {
          "name": "ERR_COMPILATION_FAILED",
          "value": "36",
          "enum": "Error",
          "description": "Compilation failed error"
        },
        {
          "name": "ERR_METHOD_NOT_FOUND",
          "value": "37",
          "enum": "Error",
          "description": "Method not found error"
        },
        {
          "name": "ERR_LINK_FAILED",
          "value": "38",
          "enum": "Error",
          "description": "Linking failed error"
        },
        {
          "name": "ERR_SCRIPT_FAILED",
          "value": "39",
          "enum": "Error",
          "description": "Script failed error"
        },
        {
          "name": "ERR_CYCLIC_LINK",
          "value": "40",
          "enum": "Error",
          "description": "Cycling link (import cycle) error"
        },
        {
          "name": "ERR_BUSY",
          "value": "44",
          "enum": "Error",
          "description": "Busy error"
        },
        {
          "name": "ERR_HELP",
          "value": "46",
          "enum": "Error",
          "description": "Help error"
        },
        {
          "name": "ERR_BUG",
          "value": "47",
          "enum": "Error",
          "description": "Bug error"
        },
        {
          "name": "PROPERTY_HINT_NONE",
          "value": "0",
          "enum": "PropertyHint",
          "description": "No hint for edited property."
        },
        {
          "name": "PROPERTY_HINT_RANGE",
          "value": "1",
          "enum": "PropertyHint",
          "description": "Hints that the string is a range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats."
        },
        {
          "name": "PROPERTY_HINT_EXP_RANGE",
          "value": "2",
          "enum": "PropertyHint",
          "description": "Hints that the string is an exponential range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats."
        },
        {
          "name": "PROPERTY_HINT_ENUM",
          "value": "3",
          "enum": "PropertyHint",
          "description": "Property hint for an enumerated value, like \"Hello,Something,Else\". This is valid for integer, float and string properties."
        },
        {
          "name": "PROPERTY_HINT_EXP_EASING",
          "value": "4",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_LENGTH",
          "value": "5",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_KEY_ACCEL",
          "value": "7",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_FLAGS",
          "value": "8",
          "enum": "PropertyHint",
          "description": "Property hint for a bitmask description, for bits 0,1,2,3 and 5 the hint would be like \"Bit0,Bit1,Bit2,Bit3,,Bit5\". Valid only for integers."
        },
        {
          "name": "PROPERTY_HINT_LAYERS_2D_RENDER",
          "value": "9",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_LAYERS_2D_PHYSICS",
          "value": "10",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_LAYERS_3D_RENDER",
          "value": "11",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_LAYERS_3D_PHYSICS",
          "value": "12",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_FILE",
          "value": "13",
          "enum": "PropertyHint",
          "description": "String property is a file (so pop up a file dialog when edited). Hint string can be a set of wildcards like \"*.doc\"."
        },
        {
          "name": "PROPERTY_HINT_DIR",
          "value": "14",
          "enum": "PropertyHint",
          "description": "String property is a directory (so pop up a file dialog when edited)."
        },
        {
          "name": "PROPERTY_HINT_GLOBAL_FILE",
          "value": "15",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_GLOBAL_DIR",
          "value": "16",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_RESOURCE_TYPE",
          "value": "17",
          "enum": "PropertyHint",
          "description": "String property is a resource, so open the resource popup menu when edited."
        },
        {
          "name": "PROPERTY_HINT_MULTILINE_TEXT",
          "value": "18",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_COLOR_NO_ALPHA",
          "value": "19",
          "enum": "PropertyHint",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSY",
          "value": "20",
          "enum": "PropertyHint",
          "description": "Hints that the image is compressed using lossy compression."
        },
        {
          "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS",
          "value": "21",
          "enum": "PropertyHint",
          "description": "Hints that the image is compressed using lossless compression."
        },
        {
          "name": "PROPERTY_USAGE_STORAGE",
          "value": "1",
          "enum": "PropertyUsageFlags",
          "description": "Property will be used as storage (default)."
        },
        {
          "name": "PROPERTY_USAGE_EDITOR",
          "value": "2",
          "enum": "PropertyUsageFlags",
          "description": "Property will be visible in editor (default)."
        },
        {
          "name": "PROPERTY_USAGE_NETWORK",
          "value": "4",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_EDITOR_HELPER",
          "value": "8",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_CHECKABLE",
          "value": "16",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_CHECKED",
          "value": "32",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_INTERNATIONALIZED",
          "value": "64",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_GROUP",
          "value": "128",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_CATEGORY",
          "value": "256",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_STORE_IF_NONZERO",
          "value": "512",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_STORE_IF_NONONE",
          "value": "1024",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_NO_INSTANCE_STATE",
          "value": "2048",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_RESTART_IF_CHANGED",
          "value": "4096",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_SCRIPT_VARIABLE",
          "value": "8192",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_DEFAULT",
          "value": "7",
          "enum": "PropertyUsageFlags",
          "description": "Default usage (storage and editor)."
        },
        {
          "name": "PROPERTY_USAGE_DEFAULT_INTL",
          "value": "71",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_NOEDITOR",
          "value": "5",
          "enum": "PropertyUsageFlags",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_NORMAL",
          "value": "1",
          "enum": "MethodFlags",
          "description": "Flag for normal method"
        },
        {
          "name": "METHOD_FLAG_EDITOR",
          "value": "2",
          "enum": "MethodFlags",
          "description": "Flag for editor method"
        },
        {
          "name": "METHOD_FLAG_NOSCRIPT",
          "value": "4",
          "enum": "MethodFlags",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_CONST",
          "value": "8",
          "enum": "MethodFlags",
          "description": "Flag for constant method"
        },
        {
          "name": "METHOD_FLAG_REVERSE",
          "value": "16",
          "enum": "MethodFlags",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_VIRTUAL",
          "value": "32",
          "enum": "MethodFlags",
          "description": "Flag for virtual method"
        },
        {
          "name": "METHOD_FLAG_FROM_SCRIPT",
          "value": "64",
          "enum": "MethodFlags",
          "description": "Flag for method from script"
        },
        {
          "name": "METHOD_FLAGS_DEFAULT",
          "value": "1",
          "enum": "MethodFlags",
          "description": "Default method flags"
        },
        {
          "name": "TYPE_NIL",
          "value": "0",
          "enum": "Variant.Type",
          "description": "Variable is of type nil (only applied for null)."
        },
        {
          "name": "TYPE_BOOL",
          "value": "1",
          "enum": "Variant.Type",
          "description": "Variable is of type [bool]."
        },
        {
          "name": "TYPE_INT",
          "value": "2",
          "enum": "Variant.Type",
          "description": "Variable is of type [int]."
        },
        {
          "name": "TYPE_REAL",
          "value": "3",
          "enum": "Variant.Type",
          "description": "Variable is of type [float]/real."
        },
        {
          "name": "TYPE_STRING",
          "value": "4",
          "enum": "Variant.Type",
          "description": "Variable is of type [String]."
        },
        {
          "name": "TYPE_VECTOR2",
          "value": "5",
          "enum": "Variant.Type",
          "description": "Variable is of type [Vector2]."
        },
        {
          "name": "TYPE_RECT2",
          "value": "6",
          "enum": "Variant.Type",
          "description": "Variable is of type [Rect2]."
        },
        {
          "name": "TYPE_VECTOR3",
          "value": "7",
          "enum": "Variant.Type",
          "description": "Variable is of type [Vector3]."
        },
        {
          "name": "TYPE_TRANSFORM2D",
          "value": "8",
          "enum": "Variant.Type",
          "description": "Variable is of type [Transform2D]."
        },
        {
          "name": "TYPE_PLANE",
          "value": "9",
          "enum": "Variant.Type",
          "description": "Variable is of type [Plane]."
        },
        {
          "name": "TYPE_QUAT",
          "value": "10",
          "enum": "Variant.Type",
          "description": "Variable is of type [Quat]."
        },
        {
          "name": "TYPE_AABB",
          "value": "11",
          "enum": "Variant.Type",
          "description": "Variable is of type [AABB]."
        },
        {
          "name": "TYPE_BASIS",
          "value": "12",
          "enum": "Variant.Type",
          "description": "Variable is of type [Basis]."
        },
        {
          "name": "TYPE_TRANSFORM",
          "value": "13",
          "enum": "Variant.Type",
          "description": "Variable is of type [Transform]."
        },
        {
          "name": "TYPE_COLOR",
          "value": "14",
          "enum": "Variant.Type",
          "description": "Variable is of type [Color]."
        },
        {
          "name": "TYPE_NODE_PATH",
          "value": "15",
          "enum": "Variant.Type",
          "description": "Variable is of type [NodePath]."
        },
        {
          "name": "TYPE_RID",
          "value": "16",
          "enum": "Variant.Type",
          "description": "Variable is of type [RID]."
        },
        {
          "name": "TYPE_OBJECT",
          "value": "17",
          "enum": "Variant.Type",
          "description": "Variable is of type [Object]."
        },
        {
          "name": "TYPE_DICTIONARY",
          "value": "18",
          "enum": "Variant.Type",
          "description": "Variable is of type [Dictionary]."
        },
        {
          "name": "TYPE_ARRAY",
          "value": "19",
          "enum": "Variant.Type",
          "description": "Variable is of type [Array]."
        },
        {
          "name": "TYPE_RAW_ARRAY",
          "value": "20",
          "enum": "Variant.Type",
          "description": "Variable is of type [PoolByteArray]."
        },
        {
          "name": "TYPE_INT_ARRAY",
          "value": "21",
          "enum": "Variant.Type",
          "description": "Variable is of type [PoolIntArray]."
        },
        {
          "name": "TYPE_REAL_ARRAY",
          "value": "22",
          "enum": "Variant.Type",
          "description": "Variable is of type [PoolRealArray]."
        },
        {
          "name": "TYPE_STRING_ARRAY",
          "value": "23",
          "enum": "Variant.Type",
          "description": "Variable is of type [PoolStringArray]."
        },
        {
          "name": "TYPE_VECTOR2_ARRAY",
          "value": "24",
          "enum": "Variant.Type",
          "description": "Variable is of type [PoolVector2Array]."
        },
        {
          "name": "TYPE_VECTOR3_ARRAY",
          "value": "25",
          "enum": "Variant.Type",
          "description": "Variable is of type [PoolVector3Array]."
        },
        {
          "name": "TYPE_COLOR_ARRAY",
          "value": "26",
          "enum": "Variant.Type",
          "description": "Variable is of type [PoolColorArray]."
        },
        {
          "name": "TYPE_MAX",
          "value": "27",
          "enum": "Variant.Type",
          "description": "Marker for end of type constants."
        },
        {
          "name": "OP_EQUAL",
          "value": "0",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_NOT_EQUAL",
          "value": "1",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_LESS",
          "value": "2",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_LESS_EQUAL",
          "value": "3",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_GREATER",
          "value": "4",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_GREATER_EQUAL",
          "value": "5",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_ADD",
          "value": "6",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_SUBTRACT",
          "value": "7",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_MULTIPLY",
          "value": "8",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_DIVIDE",
          "value": "9",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_NEGATE",
          "value": "10",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_POSITIVE",
          "value": "11",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_MODULE",
          "value": "12",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_STRING_CONCAT",
          "value": "13",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_SHIFT_LEFT",
          "value": "14",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_SHIFT_RIGHT",
          "value": "15",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_BIT_AND",
          "value": "16",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_BIT_OR",
          "value": "17",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_BIT_XOR",
          "value": "18",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_BIT_NEGATE",
          "value": "19",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_AND",
          "value": "20",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_OR",
          "value": "21",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_XOR",
          "value": "22",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_NOT",
          "value": "23",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_IN",
          "value": "24",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "OP_MAX",
          "value": "25",
          "enum": "Variant.Operator",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "ARVRServer",
          "type": "ARVRServer",
          "setter": "",
          "getter": "",
          "description": "[ARVRServer] singleton"
        },
        {
          "name": "AudioServer",
          "type": "AudioServer",
          "setter": "",
          "getter": "",
          "description": "[AudioServer] singleton"
        },
        {
          "name": "ClassDB",
          "type": "ClassDB",
          "setter": "",
          "getter": "",
          "description": "[ClassDB] singleton"
        },
        {
          "name": "Engine",
          "type": "Engine",
          "setter": "",
          "getter": "",
          "description": "[Engine] singleton"
        },
        {
          "name": "Geometry",
          "type": "Geometry",
          "setter": "",
          "getter": "",
          "description": "[Geometry] singleton"
        },
        {
          "name": "GodotSharp",
          "type": "GodotSharp",
          "setter": "",
          "getter": "",
          "description": "[GodotSharp] singleton"
        },
        {
          "name": "IP",
          "type": "IP",
          "setter": "",
          "getter": "",
          "description": "[IP] singleton"
        },
        {
          "name": "Input",
          "type": "Input",
          "setter": "",
          "getter": "",
          "description": "[Input] singleton"
        },
        {
          "name": "InputMap",
          "type": "InputMap",
          "setter": "",
          "getter": "",
          "description": "[InputMap] singleton"
        },
        {
          "name": "JSON",
          "type": "JSON",
          "setter": "",
          "getter": "",
          "description": "[JSON] singleton"
        },
        {
          "name": "JavaScript",
          "type": "JavaScript",
          "setter": "",
          "getter": "",
          "description": "[JavaScript] singleton"
        },
        {
          "name": "Marshalls",
          "type": "Reference",
          "setter": "",
          "getter": "",
          "description": "[Marshalls] singleton"
        },
        {
          "name": "OS",
          "type": "OS",
          "setter": "",
          "getter": "",
          "description": "[OS] singleton"
        },
        {
          "name": "Performance",
          "type": "Performance",
          "setter": "",
          "getter": "",
          "description": "[Performance] singleton"
        },
        {
          "name": "Physics2DServer",
          "type": "Physics2DServer",
          "setter": "",
          "getter": "",
          "description": "[Physics2DServer] singleton"
        },
        {
          "name": "PhysicsServer",
          "type": "PhysicsServer",
          "setter": "",
          "getter": "",
          "description": "[PhysicsServer] singleton"
        },
        {
          "name": "ProjectSettings",
          "type": "ProjectSettings",
          "setter": "",
          "getter": "",
          "description": "[ProjectSettings] singleton"
        },
        {
          "name": "ResourceLoader",
          "type": "ResourceLoader",
          "setter": "",
          "getter": "",
          "description": "[ResourceLoader] singleton"
        },
        {
          "name": "ResourceSaver",
          "type": "ResourceSaver",
          "setter": "",
          "getter": "",
          "description": "[ResourceSaver] singleton"
        },
        {
          "name": "TranslationServer",
          "type": "TranslationServer",
          "setter": "",
          "getter": "",
          "description": "[TranslationServer] singleton"
        },
        {
          "name": "VisualScriptEditor",
          "type": "VisualScriptEditor",
          "setter": "",
          "getter": "",
          "description": "[VisualScriptEditor] singleton"
        },
        {
          "name": "VisualServer",
          "type": "VisualServer",
          "setter": "",
          "getter": "",
          "description": "[VisualServer] singleton"
        }
      ],
      "theme_properties": []
    },
    "Physics2DShapeQueryResult": {
      "name": "Physics2DShapeQueryResult",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_result_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_result_object",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ButtonGroup": {
      "name": "ButtonGroup",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Group of Buttons.",
      "description": "Group of [Button]. All direct and indirect children buttons become radios. Only one allows being pressed.",
      "methods": [
        {
          "name": "get_pressed_button",
          "description": "Return the pressed button.",
          "return_type": "BaseButton",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "PoolByteArray": {
      "name": "PoolByteArray",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Raw byte array.",
      "description": "Raw byte array. Contains bytes. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolByteArray",
          "description": "Create from a generic array.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append a [code]PoolByteArray[/code] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "compress",
          "description": "Returns a new [code]PoolByteArray[/code] with the data compressed. Set the compression mode using one of [File]'s COMPRESS_* constants.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "compression_mode",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "decompress",
          "description": "Returns a new [code]PoolByteArray[/code] with the data decompressed. Set buffer_size to the size of the uncompressed data. Set the compression mode using one of [File]'s COMPRESS_* constants.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer_size",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "compression_mode",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_string_from_ascii",
          "description": "Returns a copy of the array's contents as [String]. Fast alternative to [method PoolByteArray.get_string_from_utf8] if the content is ASCII-only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use [method PoolByteArray.get_string_from_utf8].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_string_from_utf8",
          "description": "Returns a copy of the array's contents as [String]. Slower than [method PoolByteArray.get_string_from_ascii] but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append an element at the end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the byte at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "subarray",
          "description": "Returns the slice of the [code]PoolByteArray[/code] between indices (inclusive) as a new [code]PoolByteArray[/code].  Any negative index is considered to be from the end of the array.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HBoxContainer": {
      "name": "HBoxContainer",
      "inherits": "BoxContainer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Horizontal box container.",
      "description": "Horizontal box container. See [BoxContainer].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "CanvasModulate": {
      "name": "CanvasModulate",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Tint the entire canvas.",
      "description": "[code]CanvasModulate[/code] tints the canvas elements using its assigned [code]color[/code].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": "The tint color to apply."
        }
      ],
      "theme_properties": []
    },
    "GraphEdit": {
      "name": "GraphEdit",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "GraphEdit is an area capable of showing various GraphNodes. It manages connection events between them.",
      "description": "GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default.\n\t\tIt is greatly advised to enable low processor usage mode (see [method OS.set_low_processor_usage_mode]) when using GraphEdits.",
      "methods": [
        {
          "name": "connect_node",
          "description": "Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect_node",
          "description": "Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_list",
          "qualifiers": "const",
          "description": "Return an Array containing the list of connections. A connection consists in a structure of the form {from_slot: 0, from: \"GraphNode name 0\", to_slot: 1, to: \"GraphNode name 1\" }",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "is_node_connected",
          "description": "Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_selected",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "_begin_node_move",
          "description": "Signal sent at the beginning of a GraphNode movement.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "_end_node_move",
          "description": "Signal sent at the end of a GraphNode movement.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connection_request",
          "description": "Signal sent to the GraphEdit when the connection between 'from_slot' slot of 'from' GraphNode and 'to_slot' slot of 'to' GraphNode is attempted to be created.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_slot",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "connection_to_empty",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "release_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "delete_nodes_request",
          "description": "Signal sent when a GraphNode is attempted to be removed from the GraphEdit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "disconnection_request",
          "description": "Signal sent to the GraphEdit when the connection between 'from_slot' slot of 'from' GraphNode and 'to_slot' slot of 'to' GraphNode is attempted to be removed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_slot",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "duplicate_nodes_request",
          "description": "Signal sent when a GraphNode is attempted to be duplicated in the GraphEdit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "node_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "popup_request",
          "description": "Signal sent when a popup is requested. Happens on right-clicking in the GraphEdit. 'p_position' is the position of the mouse pointer when the signal is sent.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scroll_offset_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "right_disconnects",
          "type": "bool",
          "setter": "set_right_disconnects",
          "getter": "is_right_disconnects_enabled",
          "description": "If [code]true[/code], enables disconnection of existing connections in the GraphEdit by dragging the right end."
        },
        {
          "name": "scroll_offset",
          "type": "Vector2",
          "setter": "set_scroll_ofs",
          "getter": "get_scroll_ofs",
          "description": "The scroll offset."
        },
        {
          "name": "snap_distance",
          "type": "int",
          "setter": "set_snap",
          "getter": "get_snap",
          "description": "The snapping distance in pixels."
        },
        {
          "name": "use_snap",
          "type": "bool",
          "setter": "set_use_snap",
          "getter": "is_using_snap",
          "description": "If [code]true[/code], enables snapping."
        },
        {
          "name": "zoom",
          "type": "float",
          "setter": "set_zoom",
          "getter": "get_zoom",
          "description": "The current zoom value."
        }
      ],
      "theme_properties": [
        {
          "name": "bezier_len_neg",
          "type": "int",
          "description": ""
        },
        {
          "name": "bezier_len_pos",
          "type": "int",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grid_major",
          "type": "Color",
          "description": ""
        },
        {
          "name": "grid_minor",
          "type": "Color",
          "description": ""
        },
        {
          "name": "minus",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "more",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "reset",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "snap",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "PhysicsDirectSpaceState": {
      "name": "PhysicsDirectSpaceState",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Direct access object to a space in the [PhysicsServer].",
      "description": "Direct access object to a space in the [PhysicsServer]. It's used mainly to do queries against objects and areas residing in a given space.",
      "methods": [
        {
          "name": "cast_motion",
          "description": "Checks whether the shape can travel to a point. The method will return an array with two floats between 0 and 1, both representing a fraction of [code]motion[/code]. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be [1, 1].\n\t\t\t\tIf the shape can not move, the array will be empty ([code]dir.empty()==true[/code]).",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "motion",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_shape",
          "description": "Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        },
        {
          "name": "get_rest_info",
          "description": "Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. If it collides with more than a shape, the nearest one is selected. The returned object is a dictionary containing the following fields:\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]linear_velocity[/code]: The colliding object's velocity [Vector3]. If the object is an [Area], the result is [code](0, 0, 0)[/code].\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]point[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the shape did not intersect anything, then an empty dictionary ([code]dir.empty()==true[/code]) is returned instead.",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersect_ray",
          "description": "Intersects a ray in a given space. The returned object is a dictionary with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]position[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the ray did not intersect anything, then an empty dictionary ([code]dir.empty()==true[/code]) is returned instead.\n\t\t\t\tAdditionally, the method can take an array of objects or [RID]s that are to be excluded from collisions, or a bitmask representing the physics layers to check in.",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "exclude",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "3",
              "name": "collision_layer",
              "type": "int",
              "default_value": "2147483647"
            }
          ]
        },
        {
          "name": "intersect_shape",
          "description": "Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tThe number of intersections can be limited with the second parameter, to reduce the processing time.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MenuButton": {
      "name": "MenuButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Special button that brings up a [PopupMenu] when clicked.",
      "description": "Special button that brings up a [PopupMenu] when clicked. That's pretty much all it does, as it's just a helper class when building GUIs.",
      "methods": [
        {
          "name": "get_popup",
          "qualifiers": "const",
          "description": "Return the [PopupMenu] contained in this button.",
          "return_type": "PopupMenu",
          "arguments": []
        },
        {
          "name": "set_disable_shortcuts",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "about_to_show",
          "description": "Emitted when [PopupMenu] of this MenuButton is about to show.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ResourceImporter": {
      "name": "ResourceImporter",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CenterContainer": {
      "name": "CenterContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Keeps children controls centered.",
      "description": "CenterContainer Keeps children controls centered. This container keeps all children to their minimum size, in the center.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "use_top_left",
          "type": "bool",
          "setter": "set_use_top_left",
          "getter": "is_using_top_left",
          "description": "If [code]true[/code] centers children relative to the [code]CenterContainer[/code]'s top left corner. Default value: [code]false[/code]."
        }
      ],
      "theme_properties": []
    },
    "Separator": {
      "name": "Separator",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for separators.",
      "description": "Separator is a [Control] used for separating other controls. It's purely a visual decoration. Horizontal ([HSeparator]) and Vertical ([VSeparator]) versions are available.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MobileVRInterface": {
      "name": "MobileVRInterface",
      "inherits": "ARVRInterface",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Generic mobile VR implementation",
      "description": "This is a generic mobile VR implementation where you need to provide details about the phone and HMD used. It does not rely on any existing framework. This is the most basic interface we have. For the best effect you do need a mobile phone with a gyroscope and accelerometer.\n\t\tNote that even though there is no positional tracking the camera will assume the headset is at a height of 1.85 meters.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "display_to_lens",
          "type": "float",
          "setter": "set_display_to_lens",
          "getter": "get_display_to_lens",
          "description": "The distance between the display and the lenses inside of the device in centimeters."
        },
        {
          "name": "display_width",
          "type": "float",
          "setter": "set_display_width",
          "getter": "get_display_width",
          "description": "The width of the display in centimeters."
        },
        {
          "name": "iod",
          "type": "float",
          "setter": "set_iod",
          "getter": "get_iod",
          "description": "The interocular distance, also known as the interpupillary distance. The distance between the pupils of the left and right eye."
        },
        {
          "name": "k1",
          "type": "float",
          "setter": "set_k1",
          "getter": "get_k1",
          "description": "The k1 lens factor is one of the two constants that define the strength of the lens used and directly influences the lens distortion effect."
        },
        {
          "name": "k2",
          "type": "float",
          "setter": "set_k2",
          "getter": "get_k2",
          "description": "The k2 lens factor, see k1."
        },
        {
          "name": "oversample",
          "type": "float",
          "setter": "set_oversample",
          "getter": "get_oversample",
          "description": "The oversample setting. Because of the lens distortion we have to render our buffers at a higher resolution then the screen can natively handle. A value between 1.5 and 2.0 often provides good results but at the cost of performance."
        }
      ],
      "theme_properties": []
    },
    "Tree": {
      "name": "Tree",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Control to show a tree of items.",
      "description": "This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structured displays and interactions.\n\t\tTrees are built via code, using [TreeItem] objects to create the structure. They have a single root but multiple roots can be simulated if a dummy hidden root is added.\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t    var tree = Tree.new()\n\t\t    var root = tree.create_item()\n\t\t    tree.set_hide_root(true)\n\t\t    var child1 = tree.create_item(root)\n\t\t    var child2 = tree.create_item(root)\n\t\t    var subchild1 = tree.create_item(child1)\n\t\t    subchild1.set_text(0, \"Subchild1\")\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "are_column_titles_visible",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the column titles are being shown.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "clear",
          "description": "Clears the tree. This removes all items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_item",
          "description": "Create an item in the tree and add it as the last child of [code]parent[/code]. If parent is not given, it will be added as the root's last child, or it'll the be the root itself if the tree is empty.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "parent",
              "type": "Object",
              "default_value": "null"
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "ensure_cursor_is_visible",
          "description": "Makes the currently selected item visible. This will scroll the tree to make sure the selected item is visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_column_at_position",
          "qualifiers": "const",
          "description": "Returns the column index under the given point.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_column_title",
          "qualifiers": "const",
          "description": "Returns the column's title.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_column_width",
          "qualifiers": "const",
          "description": "Returns the column's width in pixels.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_custom_popup_rect",
          "qualifiers": "const",
          "description": "Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See [method TreeItem.set_cell_mode].",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_drop_section_at_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edited",
          "qualifiers": "const",
          "description": "Returns the currently edited item. This is only available for custom cell mode.",
          "return_type": "TreeItem",
          "arguments": []
        },
        {
          "name": "get_edited_column",
          "qualifiers": "const",
          "description": "Returns the column for the currently edited item. This is only available for custom cell mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_area_rect",
          "qualifiers": "const",
          "description": "Returns the rectangle area for the specified item. If column is specified, only get the position and size of that column, otherwise get the rectangle containing all columns.",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "column",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_item_at_position",
          "qualifiers": "const",
          "description": "Returns the tree item at the specified position (relative to the tree origin position).",
          "return_type": "TreeItem",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_next_selected",
          "description": "Returns the next selected item after the given one.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pressed_button",
          "qualifiers": "const",
          "description": "Returns the last pressed button's index.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_root",
          "description": "Returns the tree's root item.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scroll",
          "qualifiers": "const",
          "description": "Returns the current scrolling position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_selected",
          "qualifiers": "const",
          "description": "Returns the currently selected item.",
          "return_type": "TreeItem",
          "arguments": []
        },
        {
          "name": "get_selected_column",
          "qualifiers": "const",
          "description": "Returns the current selection's column.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_column_expand",
          "description": "If [code]true[/code] the column will have the \"Expand\" flag of [Control].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "expand",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_min_width",
          "description": "Set the minimum width of a column.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min_width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_title",
          "description": "Set the title of a column.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_titles_visible",
          "description": "If [code]true[/code] column titles are visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "button_pressed",
          "description": "Emitted when a button on the tree was pressed (see [method TreeItem.add_button]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cell_selected",
          "description": "Emitted when a cell is selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "column_title_pressed",
          "description": "Emitted when a column's title is pressed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_popup_edited",
          "description": "Emitted when a cell with the [code]CELL_MODE_CUSTOM[/code] is clicked to be edited.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arrow_clicked",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "empty_tree_rmb_selected",
          "description": "Emitted when the right mouse button is pressed if RMB selection is active and the tree is empty.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_activated",
          "description": "Emitted when an item is activated (double-clicked).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_collapsed",
          "description": "Emitted when an item is collapsed by a click on the folding arrow.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_custom_button_pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_double_clicked",
          "description": "Emitted when an item is double clicked.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_edited",
          "description": "Emitted when an item is edited.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_rmb_edited",
          "description": "Emitted when an item is edited using the right mouse button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_rmb_selected",
          "description": "Emitted when an item is selected with right mouse button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_selected",
          "description": "Emitted when an item is selected with right mouse button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "multi_selected",
          "description": "Emitted instead of [code]item_selected[/code] when [code]select_mode[/code] is [code]SELECT_MULTI[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "selected",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "nothing_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "SELECT_SINGLE",
          "value": "0",
          "enum": "SelectMode",
          "description": "Allow selection of a single item at a time."
        },
        {
          "name": "SELECT_ROW",
          "value": "1",
          "enum": "SelectMode",
          "description": ""
        },
        {
          "name": "SELECT_MULTI",
          "value": "2",
          "enum": "SelectMode",
          "description": "Allow selection of multiple items at the same time."
        },
        {
          "name": "DROP_MODE_DISABLED",
          "value": "0",
          "enum": "DropModeFlags",
          "description": ""
        },
        {
          "name": "DROP_MODE_ON_ITEM",
          "value": "1",
          "enum": "DropModeFlags",
          "description": ""
        },
        {
          "name": "DROP_MODE_INBETWEEN",
          "value": "2",
          "enum": "DropModeFlags",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "allow_reselect",
          "type": "bool",
          "setter": "set_allow_reselect",
          "getter": "get_allow_reselect",
          "description": "If [code]true[/code] the currently selected cell may be selected again."
        },
        {
          "name": "allow_rmb_select",
          "type": "bool",
          "setter": "set_allow_rmb_select",
          "getter": "get_allow_rmb_select",
          "description": "If [code]true[/code] a right mouse button click can select items."
        },
        {
          "name": "columns",
          "type": "int",
          "setter": "set_columns",
          "getter": "get_columns",
          "description": "The amount of columns."
        },
        {
          "name": "drop_mode_flags",
          "type": "int",
          "setter": "set_drop_mode_flags",
          "getter": "get_drop_mode_flags",
          "description": "The drop mode as an OR combination of flags. See [code]DROP_MODE_*[/code] constants."
        },
        {
          "name": "hide_folding",
          "type": "bool",
          "setter": "set_hide_folding",
          "getter": "is_folding_hidden",
          "description": "If [code]true[/code] the folding arrow is hidden."
        },
        {
          "name": "hide_root",
          "type": "bool",
          "setter": "set_hide_root",
          "getter": "is_root_hidden",
          "description": "If [code]true[/code] the tree's root is hidden."
        },
        {
          "name": "select_mode",
          "type": "int",
          "setter": "set_select_mode",
          "getter": "get_select_mode",
          "enum": "Tree.SelectMode",
          "description": "Allow single or multiple selection. See the [code]SELECT_*[/code] constants."
        }
      ],
      "theme_properties": [
        {
          "name": "arrow",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "arrow_collapsed",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "bg_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "button_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "cursor",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "cursor_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "cursor_unfocused",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "custom_button",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "custom_button_font_highlight",
          "type": "Color",
          "description": ""
        },
        {
          "name": "custom_button_hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "custom_button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "draw_relationship_lines",
          "type": "int",
          "description": ""
        },
        {
          "name": "drop_position_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "guide_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "guide_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "item_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "relationship_line_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "scroll_border",
          "type": "int",
          "description": ""
        },
        {
          "name": "scroll_speed",
          "type": "int",
          "description": ""
        },
        {
          "name": "select_arrow",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "selected",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selected_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_button_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_button_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "title_button_hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "title_button_normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "title_button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "unchecked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "updown",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "NodePath": {
      "name": "NodePath",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Pre-parsed scene tree path.",
      "description": "A pre-parsed relative or absolute path in a scene tree, for use with [method Node.get_node] and similar functions. It can reference a node, a resource within a node, or a property of a node or resource. For instance, [code]\"Path2D/PathFollow2D/Sprite:texture:size\"[/code] would refer to the size property of the texture resource on the node named \"Sprite\" which is a child of the other named nodes in the path. Note that if you want to get a resource, you must end the path with a colon, otherwise the last element will be used as a property name.\n\t\tYou will usually just pass a string to [method Node.get_node] and it will be automatically converted, but you may occasionally want to parse a path ahead of time with [code]NodePath[/code] or the literal syntax [code]@\"path\"[/code]. Exporting a [code]NodePath[/code] variable will give you a node selection widget in the properties panel of the editor, which can often be useful.\n\t\tA [code]NodePath[/code] is made up of a list of node names, a list of \"subnode\" (resource) names, and the name of a property in the final node or resource.",
      "methods": [
        {
          "name": "NodePath",
          "description": "Create a NodePath from a string, e.g. \"Path2D/PathFollow2D/Sprite:texture:size\". A path is absolute if it starts with a slash. Absolute paths are only valid in the global scene tree, not within individual scenes. In a relative path, [code]\".\"[/code] and [code]\"..\"[/code] indicate the current node and its parent.",
          "return_type": "NodePath",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_as_property_path",
          "description": "",
          "return_type": "NodePath",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_concatenated_subnames",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_name",
          "description": "Get the node name indicated by [code]idx[/code] (0 to [method get_name_count])",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_name_count",
          "description": "Get the number of node names which make up the path.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_subname",
          "description": "Get the resource name indicated by [code]idx[/code] (0 to [method get_subname_count])",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_subname_count",
          "description": "Get the number of resource names in the path.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_absolute",
          "description": "Return true if the node path is absolute (not relative).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_empty",
          "description": "Return true if the node path is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "KinematicBody": {
      "name": "KinematicBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Kinematic body 3D node.",
      "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:\n\t\tSimulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\tKinematic Characters: KinematicBody also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.",
      "methods": [
        {
          "name": "get_floor_velocity",
          "qualifiers": "const",
          "description": "Returns the velocity of the floor. Only updates when calling [method move_and_slide].",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_slide_collision",
          "description": "Returns a [KinematicCollision], which contains information about a collision that occurred during the last [method move_and_slide] call. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count] - 1).",
          "return_type": "KinematicCollision",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "slide_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slide_count",
          "qualifiers": "const",
          "description": "Returns the number of times the body collided and changed direction during the last call to [method move_and_slide].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_on_ceiling",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on the ceiling. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_on_floor",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on the floor. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_on_wall",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on a wall. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "move_and_collide",
          "description": "Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision], which contains information about the collision.",
          "return_type": "KinematicCollision",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rel_vec",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_and_slide",
          "description": "Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [code]KinematicBody[/code] or [RigidBody], it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.\n\t\t\t\t[code]linear_velocity[/code] is a value in pixels per second. Unlike in for example [method move_and_collide], you should [i]not[/i] multiply it with [code]delta[/code] — this is done by the method.\n\t\t\t\t[code]floor_normal[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector3(0, 0, 0)[/code], everything is considered a wall. This is useful for topdown games.\n\t\t\t\tIf the body is standing on a slope and the horizontal speed (relative to the floor's speed) goes below [code]slope_stop_min_velocity[/code], the body will stop completely. This prevents the body from sliding down slopes when you include gravity in [code]linear_velocity[/code]. When set to lower values, the body will not be able to stand still on steep slopes.\n\t\t\t\tIf the body collides, it will change direction a maximum of [code]max_bounces[/code] times before it stops.\n\t\t\t\t[code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.\n\t\t\t\tReturns the movement that remained when the body stopped. To get more detailed information about collisions that occurred, use [method get_slide_collision].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_velocity",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "floor_normal",
              "type": "Vector3",
              "default_value": "Vector3( 0, 0, 0 )"
            },
            {
              "index": "2",
              "name": "slope_stop_min_velocity",
              "type": "float",
              "default_value": "0.05"
            },
            {
              "index": "3",
              "name": "max_slides",
              "type": "int",
              "default_value": "4"
            },
            {
              "index": "4",
              "name": "floor_max_angle",
              "type": "float",
              "default_value": "0.785398"
            }
          ]
        },
        {
          "name": "test_move",
          "description": "Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rel_vec",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "axis_lock_angular_x",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_angular_y",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_angular_z",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_linear_x",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_linear_y",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "axis_lock_linear_z",
          "type": "bool",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "description": ""
        },
        {
          "name": "collision/safe_margin",
          "type": "float",
          "setter": "set_safe_margin",
          "getter": "get_safe_margin",
          "description": "If the body is at least this close to another body, this body will consider them to be colliding."
        }
      ],
      "theme_properties": []
    },
    "ARVRServer": {
      "name": "ARVRServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "This is our AR/VR Server.",
      "description": "The AR/VR Server is the heart of our AR/VR solution and handles all the processing.",
      "methods": [
        {
          "name": "center_on_hmd",
          "description": "This is a really important function to understand correctly. AR and VR platforms all handle positioning slightly differently.\n\t\t\t\tFor platforms that do not offer spatial tracking our origin point (0,0,0) is the location of our HMD but you have little control over the direction the player is facing in the real world.\n\t\t\t\tFor platforms that do offer spatial tracking our origin point depends very much on the system. For OpenVR our origin point is usually the center of the tracking space, on the ground. For other platforms its often the location of the tracking camera.\n\t\t\t\tThis method allows you to center our tracker on the location of the HMD, it will take the current location of the HMD and use that to adjust all our tracking data in essence realigning the real world to your players current position in your game world.\n\t\t\t\tFor this method to produce usable results tracking information should be available and this often takes a few frames after starting your game.\n\t\t\t\tYou should call this method after a few seconds have passed, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, and when implementing a teleport mechanism.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotation_mode",
              "type": "int",
              "enum": "ARVRServer.RotationMode",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "keep_height",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_interface",
          "qualifiers": "const",
          "description": "Find an interface by its name. Say that you're making a game that uses specific capabilities of an AR/VR platform you can find the interface for that platform by name and initialize it.",
          "return_type": "ARVRInterface",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_interface",
          "qualifiers": "const",
          "description": "Get the interface registered at a given index in our list of interfaces.",
          "return_type": "ARVRInterface",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_interface_count",
          "qualifiers": "const",
          "description": "Get the number of interfaces currently registered with the AR/VR server. If you're game supports multiple AR/VR platforms you can look through the available interface and either present the user with a selection or simply try an initialize each interface and use the first one that returns true.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_interfaces",
          "qualifiers": "const",
          "description": "Returns a list of available interfaces with both id and name of the interface.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_reference_frame",
          "qualifiers": "const",
          "description": "Gets our reference frame transform, mostly used internally and exposed for GDNative build interfaces.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "get_tracker",
          "qualifiers": "const",
          "description": "Get the positional tracker at the given ID.",
          "return_type": "ARVRPositionalTracker",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tracker_count",
          "qualifiers": "const",
          "description": "Get the number of trackers currently registered.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_primary_interface",
          "description": "Changes the primary interface to the specified interface. Again mostly exposed for GDNative interfaces.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "interface",
              "type": "ARVRInterface",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "interface_added",
          "description": "Signal send when a new interface has been added.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "interface_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interface_removed",
          "description": "Signal send when an interface is removed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "interface_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tracker_added",
          "description": "Signal send when a new tracker has been added. If you don't use a fixed number of controllers or if you're using ARVRAnchors for an AR solution it is important to react to this signal and add the appropriate ARVRController or ARVRAnchor node related to this new tracker.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tracker_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tracker_removed",
          "description": "Signal send when a tracker is removed, you should remove any ARVRController or ARVRAnchor points if applicable. This is not mandatory, the nodes simply become inactive and will be made active again when a new tracker becomes available (i.e. a new controller is switched on that takes the place of the previous one).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tracker_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "TRACKER_CONTROLLER",
          "value": "1",
          "enum": "TrackerType",
          "description": "Our tracker tracks the location of a controller."
        },
        {
          "name": "TRACKER_BASESTATION",
          "value": "2",
          "enum": "TrackerType",
          "description": "Our tracker tracks the location of a base station."
        },
        {
          "name": "TRACKER_ANCHOR",
          "value": "4",
          "enum": "TrackerType",
          "description": "Our tracker tracks the location and size of an AR anchor."
        },
        {
          "name": "TRACKER_ANY_KNOWN",
          "value": "127",
          "enum": "TrackerType",
          "description": "Used internally to filter trackers of any known type."
        },
        {
          "name": "TRACKER_UNKNOWN",
          "value": "128",
          "enum": "TrackerType",
          "description": "Used internally if we haven't set the tracker type yet."
        },
        {
          "name": "TRACKER_ANY",
          "value": "255",
          "enum": "TrackerType",
          "description": "Used internally to select all trackers."
        },
        {
          "name": "RESET_FULL_ROTATION",
          "value": "0",
          "enum": "RotationMode",
          "description": "Fully reset the orientation of the HMD. Regardless of what direction the user is looking to in the real world. The user will look dead ahead in the virtual world."
        },
        {
          "name": "RESET_BUT_KEEP_TILT",
          "value": "1",
          "enum": "RotationMode",
          "description": "Resets the orientation but keeps the tilt of the device. So if we're looking down, we keep looking down but heading will be reset."
        },
        {
          "name": "DONT_RESET_ROTATION",
          "value": "2",
          "enum": "RotationMode",
          "description": "Does not reset the orientation of the HMD, only the position of the player gets centered."
        }
      ],
      "properties": [
        {
          "name": "world_scale",
          "type": "float",
          "setter": "set_world_scale",
          "getter": "get_world_scale",
          "description": "Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 meter in the real world."
        }
      ],
      "theme_properties": []
    },
    "PacketPeer": {
      "name": "PacketPeer",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Abstraction and base class for packet-based protocols.",
      "description": "PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low level bytes or having to worry about network ordering.",
      "methods": [
        {
          "name": "get_available_packet_count",
          "qualifiers": "const",
          "description": "Return the number of packets currently available in the ring-buffer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_packet",
          "description": "Get a raw packet.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_packet_error",
          "qualifiers": "const",
          "description": "Return the error state of the last packet received (via [method get_packet] and [method get_var]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_var",
          "description": "Get a Variant.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "put_packet",
          "description": "Send a raw packet.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_var",
          "description": "Send a Variant as a packet.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "allow_object_decoding",
          "type": "bool",
          "setter": "set_allow_object_decoding",
          "getter": "is_object_decoding_allowed",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Light2D": {
      "name": "Light2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Casts light in a 2D environment.",
      "description": "Casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related). Note that Light2D can be used as a mask.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "MODE_ADD",
          "value": "0",
          "enum": "Mode",
          "description": "Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behaviour of a light."
        },
        {
          "name": "MODE_SUB",
          "value": "1",
          "enum": "Mode",
          "description": "Subtracts the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect."
        },
        {
          "name": "MODE_MIX",
          "value": "2",
          "enum": "Mode",
          "description": "Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation."
        },
        {
          "name": "MODE_MASK",
          "value": "3",
          "enum": "Mode",
          "description": "The light texture of the Light2D is used as a mask, hiding or revealing parts of the screen underneath depending on the value of each pixel of the light (mask) texture."
        },
        {
          "name": "SHADOW_FILTER_NONE",
          "value": "0",
          "enum": "ShadowFilter",
          "description": "No filter applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF3",
          "value": "1",
          "enum": "ShadowFilter",
          "description": "Percentage closer filtering (3 samples) applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF5",
          "value": "2",
          "enum": "ShadowFilter",
          "description": "Percentage closer filtering (5 samples) applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF7",
          "value": "3",
          "enum": "ShadowFilter",
          "description": "Percentage closer filtering (7 samples) applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF9",
          "value": "4",
          "enum": "ShadowFilter",
          "description": "Percentage closer filtering (9 samples) applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF13",
          "value": "5",
          "enum": "ShadowFilter",
          "description": "Percentage closer filtering (13 samples) applies to the shadow map. See [method shadow_filter]."
        }
      ],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": "The Light2D's [Color]."
        },
        {
          "name": "editor_only",
          "type": "bool",
          "setter": "set_editor_only",
          "getter": "is_editor_only",
          "description": "If [code]true[/code] Light2D will only appear when editing the scene. Default value: [code]false[/code]."
        },
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": "If [code]true[/code] Light2D will emit light. Default value: [code]true[/code]."
        },
        {
          "name": "energy",
          "type": "float",
          "setter": "set_energy",
          "getter": "get_energy",
          "description": "The Light2D's energy value. The larger the value, the stronger the light."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "Light2D.Mode",
          "description": "The Light2D's mode. See MODE_* constants for values."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_texture_offset",
          "getter": "get_texture_offset",
          "description": "The offset of the Light2D's [code]texture[/code]."
        },
        {
          "name": "range_height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "The height of the Light2D. Used with 2D normal mapping."
        },
        {
          "name": "range_item_cull_mask",
          "type": "int",
          "setter": "set_item_cull_mask",
          "getter": "get_item_cull_mask",
          "description": "The layer mask. Only objects with a matching mask will be affected by the Light2D."
        },
        {
          "name": "range_layer_max",
          "type": "int",
          "setter": "set_layer_range_max",
          "getter": "get_layer_range_max",
          "description": "Maximum layer value of objects that are affected by the Light2D. Default value: [code]0[/code]."
        },
        {
          "name": "range_layer_min",
          "type": "int",
          "setter": "set_layer_range_min",
          "getter": "get_layer_range_min",
          "description": "Minimum layer value of objects that are affected by the Light2D. Default value: [code]0[/code]."
        },
        {
          "name": "range_z_max",
          "type": "int",
          "setter": "set_z_range_max",
          "getter": "get_z_range_max",
          "description": "Maximum [code]Z[/code] value of objects that are affected by the Light2D. Default value: [code]1024[/code]."
        },
        {
          "name": "range_z_min",
          "type": "int",
          "setter": "set_z_range_min",
          "getter": "get_z_range_min",
          "description": "Minimum [code]z[/code] value of objects that are affected by the Light2D. Default value: [code]-1024[/code]."
        },
        {
          "name": "shadow_buffer_size",
          "type": "int",
          "setter": "set_shadow_buffer_size",
          "getter": "get_shadow_buffer_size",
          "description": "Shadow buffer size. Default value: [code]2048[/code]."
        },
        {
          "name": "shadow_color",
          "type": "Color",
          "setter": "set_shadow_color",
          "getter": "get_shadow_color",
          "description": "[Color] of shadows cast by the Light2D."
        },
        {
          "name": "shadow_enabled",
          "type": "bool",
          "setter": "set_shadow_enabled",
          "getter": "is_shadow_enabled",
          "description": "If [code]true[/code] the Light2D will cast shadows. Default value: [code]false[/code]."
        },
        {
          "name": "shadow_filter",
          "type": "int",
          "setter": "set_shadow_filter",
          "getter": "get_shadow_filter",
          "enum": "Light2D.ShadowFilter",
          "description": "Shadow filter type. Use SHADOW_FILTER_* constants to set [code]shadow_filter[/code]. Default value: [code]None[/code]."
        },
        {
          "name": "shadow_filter_smooth",
          "type": "float",
          "setter": "set_shadow_smooth",
          "getter": "get_shadow_smooth",
          "description": "Smoothing value for shadows."
        },
        {
          "name": "shadow_gradient_length",
          "type": "float",
          "setter": "set_shadow_gradient_length",
          "getter": "get_shadow_gradient_length",
          "description": "Smooth shadow gradient length."
        },
        {
          "name": "shadow_item_cull_mask",
          "type": "int",
          "setter": "set_item_shadow_cull_mask",
          "getter": "get_item_shadow_cull_mask",
          "description": "The shadow mask. Used with [LightOccluder2D] to cast shadows. Only occluders with a matching shadow mask will cast shadows."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "[Texture] used for the Light2D's appearance."
        },
        {
          "name": "texture_scale",
          "type": "float",
          "setter": "set_texture_scale",
          "getter": "get_texture_scale",
          "description": "The [code]texture[/code]'s scale factor."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptSubCall": {
      "name": "VisualScriptSubCall",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "_subcall",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "arguments",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GeometryInstance": {
      "name": "GeometryInstance",
      "inherits": "VisualInstance",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base node for geometry based visual instances.",
      "description": "Base node for geometry based visual instances. Shares some common functionality like visibility and custom materials.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "SHADOW_CASTING_SETTING_OFF",
          "value": "0",
          "enum": "ShadowCastingSetting",
          "description": "Will not cast any shadows."
        },
        {
          "name": "SHADOW_CASTING_SETTING_ON",
          "value": "1",
          "enum": "ShadowCastingSetting",
          "description": "Will cast shadows from all visible faces in the GeometryInstance.\n\t\t\tWill take culling into account, so faces not being rendered will not be taken into account when shadow casting."
        },
        {
          "name": "SHADOW_CASTING_SETTING_DOUBLE_SIDED",
          "value": "2",
          "enum": "ShadowCastingSetting",
          "description": "Will cast shadows from all visible faces in the GeometryInstance.\n\t\t\tWill not take culling into account, so all faces will be taken into account when shadow casting."
        },
        {
          "name": "SHADOW_CASTING_SETTING_SHADOWS_ONLY",
          "value": "3",
          "enum": "ShadowCastingSetting",
          "description": "Will only show the shadows casted from this object.\n\t\t\tIn other words: The actual mesh will not be visible, only the shadows casted from the mesh."
        },
        {
          "name": "FLAG_USE_BAKED_LIGHT",
          "value": "0",
          "enum": "Flags",
          "description": "Will allow the GeometryInstance to be used when baking lights using a [GIProbe] and/or any other form of baked lighting.\n\t\t\tAdded documentation for GeometryInstance and VisualInstance"
        },
        {
          "name": "FLAG_MAX",
          "value": "1",
          "enum": "Flags",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "cast_shadow",
          "type": "int",
          "setter": "set_cast_shadows_setting",
          "getter": "get_cast_shadows_setting",
          "enum": "GeometryInstance.ShadowCastingSetting",
          "description": "The selected shadow casting flag. See SHADOW_CASTING_SETTING_* constants for values."
        },
        {
          "name": "extra_cull_margin",
          "type": "float",
          "setter": "set_extra_cull_margin",
          "getter": "get_extra_cull_margin",
          "description": "The extra distance added to the GeometryInstance's bounding box ([AABB]) to increase its cull box."
        },
        {
          "name": "lod_max_distance",
          "type": "float",
          "setter": "set_lod_max_distance",
          "getter": "get_lod_max_distance",
          "description": "The GeometryInstance's max LOD distance."
        },
        {
          "name": "lod_max_hysteresis",
          "type": "float",
          "setter": "set_lod_max_hysteresis",
          "getter": "get_lod_max_hysteresis",
          "description": "The GeometryInstance's max LOD margin."
        },
        {
          "name": "lod_min_distance",
          "type": "float",
          "setter": "set_lod_min_distance",
          "getter": "get_lod_min_distance",
          "description": "The GeometryInstance's min LOD distance."
        },
        {
          "name": "lod_min_hysteresis",
          "type": "float",
          "setter": "set_lod_min_hysteresis",
          "getter": "get_lod_min_hysteresis",
          "description": "The GeometryInstance's min LOD margin."
        },
        {
          "name": "material_override",
          "type": "Material",
          "setter": "set_material_override",
          "getter": "get_material_override",
          "description": "The material override for the whole geometry.\n\t\t\tIf there is a material in material_override, it will be used instead of any material set in any material slot of the mesh."
        },
        {
          "name": "use_in_baked_light",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": "If [code]true[/code] this GeometryInstance will be used when baking lights using a [GIProbe] and/or any other form of baked lighting."
        }
      ],
      "theme_properties": []
    },
    "Area2D": {
      "name": "Area2D",
      "inherits": "CollisionObject2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "2D area for detection and 2D physics influence.",
      "description": "2D area that detects [CollisionObject2D] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).",
      "methods": [
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the layer mask. Describes whether other areas will collide with this one on the given layer.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask. Describes whether this area will collide with others on the given layer.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_overlapping_areas",
          "qualifiers": "const",
          "description": "Returns a list of intersecting [code]Area2D[/code]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_overlapping_bodies",
          "qualifiers": "const",
          "description": "Returns a list of intersecting [PhysicsBody2D]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "overlaps_area",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given area overlaps the Area2D. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "overlaps_body",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given body overlaps the Area2D. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "area_entered",
          "description": "Emitted when another area enters.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_exited",
          "description": "Emitted when another area exits.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_shape_entered",
          "description": "Emitted when another area enters, reporting which shapes overlapped.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_shape_exited",
          "description": "Emitted when another area exits, reporting which shapes were overlapping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_entered",
          "description": "Emitted when a [PhysicsBody2D] object enters.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exited",
          "description": "Emitted when a [PhysicsBody2D] object exits.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_entered",
          "description": "Emitted when a [PhysicsBody2D] object enters, reporting which shapes overlapped.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_exited",
          "description": "Emitted when a [PhysicsBody2D] object exits, reporting which shapes were overlapping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "enum": "SpaceOverride",
          "description": "This area does not affect gravity/damping."
        },
        {
          "name": "SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "enum": "SpaceOverride",
          "description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order)."
        },
        {
          "name": "SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "enum": "SpaceOverride",
          "description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order), ignoring any lower priority areas."
        },
        {
          "name": "SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "enum": "SpaceOverride",
          "description": "This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas."
        },
        {
          "name": "SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "enum": "SpaceOverride",
          "description": "This area replaces any gravity/damping calculated so far (in [code]priority[/code] order), but keeps calculating the rest of the areas."
        }
      ],
      "properties": [
        {
          "name": "angular_damp",
          "type": "float",
          "setter": "set_angular_damp",
          "getter": "get_angular_damp",
          "description": "The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping)."
        },
        {
          "name": "audio_bus_name",
          "type": "String",
          "setter": "set_audio_bus_name",
          "getter": "get_audio_bus_name",
          "description": "The name of the area's audio bus."
        },
        {
          "name": "audio_bus_override",
          "type": "bool",
          "setter": "set_audio_bus_override",
          "getter": "is_overriding_audio_bus",
          "description": "If [code]true[/code] the area's audio bus overrides the default audio bus. Default value: [code]false[/code]."
        },
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [code]collision_mask[/code]."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The physics layers this area scans to determine collision detection."
        },
        {
          "name": "gravity",
          "type": "float",
          "setter": "set_gravity",
          "getter": "get_gravity",
          "description": "The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction."
        },
        {
          "name": "gravity_distance_scale",
          "type": "float",
          "setter": "set_gravity_distance_scale",
          "getter": "get_gravity_distance_scale",
          "description": "The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance."
        },
        {
          "name": "gravity_point",
          "type": "bool",
          "setter": "set_gravity_is_point",
          "getter": "is_gravity_a_point",
          "description": "If [code]true[/code] gravity is calculated from a point (set via [code]gravity_vec[/code]). Also see [code]space_override[/code]. Default value: [code]false[/code]."
        },
        {
          "name": "gravity_vec",
          "type": "Vector2",
          "setter": "set_gravity_vector",
          "getter": "get_gravity_vector",
          "description": "The area's gravity vector (not normalized). If gravity is a point (see [method is_gravity_a_point]), this will be the point of attraction."
        },
        {
          "name": "linear_damp",
          "type": "float",
          "setter": "set_linear_damp",
          "getter": "get_linear_damp",
          "description": "The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping)."
        },
        {
          "name": "monitorable",
          "type": "bool",
          "setter": "set_monitorable",
          "getter": "is_monitorable",
          "description": "If [code]true[/code] other monitoring areas can detect this area. Default value: [code]true[/code]."
        },
        {
          "name": "monitoring",
          "type": "bool",
          "setter": "set_monitoring",
          "getter": "is_monitoring",
          "description": "If [code]true[/code] the area detects bodies or areas entering and exiting it. Default value: [code]true[/code]."
        },
        {
          "name": "priority",
          "type": "float",
          "setter": "set_priority",
          "getter": "get_priority",
          "description": "The area's priority. Higher priority areas are processed first. Default value: 0."
        },
        {
          "name": "space_override",
          "type": "int",
          "setter": "set_space_override_mode",
          "getter": "get_space_override_mode",
          "enum": "Area2D.SpaceOverride",
          "description": "Override mode for gravity and damping calculations within this area. See the SPACE_OVERRIDE_* constants for values."
        }
      ],
      "theme_properties": []
    },
    "CanvasItem": {
      "name": "CanvasItem",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class of anything 2D.",
      "description": "Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by [Control], for anything GUI related, and by [Node2D] for anything 2D engine related.\n\t\tAny CanvasItem can draw. For this, the \"update\" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though.\n\t\tCanvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though).\n\t\tCanvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode.\n\t\tUltimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.",
      "methods": [
        {
          "name": "_draw",
          "qualifiers": "virtual",
          "description": "Called (if exists) to draw the canvas item.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "draw_char",
          "description": "Draws a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "char",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "next",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            }
          ]
        },
        {
          "name": "draw_circle",
          "description": "Draws a colored circle.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_colored_polygon",
          "description": "Draws a colored polygon of any amount of points, convex or concave.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "3",
              "name": "texture",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "5",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_line",
          "description": "Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "4",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_multiline",
          "description": "Draws multiple, parallel lines with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "3",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_multiline_colors",
          "description": "Draws multiple, parallel lines with a uniform [code]width[/code], segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "3",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_polygon",
          "description": "Draws a polygon of any amount of points, convex or concave.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "3",
              "name": "texture",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "5",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_polyline",
          "description": "Draws interconnected line segments with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "3",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_polyline_colors",
          "description": "Draws interconnected line segments with a uniform [code]width[/code], segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "3",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_primitive",
          "description": "Draws a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "texture",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_rect",
          "description": "Draws a colored rectangle.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "filled",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "draw_set_transform",
          "description": "Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rotation",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_set_transform_matrix",
          "description": "Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_string",
          "description": "Draws a string using a custom font.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "clip_w",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "draw_style_box",
          "description": "Draws a styled rectangle.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "style_box",
              "type": "StyleBox",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_texture",
          "description": "Draws a texture at a given position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "3",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_texture_rect",
          "description": "Draws a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tile",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_texture_rect_region",
          "description": "Draws a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "6",
              "name": "clip_uv",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_canvas",
          "qualifiers": "const",
          "description": "Return the [RID] of the [World2D] canvas where this item is in.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_canvas_item",
          "qualifiers": "const",
          "description": "Return the canvas item RID used by [VisualServer] for this item.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_canvas_transform",
          "qualifiers": "const",
          "description": "Get the transform matrix of this item's canvas.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_global_mouse_position",
          "qualifiers": "const",
          "description": "Get the global position of the mouse.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_global_transform",
          "qualifiers": "const",
          "description": "Get the global transform matrix of this item.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_global_transform_with_canvas",
          "qualifiers": "const",
          "description": "Get the global transform matrix of this item in relation to the canvas.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_local_mouse_position",
          "qualifiers": "const",
          "description": "Get the mouse position relative to this item's position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Get the transform matrix of this item.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_viewport_rect",
          "qualifiers": "const",
          "description": "Get the viewport's boundaries as a [Rect2].",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_viewport_transform",
          "qualifiers": "const",
          "description": "Get this item's transform in relation to the viewport.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_world_2d",
          "qualifiers": "const",
          "description": "Get the [World2D] where this item is in.",
          "return_type": "World2D",
          "arguments": []
        },
        {
          "name": "hide",
          "description": "Hide the CanvasItem currently visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_local_transform_notification_enabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if local transform notifications are communicated to children.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_set_as_toplevel",
          "qualifiers": "const",
          "description": "Return if set as toplevel. See [method set_as_toplevel].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_transform_notification_enabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if global transform notifications are communicated to children.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_visible_in_tree",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the node is present in the [SceneTree], its [member visible] property is [code]true[/code] and its inherited visibility is also [code]true[/code].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_canvas_position_local",
          "qualifiers": "const",
          "description": "Assigns [code]screen_point[/code] as this node's new local transform.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_input_local",
          "qualifiers": "const",
          "description": "Transformations issued by [code]event[/code]'s inputs are applied in local space instead of global space.",
          "return_type": "InputEvent",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_as_toplevel",
          "description": "Sets as top level. This means that it will not inherit transform from parent canvas items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_notify_local_transform",
          "description": "If [code]enable[/code] is [code]true[/code], children will be updated with local transform data.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_notify_transform",
          "description": "If [code]enable[/code] is [code]true[/code], children will be updated with global transform data.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show",
          "description": "Show the CanvasItem currently hidden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "update",
          "description": "Queue the CanvasItem for update. [code]NOTIFICATION_DRAW[/code] will be called on idle time to request redraw.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "draw",
          "description": "Emitted when the CanvasItem must redraw. This can only be connected realtime, as deferred will not allow drawing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "hide",
          "description": "Emitted when becoming hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_rect_changed",
          "description": "Emitted when the item rect has changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "visibility_changed",
          "description": "Emitted when the visibility (hidden/visible) changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "BLEND_MODE_MIX",
          "value": "0",
          "enum": "BlendMode",
          "description": "Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value."
        },
        {
          "name": "BLEND_MODE_ADD",
          "value": "1",
          "enum": "BlendMode",
          "description": "Additive blending mode."
        },
        {
          "name": "BLEND_MODE_SUB",
          "value": "2",
          "enum": "BlendMode",
          "description": "Subtractive blending mode."
        },
        {
          "name": "BLEND_MODE_MUL",
          "value": "3",
          "enum": "BlendMode",
          "description": "Multiplicative blending mode."
        },
        {
          "name": "BLEND_MODE_PREMULT_ALPHA",
          "value": "4",
          "enum": "BlendMode",
          "description": "Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value."
        },
        {
          "name": "NOTIFICATION_TRANSFORM_CHANGED",
          "value": "29",
          "description": "Canvas item transform has changed. Only received if requested."
        },
        {
          "name": "NOTIFICATION_DRAW",
          "value": "30",
          "description": "CanvasItem is requested to draw."
        },
        {
          "name": "NOTIFICATION_VISIBILITY_CHANGED",
          "value": "31",
          "description": "Canvas item visibility has changed."
        },
        {
          "name": "NOTIFICATION_ENTER_CANVAS",
          "value": "32",
          "description": "Canvas item has entered the canvas."
        },
        {
          "name": "NOTIFICATION_EXIT_CANVAS",
          "value": "33",
          "description": "Canvas item has exited the canvas."
        }
      ],
      "properties": [
        {
          "name": "light_mask",
          "type": "int",
          "setter": "set_light_mask",
          "getter": "get_light_mask",
          "description": "The rendering layers in which this [code]CanvasItem[/code] responds to [Light2D] nodes. Default value: [code]1[/code]."
        },
        {
          "name": "material",
          "type": "Material",
          "setter": "set_material",
          "getter": "get_material",
          "description": "The material applied to textures on this [code]CanvasItem[/code]. Default value: [code]null[/code]."
        },
        {
          "name": "modulate",
          "type": "Color",
          "setter": "set_modulate",
          "getter": "get_modulate",
          "description": "The color applied to textures on this [code]CanvasItem[/code]. Default value: [code]Color(1, 1, 1, 1)[/code] (opaque \"white\")."
        },
        {
          "name": "self_modulate",
          "type": "Color",
          "setter": "set_self_modulate",
          "getter": "get_self_modulate",
          "description": "The color applied to textures on this [code]CanvasItem[/code]. This is not inherited by children [code]CanvasItem[/code]s. Default value: [code]Color(1, 1, 1, 1)[/code] (opaque \"white\").."
        },
        {
          "name": "show_behind_parent",
          "type": "bool",
          "setter": "set_draw_behind_parent",
          "getter": "is_draw_behind_parent_enabled",
          "description": "If [code]true[/code] the object draws behind its parent. Default value: [code]false[/code]."
        },
        {
          "name": "show_on_top",
          "type": "bool",
          "setter": "_set_on_top",
          "getter": "_is_on_top",
          "description": "If [code]true[/code] the object draws on top of its parent. Default value: [code]true[/code]."
        },
        {
          "name": "use_parent_material",
          "type": "bool",
          "setter": "set_use_parent_material",
          "getter": "get_use_parent_material",
          "description": "If [code]true[/code] the parent [code]CanvasItem[/code]'s [member material] property is used as this one's material. Default value: [code]false[/code]."
        },
        {
          "name": "visible",
          "type": "bool",
          "setter": "set_visible",
          "getter": "is_visible",
          "description": "If [code]true[/code] this [code]CanvasItem[/code] is drawn. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectStereoEnhance": {
      "name": "AudioEffectStereoEnhance",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "pan_pullout",
          "type": "float",
          "setter": "set_pan_pullout",
          "getter": "get_pan_pullout",
          "description": ""
        },
        {
          "name": "surround",
          "type": "float",
          "setter": "set_surround",
          "getter": "get_surround",
          "description": ""
        },
        {
          "name": "time_pullout_ms",
          "type": "float",
          "setter": "set_time_pullout",
          "getter": "get_time_pullout",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectDelay": {
      "name": "AudioEffectDelay",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a Delay audio effect to an Audio bus. Plays input signal back after a period of time.\n\t\tTwo tap delay and feedback options.",
      "description": "Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "dry",
          "type": "float",
          "setter": "set_dry",
          "getter": "get_dry",
          "description": "Output percent of original sound. At 0, only delayed sounds are output. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "feedback/active",
          "type": "bool",
          "setter": "set_feedback_active",
          "getter": "is_feedback_active",
          "description": "If [code]true[/code] feedback is enabled. Default value: [code]false[/code]."
        },
        {
          "name": "feedback/delay_ms",
          "type": "float",
          "setter": "set_feedback_delay_ms",
          "getter": "get_feedback_delay_ms",
          "description": "Feedback delay time in milliseconds. Default value: [code]340[/code]."
        },
        {
          "name": "feedback/level_db",
          "type": "float",
          "setter": "set_feedback_level_db",
          "getter": "get_feedback_level_db",
          "description": "Sound level for [code]tap1[/code]. Default value: [code]-6 dB[/code]."
        },
        {
          "name": "feedback/lowpass",
          "type": "float",
          "setter": "set_feedback_lowpass",
          "getter": "get_feedback_lowpass",
          "description": "Low-pass filter for feedback. Frequencies below the Low Cut value are filtered out of the source signal. Default value: [code]16000[/code]."
        },
        {
          "name": "tap1/active",
          "type": "bool",
          "setter": "set_tap1_active",
          "getter": "is_tap1_active",
          "description": "If [code]true[/code], [code]tap1[/code] will be enabled. Default value: [code]true[/code]."
        },
        {
          "name": "tap1/delay_ms",
          "type": "float",
          "setter": "set_tap1_delay_ms",
          "getter": "get_tap1_delay_ms",
          "description": "[b]Tap1[/b] delay time in milliseconds. Default value: [code]250ms[/code]."
        },
        {
          "name": "tap1/level_db",
          "type": "float",
          "setter": "set_tap1_level_db",
          "getter": "get_tap1_level_db",
          "description": "Sound level for [code]tap1[/code]. Default value: [code]-6 dB[/code]."
        },
        {
          "name": "tap1/pan",
          "type": "float",
          "setter": "set_tap1_pan",
          "getter": "get_tap1_pan",
          "description": "Pan position for [code]tap1[/code]. Value can range from -1 (fully left) to 1 (fully right). Default value: [code]0.2[/code]."
        },
        {
          "name": "tap2/active",
          "type": "bool",
          "setter": "set_tap2_active",
          "getter": "is_tap2_active",
          "description": "If [code]true[/code], [code]tap2[/code] will be enabled. Default value: [code]true[/code]."
        },
        {
          "name": "tap2/delay_ms",
          "type": "float",
          "setter": "set_tap2_delay_ms",
          "getter": "get_tap2_delay_ms",
          "description": "[b]Tap2[/b] delay time in milliseconds. Default value: [code]500ms[/code]."
        },
        {
          "name": "tap2/level_db",
          "type": "float",
          "setter": "set_tap2_level_db",
          "getter": "get_tap2_level_db",
          "description": "Sound level for [code]tap2[/code]. Default value: [code]-12 dB[/code]."
        },
        {
          "name": "tap2/pan",
          "type": "float",
          "setter": "set_tap2_pan",
          "getter": "get_tap2_pan",
          "description": "Pan position for [code]tap2[/code]. Value can range from -1 (fully left) to 1 (fully right). Default value: [code]-0.4[/code]."
        }
      ],
      "theme_properties": []
    },
    "Directory": {
      "name": "Directory",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Type used to handle the filesystem.",
      "description": "Directory type. It is used to manage directories and their content (not restricted to the project folder).\n\t\tHere is an example on how to iterate through the files of a directory:\n\t\t[codeblock]\n\t\tfunc dir_contents(path):\n\t\t    var dir = Directory.new()\n\t\t    if dir.open(path) == OK:\n\t\t        dir.list_dir_begin()\n\t\t        var file_name = dir.get_next()\n\t\t        while (file_name != \"\"):\n\t\t            if dir.current_is_dir():\n\t\t                print(\"Found directory: \" + file_name)\n\t\t            else:\n\t\t                print(\"Found file: \" + file_name)\n\t\t            file_name = dir.get_next()\n\t\t    else:\n\t\t        print(\"An error occurred when trying to access the path.\")\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "change_dir",
          "description": "Change the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. [code]newdir[/code] or [code]../newdir[/code]), or an absolute path (e.g. [code]/tmp/newdir[/code] or [code]res://somedir/newdir[/code]).\n\t\t\t\tThe method returns one of the error code constants defined in [@GlobalScope] (OK or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "todir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "copy",
          "description": "Copy the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturns one of the error code constants defined in [@GlobalScope] (OK, FAILED or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "current_is_dir",
          "qualifiers": "const",
          "description": "Return whether the current item processed with the last [method get_next] call is a directory ([code].[/code] and [code]..[/code] are considered directories).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "dir_exists",
          "description": "Return whether the target directory exists. The argument can be relative to the current directory, or an absolute path.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "file_exists",
          "description": "Return whether the target file exists. The argument can be relative to the current directory, or an absolute path.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_dir",
          "description": "Return the absolute path to the currently opened directory (e.g. [code]res://folder[/code] or [code]C:\\tmp\\folder[/code]).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_current_drive",
          "description": "Returns the currently opened directory's drive index. See [method get_drive] to convert returned index to the name of the drive.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_drive",
          "description": "On Windows, return the name of the drive (partition) passed as an argument (e.g. [code]C:[/code]). On other platforms, or if the requested drive does not existed, the method returns an empty String.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_drive_count",
          "description": "On Windows, return the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_next",
          "description": "Return the next element (file or directory) in the current directory (including [code].[/code] and [code]..[/code], unless [code]skip_navigational[/code] was given to [method list_dir_begin]).\n\t\t\t\tThe name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. [method list_dir_end] would not be mandatory in such a case).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_space_left",
          "description": "On Unix desktop systems, return the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "list_dir_begin",
          "description": "Initialise the stream used to list all files and directories using the [method get_next] function, closing the current opened stream if needed. Once the stream has been processed, it should typically be closed with [method list_dir_end].\n\t\t\t\tIf you pass [code]skip_navigational[/code], then [code].[/code] and [code]..[/code] would be filtered out.\n\t\t\t\tIf you pass [code]skip_hidden[/code], then hidden files would be filtered out.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "skip_navigational",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "1",
              "name": "skip_hidden",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "list_dir_end",
          "description": "Close the current stream opened with [method list_dir_begin] (whether it has been fully processed with [method get_next] or not does not matter).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "make_dir",
          "description": "Create a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see [method make_dir_recursive]).\n\t\t\t\tThe method returns one of the error code constants defined in [@GlobalScope] (OK, FAILED or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_dir_recursive",
          "description": "Create a target directory and all necessary intermediate directories in its path, by calling [method make_dir] recursively. The argument can be relative to the current directory, or an absolute path.\n\t\t\t\tReturn one of the error code constants defined in [@GlobalScope] (OK, FAILED or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open",
          "description": "Open an existing directory of the filesystem. The [i]path[/i] argument can be within the project tree ([code]res://folder[/code]), the user directory ([code]user://folder[/code]) or an absolute path of the user filesystem (e.g. [code]/tmp/folder[/code] or [code]C:\\tmp\\folder[/code]).\n\t\t\t\tThe method returns one of the error code constants defined in [@GlobalScope] (OK or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Delete the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.\n\t\t\t\tReturn one of the error code constants defined in [@GlobalScope] (OK or FAILED).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename",
          "description": "Rename (move) the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturn one of the error code constants defined in [@GlobalScope] (OK or FAILED).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Path": {
      "name": "Path",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Container for a [Curve3D].",
      "description": "This class is a container/Node-ification of a [Curve3D], so it can have [Spatial] properties and [Node] info.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "curve",
          "type": "Curve3D",
          "setter": "set_curve",
          "getter": "get_curve",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "World": {
      "name": "World",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class that has everything pertaining to a world.",
      "description": "Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "direct_space_state",
          "type": "PhysicsDirectSpaceState",
          "setter": "",
          "getter": "get_direct_space_state",
          "description": "The World's physics direct space state, used for making various queries. Might be used only during [code]_physics_process[/code]."
        },
        {
          "name": "environment",
          "type": "Environment",
          "setter": "set_environment",
          "getter": "get_environment",
          "description": "The World's [Environment]."
        },
        {
          "name": "fallback_environment",
          "type": "Environment",
          "setter": "set_fallback_environment",
          "getter": "get_fallback_environment",
          "description": "The World's fallback_environment will be used if the World's [Environment] fails or is missing."
        },
        {
          "name": "scenario",
          "type": "RID",
          "setter": "",
          "getter": "get_scenario",
          "description": "The World's visual scenario."
        },
        {
          "name": "space",
          "type": "RID",
          "setter": "",
          "getter": "get_space",
          "description": "The World's physics space."
        }
      ],
      "theme_properties": []
    },
    "CapsuleMesh": {
      "name": "CapsuleMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Class representing a capsule-shaped [PrimitiveMesh].",
      "description": "Class representing a capsule-shaped [PrimitiveMesh].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "mid_height",
          "type": "float",
          "setter": "set_mid_height",
          "getter": "get_mid_height",
          "description": "Height of the capsule mesh from the center point. Defaults to 1.0."
        },
        {
          "name": "radial_segments",
          "type": "int",
          "setter": "set_radial_segments",
          "getter": "get_radial_segments",
          "description": "Number of radial segments on the capsule mesh. Defaults to 64."
        },
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "Radius of the capsule mesh. Defaults to 1.0."
        },
        {
          "name": "rings",
          "type": "int",
          "setter": "set_rings",
          "getter": "get_rings",
          "description": "Number of rings along the height of the capsule. Defaults to 8."
        }
      ],
      "theme_properties": []
    },
    "TCP_Server": {
      "name": "TCP_Server",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "TCP Server.",
      "description": "TCP Server class. Listens to connections on a port and returns a [StreamPeerTCP] when got a connection.",
      "methods": [
        {
          "name": "is_connection_available",
          "qualifiers": "const",
          "description": "Return true if a connection is available for taking.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "listen",
          "description": "Listen on the \"port\" binding to \"bind_address\".\n\t\t\t\tIf \"bind_address\" is set as \"*\" (default), the server will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf \"bind_address\" is set as \"0.0.0.0\" (for IPv4) or \"::\" (for IPv6), the server will listen on all available addresses matching that IP type.\n\t\t\t\tIf \"bind_address\" is set to any valid address (e.g. \"192.168.1.101\", \"::1\", etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bind_address",
              "type": "String",
              "default_value": "\"*\""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop listening.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "take_connection",
          "description": "If a connection is available, return a StreamPeerTCP with the connection/",
          "return_type": "StreamPeerTCP",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ConfigFile": {
      "name": "ConfigFile",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Helper class to handle INI-style files.",
      "description": "This helper class can be used to store [Variant] values on the filesystem using INI-style formatting. The stored values are indentified by a section and a key:\n\t\t[codeblock]\n\t\t[section]\n\t\tsome_key=42\n\t\tstring_example=\"Hello World!\"\n\t\ta_vector=Vector3( 1, 0, 2 )\n\t\t[/codeblock]\n\t\tThe stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.\n\t\tThe following example shows how to parse an INI-style file from the system, read its contents and store new values in it:\n\t\t[codeblock]\n\t\tvar config = ConfigFile.new()\n\t\tvar err = config.load(\"user://settings.cfg\")\n\t\tif err == OK: # if not, something went wrong with the file loading\n\t\t    # Look for the display/width pair, and default to 1024 if missing\n\t\t    var screen_width = get_value(\"display\", \"width\", 1024)\n\t\t    # Store a variable if and only if it hasn't been defined yet\n\t\t    if not config.has_section_key(\"audio\", \"mute\"):\n\t\t        config.set_value(\"audio\", \"mute\", false)\n\t\t    # Save the changes by overwriting the previous file\n\t\t    config.save(\"user://settings.cfg\")\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "erase_section",
          "description": "Deletes the specified section along with all the key-value pairs inside.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_section_keys",
          "qualifiers": "const",
          "description": "Returns an array of all defined key identifiers in the specified section.",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_sections",
          "qualifiers": "const",
          "description": "Returns an array of all defined section identifiers.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_value",
          "qualifiers": "const",
          "description": "Returns the current value for the specified section and key. If the section and/or the key do not exist, the method returns the value of the optional [code]default[/code] argument, or [code]null[/code] if it is omitted.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "default",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "has_section",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the specified section exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_section_key",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the specified section-key pair exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load",
          "description": "Loads the config file specified as a parameter. The file's contents are parsed and loaded in the ConfigFile object which the method was called on. Returns one of the [code]OK[/code], [code]FAILED[/code] or [code]ERR_*[/code] constants listed in [@GlobalScope]. If the load was successful, the return value is [code]OK[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save",
          "description": "Saves the contents of the ConfigFile object to the file specified as a parameter. The output file uses an INI-style structure. Returns one of the [code]OK[/code], [code]FAILED[/code] or [code]ERR_*[/code] constants listed in [@GlobalScope]. If the load was successful, the return value is [code]OK[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_value",
          "description": "Assigns a value to the specified key of the the specified section. If the section and/or the key do not exist, they are created. Passing a [code]null[/code] value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PopupMenu": {
      "name": "PopupMenu",
      "inherits": "Popup",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "PopupMenu displays a list of options.",
      "description": "PopupMenu is the typical Control that displays a list of options. They are popular in toolbars or context menus.",
      "methods": [
        {
          "name": "add_check_item",
          "description": "Add a new checkable item with text \"label\". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_check_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_icon_check_item",
          "description": "Add a new checkable item with text \"label\" and icon \"texture\". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be\n\t\t\t\tcreated from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_icon_check_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_icon_item",
          "description": "Add a new item with text \"label\" and icon \"texture\". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_icon_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_item",
          "description": "Add a new item with text \"label\". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_separator",
          "description": "Add a separator between items. Separators also occupy an index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "add_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_submenu_item",
          "description": "Adds an item with a submenu. The submenu is the name of a child PopupMenu node that would be shown when the item is clicked. An id can optionally be provided, but if is isn't provided, one will be created from the index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "submenu",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the popup menu, in effect removing all items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_item_accelerator",
          "qualifiers": "const",
          "description": "Return the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_count",
          "qualifiers": "const",
          "description": "Return the amount of items.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_icon",
          "qualifiers": "const",
          "description": "Return the icon of the item at index \"idx\".",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_id",
          "qualifiers": "const",
          "description": "Return the id of the item at index \"idx\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_index",
          "qualifiers": "const",
          "description": "Find and return the index of the item containing a given id.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_metadata",
          "qualifiers": "const",
          "description": "Return the metadata of an item, which might be of any type. You can set it with [method set_item_metadata], which provides a simple way of assigning context data to items.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_shortcut",
          "qualifiers": "const",
          "description": "",
          "return_type": "ShortCut",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_submenu",
          "qualifiers": "const",
          "description": "Return the submenu name of the item at index \"idx\".",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_text",
          "qualifiers": "const",
          "description": "Return the text of the item at index \"idx\".",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_tooltip",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_checkable",
          "qualifiers": "const",
          "description": "Return whether the item at index \"idx\" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_checked",
          "qualifiers": "const",
          "description": "Return the checkstate status of the item at index \"idx\".",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_disabled",
          "qualifiers": "const",
          "description": "Return whether the item at index \"idx\" is disabled. When it is disabled it can't be selected, or its action invoked.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_separator",
          "qualifiers": "const",
          "description": "Return whether the item is a separator. If it is, it would be displayed as a line.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_item",
          "description": "Removes the item at index \"idx\" from the menu. Note that the indexes of items after the removed item are going to be shifted by one.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_accelerator",
          "description": "Set the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "accel",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_as_checkable",
          "description": "Set whether the item at index \"idx\" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_as_separator",
          "description": "Mark the item at index \"idx\" as a separator, which means that it would be displayed as a mere line.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_checked",
          "description": "Set the checkstate status of the item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "checked",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_disabled",
          "description": "Sets whether the item at index \"idx\" is disabled or not. When it is disabled it can't be selected, or its action invoked.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_id",
          "description": "Set the id of the item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_metadata",
          "description": "Sets the metadata of an item, which might be of any type. You can later get it with [method get_item_metadata], which provides a simple way of assigning context data to items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_multistate",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_item_submenu",
          "description": "Sets the submenu of the item at index \"idx\". The submenu is the name of a child PopupMenu node that would be shown when the item is clicked.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "submenu",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_text",
          "description": "Set the text of the item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_tooltip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "toggle_item_checked",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "toggle_item_multistate",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "id_pressed",
          "description": "This event is emitted when an item of some id is pressed or its accelerator is activated.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ID",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "index_pressed",
          "description": "This event is emitted when an item of some index is pressed or its accelerator is activated.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "hide_on_checkable_item_selection",
          "type": "bool",
          "setter": "set_hide_on_checkable_item_selection",
          "getter": "is_hide_on_checkable_item_selection",
          "description": ""
        },
        {
          "name": "hide_on_item_selection",
          "type": "bool",
          "setter": "set_hide_on_item_selection",
          "getter": "is_hide_on_item_selection",
          "description": ""
        },
        {
          "name": "hide_on_state_item_selection",
          "type": "bool",
          "setter": "set_hide_on_state_item_selection",
          "getter": "is_hide_on_state_item_selection",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_accel",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "panel_disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "separator",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "submenu",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "unchecked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "CanvasItemMaterial": {
      "name": "CanvasItemMaterial",
      "inherits": "Material",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A material for [CanvasItem]s.",
      "description": "[code]CanvasItemMaterial[/code]s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a [ShaderMaterial] to more fully customize a material's interactions with a [CanvasItem].",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "BLEND_MODE_MIX",
          "value": "0",
          "enum": "BlendMode",
          "description": "Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value."
        },
        {
          "name": "BLEND_MODE_ADD",
          "value": "1",
          "enum": "BlendMode",
          "description": "Additive blending mode."
        },
        {
          "name": "BLEND_MODE_SUB",
          "value": "2",
          "enum": "BlendMode",
          "description": "Subtractive blending mode."
        },
        {
          "name": "BLEND_MODE_MUL",
          "value": "3",
          "enum": "BlendMode",
          "description": "Multiplicative blending mode."
        },
        {
          "name": "BLEND_MODE_PREMULT_ALPHA",
          "value": "4",
          "enum": "BlendMode",
          "description": "Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value."
        },
        {
          "name": "LIGHT_MODE_NORMAL",
          "value": "0",
          "enum": "LightMode",
          "description": "Render the material using both light and non-light sensitive material properties."
        },
        {
          "name": "LIGHT_MODE_UNSHADED",
          "value": "1",
          "enum": "LightMode",
          "description": "Render the material as if there were no light."
        },
        {
          "name": "LIGHT_MODE_LIGHT_ONLY",
          "value": "2",
          "enum": "LightMode",
          "description": "Render the material as if there were only light."
        }
      ],
      "properties": [
        {
          "name": "blend_mode",
          "type": "int",
          "setter": "set_blend_mode",
          "getter": "get_blend_mode",
          "enum": "CanvasItemMaterial.BlendMode",
          "description": "The manner in which a material's rendering is applied to underlying textures."
        },
        {
          "name": "light_mode",
          "type": "int",
          "setter": "set_light_mode",
          "getter": "get_light_mode",
          "enum": "CanvasItemMaterial.LightMode",
          "description": "The manner in which material reacts to lighting."
        }
      ],
      "theme_properties": []
    },
    "Nil": {
      "name": "Nil",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Basis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptEmitSignal": {
      "name": "VisualScriptEmitSignal",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Emits a specified signal.",
      "description": "Emits a specified signal when it is executed.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence: [code]emit[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "signal",
          "type": "String",
          "setter": "set_signal",
          "getter": "get_signal",
          "description": "The signal to emit."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptWhile": {
      "name": "VisualScriptWhile",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Conditional loop.",
      "description": "Loops while a condition is [code]true[/code]. Execution continues out the [code]exit[/code] Sequence port when the loop terminates.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence: [code]while(cond)[/code]\n\t\t- Data (bool): [code]cond[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence: [code]repeat[/code]\n\t\t- Sequence: [code]exit[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StyleBoxLine": {
      "name": "StyleBoxLine",
      "inherits": "StyleBox",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": ""
        },
        {
          "name": "grow",
          "type": "float",
          "setter": "set_grow",
          "getter": "get_grow",
          "description": ""
        },
        {
          "name": "thickness",
          "type": "int",
          "setter": "set_thickness",
          "getter": "get_thickness",
          "description": ""
        },
        {
          "name": "vertical",
          "type": "bool",
          "setter": "set_vertical",
          "getter": "is_vertical",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "CollisionObject2D": {
      "name": "CollisionObject2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base node for 2D collision objects.",
      "description": "CollisionObject2D is the base class for 2D physics objects. It can hold any number of 2D collision [Shape2D]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject2D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.",
      "methods": [
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "Accepts unhandled [InputEvent]s. [code]shape_idx[/code] is the child index of the clicked [Shape2D]. Connect to the [code]input_event[/code] signal to easily pick up these events.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_shape_owner",
          "description": "Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "Returns the object's [RID].",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_shape_owners",
          "description": "Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_shape_owner_disabled",
          "qualifiers": "const",
          "description": "If [code]true[/code] the shape owner and its shapes are disabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_shape_owner_one_way_collision_enabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if collisions for the shape owner originating from this [code]CollisionObject2D[/code] will not be reported to collided with [code]CollisionObject2D[/code]s.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_shape_owner",
          "description": "Removes the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_find_owner",
          "qualifiers": "const",
          "description": "Returns the [code]owner_id[/code] of the given shape.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_add_shape",
          "description": "Adds a [Shape2D] to the shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_clear_shapes",
          "description": "Removes all shapes from the shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_owner",
          "qualifiers": "const",
          "description": "Returns the parent object of the given shape owner.",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape",
          "qualifiers": "const",
          "description": "Returns the [Shape2D] with the given id from the given shape owner.",
          "return_type": "Shape2D",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape_count",
          "qualifiers": "const",
          "description": "Returns the number of shapes the given shape owner contains.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape_index",
          "qualifiers": "const",
          "description": "Returns the child index of the [Shape2D] with the given id from the given shape owner.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_transform",
          "qualifiers": "const",
          "description": "Returns the shape owner's [Transform2D].",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_remove_shape",
          "description": "Removes a shape from the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_disabled",
          "description": "If [code]true[/code] disables the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_one_way_collision",
          "description": "If [code]enable[/code] is [code]true[/code], collisions for the shape owner originating from this [code]CollisionObject2D[/code] will not be reported to collided with [code]CollisionObject2D[/code]s.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_transform",
          "description": "Sets the [Transform2D] of the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "input_event",
          "description": "Emitted when an input event occurs and [code]input_pickable[/code] is [code]true[/code]. See [method _input_event] for details.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mouse_entered",
          "description": "Emitted when the mouse pointer enters any of this object's shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_exited",
          "description": "Emitted when the mouse pointer exits all this object's shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "input_pickable",
          "type": "bool",
          "setter": "set_pickable",
          "getter": "is_pickable",
          "description": "If [code]true[/code] this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events."
        }
      ],
      "theme_properties": []
    },
    "VSlider": {
      "name": "VSlider",
      "inherits": "Slider",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Vertical slider.",
      "description": "Vertical slider. See [Slider]. This one goes from left (min) to right (max).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_area",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_disabled",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "slider",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tick",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "ARVRAnchor": {
      "name": "ARVRAnchor",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Anchor point in AR Space",
      "description": "The ARVR Anchor point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them.\n\t\tThis node is mapped to one of the anchors through its unique id. When you receive a signal that a new anchor is available you should add this node to your scene for that anchor. You can predefine nodes and set the id and the nodes will simply remain on 0,0,0 until a plane is recognised.\n\t\tKeep in mind that as long as plane detection is enable the size, placing and orientation of an anchor will be updates as the detection logic learns more about the real world out there especially if only part of the surface is in view.",
      "methods": [
        {
          "name": "get_anchor_name",
          "qualifiers": "const",
          "description": "Returns the name given to this anchor.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_is_active",
          "qualifiers": "const",
          "description": "Returns true if the anchor is being tracked and false if no anchor with this id is currently known.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_plane",
          "qualifiers": "const",
          "description": "Returns a plane aligned with our anchor, handy for intersection testing",
          "return_type": "Plane",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table.",
          "return_type": "Vector3",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "anchor_id",
          "type": "int",
          "setter": "set_anchor_id",
          "getter": "get_anchor_id",
          "description": "The anchor's id. You can set this before the anchor itself exists. The first anchor gets an id of [code]1[/code], the second an id of [code]2[/code], etc. When anchors get removed, the engine can then assign the corresponding id to new anchors. The most common situation where anchors 'disappear' is when the AR server identifies that two anchors represent different parts of the same plane and merges them."
        }
      ],
      "theme_properties": []
    },
    "PathFollow2D": {
      "name": "PathFollow2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Point sampler for a [Path2D].",
      "description": "This node takes its parent [Path2D], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "cubic_interp",
          "type": "bool",
          "setter": "set_cubic_interpolation",
          "getter": "get_cubic_interpolation",
          "description": "If [code]true[/code] the position between two cached points is interpolated cubically, and linearly otherwise.\n\t\t\tThe points along the [Curve2D] of the [Path2D] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\tThere are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations."
        },
        {
          "name": "h_offset",
          "type": "float",
          "setter": "set_h_offset",
          "getter": "get_h_offset",
          "description": "The node's offset along the curve."
        },
        {
          "name": "lookahead",
          "type": "float",
          "setter": "set_lookahead",
          "getter": "get_lookahead",
          "description": ""
        },
        {
          "name": "loop",
          "type": "bool",
          "setter": "set_loop",
          "getter": "has_loop",
          "description": "If [code]true[/code], any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths."
        },
        {
          "name": "offset",
          "type": "float",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The distance along the path in pixels."
        },
        {
          "name": "rotate",
          "type": "bool",
          "setter": "set_rotate",
          "getter": "is_rotating",
          "description": "If [code]true[/code], this node rotates to follow the path, making its descendants rotate."
        },
        {
          "name": "unit_offset",
          "type": "float",
          "setter": "set_unit_offset",
          "getter": "get_unit_offset",
          "description": "The distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last). This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length."
        },
        {
          "name": "v_offset",
          "type": "float",
          "setter": "set_v_offset",
          "getter": "get_v_offset",
          "description": "The node's offset perpendicular to the curve."
        }
      ],
      "theme_properties": []
    },
    "VisibilityNotifier": {
      "name": "VisibilityNotifier",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Detects when the node is visible on screen.",
      "description": "The VisibilityNotifier detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a [Camera]'s view.",
      "methods": [
        {
          "name": "is_on_screen",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bounding box is on the screen.",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "camera_entered",
          "description": "Emitted when the VisibilityNotifier enters a [Camera]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "camera_exited",
          "description": "Emitted when the VisibilityNotifier exits a [Camera]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "screen_entered",
          "description": "Emitted when the VisibilityNotifier enters the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "screen_exited",
          "description": "Emitted when the VisibilityNotifier exits the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "aabb",
          "type": "AABB",
          "setter": "set_aabb",
          "getter": "get_aabb",
          "description": "The VisibilityNotifier's bounding box."
        }
      ],
      "theme_properties": []
    },
    "ResourceSaver": {
      "name": "ResourceSaver",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Resource Saving Interface.",
      "description": "Resource Saving Interface. This interface is used for saving resources to disk.",
      "methods": [
        {
          "name": "get_recognized_extensions",
          "description": "Return the list of extensions available for saving a resource of a given type.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save",
          "description": "Save a resource to disk, to a given path.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flags",
              "type": "int",
              "default_value": "0"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_RELATIVE_PATHS",
          "value": "1",
          "enum": "SaverFlags",
          "description": ""
        },
        {
          "name": "FLAG_BUNDLE_RESOURCES",
          "value": "2",
          "enum": "SaverFlags",
          "description": ""
        },
        {
          "name": "FLAG_CHANGE_PATH",
          "value": "4",
          "enum": "SaverFlags",
          "description": ""
        },
        {
          "name": "FLAG_OMIT_EDITOR_PROPERTIES",
          "value": "8",
          "enum": "SaverFlags",
          "description": ""
        },
        {
          "name": "FLAG_SAVE_BIG_ENDIAN",
          "value": "16",
          "enum": "SaverFlags",
          "description": ""
        },
        {
          "name": "FLAG_COMPRESS",
          "value": "32",
          "enum": "SaverFlags",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptPreload": {
      "name": "VisualScriptPreload",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Creates a new [Resource] or loads one from the filesystem.",
      "description": "Creates a new [Resource] or loads one from the filesystem.\n\t\t[b]Input Ports:[/b]\n\t\tnone\n\t\t[b]Output Ports:[/b]\n\t\t- Data (object): [code]res[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "resource",
          "type": "Resource",
          "setter": "set_preload",
          "getter": "get_preload",
          "description": "The [Resource] to load."
        }
      ],
      "theme_properties": []
    },
    "InputEventScreenDrag": {
      "name": "InputEventScreenDrag",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Input event type for screen drag events.\n\t\t(only available on mobile devices)",
      "description": "Contains screen drag information. See [method Node._input].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "index",
          "type": "int",
          "setter": "set_index",
          "getter": "get_index",
          "description": "Drag event index in the case of a multi-drag event."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "Drag position."
        },
        {
          "name": "relative",
          "type": "Vector2",
          "setter": "set_relative",
          "getter": "get_relative",
          "description": "Drag position relative to its start position."
        },
        {
          "name": "speed",
          "type": "Vector2",
          "setter": "set_speed",
          "getter": "get_speed",
          "description": "Drag speed."
        }
      ],
      "theme_properties": []
    },
    "AtlasTexture": {
      "name": "AtlasTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Packs multiple small textures in a single, bigger one. Helps to optimize video memory costs and render calls.",
      "description": "[Texture] resource aimed at managing big textures files that pack multiple smaller textures. Consists of a [Texture], a margin that defines the border width,\n\t\tand a region that defines the actual area of the AtlasTexture.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "atlas",
          "type": "Texture",
          "setter": "set_atlas",
          "getter": "get_atlas",
          "description": "The texture that contains the atlas. Can be any [Texture] subtype."
        },
        {
          "name": "filter_clip",
          "type": "bool",
          "setter": "set_filter_clip",
          "getter": "has_filter_clip",
          "description": "If [code]true[/code] clips the area outside of the region to avoid bleeding of the surrounding texture pixels."
        },
        {
          "name": "margin",
          "type": "Rect2",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "The margin around the region. The [Rect2]'s 'size' parameter ('w' and 'h' in the editor) resizes the texture so it fits within the margin."
        },
        {
          "name": "region",
          "type": "Rect2",
          "setter": "set_region",
          "getter": "get_region",
          "description": "The AtlasTexture's used region."
        }
      ],
      "theme_properties": []
    },
    "BitmapFont": {
      "name": "BitmapFont",
      "inherits": "Font",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Renders text using [code]*.fnt[/code] fonts.",
      "description": "Renders text using [code]*.fnt[/code] fonts containing texture atlases. Supports distance fields. For using vector font files like TTF directly, see [DynamicFont].",
      "methods": [
        {
          "name": "add_char",
          "description": "Adds a character to the font, where [code]character[/code] is the unicode value, [code]texture[/code] is the texture index, [code]rect[/code] is the region in the texture (in pixels!), [code]align[/code] is the (optional) alignment for the character and [code]advance[/code] is the (optional) advance.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "character",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "align",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            },
            {
              "index": "4",
              "name": "advance",
              "type": "float",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_kerning_pair",
          "description": "Adds a kerning pair to the [code]BitmapFont[/code] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "char_a",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "char_b",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "kerning",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_texture",
          "description": "Adds a texture to the [code]BitmapFont[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clears all the font data and settings.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_from_fnt",
          "description": "Creates a BitmapFont from the [code]*.fnt[/code] file at [code]path[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_char_size",
          "qualifiers": "const",
          "description": "Returns the size of a character, optionally taking kerning into account if the next character is provided.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "char",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "next",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_kerning_pair",
          "qualifiers": "const",
          "description": "Returns a kerning pair as a difference.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "char_a",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "char_b",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Returns the font atlas texture at index [code]idx[/code].",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_texture_count",
          "qualifiers": "const",
          "description": "Returns the number of textures in the BitmapFont atlas.",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "ascent",
          "type": "float",
          "setter": "set_ascent",
          "getter": "get_ascent",
          "description": "Ascent (number of pixels above the baseline)."
        },
        {
          "name": "distance_field",
          "type": "bool",
          "setter": "set_distance_field_hint",
          "getter": "is_distance_field_hint",
          "description": "If [code]true[/code] distance field hint is enabled."
        },
        {
          "name": "fallback",
          "type": "BitmapFont",
          "setter": "set_fallback",
          "getter": "get_fallback",
          "description": "The fallback font."
        },
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "Total font height (ascent plus descent) in pixels."
        }
      ],
      "theme_properties": []
    },
    "BulletPhysicsDirectBodyState": {
      "name": "BulletPhysicsDirectBodyState",
      "inherits": "PhysicsDirectBodyState",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorImportPlugin": {
      "name": "EditorImportPlugin",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Registers a custom resource importer in the editor. Use the class to parse any file and import it as a new resource type.",
      "description": "EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your [EditorPlugin] with [method EditorPlugin.add_import_plugin].\n\n\t\tEditorImportPlugins work by associating with specific file extensions and a resource type. See [method get_recognized_extension] and [method get_resource_type]). They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the [code].import[/code] directory.\n\n\n\t\tBelow is an example EditorImportPlugin that imports a [Mesh] from a file with the extension \".special\" or \".spec\":\n\t\t[codeblock]\n\t\ttool\n\t\textends EditorImportPlugin\n\n\t\tfunc get_importer_name():\n\t\t    return \"my.special.plugin\"\n\n\t\tfunc get_visible_name():\n\t\t    return \"Special Mesh Importer\"\n\n\t\tfunc get_recognized_extensions():\n\t\t    return [\"special\", \"spec\"]\n\n\t\tfunc get_save_extension():\n\t\t    return \"mesh\"\n\n\t\tfunc get_resource_type():\n\t\t    return \"Mesh\"\n\n\t\tfunc get_preset_count():\n\t\t    return 1\n\n\t\tfunc get_preset_name(i):\n\t\t    return \"Default\"\n\n\t\tfunc get_import_options(i):\n\t\t    return [{\"name\": \"my_option\", \"default_value\": false}]\n\n\t\tfunc load(src, dst, opts, r_platform_variants, r_gen_files):\n\t\t    var file = File.new()\n\t\t    if file.open(src, File.READ) != OK:\n\t\t        return FAILED\n\n\t\t    var mesh = Mesh.new()\n\n\t\t    var save = dst + \".\" + get_save_extension()\n\t\t    ResourceSaver.save(file, mesh)\n\t\t    return OK\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "get_import_options",
          "qualifiers": "virtual",
          "description": "Get the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: \"name\", \"default_value\", \"property_hint\" (optional), \"hint_string\" (optional), \"usage\" (optional).",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_importer_name",
          "qualifiers": "virtual",
          "description": "Get the unique name of the importer.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_option_visibility",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "option",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "options",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_preset_count",
          "qualifiers": "virtual",
          "description": "Get the number of initial presets defined by the plugin. Use [method get_import_options] to get the default options for the preset and [method get_preset_name] to get the name of the preset.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_preset_name",
          "qualifiers": "virtual",
          "description": "Get the name of the options preset at this index.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_recognized_extensions",
          "qualifiers": "virtual",
          "description": "Get the list of file extensions to associate with this loader (case insensitive). e.g. [\"obj\"].",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_resource_type",
          "qualifiers": "virtual",
          "description": "Get the godot resource type associated with this loader. e.g. \"Mesh\" or \"Animation\".",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_save_extension",
          "qualifiers": "virtual",
          "description": "Get the extension used to save this resource in the [code].import[/code] directory.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_visible_name",
          "qualifiers": "virtual",
          "description": "Get the name to display in the import window.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "import",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "source_file",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "save_path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "options",
              "type": "Dictionary",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "r_platform_variants",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "r_gen_files",
              "type": "Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpriteFrames": {
      "name": "SpriteFrames",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Sprite frame library for AnimatedSprite.",
      "description": "Sprite frame library for [AnimatedSprite]. Contains frames and animation data for playback.",
      "methods": [
        {
          "name": "add_animation",
          "description": "Adds a new animation to the the library.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_frame",
          "description": "Adds a frame to the given animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "frame",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Removes all frames from the given animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_all",
          "description": "Removes all animations. A \"default\" animation will be created.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_animation_loop",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given animation will loop.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation_speed",
          "qualifiers": "const",
          "description": "The animation's speed in frames per second.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "Returns the animation's selected frame.",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_frame_count",
          "qualifiers": "const",
          "description": "Returns the number of frames in the animation.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_animation",
          "qualifiers": "const",
          "description": "If [code]true[/code] the named animation exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_animation",
          "description": "Removes the given animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_frame",
          "description": "Removes the animation's selected frame.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_animation",
          "description": "Changes the animation's name to [code]newname[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "newname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_loop",
          "description": "If [code]true[/code] the animation will loop.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "loop",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_speed",
          "description": "The animation's speed in frames per second.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_frame",
          "description": "Sets the texture of the given frame.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "txt",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "frames",
          "type": "Array",
          "setter": "_set_frames",
          "getter": "_get_frames",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AnimationPlayer": {
      "name": "AnimationPlayer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Container and player of [Animation] resources.",
      "description": "An animation player is used for general purpose playback of [Animation] resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.",
      "methods": [
        {
          "name": "add_animation",
          "description": "Adds [code]animation[/code] to the player accessible with the key [code]name[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "advance",
          "description": "Shifts position in the animation timeline. Delta is the time in seconds to shift.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_get_next",
          "qualifiers": "const",
          "description": "Returns the name of the next animation in the queue.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_set_next",
          "description": "Triggers the [code]anim_to[/code] animation when the [code]anim_from[/code] animation completes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anim_to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_caches",
          "description": "[code]AnimationPlayer[/code] caches animated nodes. It may not notice if a node disappears, so clear_caches forces it to update the cache again.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_queue",
          "description": "Clears all queued, unplayed animations.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "find_animation",
          "qualifiers": "const",
          "description": "Returns the name of [code]animation[/code] or empty string if not found.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation",
          "qualifiers": "const",
          "description": "Returns the [Animation] with key [code]name[/code] or [code]null[/code] if not found.",
          "return_type": "Animation",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation_list",
          "qualifiers": "const",
          "description": "Returns the list of stored animation names.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_blend_time",
          "qualifiers": "const",
          "description": "Get the blend time (in seconds) between two animations, referenced by their names.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anim_to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_animation",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the [code]AnimationPlayer[/code] stores an [Animation] with key [code]name[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if playing an animation.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play the animation with key [code]name[/code]. Custom speed and blend times can be set. If custom speed is negative (-1), 'from_end' being true can play the\n\t\t\t\tanimation backwards.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "1",
              "name": "custom_blend",
              "type": "float",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "custom_speed",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "3",
              "name": "from_end",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "play_backwards",
          "description": "Play the animation with key [code]name[/code] in reverse.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "1",
              "name": "custom_blend",
              "type": "float",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "queue",
          "description": "Queue an animation for playback once the current one is done.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_animation",
          "description": "Remove the animation with key [code]name[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_animation",
          "description": "Rename an existing animation with key [code]name[/code] to [code]newname[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "newname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek",
          "description": "Seek the animation to the [code]seconds[/code] point in time (in seconds). If [code]update[/code] is [code]true[/code], the animation updates too, otherwise it updates at process time.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "seconds",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "update",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_blend_time",
          "description": "Specify a blend time (in seconds) between two animations, referenced by their names.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anim_to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the currently playing animation. If [code]reset[/code] is [code]true[/code], the anim position is reset to [code]0[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "reset",
              "type": "bool",
              "default_value": "true"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "animation_changed",
          "description": "If the currently being played animation changes, this signal will notify of such change.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "old_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_finished",
          "description": "Notifies when an animation finished playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_started",
          "description": "Notifies when an animation starts playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim_name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ANIMATION_PROCESS_PHYSICS",
          "value": "0",
          "enum": "AnimationProcessMode",
          "description": "Process animation during the physics process. This is especially useful when animating physics bodies."
        },
        {
          "name": "ANIMATION_PROCESS_IDLE",
          "value": "1",
          "enum": "AnimationProcessMode",
          "description": "Process animation during the idle process."
        }
      ],
      "properties": [
        {
          "name": "assigned_animation",
          "type": "String",
          "setter": "set_assigned_animation",
          "getter": "get_assigned_animation",
          "description": "If playing, the current animation; otherwise, the animation last played. When set, would change the animation, but would not play it unless currently playing. See also [member current_animation]."
        },
        {
          "name": "autoplay",
          "type": "String",
          "setter": "set_autoplay",
          "getter": "get_autoplay",
          "description": "The name of the animation to play when the scene loads. Default value: [code]\"\"[/code]."
        },
        {
          "name": "current_animation",
          "type": "String",
          "setter": "set_current_animation",
          "getter": "get_current_animation",
          "description": "The name of the current animation, \"\" if not playing anything. When being set, does not restart the animation. See also [method play]. Default value: [code]\"\"[/code]."
        },
        {
          "name": "current_animation_length",
          "type": "float",
          "setter": "",
          "getter": "get_current_animation_length",
          "description": "The length (in seconds) of the currently being played animation."
        },
        {
          "name": "current_animation_position",
          "type": "float",
          "setter": "",
          "getter": "get_current_animation_position",
          "description": "The position (in seconds) of the currently playing animation."
        },
        {
          "name": "playback_active",
          "type": "bool",
          "setter": "set_active",
          "getter": "is_active",
          "description": "If [code]true[/code], updates animations in response to process-related notifications. Default value: [code]true[/code]."
        },
        {
          "name": "playback_default_blend_time",
          "type": "float",
          "setter": "set_default_blend_time",
          "getter": "get_default_blend_time",
          "description": "The default time in which to blend animations. Ranges from 0 to 4096 with 0.01 precision. Default value: [code]0[/code]."
        },
        {
          "name": "playback_process_mode",
          "type": "int",
          "setter": "set_animation_process_mode",
          "getter": "get_animation_process_mode",
          "enum": "AnimationPlayer.AnimationProcessMode",
          "description": "The process notification in which to update animations. Default value: [enum ANIMATION_PROCESS_IDLE]."
        },
        {
          "name": "playback_speed",
          "type": "float",
          "setter": "set_speed_scale",
          "getter": "get_speed_scale",
          "description": "The speed scaling ratio. For instance, if this value is 1 then the animation plays at normal speed. If it's 0.5 then it plays at half speed. If it's 2 then it plays at double speed. Default value: [code]1[/code]."
        },
        {
          "name": "root_node",
          "type": "NodePath",
          "setter": "set_root",
          "getter": "get_root",
          "description": "The node from which node path references will travel. Default value: [code]\"..\"[/code]."
        }
      ],
      "theme_properties": []
    },
    "StreamPeerTCP": {
      "name": "StreamPeerTCP",
      "inherits": "StreamPeer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "TCP Stream peer.",
      "description": "TCP Stream peer. This object can be used to connect to TCP servers, or also is returned by a tcp server.",
      "methods": [
        {
          "name": "connect_to_host",
          "description": "Connect to the specified host:port pair. A hostname will be resolved if valid. Returns [OK] on success or [FAILED] on failure.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect_from_host",
          "description": "Disconnect from host.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connected_host",
          "qualifiers": "const",
          "description": "Return the IP of this peer.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_connected_port",
          "qualifiers": "const",
          "description": "Return the port of this peer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_status",
          "qualifiers": "const",
          "description": "Return the status of the connection, one of STATUS_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_connected_to_host",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STATUS_NONE",
          "value": "0",
          "enum": "Status",
          "description": "The initial status of the [code]StreamPeerTCP[/code], also the status after a disconnect."
        },
        {
          "name": "STATUS_CONNECTING",
          "value": "1",
          "enum": "Status",
          "description": "A status representing a [code]StreamPeerTCP[/code] that is connecting to a host."
        },
        {
          "name": "STATUS_CONNECTED",
          "value": "2",
          "enum": "Status",
          "description": "A status representing a [code]StreamPeerTCP[/code] that is connected to a host."
        },
        {
          "name": "STATUS_ERROR",
          "value": "3",
          "enum": "Status",
          "description": "A staus representing a [code]StreamPeerTCP[/code] in error state."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VSeparator": {
      "name": "VSeparator",
      "inherits": "Separator",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Vertical version of [Separator].",
      "description": "Vertical version of [Separator]. It is used to separate objects horizontally, though (but it looks vertical!).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "separator",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "InputEventMouse": {
      "name": "InputEventMouse",
      "inherits": "InputEventWithModifiers",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base input event type for mouse events.",
      "description": "Stores general mouse events information.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "button_mask",
          "type": "int",
          "setter": "set_button_mask",
          "getter": "get_button_mask",
          "description": "Mouse button mask identifier, one of or a bitwise combination of the BUTTON_MASK_* constants in [@GlobalScope]."
        },
        {
          "name": "global_position",
          "type": "Vector2",
          "setter": "set_global_position",
          "getter": "get_global_position",
          "description": "Mouse position relative to the current [Viewport] when used in [method Control._gui_input], otherwise is at 0,0."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "Mouse local position relative to the [Viewport]. If used in [method Control._gui_input] the position is relative to the current [Control] which is under the mouse."
        }
      ],
      "theme_properties": []
    },
    "RichTextLabel": {
      "name": "RichTextLabel",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Label that displays rich text.",
      "description": "Rich text can contain custom text, fonts, images and some basic formatting. The label manages these as an internal tag stack. It also adapts itself to given width/heights.\n\t\tNote that assignments to [member bbcode_text] clear the tag stack and reconstruct it from the property's contents. Any edits made to [member bbcode_text] will erase previous edits made from other manual sources such as [method append_bbcode] and the [code]push_*[/code] / [method pop] methods.",
      "methods": [
        {
          "name": "add_image",
          "description": "Adds an image's opening and closing tags to the tag stack.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_text",
          "description": "Adds raw non-bbcode-parsed text to the tag stack.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_bbcode",
          "description": "Parses [code]bbcode[/code] and adds tags to the tag stack as needed. Returns the result of the parsing, [code]OK[/code] if successful.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bbcode",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clears the tag stack and sets [member bbcode_text] to an empty string.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_line_count",
          "qualifiers": "const",
          "description": "Returns the total number of newlines in the tag stack's text tags. Considers wrapped text as one line.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_total_character_count",
          "qualifiers": "const",
          "description": "Returns the total number of characters from text tags. Does not include bbcodes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_v_scroll",
          "description": "Returns the vertical scrollbar.",
          "return_type": "VScrollBar",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_visible_line_count",
          "qualifiers": "const",
          "description": "Returns the number of visible lines.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "newline",
          "description": "Adds a newline tag to the tag stack.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "parse_bbcode",
          "description": "The assignment version of [method append_bbcode]. Clears the tag stack and inserts the new content. Returns [code]OK[/code] if parses [code]bbcode[/code] successfully.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bbcode",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pop",
          "description": "Terminates the current tag. Use after [code]push_*[/code] methods to close bbcodes manually. Does not need to follow [code]add_*[/code] methods.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_align",
          "description": "Adds a [code][right][/code] tag to the tag stack.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "enum": "RichTextLabel.Align",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_cell",
          "description": "Adds a [code][cell][/code] tag to the tag stack. Must be inside a [table] tag. See [method push_table] for details.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_color",
          "description": "Adds a [code][color][/code] tag to the tag stack.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_font",
          "description": "Adds a [code][font][/code] tag to the tag stack. Overrides default fonts for its duration.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_indent",
          "description": "Adds an [code][indent][/code] tag to the tag stack. Multiplies \"level\" by current tab_size to determine new margin length.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "level",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_list",
          "description": "Adds a list tag to the tag stack. Similar to the bbcodes [code][ol][/code] or [code][ul][/code], but supports more list types. Not fully implemented!",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "RichTextLabel.ListType",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_meta",
          "description": "Adds a meta tag to the tag stack. Similar to the bbcode [code][url=something]{text}[/url][/code], but supports non-[String] metadata types.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_table",
          "description": "Adds a [code][table=columns][/code] tag to the tag stack.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "columns",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_underline",
          "description": "Adds a [code][u][/code] tag to the tag stack.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_line",
          "description": "Removes a line of content from the label. Returns [code]true[/code] if the line exists.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scroll_to_line",
          "description": "Scrolls the window's top line to match [code]line[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_table_column_expand",
          "description": "Edits the selected columns expansion options. If [code]expand[/code] is [code]true[/code], the column expands in proportion to its expansion ratio versus the other columns' ratios.\n\t\t\t\tFor example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively.\n\t\t\t\tColumns with a [code]false[/code] expand will not contribute to the total ratio.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "expand",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "ratio",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "meta_clicked",
          "description": "Triggered when the user clicks on content between [url] tags. If the meta is defined in text, e.g. [code][url={\"data\"=\"hi\"}]hi[/url][/code], then the parameter for this signal will be a [String] type. If a particular type or an object is desired, the [method push_meta] method must be used to manually insert the data into the tag stack.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "meta",
              "type": "Nil",
              "default_value": ""
            }
          ]
        },
        {
          "name": "meta_hover_ended",
          "description": "Triggers when the mouse exits a meta tag.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "meta",
              "type": "Nil",
              "default_value": ""
            }
          ]
        },
        {
          "name": "meta_hover_started",
          "description": "Triggers when the mouse enters a meta tag.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "meta",
              "type": "Nil",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "enum": "Align",
          "description": ""
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "enum": "Align",
          "description": ""
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "enum": "Align",
          "description": ""
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "enum": "Align",
          "description": ""
        },
        {
          "name": "LIST_NUMBERS",
          "value": "0",
          "enum": "ListType",
          "description": ""
        },
        {
          "name": "LIST_LETTERS",
          "value": "1",
          "enum": "ListType",
          "description": ""
        },
        {
          "name": "LIST_DOTS",
          "value": "2",
          "enum": "ListType",
          "description": ""
        },
        {
          "name": "ITEM_FRAME",
          "value": "0",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_TEXT",
          "value": "1",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_IMAGE",
          "value": "2",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_NEWLINE",
          "value": "3",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_FONT",
          "value": "4",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_COLOR",
          "value": "5",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_UNDERLINE",
          "value": "6",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_ALIGN",
          "value": "7",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_INDENT",
          "value": "8",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_LIST",
          "value": "9",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_TABLE",
          "value": "10",
          "enum": "ItemType",
          "description": ""
        },
        {
          "name": "ITEM_META",
          "value": "11",
          "enum": "ItemType",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "bbcode_enabled",
          "type": "bool",
          "setter": "set_use_bbcode",
          "getter": "is_using_bbcode",
          "description": "If [code]true[/code] the label uses BBCode formatting. Default value: [code]false[/code]."
        },
        {
          "name": "bbcode_text",
          "type": "String",
          "setter": "set_bbcode",
          "getter": "get_bbcode",
          "description": "The label's text in BBCode format. Is not representative of manual modifications to the internal tag stack. Erases changes made by other methods when edited."
        },
        {
          "name": "meta_underlined",
          "type": "bool",
          "setter": "set_meta_underline",
          "getter": "is_meta_underlined",
          "description": "If [code]true[/code], the label underlines meta tags such as [url]{text}[/url]. Default value: [code]true[/code]."
        },
        {
          "name": "override_selected_font_color",
          "type": "bool",
          "setter": "set_override_selected_font_color",
          "getter": "is_overriding_selected_font_color",
          "description": "If [code]true[/code] the label uses the custom font color. Default value: [code]false[/code]."
        },
        {
          "name": "percent_visible",
          "type": "float",
          "setter": "set_percent_visible",
          "getter": "get_percent_visible",
          "description": "The text's visibility, as a [float] between 0.0 and 1.0."
        },
        {
          "name": "scroll_active",
          "type": "bool",
          "setter": "set_scroll_active",
          "getter": "is_scroll_active",
          "description": "If [code]true[/code], the scrollbar is visible. Does not block scrolling completely. See [method scroll_to_line]. Default value: [code]true[/code]."
        },
        {
          "name": "scroll_following",
          "type": "bool",
          "setter": "set_scroll_follow",
          "getter": "is_scroll_following",
          "description": "If [code]true[/code], the window scrolls down to display new content automatically. Default value: [code]false[/code]."
        },
        {
          "name": "selection_enabled",
          "type": "bool",
          "setter": "set_selection_enabled",
          "getter": "is_selection_enabled",
          "description": "If [code]true[/code], the label allows text selection."
        },
        {
          "name": "tab_size",
          "type": "int",
          "setter": "set_tab_size",
          "getter": "get_tab_size",
          "description": "The number of spaces associated with a single tab length. Does not affect \"\\t\" in text tags, only indent tags."
        },
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": "The raw text of the label.\n\t\t\tWhen set, clears the tag stack and adds a raw text tag to the top of it. Does not parse bbcodes. Does not modify [member bbcode_text]."
        },
        {
          "name": "visible_characters",
          "type": "int",
          "setter": "set_visible_characters",
          "getter": "get_visible_characters",
          "description": "The restricted number of characters to display in the label."
        }
      ],
      "theme_properties": [
        {
          "name": "bold_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "bold_italics_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "default_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "italics_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "line_separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "mono_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "normal_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "table_hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "table_vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Label": {
      "name": "Label",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Displays plain text in a line or wrapped inside a rectangle. For formatted text, use [RichTextLabel].",
      "description": "Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment, and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics or other formatting. For that, use [RichTextLabel] instead.\n\t\tNote that contrarily to most other [Control]s, Label's [member Control.mouse_filter] defaults to MOUSE_FILTER_IGNORE (i.e. it doesn't react to mouse input events).",
      "methods": [
        {
          "name": "get_line_count",
          "qualifiers": "const",
          "description": "Returns the amount of lines of text the Label has.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_line_height",
          "qualifiers": "const",
          "description": "Returns the font size in pixels.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_total_character_count",
          "qualifiers": "const",
          "description": "Returns the total length of the text.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_visible_line_count",
          "qualifiers": "const",
          "description": "Returns the number of lines shown. Useful if the [code]Label[/code] 's height cannot currently display all lines.",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "enum": "Align",
          "description": "Align rows to the left (default)."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "enum": "Align",
          "description": "Align rows centered."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "enum": "Align",
          "description": "Align rows to the right (default)."
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "enum": "Align",
          "description": "Expand row whitespaces to fit the width."
        },
        {
          "name": "VALIGN_TOP",
          "value": "0",
          "enum": "VAlign",
          "description": "Align the whole text to the top."
        },
        {
          "name": "VALIGN_CENTER",
          "value": "1",
          "enum": "VAlign",
          "description": "Align the whole text to the center."
        },
        {
          "name": "VALIGN_BOTTOM",
          "value": "2",
          "enum": "VAlign",
          "description": "Align the whole text to the bottom."
        },
        {
          "name": "VALIGN_FILL",
          "value": "3",
          "enum": "VAlign",
          "description": "Align the whole text by spreading the rows."
        }
      ],
      "properties": [
        {
          "name": "align",
          "type": "int",
          "setter": "set_align",
          "getter": "get_align",
          "enum": "Label.Align",
          "description": "Controls the text's horizontal align. Supports left, center, right, and fill, or justify. Set it to one of the [code]ALIGN_*[/code] constants."
        },
        {
          "name": "autowrap",
          "type": "bool",
          "setter": "set_autowrap",
          "getter": "has_autowrap",
          "description": "If [code]true[/code], wraps the text inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. Default: false."
        },
        {
          "name": "clip_text",
          "type": "bool",
          "setter": "set_clip_text",
          "getter": "is_clipping_text",
          "description": "If [code]true[/code], the Label only shows the text that fits inside its bounding rectangle. It also lets you scale the node down freely."
        },
        {
          "name": "lines_skipped",
          "type": "int",
          "setter": "set_lines_skipped",
          "getter": "get_lines_skipped",
          "description": "The node ignores the first [code]lines_skipped[/code] lines before it starts to display text."
        },
        {
          "name": "max_lines_visible",
          "type": "int",
          "setter": "set_max_lines_visible",
          "getter": "get_max_lines_visible",
          "description": "Limits the lines of text the node shows on screen."
        },
        {
          "name": "percent_visible",
          "type": "float",
          "setter": "set_percent_visible",
          "getter": "get_percent_visible",
          "description": "Limits the count of visible characters. If you set [code]percent_visible[/code] to 50, only up to half of the text's characters will display on screen. Useful to animate the text in a dialog box."
        },
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": "The text to display on screen."
        },
        {
          "name": "uppercase",
          "type": "bool",
          "setter": "set_uppercase",
          "getter": "is_uppercase",
          "description": "If [code]true[/code], all the text displays as UPPERCASE."
        },
        {
          "name": "valign",
          "type": "int",
          "setter": "set_valign",
          "getter": "get_valign",
          "enum": "Label.VAlign",
          "description": "Controls the text's vertical align. Supports top, center, bottom, and fill. Set it to one of the [code]VALIGN_*[/code] constants."
        },
        {
          "name": "visible_characters",
          "type": "int",
          "setter": "set_visible_characters",
          "getter": "get_visible_characters",
          "description": "Restricts the number of characters to display. Set to -1 to disable."
        }
      ],
      "theme_properties": [
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_shadow",
          "type": "Color",
          "description": ""
        },
        {
          "name": "line_spacing",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "shadow_as_outline",
          "type": "int",
          "description": ""
        },
        {
          "name": "shadow_offset_x",
          "type": "int",
          "description": ""
        },
        {
          "name": "shadow_offset_y",
          "type": "int",
          "description": ""
        }
      ]
    },
    "VisibilityNotifier2D": {
      "name": "VisibilityNotifier2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Detects when the node is visible on screen.",
      "description": "The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.",
      "methods": [
        {
          "name": "is_on_screen",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bounding rectangle is on the screen.",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "screen_entered",
          "description": "Emitted when the VisibilityNotifier2D enters the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "screen_exited",
          "description": "Emitted when the VisibilityNotifier2D exits the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "viewport_entered",
          "description": "Emitted when the VisibilityNotifier2D enters a [Viewport]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_exited",
          "description": "Emitted when the VisibilityNotifier2D exits a [Viewport]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "rect",
          "type": "Rect2",
          "setter": "set_rect",
          "getter": "get_rect",
          "description": "The VisibilityNotifier2D's bounding rectangle."
        }
      ],
      "theme_properties": []
    },
    "GridMap": {
      "name": "GridMap",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Node for 3D tile-based maps.",
      "description": "GridMap lets you place meshes on a grid interactively. It works both from the editor and can help you create in-game level editors.\n\t\tGridMaps use a [MeshLibrary] which contain a list of tiles: meshes with materials plus optional collisions and extra elements.\n\t\tA GridMap contains a collection of cells. Each grid cell refers to a [MeshLibrary] item. All cells in the map have the same dimensions.\n\t\tA GridMap is split into a sparse collection of octants for efficient rendering and physics processing. Every octant has the same dimensions and can contain several cells.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear all cells.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_baked_meshes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_bake_mesh_instance",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bake_meshes",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cell_item",
          "qualifiers": "const",
          "description": "The [MeshLibrary] item index located at the grid-based X, Y and Z coordinates. If the cell is empty, [INVALID_CELL_ITEM] will be returned.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_item_orientation",
          "qualifiers": "const",
          "description": "The orientation of the cell at the grid-based X, Y and Z coordinates. -1 is retuned if the cell is empty.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_meshes",
          "description": "Array of [Transform] and [Mesh] references corresponding to the non empty cells in the grid. The transforms are specified in world space.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_used_cells",
          "qualifiers": "const",
          "description": "Array of [Vector3] with the non empty cell coordinates in the grid map.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "make_baked_meshes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gen_lightmap_uv",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "1",
              "name": "lightmap_uv_texel_size",
              "type": "float",
              "default_value": "0.1"
            }
          ]
        },
        {
          "name": "map_to_world",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resource_changed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_item",
          "description": "Set the mesh index for the cell referenced by its grid-based X, Y and Z coordinates.\n\t\t\t\tA negative item index will clear the cell.\n\t\t\t\tOptionally, the item's orientation can be passed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "item",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "orientation",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_clip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "clipabove",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "2",
              "name": "floor",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "world_to_map",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "pos",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "INVALID_CELL_ITEM",
          "value": "-1",
          "description": "Invalid cell item that can be used in [method set_cell_item] to clear cells (or represent an empty cell in [method get_cell_item])."
        }
      ],
      "properties": [
        {
          "name": "cell_center_x",
          "type": "bool",
          "setter": "set_center_x",
          "getter": "get_center_x",
          "description": "If [code]true[/code] grid items are centered on the X axis."
        },
        {
          "name": "cell_center_y",
          "type": "bool",
          "setter": "set_center_y",
          "getter": "get_center_y",
          "description": "If [code]true[/code] grid items are centered on the Y axis."
        },
        {
          "name": "cell_center_z",
          "type": "bool",
          "setter": "set_center_z",
          "getter": "get_center_z",
          "description": "If [code]true[/code] grid items are centered on the Z axis."
        },
        {
          "name": "cell_octant_size",
          "type": "int",
          "setter": "set_octant_size",
          "getter": "get_octant_size",
          "description": "The size of each octant measured in number of cells. This applies to all three axis."
        },
        {
          "name": "cell_scale",
          "type": "float",
          "setter": "set_cell_scale",
          "getter": "get_cell_scale",
          "description": ""
        },
        {
          "name": "cell_size",
          "type": "Vector3",
          "setter": "set_cell_size",
          "getter": "get_cell_size",
          "description": "The dimensions of the grid's cells."
        },
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": ""
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": ""
        },
        {
          "name": "theme",
          "type": "MeshLibrary",
          "setter": "set_theme",
          "getter": "get_theme",
          "description": "The assigned [MeshLibrary]."
        }
      ],
      "theme_properties": []
    },
    "SceneTree": {
      "name": "SceneTree",
      "inherits": "MainLoop",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "call_group",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "call_group_flags",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "change_scene",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "change_scene_to",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "packed_scene",
              "type": "PackedScene",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_timer",
          "description": "",
          "return_type": "SceneTreeTimer",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pause_mode_process",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_network_connected_peers",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": []
        },
        {
          "name": "get_network_unique_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_nodes_in_group",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_rpc_sender_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_group",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_network_peer",
          "qualifiers": "const",
          "description": "Returns true if there is a [NetworkedMultiplayerPeer] set (with [method SceneTree.set_network_peer]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_input_handled",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_network_server",
          "qualifiers": "const",
          "description": "Returns true if this SceneTree's [NetworkedMultiplayerPeer] is in server mode (listening for connections).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "notify_group",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "notification",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "notify_group_flags",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "call_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "notification",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_delete",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "quit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reload_current_scene",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_auto_accept_quit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_group",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_group_flags",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "call_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_input_as_handled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_quit_on_go_back",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_screen_stretch",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "SceneTree.StretchMode",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "aspect",
              "type": "int",
              "enum": "SceneTree.StretchAspect",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "minsize",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "shrink",
              "type": "float",
              "default_value": "1"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "connected_to_server",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connection_failed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "files_dropped",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "files",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "screen",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "idle_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "network_peer_connected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "network_peer_disconnected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_added",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_configuration_warning_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_removed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "physics_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "screen_resized",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "server_disconnected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tree_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "GROUP_CALL_DEFAULT",
          "value": "0",
          "enum": "GroupCallFlags",
          "description": ""
        },
        {
          "name": "GROUP_CALL_REVERSE",
          "value": "1",
          "enum": "GroupCallFlags",
          "description": ""
        },
        {
          "name": "GROUP_CALL_REALTIME",
          "value": "2",
          "enum": "GroupCallFlags",
          "description": ""
        },
        {
          "name": "GROUP_CALL_UNIQUE",
          "value": "4",
          "enum": "GroupCallFlags",
          "description": ""
        },
        {
          "name": "STRETCH_MODE_DISABLED",
          "value": "0",
          "enum": "StretchMode",
          "description": ""
        },
        {
          "name": "STRETCH_MODE_2D",
          "value": "1",
          "enum": "StretchMode",
          "description": ""
        },
        {
          "name": "STRETCH_MODE_VIEWPORT",
          "value": "2",
          "enum": "StretchMode",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_IGNORE",
          "value": "0",
          "enum": "StretchAspect",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_KEEP",
          "value": "1",
          "enum": "StretchAspect",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_KEEP_WIDTH",
          "value": "2",
          "enum": "StretchAspect",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_KEEP_HEIGHT",
          "value": "3",
          "enum": "StretchAspect",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_EXPAND",
          "value": "4",
          "enum": "StretchAspect",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "current_scene",
          "type": "Node",
          "setter": "set_current_scene",
          "getter": "get_current_scene",
          "description": ""
        },
        {
          "name": "debug_collisions_hint",
          "type": "bool",
          "setter": "set_debug_collisions_hint",
          "getter": "is_debugging_collisions_hint",
          "description": ""
        },
        {
          "name": "debug_navigation_hint",
          "type": "bool",
          "setter": "set_debug_navigation_hint",
          "getter": "is_debugging_navigation_hint",
          "description": ""
        },
        {
          "name": "edited_scene_root",
          "type": "Node",
          "setter": "set_edited_scene_root",
          "getter": "get_edited_scene_root",
          "description": ""
        },
        {
          "name": "network_peer",
          "type": "NetworkedMultiplayerPeer",
          "setter": "set_network_peer",
          "getter": "get_network_peer",
          "description": "The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the SceneTree will become a network server (check with [method is_network_server()]) and will set root node's network mode to master (see NETWORK_MODE_* constants in [Node]), or it will become a regular peer with root node set to slave. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to SceneTree's signals."
        },
        {
          "name": "paused",
          "type": "bool",
          "setter": "set_pause",
          "getter": "is_paused",
          "description": ""
        },
        {
          "name": "refuse_new_network_connections",
          "type": "bool",
          "setter": "set_refuse_new_network_connections",
          "getter": "is_refusing_new_network_connections",
          "description": ""
        },
        {
          "name": "root",
          "type": "Viewport",
          "setter": "",
          "getter": "get_root",
          "description": ""
        },
        {
          "name": "use_font_oversampling",
          "type": "bool",
          "setter": "set_use_font_oversampling",
          "getter": "is_using_font_oversampling",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ReferenceRect": {
      "name": "ReferenceRect",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Reference frame for GUI.",
      "description": "Reference frame for GUI. It's just like an empty control, except a red box is displayed while editing around its size at all times.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "border",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "VSplitContainer": {
      "name": "VSplitContainer",
      "inherits": "SplitContainer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Vertical split container.",
      "description": "Vertical split container. See [SplitContainer]. This goes from left to right.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "autohide",
          "type": "int",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "bool": {
      "name": "bool",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Boolean built-in type",
      "description": "Boolean built-in type.",
      "methods": [
        {
          "name": "bool",
          "description": "Cast an [int] value to a boolean value, this method will return true if called with an integer value different to 0 and false in other case.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bool",
          "description": "Cast a [float] value to a boolean value, this method will return true if called with a floating point value different to 0 and false in other case.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bool",
          "description": "Cast a [String] value to a boolean value, this method will return true if called with a non empty string and false in other case. Examples: [code]bool('False')[/code] returns true, [code]bool('')[/code]. returns false",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AnimatedSprite3D": {
      "name": "AnimatedSprite3D",
      "inherits": "SpriteBase3D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "2D sprite node in 3D world, that can use multiple 2D textures for animation.",
      "description": "Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.",
      "methods": [
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return true if an animation if currently being played.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play the animation set in parameter. If no parameter is provided, the current animation is played.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the current animation (does not reset the frame counter).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "frame_changed",
          "description": "Emitted when [member frame] changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "animation",
          "type": "String",
          "setter": "set_animation",
          "getter": "get_animation",
          "description": "The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset."
        },
        {
          "name": "frame",
          "type": "int",
          "setter": "set_frame",
          "getter": "get_frame",
          "description": "The displayed animation frame's index."
        },
        {
          "name": "frames",
          "type": "SpriteFrames",
          "setter": "set_sprite_frames",
          "getter": "get_sprite_frames",
          "description": "The [SpriteFrames] resource containing the animation(s)."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "_is_playing",
          "description": "If [code]true[/code] the [member animation] is currently playing."
        }
      ],
      "theme_properties": []
    },
    "GDNativeLibrary": {
      "name": "GDNativeLibrary",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_config_file",
          "description": "",
          "return_type": "ConfigFile",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_current_dependencies",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_current_library_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "load_once",
          "type": "bool",
          "setter": "set_load_once",
          "getter": "should_load_once",
          "description": ""
        },
        {
          "name": "reloadable",
          "type": "bool",
          "setter": "set_reloadable",
          "getter": "is_reloadable",
          "description": ""
        },
        {
          "name": "singleton",
          "type": "bool",
          "setter": "set_singleton",
          "getter": "is_singleton",
          "description": ""
        },
        {
          "name": "symbol_prefix",
          "type": "String",
          "setter": "set_symbol_prefix",
          "getter": "get_symbol_prefix",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TranslationServer": {
      "name": "TranslationServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Server that manages all translations. Translations can be set to it and removed from it.",
      "description": "",
      "methods": [
        {
          "name": "add_translation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "translation",
              "type": "Translation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_locale",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_locale_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "locale",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_translation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "translation",
              "type": "Translation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_locale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "locale",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translate",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "message",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorScript": {
      "name": "EditorScript",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base script that can be used to add extension functions to the editor.",
      "description": "Scripts extending this class and implementing its [code]_run()[/code] method can be executed from the Script Editor's [code]File -> Run[/code] menu option (or by pressing [code]CTRL+Shift+X[/code]) while the editor is running. This is useful for adding custom in-editor functionality to Godot. For more complex additions, consider using [EditorPlugin]s instead. Note that extending scripts need to have [code]tool mode[/code] enabled.\n\t\tExample script:\n\t\t[codeblock]\n\t\ttool\n\t\textends EditorScript\n\n\t\tfunc _run():\n\t\t    print(\"Hello from the Godot Editor!\")\n\t\t[/codeblock]\n\t\tNote that the script is run in the Editor context, which means the output is visible in the console window started with the Editor (STDOUT) instead of the usual Godot [i]Output[/i] dock.",
      "methods": [
        {
          "name": "_run",
          "qualifiers": "virtual",
          "description": "This method is executed by the Editor when [code]File -> Run[/code] is used.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "add_root_node",
          "description": "Adds [code]node[/code] as a child of the root node in the editor context.\n\t\t\t\tWARNING: The implementation of this method is currently disabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_editor_interface",
          "description": "Returns the [EditorInterface] singleton instance.",
          "return_type": "EditorInterface",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scene",
          "description": "Returns the Editor's currently active scene.",
          "return_type": "Node",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "WeakRef": {
      "name": "WeakRef",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Holds an [Object], but does not contribute to the reference count if the object is a reference.",
      "description": "A weakref can hold a [Reference], without contributing to the reference counter. A weakref can be created from an [Object] using [method @GDScript.weakref]. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.",
      "methods": [
        {
          "name": "get_ref",
          "qualifiers": "const",
          "description": "Returns the [Object] this weakref is referring to.",
          "return_type": "Variant",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ARVRInterface": {
      "name": "ARVRInterface",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for ARVR interface implementation.",
      "description": "This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass ARVRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.\n\t\tInterfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through ARVRServer.",
      "methods": [
        {
          "name": "get_capabilities",
          "qualifiers": "const",
          "description": "Returns a combination of flags providing information about the capabilities of this interface.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Returns the name of this interface (OpenVR, OpenHMD, ARKit, etc).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_render_targetsize",
          "description": "Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_tracking_status",
          "qualifiers": "const",
          "description": "If supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "initialize",
          "description": "Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.\n\t\t\t\tAfter initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence. \n\t\t\t\tNote that you must enable the AR/VR mode on the main viewport for any device that uses the main output of Godot such as for mobile VR. \n\t\t\t\tIf you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively you can add a separate viewport node to your scene and enable AR/VR on that viewport and it will be used to output to the HMD leaving you free to do anything you like in the main window such as using a separate camera as a spectator camera or render out something completely different.\n\t\t\t\tWhile currently not used you can activate additional interfaces, you may wish to do this if you want to track controllers from other platforms. However at this point in time only one interface can render to an HMD.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_stereo",
          "description": "Returns true if the current output of this interface is in stereo.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "uninitialize",
          "description": "Turns the interface off.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ARVR_NONE",
          "value": "0",
          "enum": "Capabilities",
          "description": "No ARVR capabilities."
        },
        {
          "name": "ARVR_MONO",
          "value": "1",
          "enum": "Capabilities",
          "description": "This interface can work with normal rendering output (non-HMD based AR)."
        },
        {
          "name": "ARVR_STEREO",
          "value": "2",
          "enum": "Capabilities",
          "description": "This interface supports stereoscopic rendering."
        },
        {
          "name": "ARVR_AR",
          "value": "4",
          "enum": "Capabilities",
          "description": "This interface support AR (video background and real world tracking)."
        },
        {
          "name": "ARVR_EXTERNAL",
          "value": "8",
          "enum": "Capabilities",
          "description": "This interface outputs to an external device, if the main viewport is used the on screen output is an unmodified buffer of either the left or right eye (stretched if the viewport size is not changed to the same aspect ratio of get_render_targetsize. Using a separate viewport node frees up the main viewport for other purposes."
        },
        {
          "name": "EYE_MONO",
          "value": "0",
          "enum": "Eyes",
          "description": "Mono output, this is mostly used internally when retrieving positioning information for our camera node or when stereo scopic rendering is not supported."
        },
        {
          "name": "EYE_LEFT",
          "value": "1",
          "enum": "Eyes",
          "description": "Left eye output, this is mostly used internally when rendering the image for the left eye and obtaining positioning and projection information."
        },
        {
          "name": "EYE_RIGHT",
          "value": "2",
          "enum": "Eyes",
          "description": "Right eye output, this is mostly used internally when rendering the image for the right eye and obtaining positioning and projection information."
        },
        {
          "name": "ARVR_NORMAL_TRACKING",
          "value": "0",
          "enum": "Tracking_status",
          "description": "Tracking is behaving as expected."
        },
        {
          "name": "ARVR_EXCESSIVE_MOTION",
          "value": "1",
          "enum": "Tracking_status",
          "description": "Tracking is hindered by excessive motion, player is moving faster then tracking can keep up."
        },
        {
          "name": "ARVR_INSUFFICIENT_FEATURES",
          "value": "2",
          "enum": "Tracking_status",
          "description": "Tracking is hindered by insufficient features, it's too dark (for camera based tracking), player is blocked, etc."
        },
        {
          "name": "ARVR_UNKNOWN_TRACKING",
          "value": "3",
          "enum": "Tracking_status",
          "description": "We don't know the status of the tracking or this interface does not provide feedback."
        },
        {
          "name": "ARVR_NOT_TRACKING",
          "value": "4",
          "enum": "Tracking_status",
          "description": "Tracking is not functional (camera not plugged in or obscured, lighthouses turned off, etc.)"
        }
      ],
      "properties": [
        {
          "name": "ar_is_anchor_detection_enabled",
          "type": "bool",
          "setter": "set_anchor_detection_is_enabled",
          "getter": "get_anchor_detection_is_enabled",
          "description": "On an AR interface, is our anchor detection enabled?"
        },
        {
          "name": "interface_is_initialized",
          "type": "bool",
          "setter": "set_is_initialized",
          "getter": "is_initialized",
          "description": "Has this interface been initialized?"
        },
        {
          "name": "interface_is_primary",
          "type": "bool",
          "setter": "set_is_primary",
          "getter": "is_primary",
          "description": "Is this our primary interface?"
        }
      ],
      "theme_properties": []
    },
    "Slider": {
      "name": "Slider",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for GUI Sliders.",
      "description": "Base class for GUI Sliders.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "editable",
          "type": "bool",
          "setter": "set_editable",
          "getter": "is_editable",
          "description": ""
        },
        {
          "name": "focus_mode",
          "type": "int",
          "setter": "set_focus_mode",
          "getter": "get_focus_mode",
          "enum": "Control.FocusMode",
          "description": ""
        },
        {
          "name": "tick_count",
          "type": "int",
          "setter": "set_ticks",
          "getter": "get_ticks",
          "description": ""
        },
        {
          "name": "ticks_on_borders",
          "type": "bool",
          "setter": "set_ticks_on_borders",
          "getter": "get_ticks_on_borders",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PopupDialog": {
      "name": "PopupDialog",
      "inherits": "Popup",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for Popup Dialogs.",
      "description": "PopupDialog is a base class for popup dialogs, along with [WindowDialog].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Object": {
      "name": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for all non built-in types.",
      "description": "Base class for all non built-in types. Everything not a built-in type starts the inheritance chain from this class.\n\t\tObjects do not manage memory, if inheriting from one the object will most likely have to be deleted manually (call the [method free] function from the script or delete from C++).\n\t\tSome derivatives add memory management, such as [Reference] (which keeps a reference count and deletes itself automatically when no longer referenced) and [Node], which deletes the children tree when deleted.\n\t\tObjects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in [method _get_property_list] and handled in [method _get] and [method _set]. However, scripting languages and C++ have simpler means to export them.\n\t\tObjects also receive notifications ([method _notification]). Notifications are a simple way to notify the object about simple events, so they can all be handled together.",
      "methods": [
        {
          "name": "_get",
          "qualifiers": "virtual",
          "description": "Returns the given property. Returns [code]null[/code] if the [code]property[/code] does not exist.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_property_list",
          "qualifiers": "virtual",
          "description": "Returns the object's property list as an [Array] of dictionaries. Dictionaries must contain: name:String, type:int (see TYPE_* enum in [@GlobalScope]) and optionally: hint:int (see PROPERTY_HINT_* in [@GlobalScope]), hint_string:String, usage:int (see PROPERTY_USAGE_* in [@GlobalScope]).",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "_init",
          "qualifiers": "virtual",
          "description": "The virtual method called upon initialization.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_notification",
          "qualifiers": "virtual",
          "description": "Notify the object internally using an ID.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_set",
          "qualifiers": "virtual",
          "description": "Sets a property. Returns [code]true[/code] if the [code]property[/code] exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_user_signal",
          "description": "Adds a user-defined [code]signal[/code]. Arguments are optional, but can be added as an [Array] of dictionaries, each containing \"name\" and \"type\" (from [@GlobalScope] TYPE_*).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arguments",
              "type": "Array",
              "default_value": "[  ]"
            }
          ]
        },
        {
          "name": "call",
          "qualifiers": "vararg",
          "description": "Calls the [code]method[/code] on the object and returns a result. Pass parameters as a comma separated list.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "call_deferred",
          "qualifiers": "vararg",
          "description": "Calls the [code]method[/code] on the object during idle time and returns a result. Pass parameters as a comma separated list.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "callv",
          "description": "Calls the [code]method[/code] on the object and returns a result. Pass parameters as an [Array].",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg_array",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "can_translate_messages",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the object can translate strings.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "connect",
          "description": "Connects a [code]signal[/code] to a [code]method[/code] on a [code]target[/code] object. Pass optional [code]binds[/code] to the call. Use [code]flags[/code] to set deferred or one shot connections. See [code]CONNECT_*[/code] constants. A [code]signal[/code] can only be connected once to a [code]method[/code]. It will throw an error if already connected. To avoid this, first use [method is_connected] to check for existing connections.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "binds",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "4",
              "name": "flags",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "disconnect",
          "description": "Disconnects a [code]signal[/code] from a [code]method[/code] on the given [code]target[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "emit_signal",
          "qualifiers": "vararg",
          "description": "Emits the given [code]signal[/code].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "free",
          "description": "Deletes the object from memory.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get",
          "qualifiers": "const",
          "description": "Returns a [Variant] for a [code]property[/code].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_class",
          "qualifiers": "const",
          "description": "Returns the object's class as a [String].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_incoming_connections",
          "qualifiers": "const",
          "description": "Returns an [Array] of dictionaries with information about signals that are connected to the object.\n\t\t\t\tInside each [Dictionary] there are 3 fields:\n\t\t\t\t- \"source\" is a reference to signal emitter.\n\t\t\t\t- \"signal_name\" is name of connected signal.\n\t\t\t\t- \"method_name\" is a name of method to which signal is connected.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_indexed",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_instance_id",
          "qualifiers": "const",
          "description": "Returns the object's unique instance ID.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_meta",
          "qualifiers": "const",
          "description": "Returns the object's metadata for the given [code]name[/code].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_meta_list",
          "qualifiers": "const",
          "description": "Returns the object's metadata as a [PoolStringArray].",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_method_list",
          "qualifiers": "const",
          "description": "Returns the object's methods and their signatures as an [Array].",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_property_list",
          "qualifiers": "const",
          "description": "Returns the list of properties as an [Array] of dictionaries. Dictionaries contain: name:String, type:int (see TYPE_* enum in [@GlobalScope]) and optionally: hint:int (see PROPERTY_HINT_* in [@GlobalScope]), hint_string:String, usage:int (see PROPERTY_USAGE_* in [@GlobalScope]).",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_script",
          "qualifiers": "const",
          "description": "Returns the object's [Script] or [code]null[/code] if one doesn't exist.",
          "return_type": "Reference",
          "arguments": []
        },
        {
          "name": "get_signal_connection_list",
          "qualifiers": "const",
          "description": "Returns an [Array] of connections for the given [code]signal[/code].",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_signal_list",
          "qualifiers": "const",
          "description": "Returns the list of signals as an [Array] of dictionaries.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "has_meta",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if a metadata is found with the given [code]name[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_method",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the object contains the given [code]method[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_user_signal",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the given user-defined [code]signal[/code] exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_blocking_signals",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if signal emission blocking is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_class",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the object inherits from the given [code]type[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_connected",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if a connection exists for a given [code]signal[/code], [code]target[/code], and [code]method[/code].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_queued_for_deletion",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the [code]queue_free[/code] method was called for the object.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "notification",
          "description": "Notify the object of something.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "reversed",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "property_list_changed_notify",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set",
          "description": "Set property into the object.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_block_signals",
          "description": "If set to true, signal emission is blocked.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_indexed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_message_translation",
          "description": "Define whether the object can translate strings (with calls to [method tr]). Default is true.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_meta",
          "description": "Set a metadata into the object. Metadata is serialized. Metadata can be [i]anything[/i].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_script",
          "description": "Set a script into the object, scripts extend the object functionality.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "script",
              "type": "Reference",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tr",
          "qualifiers": "const",
          "description": "Translate a message. Only works if message translation is enabled (which it is by default). See [method set_message_translation].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "message",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "script_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_POSTINITIALIZE",
          "value": "0",
          "description": "Called right when the object is initialized. Not available in script."
        },
        {
          "name": "NOTIFICATION_PREDELETE",
          "value": "1",
          "description": "Called before the object is about to be deleted."
        },
        {
          "name": "CONNECT_DEFERRED",
          "value": "1",
          "enum": "ConnectFlags",
          "description": "Connect a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time."
        },
        {
          "name": "CONNECT_PERSIST",
          "value": "2",
          "enum": "ConnectFlags",
          "description": "Persisting connections are saved when the object is serialized to file."
        },
        {
          "name": "CONNECT_ONESHOT",
          "value": "4",
          "enum": "ConnectFlags",
          "description": "One shot connections disconnect themselves after emission."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "PHashTranslation": {
      "name": "PHashTranslation",
      "inherits": "Translation",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Optimized translation.",
      "description": "Optimized translation. Uses real-time compressed translations, which results in very small dictionaries.",
      "methods": [
        {
          "name": "generate",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Translation",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectPhaser": {
      "name": "AudioEffectPhaser",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a Phaser audio effect to an Audio bus.\n\t\tCombines the original signal with a copy that is slightly out of phase with the original.",
      "description": "Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a Low Frequency Oscillator.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "depth",
          "type": "float",
          "setter": "set_depth",
          "getter": "get_depth",
          "description": "Governs how high the filter frequencies sweep. Low value will primarily affect bass frequencies. High value can sweep high into the treble. Value can range from 0.1 to 4. Default value: [code]1[/code]."
        },
        {
          "name": "feedback",
          "type": "float",
          "setter": "set_feedback",
          "getter": "get_feedback",
          "description": "Output percent of modified sound. Value can range from 0.1 to 0.9. Default value: [code]0.7[/code]."
        },
        {
          "name": "range_max_hz",
          "type": "float",
          "setter": "set_range_max_hz",
          "getter": "get_range_max_hz",
          "description": "Determines the maximum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: [code]1600hz[/code]."
        },
        {
          "name": "range_min_hz",
          "type": "float",
          "setter": "set_range_min_hz",
          "getter": "get_range_min_hz",
          "description": "Determines the minimum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: [code]440hz[/code]."
        },
        {
          "name": "rate_hz",
          "type": "float",
          "setter": "set_rate_hz",
          "getter": "get_rate_hz",
          "description": "Adjusts the rate at which the effect sweeps up and down across the frequency range."
        }
      ],
      "theme_properties": []
    },
    "Rect2": {
      "name": "Rect2",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "2D Axis-aligned bounding box.",
      "description": "Rect2 consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.",
      "methods": [
        {
          "name": "Rect2",
          "description": "Constructs a [code]Rect2[/code] by position and size.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Rect2",
          "description": "Constructs a [code]Rect2[/code] by x, y, width, and height.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "width",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clip",
          "description": "Returns the intersection of this [code]Rect2[/code] and b.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "encloses",
          "description": "Returns [code]true[/code] if this [code]Rect2[/code] completely encloses another one.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "expand",
          "description": "Returns this [code]Rect2[/code] expanded to include a given point.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_area",
          "description": "Returns the area of the [code]Rect2[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "grow",
          "description": "Returns a copy of the [code]Rect2[/code] grown a given amount of units towards all the sides.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "grow_individual",
          "description": "Returns a copy of the [code]Rect2[/code] grown a given amount of units towards each direction individually.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "top",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "right",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": " bottom",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "grow_margin",
          "description": "Returns a copy of the [code]Rect2[/code] grown a given amount of units towards the [Margin] direction.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_no_area",
          "description": "Returns [code]true[/code] if the [code]Rect2[/code] is flat or empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "description": "Returns [code]true[/code] if the [code]Rect2[/code] contains a point.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects",
          "description": "Returns [code]true[/code] if the [code]Rect2[/code] overlaps with another.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "merge",
          "description": "Returns a larger Rect2 that contains this Rect2 and [code]with[/code].",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "end",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "Ending corner."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "Position (starting corner)."
        },
        {
          "name": "size",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "Size from position to end."
        }
      ],
      "theme_properties": []
    },
    "@GDScript": {
      "name": "@GDScript",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Built-in GDScript functions.",
      "description": "This contains the list of built-in gdscript functions. Mostly math functions and other utilities. Everything else is expanded by objects.",
      "methods": [
        {
          "name": "Color8",
          "description": "Returns a 32 bit color with red, green, blue and alpha channels. Each channel has 8 bits of information ranging from 0 to 255.\n\t\t\t\t[code]r8[/code] red channel\n\t\t\t\t[code]g8[/code] green channel\n\t\t\t\t[code]b8[/code] blue channel\n\t\t\t\t[code]a8[/code] alpha channel\n\t\t\t\t[codeblock]\n\t\t\t\tred = Color8(255, 0, 0)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r8",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "g8",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b8",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "a8",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ColorN",
          "description": "Returns a color according to the standardised [code]name[/code] with [code]alpha[/code] ranging from 0 to 1.\n\t\t\t\t[codeblock]\n\t\t\t\tred = ColorN(\"red\", 1)\n\t\t\t\t[/codeblock]\n\t\t\t\tSupported color names:\n\t\t\t\t\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflower\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"webgray\", \"green\", \"webgreen\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrod\", \"lightgray\", \"lightgreen\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"webmaroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navyblue\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"webpurple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\".",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "alpha",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "Returns the absolute value of parameter [code]s[/code]  (i.e. unsigned value, works for integer and float).\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 1\n\t\t\t\ta = abs(-1)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "acos",
          "description": "Returns the arc cosine of [code]s[/code] in radians. Use to get the angle of cosine [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# c is 0.523599 or 30 degrees if converted with rad2deg(s)\n\t\t\t\tc = acos(0.866025)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "asin",
          "description": "Returns the arc sine of [code]s[/code] in radians. Use to get the angle of sine [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# s is 0.523599 or 30 degrees if converted with rad2deg(s)\n\t\t\t\ts = asin(0.5)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert",
          "description": "Assert that the [code]condition[/code] is true. If the [code]condition[/code] is false a fatal error is generated and the program is halted. Useful for debugging to make sure a value is always true.\n\t\t\t\t[codeblock]\n\t\t\t\t# Speed should always be between 0 and 20\n\t\t\t\tspeed = -10\n\t\t\t\tassert(speed < 20) # Is true and program continues\n\t\t\t\tassert(speed >= 0) # Is false and program stops\n\t\t\t\tassert(speed >= 0 && speed < 20) # Or combined\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "condition",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "atan",
          "description": "Returns the arc tangent of [code]s[/code] in radians. Use it to get the angle from an angle's tangent in trigonometry: [code]atan(tan(angle)) == angle[/code].\n\t\t\t\tThe method cannot know in which quadrant the angle should fall. See [method atan2] if you always want an exact angle.\n\t\t\t\t[codeblock]\n\t\t\t\ta = atan(0.5) # a is 0.463648\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "atan2",
          "description": "Returns the arc tangent of [code]y/x[/code] in radians. Use to get the angle of tangent [code]y/x[/code]. To compute the value, the method takes into account the sign of both arguments in order to determine the quadrant.\n\t\t\t\t[codeblock]\n\t\t\t\ta = atan(0,-1) # a is 3.141593\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bytes2var",
          "description": "Decodes a byte array back to a value.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cartesian2polar",
          "description": "Converts a 2D point expressed in the cartesian coordinate system (x and y axis) to the polar coordinate system (a distance from the origin and an angle).",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ceil",
          "description": "Rounds [code]s[/code] upward, returning the smallest integral value that is not less than [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\ti = ceil(1.45)  # i is 2\n\t\t\t\ti = ceil(1.001) # i is 2\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "char",
          "description": "Returns a character as a String of the given ASCII code.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 'A'\n\t\t\t\ta = char(65)\n\t\t\t\t# a is 'a'\n\t\t\t\ta = char(65+32)\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ascii",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clamp",
          "description": "Clamps [code]value[/code] and returns a value not less than [code]min[/code] and not more than [code]max[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tspeed = 1000\n\t\t\t\t# a is 20\n\t\t\t\ta = clamp(speed, 1, 20)\n\n\t\t\t\tspeed = -10\n\t\t\t\t# a is 1\n\t\t\t\ta = clamp(speed, 1, 20)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "convert",
          "description": "Converts from a type to another in the best way possible. The [code]type[/code] parameter uses the enum TYPE_* in [@GlobalScope].\n\t\t\t\t[codeblock]\n\t\t\t\ta = Vector2(1, 0)\n\t\t\t\t# prints 1\n\t\t\t\tprint(a.length())\n\t\t\t\ta = convert(a, TYPE_STRING)\n\t\t\t\t# prints 6\n\t\t\t\t# (1, 0) is 6 characters\n\t\t\t\tprint(a.length())\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cos",
          "description": "Returns the cosine of angle [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\t# prints 1 and -1\n\t\t\t\tprint(cos(PI*2))\n\t\t\t\tprint(cos(PI))\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cosh",
          "description": "Returns the hyperbolic cosine of [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\t# prints 1.543081\n\t\t\t\tprint(cosh(1))\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "db2linear",
          "description": "Converts from decibels to linear energy (audio).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "decimals",
          "description": "Returns the position of the first non-zero digit, after the decimal point.\n\t\t\t\t[codeblock]\n\t\t\t\t# n is 2\n\t\t\t\tn = decimals(0.035)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dectime",
          "description": "Returns the result of [code]value[/code] decreased by [code]step[/code] * [code]amount[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# a = 59\n\t\t\t\ta = dectime(60, 10, 0.1))\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "deg2rad",
          "description": "Returns degrees converted to radians.\n\t\t\t\t[codeblock]\n\t\t\t\t# r is 3.141593\n\t\t\t\tr = deg2rad(180)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "deg",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dict2inst",
          "description": "Converts a previously converted instance to a dictionary, back into an instance. Useful for deserializing.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dict",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ease",
          "description": "Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "exp",
          "description": "Raises the Euler's constant [b]e[/b] to the power of [code]s[/code] and returns it. [b]e[/b] has an approximate value of 2.71828.\n\t\t\t\t[codeblock]\n\t\t\t\ta = exp(2) # approximately 7.39\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "floor",
          "description": "Rounds [code]s[/code] to the closest smaller integer and returns it.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 2\n\t\t\t\ta = floor(2.99)\n\t\t\t\t# a is -3\n\t\t\t\ta = floor(-2.99)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fmod",
          "description": "Returns the floating-point remainder of [code]x/y[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# remainder is 1.5\n\t\t\t\tvar remainder = fmod(7, 5.5)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fposmod",
          "description": "Returns the floating-point remainder of [code]x/y[/code] that wraps equally in positive and negative.\n\t\t\t\t[codeblock]\n\t\t\t\tvar i = -10;\n\t\t\t\twhile i < 0:\n\t\t\t\t    prints(i, fposmod(i, 10))\n\t\t\t\t    i += 1\n\t\t\t\t[/codeblock]\n\t\t\t\tProduces:\n\t\t\t\t[codeblock]\n\t\t\t\t-10 10\n\t\t\t\t-9 1\n\t\t\t\t-8 2\n\t\t\t\t-7 3\n\t\t\t\t-6 4\n\t\t\t\t-5 5\n\t\t\t\t-4 6\n\t\t\t\t-3 7\n\t\t\t\t-2 8\n\t\t\t\t-1 9\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "funcref",
          "description": "Returns a reference to the specified function [code]funcname[/code] in the [code]instance[/code] node. As functions aren't first-class objects in GDscript, use [code]funcref[/code] to store a [FuncRef] in a variable and call it later.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc foo():\n\t\t\t\t    return(\"bar\")\n\n\t\t\t\ta = funcref(self, \"foo\")\n\t\t\t\tprint(a.call_func()) # prints bar\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "funcname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hash",
          "description": "Returns the integer hash of the variable passed.\n\t\t\t\t[codeblock]\n\t\t\t\tprint(hash(\"a\")) # prints 177670\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inst2dict",
          "description": "Returns the passed instance converted to a dictionary (useful for serializing).\n\t\t\t\t[codeblock]\n\t\t\t\tvar foo = \"bar\"\n\t\t\t\tfunc _ready():\n\t\t\t\t    var d = inst2dict(self)\n\t\t\t\t    print(d.keys())\n\t\t\t\t    print(d.values())\n\t\t\t\t[/codeblock]\n\t\t\t\tPrints out:\n\t\t\t\t[codeblock]\n\t\t\t\t[@subpath, @path, foo]\n\t\t\t\t[, res://test.gd, bar]\n\t\t\t\t[/codeblock]",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "inst",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_from_id",
          "description": "Returns the Object that corresponds to [code]instance_id[/code]. All Objects have a unique instance ID.\n\t\t\t\t[codeblock]\n\t\t\t\tvar foo = \"bar\"\n\t\t\t\tfunc _ready():\n\t\t\t\t    var id = get_instance_id()\n\t\t\t\t    var inst = instance_from_id(id)\n\t\t\t\t    print(inst.foo) # prints bar\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse_lerp",
          "description": "Returns a normalized value considering the given range.\n\t\t\t\t[codeblock]\n\t\t\t\tinverse_lerp(3, 5, 4) # returns 0.5\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_inf",
          "description": "Returns True/False whether [code]s[/code] is an infinity value (either positive infinity or negative infinity).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_nan",
          "description": "Returns True/False whether [code]s[/code] is a NaN (Not-A-Number) value.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "len",
          "description": "Returns length of Variant [code]var[/code]. Length is the character count of String, element count of Array, size of Dictionary, etc. Note: Generates a fatal error if Variant can not provide a length.\n\t\t\t\t[codeblock]\n\t\t\t\ta = [1, 2, 3, 4]\n\t\t\t\tlen(a) # returns 4\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "lerp",
          "description": "Linearly interpolates between two values by a normalized value.\n\t\t\t\t[codeblock]\n\t\t\t\tlerp(1, 3, 0.5) # returns 2\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "linear2db",
          "description": "Converts from linear energy to decibels (audio).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "nrg",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load",
          "description": "Loads a resource from the filesystem located at [code]path[/code]. Note: resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing \"Copy Path\".\n\t\t\t\t[codeblock]\n\t\t\t\t# load a scene called main located in the root of the project directory\n\t\t\t\tvar main = load(\"res://main.tscn\")\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "log",
          "description": "Natural logarithm. The amount of time needed to reach a certain level of continuous growth. Note: This is not the same as the log function on your calculator which is a base 10 logarithm.\n\t\t\t\t[codeblock]\n\t\t\t\tlog(10) # returns 2.302585\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "max",
          "description": "Returns the maximum of two values.\n\t\t\t\t[codeblock]\n\t\t\t\tmax(1,2) # returns 2\n\t\t\t\tmax(-3.99, -4) # returns -3.99\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "b",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "min",
          "description": "Returns the minimum of two values.\n\t\t\t\t[codeblock]\n\t\t\t\tmin(1,2) # returns 1\n\t\t\t\tmin(-3.99, -4) # returns -4\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "b",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "nearest_po2",
          "description": "Returns the nearest larger power of 2 for integer [code]value[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tnearest_po2(3) # returns 4\n\t\t\t\tnearest_po2(4) # returns 4\n\t\t\t\tnearest_po2(5) # returns 8\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "parse_json",
          "description": "Parse JSON text to a Variant (use [method typeof] to check if it is what you expect).\n\t\t\t\tBe aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to [float] types.\n\t\t\t\t[codeblock]\n\t\t\t\tp = parse_json('[\"a\", \"b\", \"c\"]')\n\t\t\t\tif typeof(p) == TYPE_ARRAY:\n\t\t\t\t    print(p[0]) # prints a\n\t\t\t\telse:\n\t\t\t\t    print(\"unexpected results\")\n\t\t\t\t[/codeblock]",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "json",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "polar2cartesian",
          "description": "Converts a 2D point expressed in the polar coordinate system (a distance from the origin [code]r[/code] and an angle [code]th[/code]) to the cartesian coordinate system (x and y axis).",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "th",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pow",
          "description": "Returns the result of [code]x[/code] raised to the power of [code]y[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tpow(2,5) # returns 32\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "preload",
          "description": "Returns a resource from the filesystem that is loaded during script parsing. Note: resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing \"Copy Path\".\n\t\t\t\t[codeblock]\n\t\t\t\t# load a scene called main located in the root of the project directory\n\t\t\t\tvar main = preload(\"res://main.tscn\")\n\t\t\t\t[/codeblock]",
          "return_type": "Resource",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print",
          "qualifiers": "vararg",
          "description": "Converts one or more arguments to strings in the best way possible and prints them to the console.\n\t\t\t\t[codeblock]\n\t\t\t\ta = [1,2,3]\n\t\t\t\tprint(\"a\",\"b\",a) # prints ab[1, 2, 3]\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "print_stack",
          "description": "Prints a stack track at code location, only works when running with debugger turned on.\n\t\t\t\tOutput in the console would look something like this:\n\t\t\t\t[codeblock]\n\t\t\t\tFrame 0 - res://test.gd:16 in function '_process'\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "printerr",
          "qualifiers": "vararg",
          "description": "Prints one or more arguments to strings in the best way possible to standard error line.\n\t\t\t\t[codeblock]\n\t\t\t\tprinterr(\"prints to stderr\")\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "printraw",
          "qualifiers": "vararg",
          "description": "Prints one or more arguments to strings in the best way possible to console. No newline is added at the end.\n\t\t\t\t[codeblock]\n\t\t\t\tprintraw(\"A\")\n\t\t\t\tprintraw(\"B\")\n\t\t\t\t# prints AB\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "prints",
          "qualifiers": "vararg",
          "description": "Prints one or more arguments to the console with a space between each argument.\n\t\t\t\t[codeblock]\n\t\t\t\tprints(\"A\", \"B\", \"C\") # prints A B C\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "printt",
          "qualifiers": "vararg",
          "description": "Prints one or more arguments to the console with a tab between each argument.\n\t\t\t\t[codeblock]\n\t\t\t\tprintt(\"A\", \"B\", \"C\") # prints A       B       C\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "rad2deg",
          "description": "Converts from radians to degrees.\n\t\t\t\t[codeblock]\n\t\t\t\trad2deg(0.523599) # returns 30\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rad",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rand_range",
          "description": "Random range, any floating point value between [code]from[/code] and [code]to[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tprints(rand_range(0, 1), rand_range(0, 1)) # prints 0.135591 0.405263\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rand_seed",
          "description": "Random from seed: pass a [code]seed[/code], and an array with both number and new seed is returned. \"Seed\" here refers to the internal state of the pseudo random number generator. The internal state of the current implementation is 64 bits.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "seed",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "randf",
          "description": "Returns a random floating point value between 0 and 1.\n\t\t\t\t[codeblock]\n\t\t\t\trandf() # returns 0.375671\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "randi",
          "description": "Returns a random 32 bit integer. Use remainder to obtain a random value between 0 and N (where N is smaller than 2^32 -1).\n\t\t\t\t[codeblock]\n\t\t\t\trandi() % 20      # returns random number between 0 and 19\n\t\t\t\trandi() % 100     # returns random number between 0 and 99\n\t\t\t\trandi() % 100 + 1 # returns random number between 1 and 100\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "randomize",
          "description": "Randomizes the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _ready():\n\t\t\t\t    randomize()\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "range",
          "qualifiers": "vararg",
          "description": "Returns an array with the given range. Range can be 1 argument N (0 to N-1), two arguments (initial, final-1) or three arguments (initial, final-1, increment).\n\t\t\t\t[codeblock]\n\t\t\t\tfor i in range(4):\n\t\t\t\t    print(i)\n\t\t\t\tfor i in range(2, 5):\n\t\t\t\t    print(i)\n\t\t\t\tfor i in range(0, 6, 2):\n\t\t\t\t    print(i)\n\t\t\t\t[/codeblock]\n\t\t\t\tOutput:\n\t\t\t\t[codeblock]\n\t\t\t\t0\n\t\t\t\t1\n\t\t\t\t2\n\t\t\t\t3\n\n\t\t\t\t2\n\t\t\t\t3\n\t\t\t\t4\n\n\t\t\t\t0\n\t\t\t\t2\n\t\t\t\t4\n\t\t\t\t[/codeblock]",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "range_lerp",
          "description": "Maps a [code]value[/code] from range [code][istart, istop][/code] to [code][ostart, ostop][/code].\n\t\t\t\t[codeblock]\n\t\t\t\trange_lerp(75, 0, 100, -1, 1) # returns 0.5\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "istart",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "istop",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "ostart",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "ostop",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "round",
          "description": "Returns the integral value that is nearest to [code]s[/code], with halfway cases rounded away from zero.\n\t\t\t\t[codeblock]\n\t\t\t\tround(2.6) # returns 3\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seed",
          "description": "Sets seed for the random number generator.\n\t\t\t\t[codeblock]\n\t\t\t\tmy_seed = \"Godot Rocks\"\n\t\t\t\tseed(my_seed.hash())\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "seed",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sign",
          "description": "Returns the sign of [code]s[/code]: -1 or 1. Returns 0 if [code]s[/code] is 0.\n\t\t\t\t[codeblock]\n\t\t\t\tsign(-6) # returns -1\n\t\t\t\tsign(0)  # returns 0\n\t\t\t\tsign(6)  # returns 1\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sin",
          "description": "Returns the sine of angle [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\tsin(0.523599) # returns 0.5\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sinh",
          "description": "Returns the hyperbolic sine of [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\ta = log(2.0) # returns 0.693147\n\t\t\t\tsinh(a) # returns 0.75\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sqrt",
          "description": "Returns the square root of [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tsqrt(9) # returns 3\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stepify",
          "description": "Snaps float value [code]s[/code] to a given [code]step[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "str",
          "qualifiers": "vararg",
          "description": "Converts one or more arguments to string in the best way possible.\n\t\t\t\t[codeblock]\n\t\t\t\tvar a = [10, 20, 30]\n\t\t\t\tvar b = str(a);\n\t\t\t\tlen(a) # returns 3\n\t\t\t\tlen(b) # returns 12\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "str2var",
          "description": "Converts a formatted string that was returned by [method var2str] to the original value.\n\t\t\t\t[codeblock]\n\t\t\t\ta = '{ \"a\": 1, \"b\": 2 }'\n\t\t\t\tb = str2var(a)\n\t\t\t\tprint(b['a']) # prints 1\n\t\t\t\t[/codeblock]",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tan",
          "description": "Returns the tangent of angle [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\ttan( deg2rad(45) ) # returns 1\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tanh",
          "description": "Returns the hyperbolic tangent of [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\ta = log(2.0) # returns 0.693147\n\t\t\t\ttanh(a)      # returns 0.6\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_json",
          "description": "Converts a Variant [code]var[/code] to JSON text and return the result. Useful for serializing data to store or send over the network.\n\t\t\t\t[codeblock]\n\t\t\t\ta = { 'a': 1, 'b': 2 }\n\t\t\t\tb = to_json(a)\n\t\t\t\tprint(b) # {\"a\":1, \"b\":2}\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "type_exists",
          "description": "Returns whether the given class exists in [ClassDB].\n\t\t\t\t[codeblock]\n\t\t\t\ttype_exists(\"Sprite\") # returns true\n\t\t\t\ttype_exists(\"Variant\") # returns false\n\t\t\t\t[/codeblock]",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "typeof",
          "description": "Returns the internal type of the given Variant object, using the TYPE_* enum in [@GlobalScope].\n\t\t\t\t[codeblock]\n\t\t\t\tp = parse_json('[\"a\", \"b\", \"c\"]')\n\t\t\t\tif typeof(p) == TYPE_ARRAY:\n\t\t\t\t    print(p[0]) # prints a\n\t\t\t\telse:\n\t\t\t\t    print(\"unexpected results\")\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "validate_json",
          "description": "Checks that [code]json[/code] is valid JSON data. Returns empty string if valid. Returns error message if not valid.\n\t\t\t\t[codeblock]\n\t\t\t\tj = to_json([1, 2, 3])\n\t\t\t\tv = validate_json(j)\n\t\t\t\tif not v:\n\t\t\t\t    print(\"valid\")\n\t\t\t\telse:\n\t\t\t\t    prints(\"invalid\", v)\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "json",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "var2bytes",
          "description": "Encodes a variable value to a byte array.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "var2str",
          "description": "Converts a Variant [code]var[/code] to a formatted string that can later be parsed using [method str2var].\n\t\t\t\t[codeblock]\n\t\t\t\ta = { 'a': 1, 'b': 2 }\n\t\t\t\tprint(var2str(a))\n\t\t\t\t[/codeblock]\n\t\t\t\tprints\n\t\t\t\t[codeblock]\n\t\t\t\t{\n\t\t\t\t\"a\": 1,\n\t\t\t\t\"b\": 2\n\t\t\t\t}\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "weakref",
          "description": "Returns a weak reference to an object.\n\t\t\t\tA weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "wrapf",
          "description": "Wraps float [code]value[/code] between [code]min[/code] and [code]max[/code].\n\t\t\t\tUsable for creating loop-alike behavior or infinite surfaces.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 0.5\n\t\t\t\ta = wrapf(10.5, 0.0, 10.0)\n\t\t\t\t[/codeblock]\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 9.5\n\t\t\t\ta = wrapf(-0.5, 0.0, 10.0)\n\t\t\t\t[/codeblock]\n\t\t\t\t[codeblock]\n\t\t\t\t# infinite loop between 0.0 and 0.99\n\t\t\t\tf = wrapf(f + 0.1, 0.0, 1.0)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "wrapi",
          "description": "Wraps integer [code]value[/code] between [code]min[/code] and [code]max[/code].\n\t\t\t\tUsable for creating loop-alike behavior or infinite surfaces.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 0\n\t\t\t\ta = wrapi(10, 0, 10)\n\t\t\t\t[/codeblock]\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 9\n\t\t\t\ta = wrapi(-1, 0, 10)\n\t\t\t\t[/codeblock]\n\t\t\t\t[codeblock]\n\t\t\t\t# infinite loop between 0 and 9\n\t\t\t\tframe = wrapi(frame + 1, 0, 10)\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "yield",
          "description": "Stops the function execution and returns the current state. Call [method GDScriptFunctionState.resume] on the state to resume execution. This invalidates the state.\n\t\t\t\tReturns anything that was passed to the resume function call. If passed an object and a signal, the execution is resumed when the object's signal is emitted.",
          "return_type": "GDScriptFunctionState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PI",
          "value": "3.141593",
          "description": "Constant that represents how many times the diameter of a circle fits around its perimeter."
        },
        {
          "name": "TAU",
          "value": "6.283185",
          "description": "The circle constant, the circumference of the unit circle."
        },
        {
          "name": "INF",
          "value": "inf",
          "description": "A positive infinity. (For negative infinity, use -INF)."
        },
        {
          "name": "NAN",
          "value": "nan",
          "description": "Macro constant that expands to an expression of type float that represents a NaN.\n\t\t\tThe NaN values are used to identify undefined or non-representable values for floating-point elements, such as the square root of negative numbers or the result of 0/0."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "CanvasLayer": {
      "name": "CanvasLayer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Canvas drawing layer.",
      "description": "Canvas drawing layer. [CanvasItem] nodes that are direct or indirect children of a [code]CanvasLayer[/code] will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a [code]CanvasLayer[/code] with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below).",
      "methods": [
        {
          "name": "get_world_2d",
          "qualifiers": "const",
          "description": "Return the [World2D] used by this layer.",
          "return_type": "World2D",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "custom_viewport",
          "type": "Node",
          "setter": "set_custom_viewport",
          "getter": "get_custom_viewport",
          "description": "The custom [Viewport] node assigned to the [code]CanvasLayer[/code]. If null, uses the default viewport instead."
        },
        {
          "name": "layer",
          "type": "int",
          "setter": "set_layer",
          "getter": "get_layer",
          "description": "Layer index for draw order. Lower values are drawn first. Default value: [code]1[/code]."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The layer's base offset."
        },
        {
          "name": "rotation",
          "type": "float",
          "setter": "set_rotation",
          "getter": "get_rotation",
          "description": "The layer's rotation in radians."
        },
        {
          "name": "rotation_degrees",
          "type": "float",
          "setter": "set_rotation_degrees",
          "getter": "get_rotation_degrees",
          "description": "The layer's rotation in degrees."
        },
        {
          "name": "scale",
          "type": "Vector2",
          "setter": "set_scale",
          "getter": "get_scale",
          "description": "The layer's scale."
        },
        {
          "name": "transform",
          "type": "Transform2D",
          "setter": "set_transform",
          "getter": "get_transform",
          "description": "The layer's transform."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectPitchShift": {
      "name": "AudioEffectPitchShift",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a Pitch shift audio effect to an Audio bus.\n\t\tRaises or lowers the pitch of original sound.",
      "description": "Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "pitch_scale",
          "type": "float",
          "setter": "set_pitch_scale",
          "getter": "get_pitch_scale",
          "description": "Pitch value. Can range from 0 (-1 octave) to 16 (+16 octaves)."
        }
      ],
      "theme_properties": []
    },
    "SpatialGizmo": {
      "name": "SpatialGizmo",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectReverb": {
      "name": "AudioEffectReverb",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a Reverb audio effect to an Audio bus.\n\t\tSimulates the sound of acoustic environments such as rooms, concert halls, caverns, or an open spaces.",
      "description": "Simulates rooms of different sizes. Its parameters can be adjusted to simulate the sound of a specific room.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "damping",
          "type": "float",
          "setter": "set_damping",
          "getter": "get_damping",
          "description": "Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "dry",
          "type": "float",
          "setter": "set_dry",
          "getter": "get_dry",
          "description": "Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "hipass",
          "type": "float",
          "setter": "set_hpf",
          "getter": "get_hpf",
          "description": "High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1. Default value: [code]0[/code]."
        },
        {
          "name": "predelay_feedback",
          "type": "float",
          "setter": "set_predelay_msec",
          "getter": "get_predelay_msec",
          "description": "Output percent of predelay. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "predelay_msec",
          "type": "float",
          "setter": "set_predelay_msec",
          "getter": "get_predelay_msec",
          "description": "Time between the original signal and the early reflections of the reverb signal. Default value: [code]150ms[/code]."
        },
        {
          "name": "room_size",
          "type": "float",
          "setter": "set_room_size",
          "getter": "get_room_size",
          "description": "Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1. Default value: [code]0.8[/code]."
        },
        {
          "name": "spread",
          "type": "float",
          "setter": "set_spread",
          "getter": "get_spread",
          "description": "Defines how reflective the imaginary room's walls are. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "wet",
          "type": "float",
          "setter": "set_wet",
          "getter": "get_wet",
          "description": "Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1. Default value: [code]0.5[/code]."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptReturn": {
      "name": "VisualScriptReturn",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Exits a function and returns an optional value.",
      "description": "Ends the execution of a function and returns control to the calling function. Optionally, it can return a [Variant] value.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence\n\t\t- Data (variant): [code]result[/code] (optional)\n\t\t[b]Output Ports:[/b]\n\t\tnone",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "return_enabled",
          "type": "bool",
          "setter": "set_enable_return_value",
          "getter": "is_return_value_enabled",
          "description": "If [code]true[/code] the [code]return[/code] input port is available."
        },
        {
          "name": "return_type",
          "type": "int",
          "setter": "set_return_type",
          "getter": "get_return_type",
          "enum": "Variant.Type",
          "description": "The return value's data type."
        }
      ],
      "theme_properties": []
    },
    "TileSet": {
      "name": "TileSet",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Tile library for tilemaps.",
      "description": "A TileSet is a library of tiles for a [TileMap]. It contains a list of tiles, each consisting of a sprite and optional collision shapes.\n\t\tTiles are referenced by a unique integer ID.",
      "methods": [
        {
          "name": "_forward_subtile_selection",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "autotile_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bitmask",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tilemap",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "tile_location",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_is_tile_bound",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "drawn_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "neighbor_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "autotile_get_bitmask_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "autotile_set_bitmask_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "TileSet.BitmaskMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear all tiles.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_tile",
          "description": "Create a new tile which will be referenced by the given ID.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_tile_by_name",
          "qualifiers": "const",
          "description": "Find the first tile matching the given name.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_last_unused_tile_id",
          "qualifiers": "const",
          "description": "Return the ID following the last currently used ID, useful when creating a new tile.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tiles_ids",
          "qualifiers": "const",
          "description": "Return an array of all currently used tile IDs.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "remove_tile",
          "description": "Remove the tile referenced by the given ID.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_add_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_transform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "one_way",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "autotile_coord",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "tile_get_light_occluder",
          "qualifiers": "const",
          "description": "Return the light occluder of the tile.",
          "return_type": "OccluderPolygon2D",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_material",
          "qualifiers": "const",
          "description": "Return the material of the tile.",
          "return_type": "ShaderMaterial",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_name",
          "qualifiers": "const",
          "description": "Return the name of the tile.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_navigation_polygon",
          "qualifiers": "const",
          "description": "Return the navigation polygon of the tile.",
          "return_type": "NavigationPolygon",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_navigation_polygon_offset",
          "qualifiers": "const",
          "description": "Return the offset of the tile's navigation polygon.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_normal_map",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_occluder_offset",
          "qualifiers": "const",
          "description": "Return the offset of the tile's light occluder.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_region",
          "qualifiers": "const",
          "description": "Return the tile sub-region in the texture.",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shape2D",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape_one_way",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shapes",
          "qualifiers": "const",
          "description": "Return the array of shapes of the tile.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_texture",
          "qualifiers": "const",
          "description": "Return the texture of the tile.",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_texture_offset",
          "qualifiers": "const",
          "description": "Return the texture offset of the tile.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_light_occluder",
          "description": "Set a light occluder for the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "light_occluder",
              "type": "OccluderPolygon2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_material",
          "description": "Set the material of the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "ShaderMaterial",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_name",
          "description": "Set the name of the tile, for descriptive purposes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_navigation_polygon",
          "description": "Set a navigation polygon for the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "navigation_polygon",
              "type": "NavigationPolygon",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_navigation_polygon_offset",
          "description": "Set an offset for the tile's navigation polygon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "navigation_polygon_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_normal_map",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "normal_map",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_occluder_offset",
          "description": "Set an offset for the tile's light occluder.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "occluder_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_region",
          "description": "Set the tile sub-region in the texture. This is common in texture atlases.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shape_one_way",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "one_way",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shape_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shapes",
          "description": "Set an array of shapes for the tile, enabling physics to collide with it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shapes",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_texture",
          "description": "Set the texture of the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_texture_offset",
          "description": "Set the texture offset of the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "BITMASK_2X2",
          "value": "0",
          "enum": "BitmaskMode",
          "description": ""
        },
        {
          "name": "BITMASK_3X3",
          "value": "1",
          "enum": "BitmaskMode",
          "description": ""
        },
        {
          "name": "BIND_TOPLEFT",
          "value": "1",
          "enum": "AutotileBindings",
          "description": ""
        },
        {
          "name": "BIND_TOP",
          "value": "2",
          "enum": "AutotileBindings",
          "description": ""
        },
        {
          "name": "BIND_TOPRIGHT",
          "value": "4",
          "enum": "AutotileBindings",
          "description": ""
        },
        {
          "name": "BIND_LEFT",
          "value": "8",
          "enum": "AutotileBindings",
          "description": ""
        },
        {
          "name": "BIND_RIGHT",
          "value": "32",
          "enum": "AutotileBindings",
          "description": ""
        },
        {
          "name": "BIND_BOTTOMLEFT",
          "value": "64",
          "enum": "AutotileBindings",
          "description": ""
        },
        {
          "name": "BIND_BOTTOM",
          "value": "128",
          "enum": "AutotileBindings",
          "description": ""
        },
        {
          "name": "BIND_BOTTOMRIGHT",
          "value": "256",
          "enum": "AutotileBindings",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Node": {
      "name": "Node",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base class for all [i]scene[/i] objects.",
      "description": "Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.\n\t\tA tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects. Nodes can also optionally be added to groups. This makes it possible to access a number of nodes from code (an \"enemies\" group, for example) to perform grouped actions.\n\t\t[b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Child nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's.\n\t\tOnce all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, starting with the children and moving up to the parent nodes.\n\t\tThis means that when adding a node to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (recursively for the entire scene tree).\n\t\t[b]Processing:[/b] Nodes can override the \"process\" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is passed as an argument. Physics processing (callback [method _physics_process], toggled with [method set_physics_process]) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.\n\t\tNodes can also process input events. When present, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it.\n\t\tTo keep track of the scene hierarchy (especially when instancing scenes into other scenes), an \"owner\" can be set for the node with [method set_owner]. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.\n\t\tFinally, when a node is freed with [method free] or [method queue_free], it will also free all its children.\n\t\t[b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]) it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling [method rpc] with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections), with behaviour varying depending on the network mode ([method set_network_mode]) of the receiving peer. To identify which node receives the RPC call Godot will use its [NodePath] (make sure node names are the same on all peers).",
      "methods": [
        {
          "name": "_enter_tree",
          "qualifiers": "virtual",
          "description": "Called when the node enters the [SceneTree] (e.g. upon instancing, scene changing, or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children.\n\t\t\t\tCorresponds to the NOTIFICATION_ENTER_TREE notification in [method Object._notification].",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_exit_tree",
          "qualifiers": "virtual",
          "description": "Called when the node is about to leave the [SceneTree] (e.g. upon freeing, scene changing, or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree.\n\t\t\t\tCorresponds to the NOTIFICATION_EXIT_TREE notification in [method Object._notification] and signal [signal tree_exiting]. To get notified when the node has already left the active tree, connect to the [signal tree_exited]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_input",
          "qualifiers": "virtual",
          "description": "Called when there is an input event. The input event propagates through the node tree until a node consumes it.\n\t\t\t\tIt is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_input].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_physics_process",
          "qualifiers": "virtual",
          "description": "Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the [code]delta[/code] variable should be constant.\n\t\t\t\tIt is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_physics_process].\n\t\t\t\tCorresponds to the NOTIFICATION_PHYSICS_PROCESS notification in [method Object._notification].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_process",
          "qualifiers": "virtual",
          "description": "Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [code]delta[/code] time since the previous frame is not constant.\n\t\t\t\tIt is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process].\n\t\t\t\tCorresponds to the NOTIFICATION_PROCESS notification in [method Object._notification].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_ready",
          "qualifiers": "virtual",
          "description": "Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callbacks get triggered first, and the parent node will receive the ready notification afterwards.\n\t\t\t\tCorresponds to the NOTIFICATION_READY notification in [method Object._notification].",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_unhandled_input",
          "qualifiers": "virtual",
          "description": "Propagated to all nodes when the previous InputEvent is not consumed by any nodes.\n\t\t\t\tIt is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_input].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_unhandled_key_input",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEventKey",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_child",
          "description": "Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.\n\t\t\t\tSetting \"legible_unique_name\" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "legible_unique_name",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_child_below_node",
          "description": "Adds a child node. The child is placed below the given node in the list of children.\n\t\t\t\tSetting \"legible_unique_name\" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "child_node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "legible_unique_name",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_to_group",
          "description": "Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example \"enemies\" or \"collectables\". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see [method is_inside_tree]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "persistent",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "can_process",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the node can process while the scene tree is paused (see [method set_pause_mode]). Always returns [code]true[/code] if the scene tree is not paused, and [code]false[/code] if the node is not in the tree. FIXME: Why FAIL_COND?",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "duplicate",
          "qualifiers": "const",
          "description": "Duplicates the node, returning a new node.\n\t\t\t\tYou can fine-tune the behavior using the [code]flags[/code]. See DUPLICATE_* constants.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": "15"
            }
          ]
        },
        {
          "name": "find_node",
          "qualifiers": "const",
          "description": "Finds a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "recursive",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "2",
              "name": "owned",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_child",
          "qualifiers": "const",
          "description": "Returns a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_child_count",
          "qualifiers": "const",
          "description": "Returns the number of child nodes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_children",
          "qualifiers": "const",
          "description": "Returns an array of references to node's children.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_groups",
          "qualifiers": "const",
          "description": "Returns an array listing the groups that the node is a member of.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_index",
          "qualifiers": "const",
          "description": "Returns the node's index, i.e. its position among the siblings of its parent.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_network_master",
          "qualifiers": "const",
          "description": "Returns the peer ID of the network master for this node.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node",
          "qualifiers": "const",
          "description": "Fetches a node. The [NodePath] can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a [code]null instance[/code] is returned and attempts to access it will result in an \"Attempt to call <method> on a null instance.\" error.\n\t\t\t\tNote: fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]).\n\t\t\t\t[i]Example:[/i] Assume your current node is Character and the following tree:\n\t\t\t\t[codeblock]\n\t\t\t\t/root\n\t\t\t\t/root/Character\n\t\t\t\t/root/Character/Sword\n\t\t\t\t/root/Character/Backpack/Dagger\n\t\t\t\t/root/MyGame\n\t\t\t\t/root/Swamp/Alligator\n\t\t\t\t/root/Swamp/Mosquito\n\t\t\t\t/root/Swamp/Goblin\n\t\t\t\t[/codeblock]\n\t\t\t\tPossible paths are:\n\t\t\t\t[codeblock]\n\t\t\t\tget_node(\"Sword\")\n\t\t\t\tget_node(\"Backpack/Dagger\")\n\t\t\t\tget_node(\"../Swamp/Alligator\")\n\t\t\t\tget_node(\"/root/MyGame\")\n\t\t\t\t[/codeblock]",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_and_resource",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_parent",
          "qualifiers": "const",
          "description": "Returns the parent node of the current node, or an empty [code]Node[/code] if the node lacks a parent.",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_path",
          "qualifiers": "const",
          "description": "Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree]).",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_path_to",
          "qualifiers": "const",
          "description": "Returns the relative path from the current node to the specified node in \"node\" argument. Both nodes must be in the same scene, or the function will fail.",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_physics_process_delta_time",
          "qualifiers": "const",
          "description": "Returns the time elapsed since the last physics-bound frame (see [method _physics_process]). This is always a constant value in physics processing unless the frames per second is changed in [OS].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_position_in_parent",
          "qualifiers": "const",
          "description": "Returns the node's order in the scene tree branch. For example, if called on the first child node the position is [code]0[/code].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_process_delta_time",
          "qualifiers": "const",
          "description": "Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_scene_instance_load_placeholder",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_tree",
          "qualifiers": "const",
          "description": "Returns the [SceneTree] that contains this node.",
          "return_type": "SceneTree",
          "arguments": []
        },
        {
          "name": "get_viewport",
          "qualifiers": "const",
          "description": "Returns the node's [Viewport].",
          "return_type": "Viewport",
          "arguments": []
        },
        {
          "name": "has_node",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the node that the [NodePath] points to exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_node_and_resource",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_a_parent_of",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the given node is a direct or indirect child of the current node.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_displayed_folded",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the node is folded (collapsed) in the Scene dock.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_greater_than",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the given node occurs later in the scene hierarchy than the current node.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_in_group",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this node is in the specified group.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_inside_tree",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this node is currently inside a [SceneTree].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_network_master",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_physics_processing",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if physics processing is enabled (see [method set_physics_process]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_physics_processing_internal",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if processing is enabled (see [method set_process]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_input",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the node is processing input (see [method set_process_input]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_internal",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_unhandled_input",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the node is processing unhandled input (see [method set_process_unhandled_input]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_unhandled_key_input",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the node is processing unhandled key input (see [method set_process_unhandled_key_input]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "move_child",
          "description": "Moves a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child_node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print_stray_nodes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "print_tree",
          "description": "Prints the scene to stdout. Used mainly for debugging purposes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "propagate_call",
          "description": "Calls the given method (if present) with the arguments given in [code]args[/code] on this node and recursively on all its children. If the parent_first argument is [code]true[/code] then the method will be called on the current node first, then on all children. If it is [code]false[/code] then the children will be called first.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "args",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "2",
              "name": "parent_first",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "propagate_notification",
          "description": "Notifies the current node and all its children recursively by calling notification() on all of them.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_free",
          "description": "Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to [method Object.free]. Use [method Object.is_queued_for_deletion] to check whether a node will be deleted at the end of the frame.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "raise",
          "description": "Moves this node to the top of the array of nodes of the parent node. This is often useful in GUIs ([Control] nodes), because their order of drawing depends on their order in the tree.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_and_skip",
          "description": "Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_child",
          "description": "Removes a child node. The node is NOT deleted and must be deleted manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_from_group",
          "description": "Removes a node from a group.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "replace_by",
          "description": "Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "keep_data",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "request_ready",
          "description": "Requests that [code]_ready[/code] be called again.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rpc",
          "qualifiers": "vararg",
          "description": "Sends a remote procedure call request to all peers on the network (and locally), optionally sending additional data as arguments. Call request will be received by nodes with the same [NodePath].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rpc_config",
          "description": "Changes the method's RPC mode (one of RPC_MODE_* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Node.RPCMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rpc_id",
          "qualifiers": "vararg",
          "description": "Sends a [method rpc] to a specific peer identified by [i]peer_id[/i].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "peer_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rpc_unreliable",
          "qualifiers": "vararg",
          "description": "Sends a [method rpc] using an unreliable protocol.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rpc_unreliable_id",
          "qualifiers": "vararg",
          "description": "Sends a [method rpc] to a specific peer identified by [i]peer_id[/i] using an unreliable protocol.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "peer_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset",
          "description": "Remotely changes property's value on other peers (and locally).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset_config",
          "description": "Changes the property's RPC mode (one of RPC_MODE_* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Node.RPCMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset_id",
          "description": "Remotely changes property's value on a specific peer identified by [i]peer_id[/i].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "peer_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset_unreliable",
          "description": "Remotely changes property's value on other peers (and locally) using an unreliable protocol.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset_unreliable_id",
          "description": "Remotely changes property's value on a specific peer identified by [i]peer_id[/i] using an unreliable protocol.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "peer_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_display_folded",
          "description": "Sets the folded state of the node in the Scene dock.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fold",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_network_master",
          "description": "Sets the node network master to the peer with the given peer ID. The network master is the peer that has authority over it on the network. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "recursive",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "set_physics_process",
          "description": "Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a NOTIFICATION_PHYSICS_PROCESS at a fixed (usually 60 fps, see [OS] to change) interval (and the [method _physics_process] callback will be called if exists). Enabled automatically if [method _physics_process] is overridden. Any calls to this before [method _ready] will be ignored.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_physics_process_internal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process",
          "description": "Enables or disables processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). Enabled automatically if [method _process] is overridden. Any calls to this before [method _ready] will be ignored.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_input",
          "description": "Enables or disables input processing. This is not required for GUI controls! Enabled automatically if [method _input] is overridden. Any calls to this before [method _ready] will be ignored.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_internal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_unhandled_input",
          "description": "Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a [Control]). Enabled automatically if [method _unhandled_input] is overridden. Any calls to this before [method _ready] will be ignored.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_unhandled_key_input",
          "description": "Enables unhandled key input processing. Enabled automatically if [method _unhandled_key_input] is overridden. Any calls to this before [method _ready] will be ignored.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scene_instance_load_placeholder",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "load_placeholder",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "renamed",
          "description": "Emitted when the node is renamed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tree_entered",
          "description": "Emitted when the node enters the tree.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tree_exited",
          "description": "Emitted after the node exits the tree and is no longer active.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tree_exiting",
          "description": "Emitted when the node is still active but about to exit the tree. This is the right place for de-initialization.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_ENTER_TREE",
          "value": "10",
          "description": "Notification received when the node enters a [SceneTree]."
        },
        {
          "name": "NOTIFICATION_EXIT_TREE",
          "value": "11",
          "description": "Notification received when the node is about to exit a [SceneTree]."
        },
        {
          "name": "NOTIFICATION_MOVED_IN_PARENT",
          "value": "12",
          "description": "Notification received when the node is moved in the parent."
        },
        {
          "name": "NOTIFICATION_READY",
          "value": "13",
          "description": "Notification received when the node is ready. See [method _ready]."
        },
        {
          "name": "NOTIFICATION_PAUSED",
          "value": "14",
          "description": "Notification received when the node is paused."
        },
        {
          "name": "NOTIFICATION_UNPAUSED",
          "value": "15",
          "description": "Notification received when the node is unpaused."
        },
        {
          "name": "NOTIFICATION_PHYSICS_PROCESS",
          "value": "16",
          "description": "Notification received every frame when the physics process flag is set (see [method set_physics_process])."
        },
        {
          "name": "NOTIFICATION_PROCESS",
          "value": "17",
          "description": "Notification received every frame when the process flag is set (see [method set_process])."
        },
        {
          "name": "NOTIFICATION_PARENTED",
          "value": "18",
          "description": "Notification received when a node is set as a child of another node. Note that this doesn't mean that a node entered the Scene Tree."
        },
        {
          "name": "NOTIFICATION_UNPARENTED",
          "value": "19",
          "description": "Notification received when a node is unparented (parent removed it from the list of children)."
        },
        {
          "name": "NOTIFICATION_INSTANCED",
          "value": "20",
          "description": "Notification received when the node is instanced."
        },
        {
          "name": "NOTIFICATION_DRAG_BEGIN",
          "value": "21",
          "description": "Notification received when a drag begins."
        },
        {
          "name": "NOTIFICATION_DRAG_END",
          "value": "22",
          "description": "Notification received when a drag ends."
        },
        {
          "name": "NOTIFICATION_PATH_CHANGED",
          "value": "23",
          "description": "Notification received when the node's [NodePath] changed."
        },
        {
          "name": "NOTIFICATION_TRANSLATION_CHANGED",
          "value": "24",
          "description": ""
        },
        {
          "name": "NOTIFICATION_INTERNAL_PROCESS",
          "value": "25",
          "description": ""
        },
        {
          "name": "NOTIFICATION_INTERNAL_PHYSICS_PROCESS",
          "value": "26",
          "description": ""
        },
        {
          "name": "RPC_MODE_DISABLED",
          "value": "0",
          "enum": "RPCMode",
          "description": ""
        },
        {
          "name": "RPC_MODE_REMOTE",
          "value": "1",
          "enum": "RPCMode",
          "description": "Call a method remotely."
        },
        {
          "name": "RPC_MODE_SYNC",
          "value": "2",
          "enum": "RPCMode",
          "description": "Call a method both remotely and locally."
        },
        {
          "name": "RPC_MODE_MASTER",
          "value": "3",
          "enum": "RPCMode",
          "description": "Call a method if the Node is Master."
        },
        {
          "name": "RPC_MODE_SLAVE",
          "value": "4",
          "enum": "RPCMode",
          "description": "Call a method if the Node is Slave."
        },
        {
          "name": "PAUSE_MODE_INHERIT",
          "value": "0",
          "enum": "PauseMode",
          "description": "Inherits pause mode from parent. For root node, it is equivalent to PAUSE_MODE_STOP."
        },
        {
          "name": "PAUSE_MODE_STOP",
          "value": "1",
          "enum": "PauseMode",
          "description": "Stop processing when SceneTree is paused."
        },
        {
          "name": "PAUSE_MODE_PROCESS",
          "value": "2",
          "enum": "PauseMode",
          "description": "Continue to process regardless of SceneTree pause state."
        },
        {
          "name": "DUPLICATE_SIGNALS",
          "value": "1",
          "enum": "DuplicateFlags",
          "description": "Duplicate the node's signals."
        },
        {
          "name": "DUPLICATE_GROUPS",
          "value": "2",
          "enum": "DuplicateFlags",
          "description": "Duplicate the node's groups."
        },
        {
          "name": "DUPLICATE_SCRIPTS",
          "value": "4",
          "enum": "DuplicateFlags",
          "description": "Duplicate the node's scripts."
        },
        {
          "name": "DUPLICATE_USE_INSTANCING",
          "value": "8",
          "enum": "DuplicateFlags",
          "description": "Duplicate using instancing."
        }
      ],
      "properties": [
        {
          "name": "filename",
          "type": "String",
          "setter": "set_filename",
          "getter": "get_filename",
          "description": "When a scene is instanced from a file, its topmost node contains the filename from which it was loaded."
        },
        {
          "name": "name",
          "type": "String",
          "setter": "set_name",
          "getter": "get_name",
          "description": "The name of the node. This name is unique among the siblings (other child nodes from the same parent).\n\t\t\tWhen set to an existing name, the node will be automatically renamed"
        },
        {
          "name": "owner",
          "type": "Node",
          "setter": "set_owner",
          "getter": "get_owner",
          "description": "The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using SceneSaver) all the nodes it owns will be saved with it. This allows for the creation of complex [SceneTree]s, with instancing and subinstancing."
        },
        {
          "name": "pause_mode",
          "type": "int",
          "setter": "set_pause_mode",
          "getter": "get_pause_mode",
          "enum": "Node.PauseMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScript": {
      "name": "VisualScript",
      "inherits": "Script",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A script implemented in the Visual Script programming environment.",
      "description": "A script implemented in the  Visual Script programming environment. The script extends the functionality of all objects that instance it.\n\t\t[method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.\n\t\tYou are most likely to use this class via the Visual Script editor or when writing plugins for it.",
      "methods": [
        {
          "name": "add_custom_signal",
          "description": "Add a custom signal with the specified name to the VisualScript.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_function",
          "description": "Add a function with the specified name to the VisualScript.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_node",
          "description": "Add a node to a function of the VisualScript.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "node",
              "type": "VisualScriptNode",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "position",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "add_variable",
          "description": "Add a variable to the VisualScript, optionally giving it a default value or marking it as exported.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "default_value",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "2",
              "name": "export",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "custom_signal_add_argument",
          "description": "Add an argument to a custom signal added with [method add_custom_signal].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "argname",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "index",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "custom_signal_get_argument_count",
          "qualifiers": "const",
          "description": "Get the count of a custom signal's arguments.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_get_argument_name",
          "qualifiers": "const",
          "description": "Get the name of a custom signal's argument.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_get_argument_type",
          "qualifiers": "const",
          "description": "Get the type of a custom signal's argument.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_remove_argument",
          "description": "Remove a specific custom signal's argument.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_set_argument_name",
          "description": "Rename a custom signal's argument.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "argname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_set_argument_type",
          "description": "Change the type of a custom signal's argument.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_swap_argument",
          "description": "Swap two of the arguments of a custom signal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "withidx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "data_connect",
          "description": "Connect two data ports. The value of [code]from_node[/code]'s [code]from_port[/code] would be fed into [code]to_node[/code]'s [code]to_port[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "data_disconnect",
          "description": "Disconnect two data ports previously connected with [method data_connect].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_function_node_id",
          "qualifiers": "const",
          "description": "Returns the id of a function's entry point node.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_function_scroll",
          "qualifiers": "const",
          "description": "Returns the position of the center of the screen for a given function.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node",
          "qualifiers": "const",
          "description": "Returns a node given its id and its function.",
          "return_type": "VisualScriptNode",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_position",
          "qualifiers": "const",
          "description": "Returns a node's position in pixels.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_variable_default_value",
          "qualifiers": "const",
          "description": "Returns the default (initial) value of a variable.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_variable_export",
          "qualifiers": "const",
          "description": "Returns whether a variable is exported.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_variable_info",
          "qualifiers": "const",
          "description": "Returns the info for a given variable as a dictionary. The information includes its name, type, hint and usage.",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_custom_signal",
          "qualifiers": "const",
          "description": "Returns whether a signal exists with the specified name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_data_connection",
          "qualifiers": "const",
          "description": "Returns whether the specified data ports are connected.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_function",
          "qualifiers": "const",
          "description": "Returns whether a function exists with the specified name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_node",
          "qualifiers": "const",
          "description": "Returns whether a node exists with the given id.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_sequence_connection",
          "qualifiers": "const",
          "description": "Returns whether the specified sequence ports are connected.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_output",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_variable",
          "qualifiers": "const",
          "description": "Returns whether a variable exists with the specified name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_custom_signal",
          "description": "Remove a custom signal with the given name.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_function",
          "description": "Remove a specific function and its nodes from the script.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_node",
          "description": "Remove a specific node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_variable",
          "description": "Remove a variable with the given name.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_custom_signal",
          "description": "Change the name of a custom signal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_function",
          "description": "Change the name of a function.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_variable",
          "description": "Change the name of a variable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sequence_connect",
          "description": "Connect two sequence ports. The execution will flow from of [code]from_node[/code]'s [code]from_output[/code] into [code]to_node[/code].\n\t\t\t\tUnlike [method data_connect], there isn't a [code]to_port[/code], since the target node can have only one sequence port.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_output",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sequence_disconnect",
          "description": "Disconnect two sequence ports previously connected with [method sequence_connect].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_output",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_function_scroll",
          "description": "Position the center of the screen for a function.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_base_type",
          "description": "Set the base type of the script.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_position",
          "description": "Position a node on the screen.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_variable_default_value",
          "description": "Change the default (initial) value of a variable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_variable_export",
          "description": "Change whether a variable is exported.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_variable_info",
          "description": "Set a variable's info, using the same format as [method get_variable_info].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "node_ports_changed",
          "description": "Emitted when the ports of a node are changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "function",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HTTPClient": {
      "name": "HTTPClient",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Hyper-text transfer protocol client.",
      "description": "Hyper-text transfer protocol client (sometimes called \"User Agent\"). Used to make HTTP requests to download web content, upload files and other data or to communicate with various services, among other use cases.\n\t\tNote that this client only needs to connect to a host once (see [method connect_to_host]) to send multiple requests. Because of this, methods that take URLs usually take just the part after the host instead of the full URL, as the client is already connected to a host. See [method request] for a full example and to get started.\n\t\tA [code]HTTPClient[/code] should be reused between multiple requests or to connect to different hosts instead of creating one client per request. Supports SSL and SSL server certificate verification. HTTP status codes in the 2xx range indicate success, 3xx redirection (i.e. \"try again, but over here\"), 4xx something was wrong with the request, and 5xx something went wrong on the server's side.\n\t\tFor more information on HTTP, see https://developer.mozilla.org/en-US/docs/Web/HTTP (or read RFC 2616 to get it straight from the source: https://tools.ietf.org/html/rfc2616).",
      "methods": [
        {
          "name": "close",
          "description": "Closes the current connection, allowing reuse of this [code]HTTPClient[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connect_to_host",
          "description": "Connect to a host. This needs to be done before any requests are sent.\n\t\t\t\tThe host should not have http:// prepended but will strip the protocol identifier if provided.\n\t\t\t\tIf no [code]port[/code] is specified (or [code]-1[/code] is used), it is automatically set to 80 for HTTP and 443 for HTTPS (if [code]use_ssl[/code] is enabled).\n\t\t\t\t[code]verify_host[/code] will check the SSL identity of the host if set to [code]true[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "use_ssl",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "verify_host",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_response_body_length",
          "qualifiers": "const",
          "description": "Returns the response's body length.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_response_code",
          "qualifiers": "const",
          "description": "Returns the response's HTTP status code.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_response_headers",
          "description": "Returns the response headers.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_response_headers_as_dictionary",
          "description": "Returns all response headers as dictionary where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where \"; \" is used as separator.\n\t\t\t\tStructure: (\"key\":\"value1; value2\")\n\t\t\t\tExample: (content-length:12), (Content-Type:application/json; charset=UTF-8)",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_status",
          "qualifiers": "const",
          "description": "Returns a STATUS_* enum constant. Need to call [method poll] in order to get status updates.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_response",
          "qualifiers": "const",
          "description": "If [code]true[/code] this [code]HTTPClient[/code] has a response available.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_response_chunked",
          "qualifiers": "const",
          "description": "If [code]true[/code] this [code]HTTPClient[/code] has a response that is chunked.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "poll",
          "description": "This needs to be called in order to have any request processed. Check results with [method get_status]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "query_string_from_dict",
          "description": "Generates a GET/POST application/x-www-form-urlencoded style query string from a provided dictionary, e.g.:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\": \"user\", \"password\": \"pass\"}\n\t\t\t\tString queryString = httpClient.query_string_from_dict(fields)\n\t\t\t\treturns:= \"username=user&password=pass\"\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fields",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "read_response_body_chunk",
          "description": "Reads one chunk from the response.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "request",
          "description": "Sends a request to the connected host. The URL parameter is just the part after the host, so for [code]http://somehost.com/index.php[/code], it is [code]index.php[/code].\n\t\t\t\tHeaders are HTTP request headers. For available HTTP methods, see [code]METHOD_*[/code].\n\t\t\t\tTo create a POST request with query strings to push to the server, do:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\" : \"user\", \"password\" : \"pass\"}\n\t\t\t\tvar queryString = httpClient.query_string_from_dict(fields)\n\t\t\t\tvar headers = [\"Content-Type: application/x-www-form-urlencoded\", \"Content-Length: \" + str(queryString.length())]\n\t\t\t\tvar result = httpClient.request(httpClient.METHOD_POST, \"index.php\", headers, queryString)\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "int",
              "enum": "HTTPClient.Method",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "url",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "headers",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "request_raw",
          "description": "Sends a raw request to the connected host. The URL parameter is just the part after the host, so for [code]http://somehost.com/index.php[/code], it is [code]index.php[/code].\n\t\t\t\tHeaders are HTTP request headers. For available HTTP methods, see [code]METHOD_*[/code].\n\t\t\t\tSends the body data raw, as a byte array and does not encode it in any way.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "int",
              "enum": "HTTPClient.Method",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "url",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "headers",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_read_chunk_size",
          "description": "Sets the size of the buffer used and maximum bytes to read per iteration. see [method read_response_body_chunk]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "METHOD_GET",
          "value": "0",
          "enum": "Method",
          "description": "HTTP GET method. The GET method requests a representation of the specified resource. Requests using GET should only retrieve data."
        },
        {
          "name": "METHOD_HEAD",
          "value": "1",
          "enum": "Method",
          "description": "HTTP HEAD method. The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful to request metadata like HTTP headers or to check if a resource exists."
        },
        {
          "name": "METHOD_POST",
          "value": "2",
          "enum": "Method",
          "description": "HTTP POST method. The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server. This is often used for forms and submitting data or uploading files."
        },
        {
          "name": "METHOD_PUT",
          "value": "3",
          "enum": "Method",
          "description": "HTTP PUT method. The PUT method asks to replace all current representations of the target resource with the request payload. (You can think of [code]POST[/code] as \"create or update\" and [code]PUT[/code] as \"update\", although many services tend to not make a clear distinction or change their meaning)."
        },
        {
          "name": "METHOD_DELETE",
          "value": "4",
          "enum": "Method",
          "description": "HTTP DELETE method. The DELETE method requests to delete the specified resource."
        },
        {
          "name": "METHOD_OPTIONS",
          "value": "5",
          "enum": "Method",
          "description": "HTTP OPTIONS method. The OPTIONS method asks for a description of the communication options for the target resource. Rarely used."
        },
        {
          "name": "METHOD_TRACE",
          "value": "6",
          "enum": "Method",
          "description": "HTTP TRACE method. The TRACE method performs a message loop-back test along the path to the target resource. Returns the entire HTTP request received in the response body. Rarely used."
        },
        {
          "name": "METHOD_CONNECT",
          "value": "7",
          "enum": "Method",
          "description": "HTTP CONNECT method. The CONNECT method establishes a tunnel to the server identified by the target resource. Rarely used."
        },
        {
          "name": "METHOD_PATCH",
          "value": "8",
          "enum": "Method",
          "description": "HTTP PATCH method. The PATCH method is used to apply partial modifications to a resource."
        },
        {
          "name": "METHOD_MAX",
          "value": "9",
          "enum": "Method",
          "description": "Marker for end of [code]METHOD_*[/code] enum. Not used."
        },
        {
          "name": "STATUS_DISCONNECTED",
          "value": "0",
          "enum": "Status",
          "description": "Status: Disconnected from the server."
        },
        {
          "name": "STATUS_RESOLVING",
          "value": "1",
          "enum": "Status",
          "description": "Status: Currently resolving the hostname for the given URL into an IP."
        },
        {
          "name": "STATUS_CANT_RESOLVE",
          "value": "2",
          "enum": "Status",
          "description": "Status: DNS failure: Can't resolve the hostname for the given URL."
        },
        {
          "name": "STATUS_CONNECTING",
          "value": "3",
          "enum": "Status",
          "description": "Status: Currently connecting to server."
        },
        {
          "name": "STATUS_CANT_CONNECT",
          "value": "4",
          "enum": "Status",
          "description": "Status: Can't connect to the server."
        },
        {
          "name": "STATUS_CONNECTED",
          "value": "5",
          "enum": "Status",
          "description": "Status: Connection established."
        },
        {
          "name": "STATUS_REQUESTING",
          "value": "6",
          "enum": "Status",
          "description": "Status: Currently sending request."
        },
        {
          "name": "STATUS_BODY",
          "value": "7",
          "enum": "Status",
          "description": "Status: HTTP body received."
        },
        {
          "name": "STATUS_CONNECTION_ERROR",
          "value": "8",
          "enum": "Status",
          "description": "Status: Error in HTTP connection."
        },
        {
          "name": "STATUS_SSL_HANDSHAKE_ERROR",
          "value": "9",
          "enum": "Status",
          "description": "Status: Error in SSL handshake."
        },
        {
          "name": "RESPONSE_CONTINUE",
          "value": "100",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]100 Continue[/code]. Interim response that indicates everything so far is OK and that the client should continue with the request (or ignore this status if already finished)."
        },
        {
          "name": "RESPONSE_SWITCHING_PROTOCOLS",
          "value": "101",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]101 Switching Protocol[/code]. Sent in response to an [code]Upgrade[/code] request header by the client. Indicates the protocol the server is switching to."
        },
        {
          "name": "RESPONSE_PROCESSING",
          "value": "102",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]102 Processing[/code] (WebDAV). Indicates that the server has received and is processing the request, but no response is available yet."
        },
        {
          "name": "RESPONSE_OK",
          "value": "200",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]200 OK[/code]. The request has succeeded. Default response for successful requests. Meaning varies depending on the request. GET: The resource has been fetched and is transmitted in the message body. HEAD: The entity headers are in the message body. POST: The resource describing the result of the action is transmitted in the message body. TRACE: The message body contains the request message as received by the server."
        },
        {
          "name": "RESPONSE_CREATED",
          "value": "201",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]201 Created[/code]. The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a PUT request."
        },
        {
          "name": "RESPONSE_ACCEPTED",
          "value": "202",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]202 Accepted[/code]. The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing."
        },
        {
          "name": "RESPONSE_NON_AUTHORITATIVE_INFORMATION",
          "value": "203",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]203 Non-Authoritative Information[/code]. This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response."
        },
        {
          "name": "RESPONSE_NO_CONTENT",
          "value": "204",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]204 No Content[/code]. There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
        },
        {
          "name": "RESPONSE_RESET_CONTENT",
          "value": "205",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]205 Reset Content[/code]. The server has fulfilled the request and desires that the client resets the \"document view\" that caused the request to be sent to its original state as received from the origin server."
        },
        {
          "name": "RESPONSE_PARTIAL_CONTENT",
          "value": "206",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]206 Partial Content[/code]. This response code is used because of a range header sent by the client to separate download into multiple streams."
        },
        {
          "name": "RESPONSE_MULTI_STATUS",
          "value": "207",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]207 Multi-Status[/code] (WebDAV). A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate."
        },
        {
          "name": "RESPONSE_ALREADY_REPORTED",
          "value": "208",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]208 Already Reported[/code] (WebDAV). Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly."
        },
        {
          "name": "RESPONSE_IM_USED",
          "value": "226",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]226 IM Used[/code] (WebDAV). The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance."
        },
        {
          "name": "RESPONSE_MULTIPLE_CHOICES",
          "value": "300",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]300 Multiple Choice[/code]. The request has more than one possible responses and there is no standardized way to choose one of the responses. User-agent or user should choose one of them."
        },
        {
          "name": "RESPONSE_MOVED_PERMANENTLY",
          "value": "301",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]301 Moved Permanently[/code]. Redirection. This response code means the URI of requested resource has been changed. The new URI is usually included in the response."
        },
        {
          "name": "RESPONSE_FOUND",
          "value": "302",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]302 Found[/code]. Temporary redirection. This response code means the URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests."
        },
        {
          "name": "RESPONSE_SEE_OTHER",
          "value": "303",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]303 See Other[/code]. The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request."
        },
        {
          "name": "RESPONSE_NOT_MODIFIED",
          "value": "304",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]304 Not Modified[/code]. A conditional GET or HEAD request has been received and would have resulted in a 200 OK response if it were not for the fact that the condition evaluated to false."
        },
        {
          "name": "RESPONSE_USE_PROXY",
          "value": "305",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]305 Use Proxy[/code]. Deprecated. Do not use."
        },
        {
          "name": "RESPONSE_SWITCH_PROXY",
          "value": "306",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]306 Switch Proxy[/code]. Deprecated. Do not use."
        },
        {
          "name": "RESPONSE_TEMPORARY_REDIRECT",
          "value": "307",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]307 Temporary Redirect[/code]. The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI."
        },
        {
          "name": "RESPONSE_PERMANENT_REDIRECT",
          "value": "308",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]308 Permanent Redirect[/code]. The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs."
        },
        {
          "name": "RESPONSE_BAD_REQUEST",
          "value": "400",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]400 Bad Request[/code]. The request was invalid. The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, invalid request contents, or deceptive request routing)."
        },
        {
          "name": "RESPONSE_UNAUTHORIZED",
          "value": "401",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]401 Unauthorized[/code]. Credentials required. The request has not been applied because it lacks valid authentication credentials for the target resource."
        },
        {
          "name": "RESPONSE_PAYMENT_REQUIRED",
          "value": "402",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]402 Payment Required[/code]. This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems, however this is not currently used."
        },
        {
          "name": "RESPONSE_FORBIDDEN",
          "value": "403",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]403 Forbidden[/code]. The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike [code]401[/code], the client's identity is known to the server."
        },
        {
          "name": "RESPONSE_NOT_FOUND",
          "value": "404",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]404 Not Found[/code]. The server can not find requested resource. Either the URL is not recognized or the endpoint is valid but the resource itself does not exist. May also be sent instead of 403 to hide existence of a resource if the client is not authorized."
        },
        {
          "name": "RESPONSE_METHOD_NOT_ALLOWED",
          "value": "405",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]405 Method Not Allowed[/code]. The request's HTTP method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code."
        },
        {
          "name": "RESPONSE_NOT_ACCEPTABLE",
          "value": "406",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]406 Not Acceptable[/code]. The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request. Used when negotiation content."
        },
        {
          "name": "RESPONSE_PROXY_AUTHENTICATION_REQUIRED",
          "value": "407",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]407 Proxy Authentication Required[/code]. Similar to 401 Unauthorized, but it indicates that the client needs to authenticate itself in order to use a proxy."
        },
        {
          "name": "RESPONSE_REQUEST_TIMEOUT",
          "value": "408",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]408 Request Timeout[/code]. The server did not receive a complete request message within the time that it was prepared to wait."
        },
        {
          "name": "RESPONSE_CONFLICT",
          "value": "409",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]409 Conflict[/code]. The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request."
        },
        {
          "name": "RESPONSE_GONE",
          "value": "410",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]410 Gone[/code]. The target resource is no longer available at the origin server and this condition is likely permanent."
        },
        {
          "name": "RESPONSE_LENGTH_REQUIRED",
          "value": "411",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]411 Length Required[/code]. The server refuses to accept the request without a defined Content-Length header."
        },
        {
          "name": "RESPONSE_PRECONDITION_FAILED",
          "value": "412",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]412 Precondition Failed[/code]. One or more conditions given in the request header fields evaluated to false when tested on the server."
        },
        {
          "name": "RESPONSE_REQUEST_ENTITY_TOO_LARGE",
          "value": "413",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]413 Entity Too Large[/code]. The server is refusing to process a request because the request payload is larger than the server is willing or able to process."
        },
        {
          "name": "RESPONSE_REQUEST_URI_TOO_LONG",
          "value": "414",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]414 Request-URI Too Long[/code]. The server is refusing to service the request because the request-target is longer than the server is willing to interpret."
        },
        {
          "name": "RESPONSE_UNSUPPORTED_MEDIA_TYPE",
          "value": "415",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]415 Unsupported Media Type[/code]. The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource."
        },
        {
          "name": "RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE",
          "value": "416",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]416 Requested Range Not Satisfiable[/code]. None of the ranges in the request's Range header field overlap the current extent of the selected resource or the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges."
        },
        {
          "name": "RESPONSE_EXPECTATION_FAILED",
          "value": "417",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]417 Expectation Failed[/code]. The expectation given in the request's Expect header field could not be met by at least one of the inbound servers."
        },
        {
          "name": "RESPONSE_IM_A_TEAPOT",
          "value": "418",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]418 I'm A Teapot[/code]. Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\". The resulting entity body MAY be short and stout."
        },
        {
          "name": "RESPONSE_MISDIRECTED_REQUEST",
          "value": "421",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]421 Misdirected Request[/code]. The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI."
        },
        {
          "name": "RESPONSE_UNPROCESSABLE_ENTITY",
          "value": "422",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]422 Unprocessable Entity[/code] (WebDAV). The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions."
        },
        {
          "name": "RESPONSE_LOCKED",
          "value": "423",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]423 Locked[/code] (WebDAV). The source or destination resource of a method is locked."
        },
        {
          "name": "RESPONSE_FAILED_DEPENDENCY",
          "value": "424",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]424 Failed Dependency[/code] (WebDAV). The method could not be performed on the resource because the requested action depended on another action and that action failed."
        },
        {
          "name": "RESPONSE_UPGRADE_REQUIRED",
          "value": "426",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]426 Upgrade Required[/code]. The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol."
        },
        {
          "name": "RESPONSE_PRECONDITION_REQUIRED",
          "value": "428",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]428 Precondition Required[/code]. The origin server requires the request to be conditional."
        },
        {
          "name": "RESPONSE_TOO_MANY_REQUESTS",
          "value": "429",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]429 Too Many Requests[/code]. The user has sent too many requests in a given amount of time (see \"rate limiting\"). Back off and increase time between requests or try again later."
        },
        {
          "name": "RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE",
          "value": "431",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]431 Rquest Header Fields Too Large[/code]. The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields."
        },
        {
          "name": "RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS",
          "value": "451",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]451 Response Unavailable For Legal Reasons[/code]. The server is denying access to the resource as a consequence of a legal demand."
        },
        {
          "name": "RESPONSE_INTERNAL_SERVER_ERROR",
          "value": "500",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]500 Internal Server Error[/code]. The server encountered an unexpected condition that prevented it from fulfilling the request."
        },
        {
          "name": "RESPONSE_NOT_IMPLEMENTED",
          "value": "501",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]501 Not Implemented[/code]. The server does not support the functionality required to fulfill the request."
        },
        {
          "name": "RESPONSE_BAD_GATEWAY",
          "value": "502",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]502 Bad Gateway[/code]. The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request. Usually returned by load balancers or proxies."
        },
        {
          "name": "RESPONSE_SERVICE_UNAVAILABLE",
          "value": "503",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]503 Service Unavailable[/code]. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay. Try again later."
        },
        {
          "name": "RESPONSE_GATEWAY_TIMEOUT",
          "value": "504",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]504 Gateway Timeout[/code]. The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request. Usually returned by load balancers or proxies."
        },
        {
          "name": "RESPONSE_HTTP_VERSION_NOT_SUPPORTED",
          "value": "505",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]505 HTTP Version Not Supported[/code]. The server does not support, or refuses to support, the major version of HTTP that was used in the request message."
        },
        {
          "name": "RESPONSE_VARIANT_ALSO_NEGOTIATES",
          "value": "506",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]506 Variant Also Negotiates[/code]. The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process."
        },
        {
          "name": "RESPONSE_INSUFFICIENT_STORAGE",
          "value": "507",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]507 Insufficient Storage[/code]. The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request."
        },
        {
          "name": "RESPONSE_LOOP_DETECTED",
          "value": "508",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]508 Loop Detected[/code]. The server terminated an operation because it encountered an infinite loop while processing a request with \"Depth: infinity\". This status indicates that the entire operation failed."
        },
        {
          "name": "RESPONSE_NOT_EXTENDED",
          "value": "510",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]510 Not Extended[/code]. The policy for accessing the resource has not been met in the request. The server should send back all the information necessary for the client to issue an extended request."
        },
        {
          "name": "RESPONSE_NETWORK_AUTH_REQUIRED",
          "value": "511",
          "enum": "ResponseCode",
          "description": "HTTP status code [code]511 Network Authentication Required[/code]. The client needs to authenticate to gain network access."
        }
      ],
      "properties": [
        {
          "name": "blocking_mode_enabled",
          "type": "bool",
          "setter": "set_blocking_mode",
          "getter": "is_blocking_mode_enabled",
          "description": "If [code]true[/code], execution will block until all data is read from the response."
        },
        {
          "name": "connection",
          "type": "StreamPeer",
          "setter": "set_connection",
          "getter": "get_connection",
          "description": "The connection to use for this client."
        }
      ],
      "theme_properties": []
    },
    "TouchScreenButton": {
      "name": "TouchScreenButton",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Button for touch screen devices.",
      "description": "Button for touch screen devices. You can set it to be visible on all screens, or only on touch devices.",
      "methods": [
        {
          "name": "is_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this button is currently pressed.",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "pressed",
          "description": "Emitted when the button is pressed (down).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "released",
          "description": "Emitted when the button is released (up).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "VISIBILITY_ALWAYS",
          "value": "0",
          "enum": "VisibilityMode",
          "description": "Always visible."
        },
        {
          "name": "VISIBILITY_TOUCHSCREEN_ONLY",
          "value": "1",
          "enum": "VisibilityMode",
          "description": "Visible on touch screens only."
        }
      ],
      "properties": [
        {
          "name": "action",
          "type": "String",
          "setter": "set_action",
          "getter": "get_action",
          "description": "The button's action. Actions can be handled with [InputEventAction]."
        },
        {
          "name": "bitmask",
          "type": "BitMap",
          "setter": "set_bitmask",
          "getter": "get_bitmask",
          "description": "The button's bitmask."
        },
        {
          "name": "normal",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The button's texture for the normal state."
        },
        {
          "name": "passby_press",
          "type": "bool",
          "setter": "set_passby_press",
          "getter": "is_passby_press_enabled",
          "description": "If [code]true[/code] passby presses are enabled."
        },
        {
          "name": "pressed",
          "type": "Texture",
          "setter": "set_texture_pressed",
          "getter": "get_texture_pressed",
          "description": "The button's texture for the pressed state."
        },
        {
          "name": "shape",
          "type": "Shape2D",
          "setter": "set_shape",
          "getter": "get_shape",
          "description": "The button's shape."
        },
        {
          "name": "shape_centered",
          "type": "bool",
          "setter": "set_shape_centered",
          "getter": "is_shape_centered",
          "description": "If [code]true[/code] the button's shape is centered."
        },
        {
          "name": "shape_visible",
          "type": "bool",
          "setter": "set_shape_visible",
          "getter": "is_shape_visible",
          "description": "If [code]true[/code] the button's shape is visible."
        },
        {
          "name": "visibility_mode",
          "type": "int",
          "setter": "set_visibility_mode",
          "getter": "get_visibility_mode",
          "enum": "TouchScreenButton.VisibilityMode",
          "description": "The button's visibility mode. See [code]VISIBILITY_*[/code] constants."
        }
      ],
      "theme_properties": []
    },
    "GrooveJoint2D": {
      "name": "GrooveJoint2D",
      "inherits": "Joint2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Groove constraint for 2D physics.",
      "description": "Groove constraint for 2D physics. This is useful for making a body \"slide\" through a segment placed in another.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "initial_offset",
          "type": "float",
          "setter": "set_initial_offset",
          "getter": "get_initial_offset",
          "description": "The body B's initial anchor position defined by the joint's origin and a local offset [member initial_offset] along the joint's y axis (along the groove). Default value: [code]25[/code]"
        },
        {
          "name": "length",
          "type": "float",
          "setter": "set_length",
          "getter": "get_length",
          "description": "The groove's length. The groove is from the joint's origin towards [member length] along the joint's local y axis. Default value: [code]50[/code]"
        }
      ],
      "theme_properties": []
    },
    "@VisualScript": {
      "name": "@VisualScript",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Built-in visual script functions.",
      "description": "A list of built-in visual script functions, see [VisualScriptBuiltinFunc] and [VisualScript].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Generic6DOFJoint": {
      "name": "Generic6DOFJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "The generic 6 degrees of freedom joint can implement a variety of joint-types by locking certain axes' rotation or translation.",
      "description": "The first 3 dof axes are linear axes, which represent translation of Bodies, and the latter 3 dof axes represent the angular motion. Each axis can be either locked, or limited.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_LINEAR_LOWER_LIMIT",
          "value": "0",
          "enum": "Param",
          "description": "The minimum difference between the pivot points' axes."
        },
        {
          "name": "PARAM_LINEAR_UPPER_LIMIT",
          "value": "1",
          "enum": "Param",
          "description": "The maximum difference between the pivot points' axes."
        },
        {
          "name": "PARAM_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "enum": "Param",
          "description": "A factor applied to the movement across the axes The lower, the slower the movement."
        },
        {
          "name": "PARAM_LINEAR_RESTITUTION",
          "value": "3",
          "enum": "Param",
          "description": "The amount of restitution on the axes movement The lower, the more momentum gets lost."
        },
        {
          "name": "PARAM_LINEAR_DAMPING",
          "value": "4",
          "enum": "Param",
          "description": "The amount of damping that happens at the linear motion across the axes."
        },
        {
          "name": "PARAM_ANGULAR_LOWER_LIMIT",
          "value": "5",
          "enum": "Param",
          "description": "The minimum rotation in negative direction to break loose and rotate around the axes."
        },
        {
          "name": "PARAM_ANGULAR_UPPER_LIMIT",
          "value": "6",
          "enum": "Param",
          "description": "The minimum rotation in positive direction to break loose and rotate around the axes."
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_SOFTNESS",
          "value": "7",
          "enum": "Param",
          "description": "The speed of all rotations across the axes."
        },
        {
          "name": "PARAM_ANGULAR_DAMPING",
          "value": "8",
          "enum": "Param",
          "description": "The amount of rotational damping across the axes. The lower, the more dampening occurs."
        },
        {
          "name": "PARAM_ANGULAR_RESTITUTION",
          "value": "9",
          "enum": "Param",
          "description": "The amount of rotational restitution across the axes. The lower, the more restitution occurs."
        },
        {
          "name": "PARAM_ANGULAR_FORCE_LIMIT",
          "value": "10",
          "enum": "Param",
          "description": "The maximum amount of force that can occur, when rotating around the axes."
        },
        {
          "name": "PARAM_ANGULAR_ERP",
          "value": "11",
          "enum": "Param",
          "description": "When rotating across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower."
        },
        {
          "name": "PARAM_ANGULAR_MOTOR_TARGET_VELOCITY",
          "value": "12",
          "enum": "Param",
          "description": "Target speed for the motor at the axes."
        },
        {
          "name": "PARAM_ANGULAR_MOTOR_FORCE_LIMIT",
          "value": "13",
          "enum": "Param",
          "description": "Maximum acceleration for the motor at the axes."
        },
        {
          "name": "PARAM_MAX",
          "value": "14",
          "enum": "Param",
          "description": "End flag of PARAM_* constants, used internally."
        },
        {
          "name": "FLAG_ENABLE_LINEAR_LIMIT",
          "value": "0",
          "enum": "Flag",
          "description": "If [code]set[/code] there is linear motion possible within the given limits."
        },
        {
          "name": "FLAG_ENABLE_ANGULAR_LIMIT",
          "value": "1",
          "enum": "Flag",
          "description": "If [code]set[/code] there is rotational motion possible."
        },
        {
          "name": "FLAG_ENABLE_MOTOR",
          "value": "2",
          "enum": "Flag",
          "description": "If [code]set[/code] there is a rotational motor across these axes."
        },
        {
          "name": "FLAG_MAX",
          "value": "3",
          "enum": "Flag",
          "description": "End flag of FLAG_* constants, used internally."
        }
      ],
      "properties": [
        {
          "name": "angular_limit_x/damping",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "The amount of rotational damping across the x-axis.\n\t\t\tThe lower, the longer an impulse from one side takes to travel to the other side."
        },
        {
          "name": "angular_limit_x/enabled",
          "type": "bool",
          "setter": "set_flag_x",
          "getter": "get_flag_x",
          "description": "If [code]true[/code] rotation across the x-axis is enabled."
        },
        {
          "name": "angular_limit_x/erp",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "When rotating across x-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower."
        },
        {
          "name": "angular_limit_x/force_limit",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "The maximum amount of force that can occur, when rotating around x-axis."
        },
        {
          "name": "angular_limit_x/lower_angle",
          "type": "float",
          "setter": "_set_angular_lo_limit_x",
          "getter": "_get_angular_lo_limit_x",
          "description": "The minimum rotation in negative direction to break loose and rotate around the x-axis."
        },
        {
          "name": "angular_limit_x/restitution",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "The amount of rotational restitution across the x-axis. The lower, the more restitution occurs."
        },
        {
          "name": "angular_limit_x/softness",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "The speed of all rotations across the x-axis."
        },
        {
          "name": "angular_limit_x/upper_angle",
          "type": "float",
          "setter": "_set_angular_hi_limit_x",
          "getter": "_get_angular_hi_limit_x",
          "description": "The minimum rotation in positive direction to break loose and rotate around the x-axis."
        },
        {
          "name": "angular_limit_y/damping",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "The amount of rotational damping across the y-axis. The lower, the more dampening occurs."
        },
        {
          "name": "angular_limit_y/enabled",
          "type": "bool",
          "setter": "set_flag_y",
          "getter": "get_flag_y",
          "description": "If [code]true[/code] rotation across the y-axis is enabled."
        },
        {
          "name": "angular_limit_y/erp",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "When rotating across y-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower."
        },
        {
          "name": "angular_limit_y/force_limit",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "The maximum amount of force that can occur, when rotating around y-axis."
        },
        {
          "name": "angular_limit_y/lower_angle",
          "type": "float",
          "setter": "_set_angular_lo_limit_y",
          "getter": "_get_angular_lo_limit_y",
          "description": "The minimum rotation in negative direction to break loose and rotate around the y-axis."
        },
        {
          "name": "angular_limit_y/restitution",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "The amount of rotational restitution across the y-axis. The lower, the more restitution occurs."
        },
        {
          "name": "angular_limit_y/softness",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "The speed of all rotations across the y-axis."
        },
        {
          "name": "angular_limit_y/upper_angle",
          "type": "float",
          "setter": "_set_angular_hi_limit_y",
          "getter": "_get_angular_hi_limit_y",
          "description": "The minimum rotation in positive direction to break loose and rotate around the y-axis."
        },
        {
          "name": "angular_limit_z/damping",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "The amount of rotational damping across the z-axis. The lower, the more dampening occurs."
        },
        {
          "name": "angular_limit_z/enabled",
          "type": "bool",
          "setter": "set_flag_z",
          "getter": "get_flag_z",
          "description": "If [code]true[/code] rotation across the z-axis is enabled."
        },
        {
          "name": "angular_limit_z/erp",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "When rotating across z-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower."
        },
        {
          "name": "angular_limit_z/force_limit",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "The maximum amount of force that can occur, when rotating around z-axis."
        },
        {
          "name": "angular_limit_z/lower_angle",
          "type": "float",
          "setter": "_set_angular_lo_limit_z",
          "getter": "_get_angular_lo_limit_z",
          "description": "The minimum rotation in negative direction to break loose and rotate around the z-axis."
        },
        {
          "name": "angular_limit_z/restitution",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "The amount of rotational restitution across the z-axis. The lower, the more restitution occurs."
        },
        {
          "name": "angular_limit_z/softness",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "The speed of all rotations across the z-axis."
        },
        {
          "name": "angular_limit_z/upper_angle",
          "type": "float",
          "setter": "_set_angular_hi_limit_z",
          "getter": "_get_angular_hi_limit_z",
          "description": "The minimum rotation in positive direction to break loose and rotate around the z-axis."
        },
        {
          "name": "angular_motor_x/enabled",
          "type": "bool",
          "setter": "set_flag_x",
          "getter": "get_flag_x",
          "description": "If [code]true[/code] a rotating motor at the x-axis is enabled."
        },
        {
          "name": "angular_motor_x/force_limit",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "Maximum acceleration for the motor at the x-axis."
        },
        {
          "name": "angular_motor_x/target_velocity",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "Target speed for the motor at the x-axis."
        },
        {
          "name": "angular_motor_y/enabled",
          "type": "bool",
          "setter": "set_flag_y",
          "getter": "get_flag_y",
          "description": "If [code]true[/code] a rotating motor at the y-axis is enabled."
        },
        {
          "name": "angular_motor_y/force_limit",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "Maximum acceleration for the motor at the y-axis."
        },
        {
          "name": "angular_motor_y/target_velocity",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "Target speed for the motor at the y-axis."
        },
        {
          "name": "angular_motor_z/enabled",
          "type": "bool",
          "setter": "set_flag_z",
          "getter": "get_flag_z",
          "description": "If [code]true[/code] a rotating motor at the z-axis is enabled."
        },
        {
          "name": "angular_motor_z/force_limit",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "Maximum acceleration for the motor at the z-axis."
        },
        {
          "name": "angular_motor_z/target_velocity",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "Target speed for the motor at the z-axis."
        },
        {
          "name": "linear_limit_x/damping",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "The amount of damping that happens at the x-motion."
        },
        {
          "name": "linear_limit_x/enabled",
          "type": "bool",
          "setter": "set_flag_x",
          "getter": "get_flag_x",
          "description": "If [code]true[/code] the linear motion across the x-axis is enabled."
        },
        {
          "name": "linear_limit_x/lower_distance",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "The minimum difference between the pivot points' x-axis."
        },
        {
          "name": "linear_limit_x/restitution",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "The amount of restitution on the x-axis movement The lower, the more momentum gets lost."
        },
        {
          "name": "linear_limit_x/softness",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "A factor applied to the movement across the x-axis The lower, the slower the movement."
        },
        {
          "name": "linear_limit_x/upper_distance",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": "The maximum difference between the pivot points' x-axis."
        },
        {
          "name": "linear_limit_y/damping",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "The amount of damping that happens at the y-motion."
        },
        {
          "name": "linear_limit_y/enabled",
          "type": "bool",
          "setter": "set_flag_y",
          "getter": "get_flag_y",
          "description": "If [code]true[/code] the linear motion across the y-axis is enabled."
        },
        {
          "name": "linear_limit_y/lower_distance",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "The minimum difference between the pivot points' y-axis."
        },
        {
          "name": "linear_limit_y/restitution",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "The amount of restitution on the y-axis movement The lower, the more momentum gets lost."
        },
        {
          "name": "linear_limit_y/softness",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "A factor applied to the movement across the y-axis The lower, the slower the movement."
        },
        {
          "name": "linear_limit_y/upper_distance",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": "The maximum difference between the pivot points' y-axis."
        },
        {
          "name": "linear_limit_z/damping",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "The amount of damping that happens at the z-motion."
        },
        {
          "name": "linear_limit_z/enabled",
          "type": "bool",
          "setter": "set_flag_z",
          "getter": "get_flag_z",
          "description": "If [code]true[/code] the linear motion across the z-axis is enabled."
        },
        {
          "name": "linear_limit_z/lower_distance",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "The minimum difference between the pivot points' z-axis."
        },
        {
          "name": "linear_limit_z/restitution",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "The amount of restitution on the z-axis movement The lower, the more momentum gets lost."
        },
        {
          "name": "linear_limit_z/softness",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "A factor applied to the movement across the z-axis The lower, the slower the movement."
        },
        {
          "name": "linear_limit_z/upper_distance",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": "The maximum difference between the pivot points' z-axis."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectEQ6": {
      "name": "AudioEffectEQ6",
      "inherits": "AudioEffectEQ",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a 6-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 32 Hz to 10000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.",
      "description": "Frequency bands :\n\t\tBand 1 : 32 Hz\n\t\tBand 2 : 100 Hz\n\t\tBand 3 : 320 Hz\n\t\tBand 4 : 1000 Hz\n\t\tBand 5 : 3200 Hz\n\t\tBand 6 : 10000 Hz\n\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ10], [AudioEffectEQ21].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptSceneNode": {
      "name": "VisualScriptSceneNode",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Node reference.",
      "description": "A direct reference to a node.\n\t\t[b]Input Ports:[/b]\n\t\tnone\n\t\t[b]Output Ports:[/b]\n\t\t- Data: [code]node[/code] (obj)",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_node_path",
          "getter": "get_node_path",
          "description": "The node's path in the scene tree."
        }
      ],
      "theme_properties": []
    },
    "GradientTexture": {
      "name": "GradientTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Gradient filled texture.",
      "description": "Uses a [Gradient] to fill the texture data, the gradient will be filled from left to right using colors obtained from the gradient, this means that the texture does not necessarily represent an exact copy of the gradient, but instead an interpolation of samples obtained from the gradient at fixed steps (see [method set_width]).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "gradient",
          "type": "Gradient",
          "setter": "set_gradient",
          "getter": "get_gradient",
          "description": "The [Gradient] that will be used to fill the texture."
        },
        {
          "name": "width",
          "type": "int",
          "setter": "set_width",
          "getter": "get_width",
          "description": "The number of color samples that will be obtained from the [Gradient]."
        }
      ],
      "theme_properties": []
    },
    "InstancePlaceholder": {
      "name": "InstancePlaceholder",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Placeholder for the root [Node] of a [PackedScene].",
      "description": "Turning on the option [b]Load As Placeholder[/b] for an instanced scene in the editor causes it to be replaced by an InstacePlaceholder when running the game. This makes it possible to delay actually loading the scene until calling [method replace_by_instance]. This is useful to avoid loading large scenes all at once by loading parts of it selectively.\n\t\tThe InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again.",
      "methods": [
        {
          "name": "get_instance_path",
          "qualifiers": "const",
          "description": "Retrieve the path to the [PackedScene] resource file that is loaded by default when calling [method replace_by_instance].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_stored_values",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with_order",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "replace_by_instance",
          "description": "Replace this placeholder by the scene handed as an argument, or the original scene if no argument is given. As for all resources, the scene is loaded only if it's not loaded already. By manually loading the scene beforehand, delays caused by this function can be avoided.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "custom_scene",
              "type": "PackedScene",
              "default_value": "null"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptBuiltinFunc": {
      "name": "VisualScriptBuiltinFunc",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A Visual Script node used to call built-in functions.",
      "description": "A built-in function used inside a [VisualScript]. It is usually a math function or an utility function.\n\t\tSee also [@GDScript], for the same functions in the GDScript language.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "MATH_SIN",
          "value": "0",
          "enum": "BuiltinFunc",
          "description": "Return the sine of the input."
        },
        {
          "name": "MATH_COS",
          "value": "1",
          "enum": "BuiltinFunc",
          "description": "Return the cosine of the input."
        },
        {
          "name": "MATH_TAN",
          "value": "2",
          "enum": "BuiltinFunc",
          "description": "Return the tangent of the input."
        },
        {
          "name": "MATH_SINH",
          "value": "3",
          "enum": "BuiltinFunc",
          "description": "Return the hyperbolic sine of the input."
        },
        {
          "name": "MATH_COSH",
          "value": "4",
          "enum": "BuiltinFunc",
          "description": "Return the hyperbolic cosine of the input."
        },
        {
          "name": "MATH_TANH",
          "value": "5",
          "enum": "BuiltinFunc",
          "description": "Return the hyperbolic tangent of the input."
        },
        {
          "name": "MATH_ASIN",
          "value": "6",
          "enum": "BuiltinFunc",
          "description": "Return the arc sine of the input."
        },
        {
          "name": "MATH_ACOS",
          "value": "7",
          "enum": "BuiltinFunc",
          "description": "Return the arc cosine of the input."
        },
        {
          "name": "MATH_ATAN",
          "value": "8",
          "enum": "BuiltinFunc",
          "description": "Return the arc tangent of the input."
        },
        {
          "name": "MATH_ATAN2",
          "value": "9",
          "enum": "BuiltinFunc",
          "description": "Return the arc tangent of the input, using the signs of both parameters to determine the exact angle."
        },
        {
          "name": "MATH_SQRT",
          "value": "10",
          "enum": "BuiltinFunc",
          "description": "Return the square root of the input."
        },
        {
          "name": "MATH_FMOD",
          "value": "11",
          "enum": "BuiltinFunc",
          "description": "Return the remainder of one input divided by the other, using floating-point numbers."
        },
        {
          "name": "MATH_FPOSMOD",
          "value": "12",
          "enum": "BuiltinFunc",
          "description": "Return the positive remainder of one input divided by the other, using floating-point numbers."
        },
        {
          "name": "MATH_FLOOR",
          "value": "13",
          "enum": "BuiltinFunc",
          "description": "Return the input rounded down."
        },
        {
          "name": "MATH_CEIL",
          "value": "14",
          "enum": "BuiltinFunc",
          "description": "Return the input rounded up."
        },
        {
          "name": "MATH_ROUND",
          "value": "15",
          "enum": "BuiltinFunc",
          "description": "Return the input rounded to the nearest integer."
        },
        {
          "name": "MATH_ABS",
          "value": "16",
          "enum": "BuiltinFunc",
          "description": "Return the absolute value of the input."
        },
        {
          "name": "MATH_SIGN",
          "value": "17",
          "enum": "BuiltinFunc",
          "description": "Return the sign of the input, turning it into 1, -1, or 0. Useful to determine if the input is positive or negative."
        },
        {
          "name": "MATH_POW",
          "value": "18",
          "enum": "BuiltinFunc",
          "description": "Return the input raised to a given power."
        },
        {
          "name": "MATH_LOG",
          "value": "19",
          "enum": "BuiltinFunc",
          "description": "Return the natural logarithm of the input. Note that this is not the typical base-10 logarithm function calculators use."
        },
        {
          "name": "MATH_EXP",
          "value": "20",
          "enum": "BuiltinFunc",
          "description": "Return [b]e[/b] raised to the power of the input. [b]e[/b] sometimes called \"Euler's number\" is a mathematical constant whose value is approximately 2.71828."
        },
        {
          "name": "MATH_ISNAN",
          "value": "21",
          "enum": "BuiltinFunc",
          "description": "Return whether the input is NaN (Not a Number) or not. NaN is usually produced by dividing 0 by 0, though other ways exist."
        },
        {
          "name": "MATH_ISINF",
          "value": "22",
          "enum": "BuiltinFunc",
          "description": "Return whether the input is an infinite floating-point number or not. Infinity is usually produced by dividing a number by 0, though other ways exist."
        },
        {
          "name": "MATH_EASE",
          "value": "23",
          "enum": "BuiltinFunc",
          "description": "Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in."
        },
        {
          "name": "MATH_DECIMALS",
          "value": "24",
          "enum": "BuiltinFunc",
          "description": "Return the number of digit places after the decimal that the first non-zero digit occurs."
        },
        {
          "name": "MATH_STEPIFY",
          "value": "25",
          "enum": "BuiltinFunc",
          "description": "Return the input snapped to a given step."
        },
        {
          "name": "MATH_LERP",
          "value": "26",
          "enum": "BuiltinFunc",
          "description": "Return a number linearly interpolated between the first two inputs, based on the third input. Uses the formula [code]a + (a - b) * t[/code]."
        },
        {
          "name": "MATH_INVERSE_LERP",
          "value": "27",
          "enum": "BuiltinFunc",
          "description": ""
        },
        {
          "name": "MATH_RANGE_LERP",
          "value": "28",
          "enum": "BuiltinFunc",
          "description": ""
        },
        {
          "name": "MATH_DECTIME",
          "value": "29",
          "enum": "BuiltinFunc",
          "description": "Return the result of 'value' decreased by 'step' * 'amount'."
        },
        {
          "name": "MATH_RANDOMIZE",
          "value": "30",
          "enum": "BuiltinFunc",
          "description": "Randomize the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time."
        },
        {
          "name": "MATH_RAND",
          "value": "31",
          "enum": "BuiltinFunc",
          "description": "Return a random 32 bits integer value. To obtain a random value between 0 to N (where N is smaller than 2^32 - 1), you can use it with the remainder function."
        },
        {
          "name": "MATH_RANDF",
          "value": "32",
          "enum": "BuiltinFunc",
          "description": "Return a random floating-point value between 0 and 1. To obtain a random value between 0 to N, you can use it with multiplication."
        },
        {
          "name": "MATH_RANDOM",
          "value": "33",
          "enum": "BuiltinFunc",
          "description": "Return a random floating-point value between the two inputs."
        },
        {
          "name": "MATH_SEED",
          "value": "34",
          "enum": "BuiltinFunc",
          "description": "Set the seed for the random number generator."
        },
        {
          "name": "MATH_RANDSEED",
          "value": "35",
          "enum": "BuiltinFunc",
          "description": "Return a random value from the given seed, along with the new seed."
        },
        {
          "name": "MATH_DEG2RAD",
          "value": "36",
          "enum": "BuiltinFunc",
          "description": "Convert the input from degrees to radians."
        },
        {
          "name": "MATH_RAD2DEG",
          "value": "37",
          "enum": "BuiltinFunc",
          "description": "Convert the input from radians to degrees."
        },
        {
          "name": "MATH_LINEAR2DB",
          "value": "38",
          "enum": "BuiltinFunc",
          "description": "Convert the input from linear volume to decibel volume."
        },
        {
          "name": "MATH_DB2LINEAR",
          "value": "39",
          "enum": "BuiltinFunc",
          "description": "Convert the input from decibel volume to linear volume."
        },
        {
          "name": "MATH_POLAR2CARTESIAN",
          "value": "40",
          "enum": "BuiltinFunc",
          "description": "Converts a 2D point expressed in the polar coordinate system (a distance from the origin [code]r[/code] and an angle [code]th[/code]) to the cartesian coordinate system (x and y axis)."
        },
        {
          "name": "MATH_CARTESIAN2POLAR",
          "value": "41",
          "enum": "BuiltinFunc",
          "description": "Converts a 2D point expressed in the cartesian coordinate system (x and y axis) to the polar coordinate system (a distance from the origin and an angle)."
        },
        {
          "name": "MATH_WRAP",
          "value": "42",
          "enum": "BuiltinFunc",
          "description": ""
        },
        {
          "name": "MATH_WRAPF",
          "value": "43",
          "enum": "BuiltinFunc",
          "description": ""
        },
        {
          "name": "LOGIC_MAX",
          "value": "44",
          "enum": "BuiltinFunc",
          "description": "Return the greater of the two numbers, also known as their maximum."
        },
        {
          "name": "LOGIC_MIN",
          "value": "45",
          "enum": "BuiltinFunc",
          "description": "Return the lesser of the two numbers, also known as their minimum."
        },
        {
          "name": "LOGIC_CLAMP",
          "value": "46",
          "enum": "BuiltinFunc",
          "description": "Return the input clamped inside the given range, ensuring the result is never outside it. Equivalent to `min(max(input, range_low), range_high)`"
        },
        {
          "name": "LOGIC_NEAREST_PO2",
          "value": "47",
          "enum": "BuiltinFunc",
          "description": "Return the nearest power of 2 to the input."
        },
        {
          "name": "OBJ_WEAKREF",
          "value": "48",
          "enum": "BuiltinFunc",
          "description": "Create a [WeakRef] from the input."
        },
        {
          "name": "FUNC_FUNCREF",
          "value": "49",
          "enum": "BuiltinFunc",
          "description": "Create a [FuncRef] from the input."
        },
        {
          "name": "TYPE_CONVERT",
          "value": "50",
          "enum": "BuiltinFunc",
          "description": "Convert between types."
        },
        {
          "name": "TYPE_OF",
          "value": "51",
          "enum": "BuiltinFunc",
          "description": "Return the type of the input as an integer. Check [enum Variant.Type] for the integers that might be returned."
        },
        {
          "name": "TYPE_EXISTS",
          "value": "52",
          "enum": "BuiltinFunc",
          "description": "Checks if a type is registered in the [ClassDB]."
        },
        {
          "name": "TEXT_CHAR",
          "value": "53",
          "enum": "BuiltinFunc",
          "description": "Return a character with the given ascii value."
        },
        {
          "name": "TEXT_STR",
          "value": "54",
          "enum": "BuiltinFunc",
          "description": "Convert the input to a string."
        },
        {
          "name": "TEXT_PRINT",
          "value": "55",
          "enum": "BuiltinFunc",
          "description": "Print the given string to the output window."
        },
        {
          "name": "TEXT_PRINTERR",
          "value": "56",
          "enum": "BuiltinFunc",
          "description": "Print the given string to the standard error output."
        },
        {
          "name": "TEXT_PRINTRAW",
          "value": "57",
          "enum": "BuiltinFunc",
          "description": "Print the given string to the standard output, without adding a newline."
        },
        {
          "name": "VAR_TO_STR",
          "value": "58",
          "enum": "BuiltinFunc",
          "description": "Serialize a [Variant] to a string."
        },
        {
          "name": "STR_TO_VAR",
          "value": "59",
          "enum": "BuiltinFunc",
          "description": "Deserialize a [Variant] from a string serialized using [VAR_TO_STR]."
        },
        {
          "name": "VAR_TO_BYTES",
          "value": "60",
          "enum": "BuiltinFunc",
          "description": "Serialize a [Variant] to a [PoolByteArray]."
        },
        {
          "name": "BYTES_TO_VAR",
          "value": "61",
          "enum": "BuiltinFunc",
          "description": "Deserialize a [Variant] from a [PoolByteArray] serialized using [VAR_TO_BYTES]."
        },
        {
          "name": "COLORN",
          "value": "62",
          "enum": "BuiltinFunc",
          "description": "Return the [Color] with the given name and alpha ranging from 0 to 1. Note: names are defined in color_names.inc."
        },
        {
          "name": "FUNC_MAX",
          "value": "63",
          "enum": "BuiltinFunc",
          "description": "The maximum value the [member function] property can have."
        }
      ],
      "properties": [
        {
          "name": "function",
          "type": "int",
          "setter": "set_func",
          "getter": "get_func",
          "enum": "VisualScriptBuiltinFunc.BuiltinFunc",
          "description": "The function to be executed."
        }
      ],
      "theme_properties": []
    },
    "Particles2D": {
      "name": "Particles2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "2D particle emitter.",
      "description": "2D particle node used to create a variety of particle systems and effects. [code]Particles2D[/code] features an emitter that generates some number of particles at a given rate.\n\t\tUse the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.",
      "methods": [
        {
          "name": "capture_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "restart",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "DRAW_ORDER_INDEX",
          "value": "0",
          "enum": "DrawOrder",
          "description": "Particles are drawn in the order emitted."
        },
        {
          "name": "DRAW_ORDER_LIFETIME",
          "value": "1",
          "enum": "DrawOrder",
          "description": "Particles are drawn in order of remaining lifetime."
        }
      ],
      "properties": [
        {
          "name": "amount",
          "type": "int",
          "setter": "set_amount",
          "getter": "get_amount",
          "description": "Number of particles emitted in one emission cycle."
        },
        {
          "name": "draw_order",
          "type": "int",
          "setter": "set_draw_order",
          "getter": "get_draw_order",
          "enum": "Particles2D.DrawOrder",
          "description": "Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code]."
        },
        {
          "name": "emitting",
          "type": "bool",
          "setter": "set_emitting",
          "getter": "is_emitting",
          "description": "If [code]true[/code] particles are being emitted. Default value: [code]true[/code]."
        },
        {
          "name": "explosiveness",
          "type": "float",
          "setter": "set_explosiveness_ratio",
          "getter": "get_explosiveness_ratio",
          "description": "How rapidly particles in an emission cycle are emitted. If greater than [code]0[/code], there will be a gap in emissions before the next cycle begins. Default value: [code]0[/code]."
        },
        {
          "name": "fixed_fps",
          "type": "int",
          "setter": "set_fixed_fps",
          "getter": "get_fixed_fps",
          "description": ""
        },
        {
          "name": "fract_delta",
          "type": "bool",
          "setter": "set_fractional_delta",
          "getter": "get_fractional_delta",
          "description": ""
        },
        {
          "name": "h_frames",
          "type": "int",
          "setter": "set_h_frames",
          "getter": "get_h_frames",
          "description": "Number of horizontal frames in [code]texture[/code]."
        },
        {
          "name": "lifetime",
          "type": "float",
          "setter": "set_lifetime",
          "getter": "get_lifetime",
          "description": "Amount of time each particle will exist. Default value: [code]1[/code]."
        },
        {
          "name": "local_coords",
          "type": "bool",
          "setter": "set_use_local_coordinates",
          "getter": "get_use_local_coordinates",
          "description": "If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code]."
        },
        {
          "name": "normal_map",
          "type": "Texture",
          "setter": "set_normal_map",
          "getter": "get_normal_map",
          "description": ""
        },
        {
          "name": "one_shot",
          "type": "bool",
          "setter": "set_one_shot",
          "getter": "get_one_shot",
          "description": "If [code]true[/code] only one emission cycle occurs. If set [code]true[/code] during a cycle, emission will stop at the cycle's end. Default value: [code]false[/code]."
        },
        {
          "name": "preprocess",
          "type": "float",
          "setter": "set_pre_process_time",
          "getter": "get_pre_process_time",
          "description": "Particle system starts as if it had already run for this many seconds."
        },
        {
          "name": "process_material",
          "type": "Material",
          "setter": "set_process_material",
          "getter": "get_process_material",
          "description": "[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial]."
        },
        {
          "name": "randomness",
          "type": "float",
          "setter": "set_randomness_ratio",
          "getter": "get_randomness_ratio",
          "description": "Emission lifetime randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "speed_scale",
          "type": "float",
          "setter": "set_speed_scale",
          "getter": "get_speed_scale",
          "description": "Particle system's running speed scaling ratio. Default value: [code]1[/code]."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "Particle texture. If [code]null[/code] particles will be squares."
        },
        {
          "name": "v_frames",
          "type": "int",
          "setter": "set_v_frames",
          "getter": "get_v_frames",
          "description": "Number of vertical frames in [code]texture[/code]."
        },
        {
          "name": "visibility_rect",
          "type": "Rect2",
          "setter": "set_visibility_rect",
          "getter": "get_visibility_rect",
          "description": "Editor visibility helper."
        }
      ],
      "theme_properties": []
    },
    "ToolButton": {
      "name": "ToolButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Flat button helper class.",
      "description": "This is a helper class to generate a flat [Button] (see [method Button.set_flat]), creating a ToolButton is equivalent to:\n\n\t\t[codeblock]\n\t\tvar btn = Button.new()\n\t\tbtn.set_flat(true)\n\t\t[/codeblock]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "Physics2DTestMotionResult": {
      "name": "Physics2DTestMotionResult",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collider",
          "type": "Object",
          "setter": "",
          "getter": "get_collider",
          "description": ""
        },
        {
          "name": "collider_id",
          "type": "int",
          "setter": "",
          "getter": "get_collider_id",
          "description": ""
        },
        {
          "name": "collider_rid",
          "type": "RID",
          "setter": "",
          "getter": "get_collider_rid",
          "description": ""
        },
        {
          "name": "collider_shape",
          "type": "int",
          "setter": "",
          "getter": "get_collider_shape",
          "description": ""
        },
        {
          "name": "collider_velocity",
          "type": "Vector2",
          "setter": "",
          "getter": "get_collider_velocity",
          "description": ""
        },
        {
          "name": "collision_normal",
          "type": "Vector2",
          "setter": "",
          "getter": "get_collision_normal",
          "description": ""
        },
        {
          "name": "collision_point",
          "type": "Vector2",
          "setter": "",
          "getter": "get_collision_point",
          "description": ""
        },
        {
          "name": "motion",
          "type": "Vector2",
          "setter": "",
          "getter": "get_motion",
          "description": ""
        },
        {
          "name": "motion_remainder",
          "type": "Vector2",
          "setter": "",
          "getter": "get_motion_remainder",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "CheckButton": {
      "name": "CheckButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Checkable button.",
      "description": "CheckButton is a toggle button displayed as a check field.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "check_vadjust",
          "type": "int",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "off",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "on",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "AudioStreamSample": {
      "name": "AudioStreamSample",
      "inherits": "AudioStream",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Plays audio.",
      "description": "Plays audio, can loop.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "FORMAT_8_BITS",
          "value": "0",
          "enum": "Format",
          "description": "Audio codec 8 bit."
        },
        {
          "name": "FORMAT_16_BITS",
          "value": "1",
          "enum": "Format",
          "description": "Audio codec 16 bit."
        },
        {
          "name": "FORMAT_IMA_ADPCM",
          "value": "2",
          "enum": "Format",
          "description": "Audio codec IMA ADPCM."
        },
        {
          "name": "LOOP_DISABLED",
          "value": "0",
          "enum": "LoopMode",
          "description": "Audio does not loop."
        },
        {
          "name": "LOOP_FORWARD",
          "value": "1",
          "enum": "LoopMode",
          "description": "Audio loops the data between loop_begin and loop_end playing forward only."
        },
        {
          "name": "LOOP_PING_PONG",
          "value": "2",
          "enum": "LoopMode",
          "description": "Audio loops the data between loop_begin and loop_end playing back and forth."
        }
      ],
      "properties": [
        {
          "name": "format",
          "type": "int",
          "setter": "set_format",
          "getter": "get_format",
          "enum": "AudioStreamSample.Format",
          "description": "Audio format. See FORMAT_* constants for values."
        },
        {
          "name": "loop_begin",
          "type": "int",
          "setter": "set_loop_begin",
          "getter": "get_loop_begin",
          "description": "Loop start in bytes."
        },
        {
          "name": "loop_end",
          "type": "int",
          "setter": "set_loop_end",
          "getter": "get_loop_end",
          "description": "Loop end in bytes."
        },
        {
          "name": "loop_mode",
          "type": "int",
          "setter": "set_loop_mode",
          "getter": "get_loop_mode",
          "enum": "AudioStreamSample.LoopMode",
          "description": "Loop mode. See LOOP_* constants for values."
        },
        {
          "name": "mix_rate",
          "type": "int",
          "setter": "set_mix_rate",
          "getter": "get_mix_rate",
          "description": "The sample rate for mixing this audio."
        },
        {
          "name": "stereo",
          "type": "bool",
          "setter": "set_stereo",
          "getter": "is_stereo",
          "description": "If [code]true[/code], audio is stereo. Default value: [code]false[/code]."
        }
      ],
      "theme_properties": []
    },
    "ArrayMesh": {
      "name": "ArrayMesh",
      "inherits": "Mesh",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_blend_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_surface_from_arrays",
          "description": "Create a new surface ([method get_surface_count] that will become surf_idx for this.\n\t\t\t\tSurfaces are created to be rendered using a \"primitive\", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. (As a note, when using indices, it is recommended to only use just points, lines or triangles).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "primitive",
              "type": "int",
              "enum": "Mesh.PrimitiveType",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arrays",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "blend_shapes",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "3",
              "name": "compress_flags",
              "type": "int",
              "default_value": "97792"
            }
          ]
        },
        {
          "name": "center_geometry",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_blend_shapes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_blend_shape_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_blend_shape_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_surface_count",
          "qualifiers": "const",
          "description": "Return the amount of surfaces that the [code]ArrayMesh[/code] holds.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "regen_normalmaps",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "surface_get_array_index_len",
          "qualifiers": "const",
          "description": "Return the length in indices of the index array in the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_array_len",
          "qualifiers": "const",
          "description": "Return the length in vertices of the vertex array in the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_arrays",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_blend_shape_arrays",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_format",
          "qualifiers": "const",
          "description": "Return the format mask of the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_material",
          "qualifiers": "const",
          "description": "Return a [Material] in a given surface. Surface is rendered using this material.",
          "return_type": "Material",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_primitive_type",
          "qualifiers": "const",
          "description": "Return the primitive type of the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_remove",
          "description": "Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_set_material",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_set_name",
          "description": "Set a [Material] for a given surface. Surface will be rendered using this material.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_update_region",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NO_INDEX_ARRAY",
          "value": "-1",
          "description": "Default value used for index_array_len when no indices are present."
        },
        {
          "name": "ARRAY_WEIGHTS_SIZE",
          "value": "4",
          "description": "Amount of weights/bone indices per vertex (always 4)."
        },
        {
          "name": "ARRAY_VERTEX",
          "value": "0",
          "enum": "ArrayType",
          "description": "Vertex array (array of [Vector3] vertices)."
        },
        {
          "name": "ARRAY_NORMAL",
          "value": "1",
          "enum": "ArrayType",
          "description": "Normal array (array of [Vector3] normals)."
        },
        {
          "name": "ARRAY_TANGENT",
          "value": "2",
          "enum": "ArrayType",
          "description": "Tangent array, array of groups of 4 floats. first 3 floats determine the tangent, and the last the binormal direction as -1 or 1."
        },
        {
          "name": "ARRAY_COLOR",
          "value": "3",
          "enum": "ArrayType",
          "description": "Vertex array (array of [Color] colors)."
        },
        {
          "name": "ARRAY_TEX_UV",
          "value": "4",
          "enum": "ArrayType",
          "description": "UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v))."
        },
        {
          "name": "ARRAY_TEX_UV2",
          "value": "5",
          "enum": "ArrayType",
          "description": "Second UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v))."
        },
        {
          "name": "ARRAY_BONES",
          "value": "6",
          "enum": "ArrayType",
          "description": "Array of bone indices, as a float array. Each element in groups of 4 floats."
        },
        {
          "name": "ARRAY_WEIGHTS",
          "value": "7",
          "enum": "ArrayType",
          "description": "Array of bone weights, as a float array. Each element in groups of 4 floats."
        },
        {
          "name": "ARRAY_INDEX",
          "value": "8",
          "enum": "ArrayType",
          "description": "Array of integers, used as indices referencing vertices. No index can be beyond the vertex array size."
        },
        {
          "name": "ARRAY_MAX",
          "value": "9",
          "enum": "ArrayType",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_VERTEX",
          "value": "1",
          "enum": "ArrayFormat",
          "description": "Array format will include vertices (mandatory)."
        },
        {
          "name": "ARRAY_FORMAT_NORMAL",
          "value": "2",
          "enum": "ArrayFormat",
          "description": "Array format will include normals"
        },
        {
          "name": "ARRAY_FORMAT_TANGENT",
          "value": "4",
          "enum": "ArrayFormat",
          "description": "Array format will include tangents"
        },
        {
          "name": "ARRAY_FORMAT_COLOR",
          "value": "8",
          "enum": "ArrayFormat",
          "description": "Array format will include a color array."
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV",
          "value": "16",
          "enum": "ArrayFormat",
          "description": "Array format will include UVs."
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV2",
          "value": "32",
          "enum": "ArrayFormat",
          "description": "Array format will include another set of UVs."
        },
        {
          "name": "ARRAY_FORMAT_BONES",
          "value": "64",
          "enum": "ArrayFormat",
          "description": "Array format will include bone indices."
        },
        {
          "name": "ARRAY_FORMAT_WEIGHTS",
          "value": "128",
          "enum": "ArrayFormat",
          "description": "Array format will include bone weights."
        },
        {
          "name": "ARRAY_FORMAT_INDEX",
          "value": "256",
          "enum": "ArrayFormat",
          "description": "Index array will be used."
        }
      ],
      "properties": [
        {
          "name": "blend_shape_mode",
          "type": "int",
          "setter": "set_blend_shape_mode",
          "getter": "get_blend_shape_mode",
          "enum": "Mesh.BlendShapeMode",
          "description": ""
        },
        {
          "name": "custom_aabb",
          "type": "AABB",
          "setter": "set_custom_aabb",
          "getter": "get_custom_aabb",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Array": {
      "name": "Array",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Generic array datatype.",
      "description": "Generic array, contains several elements of any type, accessible by numerical index starting at 0. Negative indices can be used to count from the right, like in Python. Arrays are always passed by reference.",
      "methods": [
        {
          "name": "Array",
          "description": "Construct an array from a [PoolColorArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolVector3Array].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolVector2Array].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolStringArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolRealArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolIntArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolByteArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "back",
          "description": "Returns the last element of the array if the array is not empty (size>0).",
          "return_type": "var",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "bsearch",
          "description": "Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a before specifier can be passed. If false, the returned index comes after all existing entries of the value in the array. Note that calling bsearch on an unsorted array results in unexpected behavior.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "before",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "bsearch_custom",
          "description": "Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search and a custom comparison method. Optionally, a before specifier can be passed. If false, the returned index comes after all existing entries of the value in the array.  The custom method receives two arguments (an element from the array and the value searched for) and must return true if the first argument is less than the second, and return false otherwise. Note that calling bsearch on an unsorted array results in unexpected behavior.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "before",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the array (resize to 0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "count",
          "description": "Return the amount of times an element is in the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "duplicate",
          "description": "Returns a copy of this [code]Array[/code].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "empty",
          "description": "Return true if the array is empty (size==0).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "erase",
          "description": "Remove the first occurrence of a value from the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find",
          "description": "Searches the array for a value and returns its index or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "find_last",
          "description": "Searches the array in reverse order for a value and returns its index or -1 if not found.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "front",
          "description": "Returns the first element of the array if the array is not empty (size>0).",
          "return_type": "var",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has",
          "description": "Return true if the array contains given value.\n\t\t\t\t[codeblock]\n\t\t\t\t[ \"inside\", 7 ].has(\"inside\") == true\n\t\t\t\t[ \"inside\", 7 ].has(\"outside\") == false\n\t\t\t\t[ \"inside\", 7 ].has(7) == true\n\t\t\t\t[ \"inside\", 7 ].has(\"7\") == false\n\t\t\t\t[/codeblock]",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hash",
          "description": "Return a hashed integer value representing the array contents.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last) and return reference to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pop_back",
          "description": "Remove the last element of the array.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pop_front",
          "description": "Remove the first element of the array.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append an element at the end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_front",
          "description": "Add an element at the beginning of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Resize the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are Null.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rfind",
          "description": "Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the amount of elements in the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sort",
          "description": "Sort the array using natural order and return reference to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sort_custom",
          "description": "Sort the array using a custom method and return reference to the array. The arguments are an object that holds the method and the name of such method. The custom method receives two arguments (a pair of elements from the array) and must return true if the first argument is less than the second, and return false otherwise. Note: you cannot randomize the return value as the heapsort algorithm expects a deterministic result. Doing so will result in unexpected behavior.\n\t\t\t\t[codeblock]\n\t\t\t\tclass MyCustomSorter:\n\t\t\t\t    static func sort(a, b):\n\t\t\t\t        if a[0] < b[0]:\n\t\t\t\t            return true\n\t\t\t\t    return false\n\n\t\t\t\tvar my_items = [[5, \"Potato\"], [9, \"Rice\"], [4, \"Tomato\"]]\n\t\t\t\tmy_items.sort_custom(MyCustomSorter, \"sort\")\n\t\t\t\t[/codeblock]",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "func",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectLowShelfFilter": {
      "name": "AudioEffectLowShelfFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HTTPRequest": {
      "name": "HTTPRequest",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A node with the ability to send HTTP requests.",
      "description": "A node with the ability to send HTTP requests. Uses [HTTPClient] internally.\n\t\tCan be used to make HTTP requests, i.e. download or upload files or web content via HTTP.",
      "methods": [
        {
          "name": "cancel_request",
          "description": "Cancels the current request.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_body_size",
          "qualifiers": "const",
          "description": "Returns the response body length.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_downloaded_bytes",
          "qualifiers": "const",
          "description": "Returns the amount of bytes this HTTPRequest downloaded.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_http_client_status",
          "qualifiers": "const",
          "description": "Returns the current status of the underlying [HTTPClient]. See [code]STATUS_*[/code] enum on [HTTPClient].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "request",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "url",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "custom_headers",
              "type": "PoolStringArray",
              "default_value": "PoolStringArray(  )"
            },
            {
              "index": "2",
              "name": "ssl_validate_domain",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "3",
              "name": "method",
              "type": "int",
              "enum": "HTTPClient.Method",
              "default_value": "0"
            },
            {
              "index": "4",
              "name": "request_data",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "request_completed",
          "description": "This signal is emitted upon request completion.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "result",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "response_code",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "headers",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "RESULT_SUCCESS",
          "value": "0",
          "enum": "Result",
          "description": "Request successful."
        },
        {
          "name": "RESULT_CHUNKED_BODY_SIZE_MISMATCH",
          "value": "1",
          "enum": "Result",
          "description": ""
        },
        {
          "name": "RESULT_CANT_CONNECT",
          "value": "2",
          "enum": "Result",
          "description": "Request failed while connecting."
        },
        {
          "name": "RESULT_CANT_RESOLVE",
          "value": "3",
          "enum": "Result",
          "description": "Request failed while resolving."
        },
        {
          "name": "RESULT_CONNECTION_ERROR",
          "value": "4",
          "enum": "Result",
          "description": "Request failed due to connection(read/write) error."
        },
        {
          "name": "RESULT_SSL_HANDSHAKE_ERROR",
          "value": "5",
          "enum": "Result",
          "description": "Request failed on SSL handshake."
        },
        {
          "name": "RESULT_NO_RESPONSE",
          "value": "6",
          "enum": "Result",
          "description": "Request does not have a response(yet)."
        },
        {
          "name": "RESULT_BODY_SIZE_LIMIT_EXCEEDED",
          "value": "7",
          "enum": "Result",
          "description": "Request exceeded its maximum size limit, see [method set_body_size_limit]."
        },
        {
          "name": "RESULT_REQUEST_FAILED",
          "value": "8",
          "enum": "Result",
          "description": "Request failed. (Unused)"
        },
        {
          "name": "RESULT_DOWNLOAD_FILE_CANT_OPEN",
          "value": "9",
          "enum": "Result",
          "description": "HTTPRequest couldn't open the download file."
        },
        {
          "name": "RESULT_DOWNLOAD_FILE_WRITE_ERROR",
          "value": "10",
          "enum": "Result",
          "description": "HTTPRequest couldn't write to the download file."
        },
        {
          "name": "RESULT_REDIRECT_LIMIT_REACHED",
          "value": "11",
          "enum": "Result",
          "description": "Request reached its maximum redirect limit, see [method set_max_redirects]."
        }
      ],
      "properties": [
        {
          "name": "body_size_limit",
          "type": "int",
          "setter": "set_body_size_limit",
          "getter": "get_body_size_limit",
          "description": "Maximum allowed size for response bodies."
        },
        {
          "name": "download_file",
          "type": "String",
          "setter": "set_download_file",
          "getter": "get_download_file",
          "description": "The file to download into. Will output any received file into it."
        },
        {
          "name": "max_redirects",
          "type": "int",
          "setter": "set_max_redirects",
          "getter": "get_max_redirects",
          "description": "Maximum number of allowed redirects."
        },
        {
          "name": "use_threads",
          "type": "bool",
          "setter": "set_use_threads",
          "getter": "is_using_threads",
          "description": "If [code]true[/code] multithreading is used to improve performance."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptMathConstant": {
      "name": "VisualScriptMathConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Commonly used mathematical constants.",
      "description": "Provides common math constants, such as Pi or Euler's constant, on an output Data port.\n\t\t[b]Input Ports:[/b]\n\t\tnone\n\t\t[b]Output Ports:[/b]\n\t\t- Data (variant): [code]get[/code]",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "MATH_CONSTANT_ONE",
          "value": "0",
          "enum": "MathConstant",
          "description": "Unity: [code]1[/code]"
        },
        {
          "name": "MATH_CONSTANT_PI",
          "value": "1",
          "enum": "MathConstant",
          "description": "Pi: [code]3.141593[/code]"
        },
        {
          "name": "MATH_CONSTANT_HALF_PI",
          "value": "2",
          "enum": "MathConstant",
          "description": "Pi divided by two: [code]1.570796[/code]"
        },
        {
          "name": "MATH_CONSTANT_TAU",
          "value": "3",
          "enum": "MathConstant",
          "description": "Tau: [code]6.283185[/code]"
        },
        {
          "name": "MATH_CONSTANT_E",
          "value": "4",
          "enum": "MathConstant",
          "description": "Natural log: [code]2.718282[/code]"
        },
        {
          "name": "MATH_CONSTANT_SQRT2",
          "value": "5",
          "enum": "MathConstant",
          "description": "Square root of two: [code]1.414214[/code]"
        },
        {
          "name": "MATH_CONSTANT_INF",
          "value": "6",
          "enum": "MathConstant",
          "description": "Infinity: [code]inf[/code]"
        },
        {
          "name": "MATH_CONSTANT_NAN",
          "value": "7",
          "enum": "MathConstant",
          "description": "Not a number: [code]nan[/code]"
        },
        {
          "name": "MATH_CONSTANT_MAX",
          "value": "8",
          "enum": "MathConstant",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "constant",
          "type": "int",
          "setter": "set_math_constant",
          "getter": "get_math_constant",
          "enum": "VisualScriptMathConstant.MathConstant",
          "description": "The math constant."
        }
      ],
      "theme_properties": []
    },
    "TabContainer": {
      "name": "TabContainer",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Tabbed Container.",
      "description": "Sets the active tab's [code]visible[/code] property to the value [code]true[/code]. Sets all other children's to [code]false[/code].\n\t\tIgnores non-[Control] children.\n\t\tIndividual tabs are always visible unless you use [method set_tab_disabled] and [method set_tab_title] to hide it.\n\t\tTo hide only a tab's content, nest the content inside a child [Control], so it receives the [code]TabContainer[/code]'s visibility setting instead.",
      "methods": [
        {
          "name": "get_current_tab_control",
          "qualifiers": "const",
          "description": "Returns the child [Control] node located at the active tab index.",
          "return_type": "Control",
          "arguments": []
        },
        {
          "name": "get_popup",
          "qualifiers": "const",
          "description": "Returns the [Popup] node instance if one has been set already with [method set_popup].",
          "return_type": "Popup",
          "arguments": []
        },
        {
          "name": "get_previous_tab",
          "qualifiers": "const",
          "description": "Returns the previously active tab index.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_control",
          "qualifiers": "const",
          "description": "Returns the currently visible tab's [Control] node.",
          "return_type": "Control",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_count",
          "qualifiers": "const",
          "description": "Returns the number of tabs.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_disabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_icon",
          "qualifiers": "const",
          "description": "Returns the [Texture] for the tab at index [code]tab_idx[/code] or null if the tab has no [Texture].",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_title",
          "qualifiers": "const",
          "description": "Returns the title of the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_popup",
          "description": "If set on a [Popup] node instance, a popup menu icon appears in the top-right corner of the [code]TabContainer[/code]. Clicking it will expand the [Popup] node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "popup",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_disabled",
          "description": "If [code]disabled[/code] is false, hides the tab at index [code]tab_idx[/code]. Note that its title text will remain, unless also removed with [method set_tab_title].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_icon",
          "description": "Sets an icon for the tab at index [code]tab_idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_title",
          "description": "Sets a title for the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "pre_popup_pressed",
          "description": "Emitted when the [code]TabContainer[/code]'s [Popup] button is clicked. See [method set_popup] for details.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tab_changed",
          "description": "Emitted when switching to another tab.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_selected",
          "description": "Emitted when a tab is selected, even if it is the current tab.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "enum": "TabAlign",
          "description": ""
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "enum": "TabAlign",
          "description": ""
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "enum": "TabAlign",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "current_tab",
          "type": "int",
          "setter": "set_current_tab",
          "getter": "get_current_tab",
          "description": "The current tab index. When set, this index's [Control] node's [code]visible[/code] property is set to [code]true[/code] and all others are set to [code]false[/code]."
        },
        {
          "name": "tab_align",
          "type": "int",
          "setter": "set_tab_align",
          "getter": "get_tab_align",
          "enum": "TabContainer.TabAlign",
          "description": "The alignment of all tabs in the tab container. See the [code]ALIGN_*[/code] constants for details."
        },
        {
          "name": "tabs_visible",
          "type": "bool",
          "setter": "set_tabs_visible",
          "getter": "are_tabs_visible",
          "description": "If [code]true[/code] tabs are visible. If [code]false[/code] tabs' content and titles are hidden. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": [
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color_bg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_fg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "label_valign_bg",
          "type": "int",
          "description": ""
        },
        {
          "name": "label_valign_fg",
          "type": "int",
          "description": ""
        },
        {
          "name": "menu",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "menu_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "side_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "tab_bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tab_fg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "top_margin",
          "type": "int",
          "description": ""
        }
      ]
    },
    "BitMap": {
      "name": "BitMap",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Boolean matrix.",
      "description": "A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.",
      "methods": [
        {
          "name": "create",
          "description": "Creates a bitmap with the specified size, filled with false.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_from_image_alpha",
          "description": "Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to false if the alpha value of the image at that position is 0, and true in other case.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bit",
          "qualifiers": "const",
          "description": "Returns bitmap's value at the specified position.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Returns bitmap's dimensions.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_true_bit_count",
          "qualifiers": "const",
          "description": "Returns the amount of bitmap elements that are set to true.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_bit",
          "description": "Sets the bitmap's element at the specified position, to the specified value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bit",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bit_rect",
          "description": "Sets a rectangular portion of the bitmap to the specified value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bit",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "DirectionalLight": {
      "name": "DirectionalLight",
      "inherits": "Light",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Directional Light, such as the Sun or the Moon.",
      "description": "A DirectionalLight is a type of [Light] node that emits light constantly in one direction (the negative z axis of the node). It is used lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored, only the basis is used do determine light direction.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "SHADOW_ORTHOGONAL",
          "value": "0",
          "enum": "ShadowMode",
          "description": ""
        },
        {
          "name": "SHADOW_PARALLEL_2_SPLITS",
          "value": "1",
          "enum": "ShadowMode",
          "description": ""
        },
        {
          "name": "SHADOW_PARALLEL_4_SPLITS",
          "value": "2",
          "enum": "ShadowMode",
          "description": ""
        },
        {
          "name": "SHADOW_DEPTH_RANGE_STABLE",
          "value": "0",
          "enum": "ShadowDepthRange",
          "description": ""
        },
        {
          "name": "SHADOW_DEPTH_RANGE_OPTIMIZED",
          "value": "1",
          "enum": "ShadowDepthRange",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "directional_shadow_bias_split_scale",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_blend_splits",
          "type": "bool",
          "setter": "set_blend_splits",
          "getter": "is_blend_splits_enabled",
          "description": ""
        },
        {
          "name": "directional_shadow_depth_range",
          "type": "int",
          "setter": "set_shadow_depth_range",
          "getter": "get_shadow_depth_range",
          "enum": "DirectionalLight.ShadowDepthRange",
          "description": ""
        },
        {
          "name": "directional_shadow_max_distance",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_mode",
          "type": "int",
          "setter": "set_shadow_mode",
          "getter": "get_shadow_mode",
          "enum": "DirectionalLight.ShadowMode",
          "description": ""
        },
        {
          "name": "directional_shadow_normal_bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_split_1",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_split_2",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_split_3",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AcceptDialog": {
      "name": "AcceptDialog",
      "inherits": "WindowDialog",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Base dialog for user notification.",
      "description": "This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result.",
      "methods": [
        {
          "name": "add_button",
          "description": "Adds a button with label [i]text[/i] and a custom [i]action[/i] to the dialog and returns the created button. [i]action[/i] will be passed to the [custom_action] signal when pressed.\n\t\t\t\tIf [code]true[/code], [i]right[/i] will place the button to the right of any sibling buttons. Default value: [code]false[/code].",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "right",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "action",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "add_cancel",
          "description": "Adds a button with label [i]name[/i] and a cancel action to the dialog and returns the created button.",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_label",
          "description": "Return the label used for built-in text.",
          "return_type": "Label",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_ok",
          "description": "Return the OK Button.",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "register_text_enter",
          "description": "Registers a [LineEdit] in the dialog. When the enter key is pressed, the dialog will be accepted.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line_edit",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "confirmed",
          "description": "Emitted when the dialog is accepted.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "custom_action",
          "description": "Emitted when a custom button is pressed. See [method add_button].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "dialog_hide_on_ok",
          "type": "bool",
          "setter": "set_hide_on_ok",
          "getter": "get_hide_on_ok",
          "description": "If [code]true[/code] the dialog is hidden when accepted. Default value: [code]true[/code]."
        },
        {
          "name": "dialog_text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": "The text displayed by this dialog."
        }
      ],
      "theme_properties": []
    },
    "Basis": {
      "name": "Basis",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "3x3 matrix datatype.",
      "description": "3x3 matrix used for 3D rotation and scale. Contains 3 vector fields x,y and z as its columns, which can be interpreted as the local basis vectors of a transformation. Can also be accessed as array of 3D vectors. These vectors are orthogonal to each other, but are not necessarily normalized. Almost always used as orthogonal basis for a [Transform].\n\t\tFor such use, it is composed of a scaling and a rotation matrix, in that order (M = R.S).",
      "methods": [
        {
          "name": "Basis",
          "description": "Create a rotation matrix from the given quaternion.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Basis",
          "description": "Create a rotation matrix (in the YXZ convention: first Z, then X, and Y last) from the specified Euler angles, given in the vector format as (X-angle, Y-angle, Z-angle).",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Basis",
          "description": "Create a rotation matrix which rotates around the given axis by the specified angle, in radians. The axis must be a normalized vector.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Basis",
          "description": "Create a matrix from 3 axis vectors.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_axis",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "determinant",
          "description": "Return the determinant of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_euler",
          "description": "Assuming that the matrix is a proper rotation matrix (orthonormal matrix with determinant +1), return Euler angles (in the YXZ convention: first Z, then X, and Y last). Returned vector contains the rotation angles in the format (X-angle, Y-angle, Z-angle).",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_orthogonal_index",
          "description": "This function considers a discretization of rotations into 24 points on unit sphere, lying along the vectors (x,y,z) with each component being either -1,0 or 1, and returns the index of the point best representing the orientation of the object. It is mainly used by the grid map editor. For further details, refer to Godot source code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scale",
          "description": "Assuming that the matrix is the combination of a rotation and scaling, return the absolute value of scaling factors along each axis.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverse",
          "description": "Return the inverse of the matrix.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "orthonormalized",
          "description": "Return the orthonormalized version of the matrix (useful to call from time to time to avoid rounding error for orthogonal matrices). This performs a Gram-Schmidt orthonormalization on the basis of the matrix.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotated",
          "description": "Introduce an additional rotation around the given axis by phi (radians). Only relevant when the matrix is being used as a part of [Transform]. The axis must be a normalized vector.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scaled",
          "description": "Introduce an additional scaling specified by the given 3D scaling factor. Only relevant when the matrix is being used as a part of [Transform].",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tdotx",
          "description": "Transposed dot product with the x axis of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tdoty",
          "description": "Transposed dot product with the y axis of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tdotz",
          "description": "Transposed dot product with the z axis of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transposed",
          "description": "Return the transposed version of the matrix.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "xform",
          "description": "Return a vector transformed (multiplied) by the matrix.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_inv",
          "description": "Return a vector transformed (multiplied) by the transposed matrix. Note that this results in a multiplication by the inverse of the matrix only if it represents a rotation-reflection.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "x",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "The basis matrix's x vector."
        },
        {
          "name": "y",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "The basis matrix's y vector."
        },
        {
          "name": "z",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "The basis matrix's z vector."
        }
      ],
      "theme_properties": []
    },
    "EditorSceneImporter": {
      "name": "EditorSceneImporter",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "_get_extensions",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "_get_import_flags",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "_import_animation",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Animation",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "bake_fps",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_import_scene",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "bake_fps",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "import_animation_from_other_importer",
          "description": "",
          "return_type": "Animation",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "bake_fps",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "import_scene_from_other_importer",
          "description": "",
          "return_type": "Node",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "bake_fps",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "IMPORT_SCENE",
          "value": "1",
          "description": ""
        },
        {
          "name": "IMPORT_ANIMATION",
          "value": "2",
          "description": ""
        },
        {
          "name": "IMPORT_ANIMATION_DETECT_LOOP",
          "value": "4",
          "description": ""
        },
        {
          "name": "IMPORT_ANIMATION_OPTIMIZE",
          "value": "8",
          "description": ""
        },
        {
          "name": "IMPORT_ANIMATION_FORCE_ALL_TRACKS_IN_ALL_CLIPS",
          "value": "16",
          "description": ""
        },
        {
          "name": "IMPORT_ANIMATION_KEEP_VALUE_TRACKS",
          "value": "32",
          "description": ""
        },
        {
          "name": "IMPORT_GENERATE_TANGENT_ARRAYS",
          "value": "256",
          "description": ""
        },
        {
          "name": "IMPORT_FAIL_ON_MISSING_DEPENDENCIES",
          "value": "512",
          "description": ""
        },
        {
          "name": "IMPORT_MATERIALS_IN_INSTANCES",
          "value": "1024",
          "description": ""
        },
        {
          "name": "IMPORT_USE_COMPRESSION",
          "value": "2048",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Area": {
      "name": "Area",
      "inherits": "CollisionObject",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "General purpose area node for detection and 3D physics influence.",
      "description": "3D area that detects [CollisionObject] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).",
      "methods": [
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "Returns an individual bit on the layer mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Returns an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_overlapping_areas",
          "qualifiers": "const",
          "description": "Returns a list of intersecting [code]Area[/code]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_overlapping_bodies",
          "qualifiers": "const",
          "description": "Returns a list of intersecting [PhysicsBody]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "overlaps_area",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given area overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "overlaps_body",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given body overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "Set/clear individual bits on the layer mask. This simplifies editing this [code]Area[code]'s layers.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This simplifies editing which [code]Area[/code] layers this [code]Area[/code] scans.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "area_entered",
          "description": "Emitted when another area enters.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_exited",
          "description": "Emitted when another area exits.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_shape_entered",
          "description": "Emitted when another area enters, reporting which areas overlapped.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_shape_exited",
          "description": "Emitted when another area exits, reporting which areas were overlapping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_entered",
          "description": "Emitted when a [PhysicsBody] object enters.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exited",
          "description": "Emitted when a [PhysicsBody2D] object exits.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_entered",
          "description": "Emitted when a [PhysicsBody2D] object enters, reporting which shapes overlapped.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_exited",
          "description": "Emitted when a [PhysicsBody2D] object exits, reporting which shapes were overlapping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "enum": "SpaceOverride",
          "description": "This area does not affect gravity/damping."
        },
        {
          "name": "SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "enum": "SpaceOverride",
          "description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order)."
        },
        {
          "name": "SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "enum": "SpaceOverride",
          "description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order), ignoring any lower priority areas."
        },
        {
          "name": "SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "enum": "SpaceOverride",
          "description": "This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas."
        },
        {
          "name": "SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "enum": "SpaceOverride",
          "description": "This area replaces any gravity/damping calculated so far (in [code]priority[/code] order), but keeps calculating the rest of the areas."
        }
      ],
      "properties": [
        {
          "name": "angular_damp",
          "type": "float",
          "setter": "set_angular_damp",
          "getter": "get_angular_damp",
          "description": "The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping)."
        },
        {
          "name": "audio_bus_name",
          "type": "String",
          "setter": "set_audio_bus",
          "getter": "get_audio_bus",
          "description": "The name of the area's audio bus."
        },
        {
          "name": "audio_bus_override",
          "type": "bool",
          "setter": "set_audio_bus_override",
          "getter": "is_overriding_audio_bus",
          "description": "If [code]true[/code] the area's audio bus overrides the default audio bus. Default value: [code]false[/code]."
        },
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [code]collision_mask[/code]."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The physics layers this area scans to determine collision detection."
        },
        {
          "name": "gravity",
          "type": "float",
          "setter": "set_gravity",
          "getter": "get_gravity",
          "description": "The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction."
        },
        {
          "name": "gravity_distance_scale",
          "type": "float",
          "setter": "set_gravity_distance_scale",
          "getter": "get_gravity_distance_scale",
          "description": "The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance."
        },
        {
          "name": "gravity_point",
          "type": "bool",
          "setter": "set_gravity_is_point",
          "getter": "is_gravity_a_point",
          "description": "If [code]true[/code] gravity is calculated from a point (set via [code]gravity_vec[/code]). Also see [code]space_override[/code]. Default value: [code]false[/code]."
        },
        {
          "name": "gravity_vec",
          "type": "Vector3",
          "setter": "set_gravity_vector",
          "getter": "get_gravity_vector",
          "description": "The area's gravity vector (not normalized). If gravity is a point (see [method is_gravity_a_point]), this will be the point of attraction."
        },
        {
          "name": "linear_damp",
          "type": "float",
          "setter": "set_linear_damp",
          "getter": "get_linear_damp",
          "description": "The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping)."
        },
        {
          "name": "monitorable",
          "type": "bool",
          "setter": "set_monitorable",
          "getter": "is_monitorable",
          "description": "If [code]true[/code] other monitoring areas can detect this area. Default value: [code]true[/code]."
        },
        {
          "name": "monitoring",
          "type": "bool",
          "setter": "set_monitoring",
          "getter": "is_monitoring",
          "description": "If [code]true[/code] the area detects bodies or areas entering and exiting it. Default value: [code]true[/code]."
        },
        {
          "name": "priority",
          "type": "float",
          "setter": "set_priority",
          "getter": "get_priority",
          "description": "The area's priority. Higher priority areas are processed first. Default value: 0."
        },
        {
          "name": "reverb_bus_amount",
          "type": "float",
          "setter": "set_reverb_amount",
          "getter": "get_reverb_amount",
          "description": "The degree to which this area applies reverb to its associated audio. Ranges from [code]0[/code] to [code]1[/code] with [code]0.1[/code] precision."
        },
        {
          "name": "reverb_bus_enable",
          "type": "bool",
          "setter": "set_use_reverb_bus",
          "getter": "is_using_reverb_bus",
          "description": "If [code]true[/code] the area applies reverb to its associated audio."
        },
        {
          "name": "reverb_bus_name",
          "type": "String",
          "setter": "set_reverb_bus",
          "getter": "get_reverb_bus",
          "description": "The reverb bus name to use for this area's associated audio."
        },
        {
          "name": "reverb_bus_uniformity",
          "type": "float",
          "setter": "set_reverb_uniformity",
          "getter": "get_reverb_uniformity",
          "description": "The degree to which this area's reverb is a uniform effect. Ranges from [code]0[/code] to [code]1[/code] with [code]0.1[/code] precision."
        },
        {
          "name": "space_override",
          "type": "int",
          "setter": "set_space_override_mode",
          "getter": "get_space_override_mode",
          "enum": "Area.SpaceOverride",
          "description": "Override mode for gravity and damping calculations within this area. See the SPACE_OVERRIDE_* constants for values."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectBandPassFilter": {
      "name": "AudioEffectBandPassFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Adds a band pass filter to the Audio Bus.",
      "description": "Attenuates the frequencies inside of a range around the [member cutoff_hz] and cuts frequencies outside of this band.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "String": {
      "name": "String",
      "category": "Built-In Types",
      "version": "3.0-stable",
      "brief_description": "Built-in string class.",
      "description": "This is the built-in string class (and the one used by GDScript). It supports Unicode and provides all necessary means for string handling. Strings are reference counted and use a copy-on-write approach, so passing them around is cheap in resources.",
      "methods": [
        {
          "name": "String",
          "description": "Constructs a new String from the given [bool].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [int].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [float].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Vector2].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Rect2].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Vector3].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Transform2D].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Plane].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Quat].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [AABB].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "AABB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Basis].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Basis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Transform].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Color].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [NodePath].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [RID].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Dictionary].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [Array].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [PoolByteArray].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [PoolIntArray].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [PoolRealArray].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [PoolStringArray].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [PoolVector2Array].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [PoolVector3Array].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "Constructs a new String from the given [PoolColorArray].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "begins_with",
          "description": "Returns [code]true[/code] if the string begins with the given string.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bigrams",
          "description": "Returns the bigrams (pairs of consecutive letters) of this string.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "c_escape",
          "description": "Returns a copy of the string with special characters escaped using the C language standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "c_unescape",
          "description": "Returns a copy of the string with escaped characters replaced by their meanings according to the C language standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "capitalize",
          "description": "Changes the case of some letters. Replaces underscores with spaces, converts all letters to lowercase, then capitalizes first and every letter following the space character. For [code]capitalize camelCase mixed_with_underscores[/code] it will return [code]Capitalize Camelcase Mixed With Underscores[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "casecmp_to",
          "description": "Performs a case-sensitive comparison to another string. Returns [code]-1[/code] if less than, [code]+1[/code] if greater than, or [code]0[/code] if equal.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dedent",
          "description": "Removes indentation from string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "empty",
          "description": "Returns [code]true[/code] if the string is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "ends_with",
          "description": "Returns [code]true[/code] if the string ends with the given string.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase",
          "description": "Erases [code]chars[/code] characters from the string starting from [code]position[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "chars",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find",
          "description": "Finds the first occurrence of a substring. Returns the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "find_last",
          "description": "Finds the last occurrence of a substring. Returns the starting position of the substring or -1 if not found.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "findn",
          "description": "Finds the first occurrence of a substring, ignoring case. Returns the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "format",
          "description": "Formats the string by replacing all occurrences of [code]placeholder[/code] with [code]values[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "values",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "placeholder",
              "type": "String",
              "default_value": "{_}"
            }
          ]
        },
        {
          "name": "get_base_dir",
          "description": "If the string is a valid file path, returns the base directory name.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_basename",
          "description": "If the string is a valid file path, returns the full file path without the extension.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_extension",
          "description": "If the string is a valid file path, returns the extension.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_file",
          "description": "If the string is a valid file path, returns the filename.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "hash",
          "description": "Hashes the string and returns a 32-bit integer.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "hex_to_int",
          "description": "Converts a string containing a hexadecimal number into an integer.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "insert",
          "description": "Inserts a substring at a given position.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "what",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_abs_path",
          "description": "If the string is a path to a file or directory, returns [code]true[/code] if the path is absolute.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_rel_path",
          "description": "If the string is a path to a file or directory, returns [code]true[/code] if the path is relative.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_subsequence_of",
          "description": "Returns [code]true[/code] if this string is a subsequence of the given string.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_subsequence_ofi",
          "description": "Returns [code]true[/code] if this string is a subsequence of the given string, without considering case.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_valid_float",
          "description": "Returns [code]true[/code] if this string contains a valid float.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_html_color",
          "description": "Returns [code]true[/code] if this string contains a valid color in HTML notation.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_identifier",
          "description": "Returns [code]true[/code] if this string is a valid identifier. A valid identifier may contain only letters, digits and underscores (_) and the first character may not be a digit.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_integer",
          "description": "Returns [code]true[/code] if this string contains a valid integer.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_ip_address",
          "description": "Returns [code]true[/code] if this string contains a valid IP address.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "json_escape",
          "description": "Returns a copy of the string with special characters escaped using the JSON standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "left",
          "description": "Returns a number of characters from the left of the string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "length",
          "description": "Returns the string's amount of characters.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "match",
          "description": "Does a simple expression match, where '*' matches zero or more arbitrary characters and '?' matches any single character except '.'.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "expr",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "matchn",
          "description": "Does a simple case insensitive expression match, using ? and * wildcards (see [method match]).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "expr",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "md5_buffer",
          "description": "Returns the MD5 hash of the string as an array of bytes.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "md5_text",
          "description": "Returns the MD5 hash of the string as a string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "nocasecmp_to",
          "description": "Performs a case-insensitive comparison to another string. Returns [code]-1[/code] if less than, [code]+1[/code] if greater than, or [code]0[/code] if equal.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ord_at",
          "description": "Returns the character code at position [code]at[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "at",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pad_decimals",
          "description": "Formats a number to have an exact number of [code]digits[/code] after the decimal point.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "digits",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pad_zeros",
          "description": "Formats a number to have an exact number of [code]digits[/code] before the decimal point.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "digits",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "percent_decode",
          "description": "Decode a percent-encoded string. See [method percent_encode].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "percent_encode",
          "description": "Percent-encodes a string. Encodes parameters in a URL when sending a HTTP GET request (and bodies of form-urlencoded POST requests).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "plus_file",
          "description": "If the string is a path, this concatenates [code]file[/code] at the end of the string as a subpath. E.g. [code]\"this/is\".plus_file(\"path\") == \"this/is/path\"[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "replace",
          "description": "Replaces occurrences of a substring with the given one inside the string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "forwhat",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "replacen",
          "description": "Replaces occurrences of a substring with the given one inside the string. Ignores case.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "forwhat",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rfind",
          "description": "Performs a search for a substring, but starts from the end of the string instead of the beginning.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "rfindn",
          "description": "Performs a search for a substring, but starts from the end of the string instead of the beginning. Ignores case.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "right",
          "description": "Returns the right side of the string from a given position.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sha256_buffer",
          "description": "",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sha256_text",
          "description": "Returns the SHA-256 hash of the string as a string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "similarity",
          "description": "Returns the similarity index of the text compared to this string. 1 means totally similar and 0 means totally dissimilar.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "split",
          "description": "Splits the string by a divisor string and returns an array of the substrings. Example \"One,Two,Three\" will return [\"One\",\"Two\",\"Three\"] if split by \",\".\n\t\t\t\tIf [code]maxsplit[/code] is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements)",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "divisor",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "allow_empty",
              "type": "bool",
              "default_value": "True"
            },
            {
              "index": "2",
              "name": "maxsplit",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "split_floats",
          "description": "Splits the string in floats by using a divisor string and returns an array of the substrings. Example \"1,2.5,3\" will return [1,2.5,3] if split by \",\".",
          "return_type": "PoolRealArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "divisor",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "allow_empty",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "strip_edges",
          "description": "Returns a copy of the string stripped of any non-printable character at the beginning and the end. The optional arguments are used to toggle stripping on the left and right edges respectively.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "bool",
              "default_value": "True"
            },
            {
              "index": "1",
              "name": "right",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "substr",
          "description": "Returns part of the string from the position [code]from[/code] with length [code]len[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "len",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_ascii",
          "description": "Converts the String (which is a character array) to [PoolByteArray] (which is an array of bytes). The conversion is sped up in comparison to to_utf8() with the assumption that all the characters the String contains are only ASCII characters.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_float",
          "description": "Converts a string containing a decimal number into a [code]float[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_int",
          "description": "Converts a string containing an integer number into an [code]int[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_lower",
          "description": "Returns the string converted to lowercase.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_upper",
          "description": "Returns the string converted to uppercase.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_utf8",
          "description": "Converts the String (which is an array of characters) to [PoolByteArray] (which is an array of bytes). The conversion is a bit slower than to_ascii(), but supports all UTF-8 characters. Therefore, you should prefer this function over to_ascii().",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "xml_escape",
          "description": "Returns a copy of the string with special characters escaped using the XML standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "xml_unescape",
          "description": "Returns a copy of the string with escaped characters replaced by their meanings according to the XML standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "TextureProgress": {
      "name": "TextureProgress",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Texture-based progress bar. Useful for loading screens and life or stamina bars.",
      "description": "TextureProgress works like [ProgressBar] but it uses up to 3 textures instead of Godot's [Theme] resource. Works horizontally, vertically, and radially.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "FILL_LEFT_TO_RIGHT",
          "value": "0",
          "enum": "FillMode",
          "description": "The [member texture_progress] fills from left to right."
        },
        {
          "name": "FILL_RIGHT_TO_LEFT",
          "value": "1",
          "enum": "FillMode",
          "description": "The [member texture_progress] fills from right to left."
        },
        {
          "name": "FILL_TOP_TO_BOTTOM",
          "value": "2",
          "enum": "FillMode",
          "description": "The [member texture_progress] fills from top to bototm."
        },
        {
          "name": "FILL_BOTTOM_TO_TOP",
          "value": "3",
          "enum": "FillMode",
          "description": "The [member texture_progress] fills from bottom to top."
        },
        {
          "name": "FILL_CLOCKWISE",
          "value": "4",
          "enum": "FillMode",
          "description": "Turns the node into a radial bar. The [member texture_progress] fills clockwise. See [member radial_center_offset], [member radial_initial_angle] and [member radial_fill_degrees] to refine its behavior."
        },
        {
          "name": "FILL_COUNTER_CLOCKWISE",
          "value": "5",
          "enum": "FillMode",
          "description": "Turns the node into a radial bar. The [member texture_progress] fills counter-clockwise. See [member radial_center_offset], [member radial_initial_angle] and [member radial_fill_degrees] to refine its behavior."
        }
      ],
      "properties": [
        {
          "name": "fill_mode",
          "type": "int",
          "setter": "set_fill_mode",
          "getter": "get_fill_mode",
          "description": "The fill direction. Uses FILL_* constants."
        },
        {
          "name": "nine_patch_stretch",
          "type": "bool",
          "setter": "set_nine_patch_stretch",
          "getter": "get_nine_patch_stretch",
          "description": "If [code]true[/code] Godot treats the bar's textures like [NinePatchRect]. Use [code]stretch_margin_*[/code], like [member stretch_margin_bottom], to set up the nine patch's 3x3 grid. Default value: [code]false[/code]."
        },
        {
          "name": "radial_center_offset",
          "type": "Vector2",
          "setter": "set_radial_center_offset",
          "getter": "get_radial_center_offset",
          "description": "Offsets [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]."
        },
        {
          "name": "radial_fill_degrees",
          "type": "float",
          "setter": "set_fill_degrees",
          "getter": "get_fill_degrees",
          "description": "Upper limit for the fill of [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]. When the node's [code]value[/code] is equal to its [code]max_value[/code], the texture fills up to this angle.\n\t\t\tSee [member Range.value], [member Range.max_value]."
        },
        {
          "name": "radial_initial_angle",
          "type": "float",
          "setter": "set_radial_initial_angle",
          "getter": "get_radial_initial_angle",
          "description": "Starting angle for the fill of [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]. When the node's [code]value[/code] is equal to its [code]min_value[/code], the texture doesn't show up at all. When the [code]value[/code] increases, the texture fills and tends towards [member radial_fill_degrees]."
        },
        {
          "name": "stretch_margin_bottom",
          "type": "int",
          "setter": "set_stretch_margin",
          "getter": "get_stretch_margin",
          "description": "The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders."
        },
        {
          "name": "stretch_margin_left",
          "type": "int",
          "setter": "set_stretch_margin",
          "getter": "get_stretch_margin",
          "description": "The width of the 9-patch's left column."
        },
        {
          "name": "stretch_margin_right",
          "type": "int",
          "setter": "set_stretch_margin",
          "getter": "get_stretch_margin",
          "description": "The width of the 9-patch's right column."
        },
        {
          "name": "stretch_margin_top",
          "type": "int",
          "setter": "set_stretch_margin",
          "getter": "get_stretch_margin",
          "description": "The height of the 9-patch's top row."
        },
        {
          "name": "texture_over",
          "type": "Texture",
          "setter": "set_over_texture",
          "getter": "get_over_texture",
          "description": "[Texture] that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of [member texture_progress]."
        },
        {
          "name": "texture_progress",
          "type": "Texture",
          "setter": "set_progress_texture",
          "getter": "get_progress_texture",
          "description": "[Texture] that clips based on the node's [code]value[/code] and [member fill_mode]. As [code]value[/code] increased, the texture fills up. It shows entirely when [code]value[/code] reaches [code]max_value[/code]. It doesn't show at all if [code]value[/code] is equal to [code]min_value[/code].\n\t\t\tThe [code]value[/code] property comes from [Range]. See [member Range.value], [member Range.min_value], [member Range.max_value]."
        },
        {
          "name": "texture_under",
          "type": "Texture",
          "setter": "set_under_texture",
          "getter": "get_under_texture",
          "description": "[Texture] that draws under the progress bar. The bar's background."
        }
      ],
      "theme_properties": []
    },
    "FuncRef": {
      "name": "FuncRef",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Reference to a function in an object.",
      "description": "In GDScript, functions are not [i]first-class objects[/i]. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments.\n\t\tHowever, by creating a [code]FuncRef[/code] using the [method @GDScript.funcref] function, a reference to a function in a given object can be created, passed around and called.",
      "methods": [
        {
          "name": "call_func",
          "qualifiers": "vararg",
          "description": "Calls the referenced function previously set by [method set_function] or [method @GDScript.funcref].",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "set_function",
          "description": "The name of the referenced function to call on the object, without parentheses or any parameters.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance",
          "description": "The object containing the referenced function. This object must be of a type actually inheriting from [Object], not a built-in type such as [int], [Vector2] or [Dictionary].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PacketPeerStream": {
      "name": "PacketPeerStream",
      "inherits": "PacketPeer",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Wrapper to use a PacketPeer over a StreamPeer.",
      "description": "PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "input_buffer_max_size",
          "type": "int",
          "setter": "set_input_buffer_max_size",
          "getter": "get_input_buffer_max_size",
          "description": ""
        },
        {
          "name": "output_buffer_max_size",
          "type": "int",
          "setter": "set_output_buffer_max_size",
          "getter": "get_output_buffer_max_size",
          "description": ""
        },
        {
          "name": "stream_peer",
          "type": "StreamPeer",
          "setter": "set_stream_peer",
          "getter": "get_stream_peer",
          "description": "The wrapped [StreamPeer] object."
        }
      ],
      "theme_properties": []
    },
    "DynamicFontData": {
      "name": "DynamicFontData",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Used with [DynamicFont] to describe the location of a font file.",
      "description": "Used with [DynamicFont] to describe the location of a vector font file for dynamic rendering at runtime.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "font_path",
          "type": "String",
          "setter": "set_font_path",
          "getter": "get_font_path",
          "description": "The path to the vector font file."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptEditor": {
      "name": "VisualScriptEditor",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_custom_node",
          "description": "Add a custom Visual Script node to the editor. It'll be placed under \"Custom Nodes\" with the [code]category[/code] as the parameter.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "category",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "script",
              "type": "Script",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_custom_node",
          "description": "Remove a custom Visual Script node from the editor. Custom nodes already placed on scripts won't be removed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "category",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "custom_nodes_updated",
          "description": "Emitted when a custom Visual Script node is added or removed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RegExMatch": {
      "name": "RegExMatch",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Contains the results of a regex search.",
      "description": "Contains the results of a single regex match returned by [method RegEx.search] and [method RegEx.search_all]. It can be used to find the position and range of the match and its capturing groups, and it can extract its sub-string for you.",
      "methods": [
        {
          "name": "get_end",
          "qualifiers": "const",
          "description": "Returns the end position of the match within the source string. The end position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.\n\t\t\t\tReturns -1 if the group did not match or doesn't exist.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "Variant",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_group_count",
          "qualifiers": "const",
          "description": "Returns the number of capturing groups.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_start",
          "qualifiers": "const",
          "description": "Returns the starting position of the match within the source string. The starting position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.\n\t\t\t\tReturns -1 if the group did not match or doesn't exist.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "Variant",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_string",
          "qualifiers": "const",
          "description": "Returns the substring of the match from the source string. Capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.\n\t\t\t\tReturns an empty string if the group did not match or doesn't exist.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "Variant",
              "default_value": "0"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "names",
          "type": "Dictionary",
          "setter": "",
          "getter": "get_names",
          "description": "A dictionary of named groups and its corresponding group number. Only groups with that were matched are included. If multiple groups have the same name, that name would refer to the first matching one."
        },
        {
          "name": "strings",
          "type": "Array",
          "setter": "",
          "getter": "get_strings",
          "description": "An [Array] of the match and its capturing groups."
        },
        {
          "name": "subject",
          "type": "String",
          "setter": "",
          "getter": "get_subject",
          "description": "The source string used with the search pattern to find this matching result."
        }
      ],
      "theme_properties": []
    },
    "SpotLight": {
      "name": "SpotLight",
      "inherits": "Light",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "Spotlight [Light], such as a reflector spotlight or a lantern.",
      "description": "A SpotLight light is a type of [Light] node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light]. TODO: Image of a spotlight.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "spot_angle",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "spot_angle_attenuation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "spot_attenuation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "spot_range",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptBasicTypeConstant": {
      "name": "VisualScriptBasicTypeConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "A Visual Script node representing a constant from the base types.",
      "description": "A Visual Script node representing a constant from base types, such as [Vector3.AXIS_X].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "basic_type",
          "type": "int",
          "setter": "set_basic_type",
          "getter": "get_basic_type",
          "enum": "Variant.Type",
          "description": "The type to get the constant from."
        },
        {
          "name": "constant",
          "type": "String",
          "setter": "set_basic_type_constant",
          "getter": "get_basic_type_constant",
          "description": "The name of the constant to return."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptPropertyGet": {
      "name": "VisualScriptPropertyGet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0-stable",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "CALL_MODE_SELF",
          "value": "0",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_NODE_PATH",
          "value": "1",
          "enum": "CallMode",
          "description": ""
        },
        {
          "name": "CALL_MODE_INSTANCE",
          "value": "2",
          "enum": "CallMode",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "base_script",
          "type": "String",
          "setter": "set_base_script",
          "getter": "get_base_script",
          "description": ""
        },
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        },
        {
          "name": "basic_type",
          "type": "int",
          "setter": "set_basic_type",
          "getter": "get_basic_type",
          "enum": "Variant.Type",
          "description": ""
        },
        {
          "name": "index",
          "type": "String",
          "setter": "set_index",
          "getter": "get_index",
          "description": ""
        },
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_base_path",
          "getter": "get_base_path",
          "description": ""
        },
        {
          "name": "property",
          "type": "String",
          "setter": "set_property",
          "getter": "get_property",
          "description": ""
        },
        {
          "name": "set_mode",
          "type": "int",
          "setter": "set_call_mode",
          "getter": "get_call_mode",
          "enum": "VisualScriptPropertyGet.CallMode",
          "description": ""
        }
      ],
      "theme_properties": []
    }
  },
  "version": "3.0.alpha"
}
