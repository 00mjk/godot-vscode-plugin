{
  "classes": {
    "Popup": {
      "name": "Popup",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base container control for popups and dialogs.",
      "description": "Popup is a base [Control] used to show dialogs and popups. It's a subwindow and modal by default (see [Control]) and has helpers for custom popup behavior.",
      "methods": [
        {
          "name": "is_exclusive",
          "qualifiers": "const",
          "description": "Returns whether the popup will hide other popups when shown on the screen.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "popup",
          "description": "Popup (show the control in modal form).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounds",
              "type": "Rect2",
              "default_value": "Rect2( 0, 0, 0, 0 )"
            }
          ]
        },
        {
          "name": "popup_centered",
          "description": "Popup (show the control in modal form) in the center of the screen, at the current size, or at a size determined by \"size\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "popup_centered_minsize",
          "description": "Popup (show the control in modal form) in the center of the screen, ensuring the size is never smaller than [code]minsize[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "minsize",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "popup_centered_ratio",
          "description": "Popup (show the control in modal form) in the center of the screen, scaled at a ratio of size of the screen.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": "0.75"
            }
          ]
        },
        {
          "name": "set_exclusive",
          "description": "Make the popup hide other popups when shown on the screen.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "about_to_show",
          "description": "This signal is emitted when a popup is about to be shown. (often used in [PopupMenu] for clearing the list of options and creating a new one according to the current context).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "popup_hide",
          "description": "This signal is emitted when a popup is hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_POST_POPUP",
          "value": "80",
          "enum": "",
          "description": "Notification sent right after the popup is shown."
        },
        {
          "name": "NOTIFICATION_POPUP_HIDE",
          "value": "81",
          "enum": "",
          "description": "Notification sent right after the popup is hidden."
        }
      ],
      "properties": [
        {
          "name": "popup_exclusive",
          "type": "bool",
          "setter": "set_exclusive",
          "getter": "is_exclusive",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "RectangleShape2D": {
      "name": "RectangleShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Rectangle shape for 2D collisions.",
      "description": "Rectangle shape for 2D collisions. This shape is useful for modeling box-like 2D objects.",
      "methods": [
        {
          "name": "get_extents",
          "qualifiers": "const",
          "description": "Return the half extents, the actual width and height of this shape is twice the half extents.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_extents",
          "description": "Set the half extents, the actual width and height of this shape is twice the half extents.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "extents",
          "type": "Vector2",
          "setter": "set_extents",
          "getter": "get_extents",
          "description": "The rectangle's half extents. The width and height of this shape is twice the half extents."
        }
      ],
      "theme_properties": []
    },
    "Mutex": {
      "name": "Mutex",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A synchronization Mutex.",
      "description": "A synchronization Mutex. Element used in multi-threadding. Basically a binary [Semaphore]. Guarantees that only one thread has this lock, can be used to protect a critical section.",
      "methods": [
        {
          "name": "lock",
          "description": "Lock this [Mutex], blocks until it is unlocked by the current owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "try_lock",
          "description": "Try locking this [Mutex], does not block. Returns [OK] on success else [ERR_BUSY].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unlock",
          "description": "Unlock this [Mutex], leaving it to others threads.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PlaneMesh": {
      "name": "PlaneMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class representing a planar [PrimitiveMesh].",
      "description": "Class representing a planar [PrimitiveMesh]. This flat mesh does not have a thickness.",
      "methods": [
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_subdivide_depth",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_subdivide_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subdivide_depth",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "subdivide",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subdivide_width",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "subdivide",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "size",
          "type": "Vector2",
          "setter": "set_size",
          "getter": "get_size",
          "description": "Size of the generated plane. Defaults to (2.0, 2.0)."
        },
        {
          "name": "subdivide_depth",
          "type": "int",
          "setter": "set_subdivide_depth",
          "getter": "get_subdivide_depth",
          "description": "Number of subdivision along the z-axis. Defaults to 0."
        },
        {
          "name": "subdivide_width",
          "type": "int",
          "setter": "set_subdivide_width",
          "getter": "get_subdivide_width",
          "description": "Number of subdivision along the x-axis. Defaults to 0."
        }
      ],
      "theme_properties": []
    },
    "PrismMesh": {
      "name": "PrismMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class representing a prism-shaped [PrimitiveMesh].",
      "description": "Class representing a prism-shaped [PrimitiveMesh].",
      "methods": [
        {
          "name": "get_left_to_right",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_subdivide_depth",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_subdivide_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_subdivide_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_left_to_right",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left_to_right",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subdivide_depth",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subdivide_height",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subdivide_width",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "left_to_right",
          "type": "float",
          "setter": "set_left_to_right",
          "getter": "get_left_to_right",
          "description": "Displacement of of the upper edge along the x-axis. 0.0 positions edge straight above the bottome left edge. Defaults to 0.5 (positioned on the midpoint)."
        },
        {
          "name": "size",
          "type": "Vector3",
          "setter": "set_size",
          "getter": "get_size",
          "description": "Size of the prism. Defaults to (2.0, 2.0, 2.0)."
        },
        {
          "name": "subdivide_depth",
          "type": "int",
          "setter": "set_subdivide_depth",
          "getter": "get_subdivide_depth",
          "description": "Number of added edge loops along the z-axis. Defaults to 0."
        },
        {
          "name": "subdivide_height",
          "type": "int",
          "setter": "set_subdivide_height",
          "getter": "get_subdivide_height",
          "description": "Number of added edge loops along the y-axis. Defaults to 0."
        },
        {
          "name": "subdivide_width",
          "type": "int",
          "setter": "set_subdivide_width",
          "getter": "get_subdivide_width",
          "description": "Number of added edge loops along the x-axis. Defaults to 0."
        }
      ],
      "theme_properties": []
    },
    "Material": {
      "name": "Material",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Abstract base [Resource] for coloring and shading geometry.",
      "description": "Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.",
      "methods": [
        {
          "name": "get_next_pass",
          "qualifiers": "const",
          "description": "",
          "return_type": "Material",
          "arguments": []
        },
        {
          "name": "get_render_priority",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_next_pass",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "next_pass",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_render_priority",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "priority",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "RENDER_PRIORITY_MAX",
          "value": "127",
          "enum": "",
          "description": ""
        },
        {
          "name": "RENDER_PRIORITY_MIN",
          "value": "-128",
          "enum": "",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "next_pass",
          "type": "Material",
          "setter": "set_next_pass",
          "getter": "get_next_pass",
          "description": ""
        },
        {
          "name": "render_priority",
          "type": "int",
          "setter": "set_render_priority",
          "getter": "get_render_priority",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Environment": {
      "name": "Environment",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Resource for environment nodes (like [WorldEnvironment]) that define multiple rendering options.",
      "description": "Resource for environment nodes (like [WorldEnvironment]) that define multiple environment operations (such as background [Sky] or [Color], ambient light, fog, depth-of-field...).\tThese parameters affect the final render of the scene. The order of these operations is:\n \t\t- DOF Blur\n\t\t- Motion Blur\n\t\t- Bloom\n\t\t- Tonemap (auto exposure)\n\t\t- Adjustments",
      "methods": [
        {
          "name": "get_adjustment_brightness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_adjustment_color_correction",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_adjustment_contrast",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_adjustment_saturation",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ambient_light_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_ambient_light_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ambient_light_sky_contribution",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_background",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bg_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_bg_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_canvas_max_layer",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_dof_blur_far_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_dof_blur_far_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_dof_blur_far_quality",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_dof_blur_far_transition",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_dof_blur_near_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_dof_blur_near_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_dof_blur_near_quality",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_dof_blur_near_transition",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fog_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_fog_depth_begin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fog_depth_curve",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fog_height_curve",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fog_height_max",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fog_height_min",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fog_sun_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fog_sun_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_fog_transmit_curve",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_glow_blend_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_glow_bloom",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_glow_hdr_bleed_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_glow_hdr_bleed_threshold",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_glow_intensity",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_glow_strength",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sky",
          "qualifiers": "const",
          "description": "",
          "return_type": "Sky",
          "arguments": []
        },
        {
          "name": "get_sky_custom_fov",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssao_bias",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssao_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_ssao_direct_light_affect",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssao_intensity",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssao_intensity2",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssao_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssao_radius2",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssr_depth_tolerance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssr_fade_in",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssr_fade_out",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ssr_max_steps",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tonemap_auto_exposure",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_tonemap_auto_exposure_grey",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tonemap_auto_exposure_max",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tonemap_auto_exposure_min",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tonemap_auto_exposure_speed",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tonemap_exposure",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tonemap_white",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tonemapper",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_adjustment_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_dof_blur_far_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_dof_blur_near_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_fog_depth_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_fog_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_fog_height_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_fog_transmit_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_glow_bicubic_upscale_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_glow_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_glow_level_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_ssao_blur_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_ssao_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_ssr_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_ssr_rough",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_adjustment_brightness",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "brightness",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_adjustment_color_correction",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color_correction",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_adjustment_contrast",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "contrast",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_adjustment_enable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_adjustment_saturation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "saturation",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ambient_light_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ambient_light_energy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ambient_light_sky_contribution",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_background",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Environment.BGMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bg_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bg_energy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_canvas_max_layer",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_far_amount",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_far_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_far_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_far_quality",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "int",
              "enum": "Environment.DOFBlurQuality",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_far_transition",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_near_amount",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_near_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_near_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_near_quality",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "level",
              "type": "int",
              "enum": "Environment.DOFBlurQuality",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dof_blur_near_transition",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_depth_begin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_depth_curve",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_depth_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_height_curve",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_height_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_height_max",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_height_min",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_sun_amount",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_sun_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_transmit_curve",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fog_transmit_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_glow_bicubic_upscale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_glow_blend_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Environment.GlowBlendMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_glow_bloom",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_glow_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_glow_hdr_bleed_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_glow_hdr_bleed_threshold",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "threshold",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_glow_intensity",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_glow_level",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_glow_strength",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "strength",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sky",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sky",
              "type": "Sky",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sky_custom_fov",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssao_bias",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bias",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssao_blur",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssao_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssao_direct_light_affect",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssao_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssao_intensity",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssao_intensity2",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssao_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssao_radius2",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssr_depth_tolerance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "depth_tolerance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssr_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssr_fade_in",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fade_in",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssr_fade_out",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fade_out",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssr_max_steps",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max_steps",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ssr_rough",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rough",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tonemap_auto_exposure",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "auto_exposure",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tonemap_auto_exposure_grey",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exposure_grey",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tonemap_auto_exposure_max",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exposure_max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tonemap_auto_exposure_min",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exposure_min",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tonemap_auto_exposure_speed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exposure_speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tonemap_exposure",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exposure",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tonemap_white",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "white",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tonemapper",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Environment.ToneMapper",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "BG_KEEP",
          "value": "5",
          "description": "Keep on screen every pixel drawn in the background."
        },
        {
          "name": "BG_CLEAR_COLOR",
          "value": "0",
          "description": "Clear the background using the project's clear color."
        },
        {
          "name": "BG_COLOR",
          "value": "1",
          "description": "Clear the background using a custom clear color."
        },
        {
          "name": "BG_SKY",
          "value": "2",
          "description": "Display a user-defined sky in the background."
        },
        {
          "name": "BG_COLOR_SKY",
          "value": "3",
          "description": "Clear the background using a custom clear color and allows defining a sky for shading and reflection."
        },
        {
          "name": "BG_CANVAS",
          "value": "4",
          "description": "Display a [CanvasLayer] in the background."
        },
        {
          "name": "BG_MAX",
          "value": "6",
          "description": "Helper constant keeping track of the enum's size, has no direct usage in API calls."
        },
        {
          "name": "GLOW_BLEND_MODE_ADDITIVE",
          "value": "0",
          "description": "Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources."
        },
        {
          "name": "GLOW_BLEND_MODE_SCREEN",
          "value": "1",
          "description": "Screen glow blending mode. Increases brightness, used frequently with bloom."
        },
        {
          "name": "GLOW_BLEND_MODE_SOFTLIGHT",
          "value": "2",
          "description": "Softlight glow blending mode. Modifies contrast, exposes shadows and highlights, vivid bloom."
        },
        {
          "name": "GLOW_BLEND_MODE_REPLACE",
          "value": "3",
          "description": "Replace glow blending mode. Replaces all pixels' color by the glow value."
        },
        {
          "name": "TONE_MAPPER_LINEAR",
          "value": "0",
          "description": "Linear tonemapper operator. Reads the linear data and performs an exposure adjustment."
        },
        {
          "name": "TONE_MAPPER_REINHARDT",
          "value": "1",
          "description": "Reinhardt tonemapper operator. Performs a variation on rendered pixels' colors by this formula: color = color / (1 + color)."
        },
        {
          "name": "TONE_MAPPER_FILMIC",
          "value": "2",
          "description": "Filmic tonemapper operator."
        },
        {
          "name": "TONE_MAPPER_ACES",
          "value": "3",
          "description": "Academy Color Encoding System tonemapper operator."
        },
        {
          "name": "DOF_BLUR_QUALITY_LOW",
          "value": "0",
          "description": "Low depth-of-field blur quality."
        },
        {
          "name": "DOF_BLUR_QUALITY_MEDIUM",
          "value": "1",
          "description": "Medium depth-of-field blur quality."
        },
        {
          "name": "DOF_BLUR_QUALITY_HIGH",
          "value": "2",
          "description": "High depth-of-field blur quality."
        }
      ],
      "properties": [
        {
          "name": "adjustment_brightness",
          "type": "float",
          "setter": "set_adjustment_brightness",
          "getter": "get_adjustment_brightness",
          "description": "Global brightness value of the rendered scene (default value is 1)."
        },
        {
          "name": "adjustment_color_correction",
          "type": "Texture",
          "setter": "set_adjustment_color_correction",
          "getter": "get_adjustment_color_correction",
          "description": "Applies the provided [Texture] resource to affect the global color aspect of the rendered scene."
        },
        {
          "name": "adjustment_contrast",
          "type": "float",
          "setter": "set_adjustment_contrast",
          "getter": "get_adjustment_contrast",
          "description": "Global contrast value of the rendered scene (default value is 1)."
        },
        {
          "name": "adjustment_enabled",
          "type": "bool",
          "setter": "set_adjustment_enable",
          "getter": "is_adjustment_enabled",
          "description": "Enables the adjustment_* options provided by this resource. If false, adjustments modifications will have no effect on the rendered scene."
        },
        {
          "name": "adjustment_saturation",
          "type": "float",
          "setter": "set_adjustment_saturation",
          "getter": "get_adjustment_saturation",
          "description": "Global color saturation value of the rendered scene (default value is 1)."
        },
        {
          "name": "ambient_light_color",
          "type": "Color",
          "setter": "set_ambient_light_color",
          "getter": "get_ambient_light_color",
          "description": "[Color] of the ambient light."
        },
        {
          "name": "ambient_light_energy",
          "type": "float",
          "setter": "set_ambient_light_energy",
          "getter": "get_ambient_light_energy",
          "description": "Energy of the ambient light. The higher the value, the stronger the light."
        },
        {
          "name": "ambient_light_sky_contribution",
          "type": "float",
          "setter": "set_ambient_light_sky_contribution",
          "getter": "get_ambient_light_sky_contribution",
          "description": "Defines the amount of light that the sky brings on the scene. A value of 0 means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of 1 means that all the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene."
        },
        {
          "name": "auto_exposure_enabled",
          "type": "bool",
          "setter": "set_tonemap_auto_exposure",
          "getter": "get_tonemap_auto_exposure",
          "description": "Enables the tonemapping auto exposure mode of the scene renderer. If activated, the renderer will automatically determine the exposure setting to adapt to the illumination of the scene and the observed light."
        },
        {
          "name": "auto_exposure_max_luma",
          "type": "float",
          "setter": "set_tonemap_auto_exposure_max",
          "getter": "get_tonemap_auto_exposure_max",
          "description": "Maximum luminance value for the auto exposure."
        },
        {
          "name": "auto_exposure_min_luma",
          "type": "float",
          "setter": "set_tonemap_auto_exposure_min",
          "getter": "get_tonemap_auto_exposure_min",
          "description": "Minimum luminance value for the auto exposure."
        },
        {
          "name": "auto_exposure_scale",
          "type": "float",
          "setter": "set_tonemap_auto_exposure_grey",
          "getter": "get_tonemap_auto_exposure_grey",
          "description": "Scale of the auto exposure effect. Affects the intensity of auto exposure."
        },
        {
          "name": "auto_exposure_speed",
          "type": "float",
          "setter": "set_tonemap_auto_exposure_speed",
          "getter": "get_tonemap_auto_exposure_speed",
          "description": "Speed of the auto exposure effect. Affects the time needed for the camera to perform auto exposure."
        },
        {
          "name": "background_canvas_max_layer",
          "type": "int",
          "setter": "set_canvas_max_layer",
          "getter": "get_canvas_max_layer",
          "description": "Maximum layer id (if using Layer background mode)."
        },
        {
          "name": "background_color",
          "type": "Color",
          "setter": "set_bg_color",
          "getter": "get_bg_color",
          "description": "Color displayed for clear areas of the scene (if using Custom color or Color+Sky background modes)."
        },
        {
          "name": "background_energy",
          "type": "float",
          "setter": "set_bg_energy",
          "getter": "get_bg_energy",
          "description": "Power of light emitted by the background."
        },
        {
          "name": "background_mode",
          "type": "int",
          "setter": "set_background",
          "getter": "get_background",
          "enum": "Environment.BGMode",
          "description": "Defines the mode of background."
        },
        {
          "name": "background_sky",
          "type": "Sky",
          "setter": "set_sky",
          "getter": "get_sky",
          "description": "[Sky] resource defined as background."
        },
        {
          "name": "background_sky_custom_fov",
          "type": "float",
          "setter": "set_sky_custom_fov",
          "getter": "get_sky_custom_fov",
          "description": "[Sky] resource's custom field of view."
        },
        {
          "name": "dof_blur_far_amount",
          "type": "float",
          "setter": "set_dof_blur_far_amount",
          "getter": "get_dof_blur_far_amount",
          "description": "Amount of far blur."
        },
        {
          "name": "dof_blur_far_distance",
          "type": "float",
          "setter": "set_dof_blur_far_distance",
          "getter": "get_dof_blur_far_distance",
          "description": "Distance from the camera where the far blur effect affects the rendering."
        },
        {
          "name": "dof_blur_far_enabled",
          "type": "bool",
          "setter": "set_dof_blur_far_enabled",
          "getter": "is_dof_blur_far_enabled",
          "description": "Enables the far blur effect."
        },
        {
          "name": "dof_blur_far_quality",
          "type": "int",
          "setter": "set_dof_blur_far_quality",
          "getter": "get_dof_blur_far_quality",
          "enum": "Environment.DOFBlurQuality",
          "description": "Quality of the far blur quality."
        },
        {
          "name": "dof_blur_far_transition",
          "type": "float",
          "setter": "set_dof_blur_far_transition",
          "getter": "get_dof_blur_far_transition",
          "description": "Transition between no-blur area and far blur."
        },
        {
          "name": "dof_blur_near_amount",
          "type": "float",
          "setter": "set_dof_blur_near_amount",
          "getter": "get_dof_blur_near_amount",
          "description": "Amount of near blur."
        },
        {
          "name": "dof_blur_near_distance",
          "type": "float",
          "setter": "set_dof_blur_near_distance",
          "getter": "get_dof_blur_near_distance",
          "description": "Distance from the camera where the near blur effect affects the rendering."
        },
        {
          "name": "dof_blur_near_enabled",
          "type": "bool",
          "setter": "set_dof_blur_near_enabled",
          "getter": "is_dof_blur_near_enabled",
          "description": "Enables the near blur effect."
        },
        {
          "name": "dof_blur_near_quality",
          "type": "int",
          "setter": "set_dof_blur_near_quality",
          "getter": "get_dof_blur_near_quality",
          "enum": "Environment.DOFBlurQuality",
          "description": "Quality of the near blur quality."
        },
        {
          "name": "dof_blur_near_transition",
          "type": "float",
          "setter": "set_dof_blur_near_transition",
          "getter": "get_dof_blur_near_transition",
          "description": "Transition between near blur and no-blur area."
        },
        {
          "name": "fog_color",
          "type": "Color",
          "setter": "set_fog_color",
          "getter": "get_fog_color",
          "description": "Fog's [Color]."
        },
        {
          "name": "fog_depth_begin",
          "type": "float",
          "setter": "set_fog_depth_begin",
          "getter": "get_fog_depth_begin",
          "description": "Fog's depth starting distance from the camera."
        },
        {
          "name": "fog_depth_curve",
          "type": "float",
          "setter": "set_fog_depth_curve",
          "getter": "get_fog_depth_curve",
          "description": "Value defining the fog depth intensity."
        },
        {
          "name": "fog_depth_enabled",
          "type": "bool",
          "setter": "set_fog_depth_enabled",
          "getter": "is_fog_depth_enabled",
          "description": "Enables the fog depth."
        },
        {
          "name": "fog_enabled",
          "type": "bool",
          "setter": "set_fog_enabled",
          "getter": "is_fog_enabled",
          "description": "Enables the fog. Needs fog_height_enabled and/or for_depth_enabled to actually display fog."
        },
        {
          "name": "fog_height_curve",
          "type": "float",
          "setter": "set_fog_height_curve",
          "getter": "get_fog_height_curve",
          "description": "Value defining the fog height intensity."
        },
        {
          "name": "fog_height_enabled",
          "type": "bool",
          "setter": "set_fog_height_enabled",
          "getter": "is_fog_height_enabled",
          "description": "Enables the fog height."
        },
        {
          "name": "fog_height_max",
          "type": "float",
          "setter": "set_fog_height_max",
          "getter": "get_fog_height_max",
          "description": "Maximum height of fog."
        },
        {
          "name": "fog_height_min",
          "type": "float",
          "setter": "set_fog_height_min",
          "getter": "get_fog_height_min",
          "description": "Minimum height of fog."
        },
        {
          "name": "fog_sun_amount",
          "type": "float",
          "setter": "set_fog_sun_amount",
          "getter": "get_fog_sun_amount",
          "description": "Amount of sun that affects the fog rendering."
        },
        {
          "name": "fog_sun_color",
          "type": "Color",
          "setter": "set_fog_sun_color",
          "getter": "get_fog_sun_color",
          "description": "Sun [Color]."
        },
        {
          "name": "fog_transmit_curve",
          "type": "float",
          "setter": "set_fog_transmit_curve",
          "getter": "get_fog_transmit_curve",
          "description": "Amount of light that the fog transmits."
        },
        {
          "name": "fog_transmit_enabled",
          "type": "bool",
          "setter": "set_fog_transmit_enabled",
          "getter": "is_fog_transmit_enabled",
          "description": "Enables fog's light transmission. If enabled, lets reflections light to be transmitted by the fog."
        },
        {
          "name": "glow_bicubic_upscale",
          "type": "bool",
          "setter": "set_glow_bicubic_upscale",
          "getter": "is_glow_bicubic_upscale_enabled",
          "description": ""
        },
        {
          "name": "glow_blend_mode",
          "type": "int",
          "setter": "set_glow_blend_mode",
          "getter": "get_glow_blend_mode",
          "enum": "Environment.GlowBlendMode",
          "description": "Glow blending mode."
        },
        {
          "name": "glow_bloom",
          "type": "float",
          "setter": "set_glow_bloom",
          "getter": "get_glow_bloom",
          "description": "Bloom value (global glow)."
        },
        {
          "name": "glow_enabled",
          "type": "bool",
          "setter": "set_glow_enabled",
          "getter": "is_glow_enabled",
          "description": "Enables glow rendering."
        },
        {
          "name": "glow_hdr_scale",
          "type": "float",
          "setter": "set_glow_hdr_bleed_scale",
          "getter": "get_glow_hdr_bleed_scale",
          "description": "Bleed scale of the HDR glow."
        },
        {
          "name": "glow_hdr_threshold",
          "type": "float",
          "setter": "set_glow_hdr_bleed_threshold",
          "getter": "get_glow_hdr_bleed_threshold",
          "description": "Bleed threshold of the HDR glow."
        },
        {
          "name": "glow_intensity",
          "type": "float",
          "setter": "set_glow_intensity",
          "getter": "get_glow_intensity",
          "description": "Glow intensity."
        },
        {
          "name": "glow_levels/1",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "First level of glow (most local)."
        },
        {
          "name": "glow_levels/2",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Second level of glow."
        },
        {
          "name": "glow_levels/3",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Third level of glow."
        },
        {
          "name": "glow_levels/4",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Fourth level of glow."
        },
        {
          "name": "glow_levels/5",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Fifth level of glow."
        },
        {
          "name": "glow_levels/6",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Sixth level of glow."
        },
        {
          "name": "glow_levels/7",
          "type": "bool",
          "setter": "set_glow_level",
          "getter": "is_glow_level_enabled",
          "description": "Seventh level of glow (most global)."
        },
        {
          "name": "glow_strength",
          "type": "float",
          "setter": "set_glow_strength",
          "getter": "get_glow_strength",
          "description": "Glow strength."
        },
        {
          "name": "ss_reflections_depth_tolerance",
          "type": "float",
          "setter": "set_ssr_depth_tolerance",
          "getter": "get_ssr_depth_tolerance",
          "description": ""
        },
        {
          "name": "ss_reflections_enabled",
          "type": "bool",
          "setter": "set_ssr_enabled",
          "getter": "is_ssr_enabled",
          "description": ""
        },
        {
          "name": "ss_reflections_fade_in",
          "type": "float",
          "setter": "set_ssr_fade_in",
          "getter": "get_ssr_fade_in",
          "description": ""
        },
        {
          "name": "ss_reflections_fade_out",
          "type": "float",
          "setter": "set_ssr_fade_out",
          "getter": "get_ssr_fade_out",
          "description": ""
        },
        {
          "name": "ss_reflections_max_steps",
          "type": "int",
          "setter": "set_ssr_max_steps",
          "getter": "get_ssr_max_steps",
          "description": ""
        },
        {
          "name": "ss_reflections_roughness",
          "type": "bool",
          "setter": "set_ssr_rough",
          "getter": "is_ssr_rough",
          "description": ""
        },
        {
          "name": "ssao_bias",
          "type": "float",
          "setter": "set_ssao_bias",
          "getter": "get_ssao_bias",
          "description": ""
        },
        {
          "name": "ssao_blur",
          "type": "bool",
          "setter": "set_ssao_blur",
          "getter": "is_ssao_blur_enabled",
          "description": ""
        },
        {
          "name": "ssao_color",
          "type": "Color",
          "setter": "set_ssao_color",
          "getter": "get_ssao_color",
          "description": ""
        },
        {
          "name": "ssao_enabled",
          "type": "bool",
          "setter": "set_ssao_enabled",
          "getter": "is_ssao_enabled",
          "description": ""
        },
        {
          "name": "ssao_intensity",
          "type": "float",
          "setter": "set_ssao_intensity",
          "getter": "get_ssao_intensity",
          "description": ""
        },
        {
          "name": "ssao_intensity2",
          "type": "float",
          "setter": "set_ssao_intensity2",
          "getter": "get_ssao_intensity2",
          "description": ""
        },
        {
          "name": "ssao_light_affect",
          "type": "float",
          "setter": "set_ssao_direct_light_affect",
          "getter": "get_ssao_direct_light_affect",
          "description": ""
        },
        {
          "name": "ssao_radius",
          "type": "float",
          "setter": "set_ssao_radius",
          "getter": "get_ssao_radius",
          "description": ""
        },
        {
          "name": "ssao_radius2",
          "type": "float",
          "setter": "set_ssao_radius2",
          "getter": "get_ssao_radius2",
          "description": ""
        },
        {
          "name": "tonemap_exposure",
          "type": "float",
          "setter": "set_tonemap_exposure",
          "getter": "get_tonemap_exposure",
          "description": "Default exposure for tonemap."
        },
        {
          "name": "tonemap_mode",
          "type": "int",
          "setter": "set_tonemapper",
          "getter": "get_tonemapper",
          "enum": "Environment.ToneMapper",
          "description": "Tonemapping mode."
        },
        {
          "name": "tonemap_white",
          "type": "float",
          "setter": "set_tonemap_white",
          "getter": "get_tonemap_white",
          "description": "White reference value for tonemap."
        }
      ],
      "theme_properties": []
    },
    "Skeleton": {
      "name": "Skeleton",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Skeleton for characters and animated objects.",
      "description": "Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see [Animation]). Skeleton will support rag doll dynamics in the future.",
      "methods": [
        {
          "name": "add_bone",
          "description": "Add a bone, with name \"name\". [method get_bone_count] will become the bone index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bind_child_node_to_bone",
          "description": "Deprecated soon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_bones",
          "description": "Clear all the bones in this skeleton.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "find_bone",
          "qualifiers": "const",
          "description": "Return the bone index that matches \"name\" as its name.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_count",
          "qualifiers": "const",
          "description": "Return the amount of bones in the skeleton.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bone_custom_pose",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_global_pose",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_name",
          "qualifiers": "const",
          "description": "Return the name of the bone at index \"index\"",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_parent",
          "qualifiers": "const",
          "description": "Return the bone index which is the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note that the parent bone returned will always be less than \"bone_idx\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_pose",
          "qualifiers": "const",
          "description": "Return the pose transform for bone \"bone_idx\".",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_rest",
          "qualifiers": "const",
          "description": "Return the rest transform for a bone \"bone_idx\".",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bone_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bound_child_nodes_to_bone",
          "qualifiers": "const",
          "description": "Deprecated soon.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_bone_rest_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_custom_pose",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "custom_pose",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_disable_rest",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_global_pose",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pose",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_parent",
          "description": "Set the bone index \"parent_idx\" as the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note: \"parent_idx\" must be less than \"bone_idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parent_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_pose",
          "description": "Return the pose transform for bone \"bone_idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pose",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bone_rest",
          "description": "Set the rest transform for bone \"bone_idx\"",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rest",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unbind_child_node_from_bone",
          "description": "Deprecated soon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unparent_bone_and_rest",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NOTIFICATION_UPDATE_SKELETON",
          "value": "50",
          "enum": "",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VehicleBody": {
      "name": "VehicleBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_brake",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_engine_force",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "Returns the VehicleBody's velocity vector. To get the absolute speed in scalar value, get the length of the return vector in pixels/second. Example:\n\t\t\t\t[codeblock]\n\t\t\t\t# vehicle is an instance of VehicleBody\n\t\t\t\tvar speed = vehicle.get_linear_velocity().length()\n\t\t\t\t[/codeblock]",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_mass",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_steering",
          "qualifiers": "const",
          "description": "Return the steering angle (in radians).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_brake",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "brake",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_engine_force",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "engine_force",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mass",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mass",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_steering",
          "description": "Set the steering angle (in radians).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "steering",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "brake",
          "type": "float",
          "setter": "set_brake",
          "getter": "get_brake",
          "description": ""
        },
        {
          "name": "engine_force",
          "type": "float",
          "setter": "set_engine_force",
          "getter": "get_engine_force",
          "description": ""
        },
        {
          "name": "friction",
          "type": "float",
          "setter": "set_friction",
          "getter": "get_friction",
          "description": ""
        },
        {
          "name": "mass",
          "type": "float",
          "setter": "set_mass",
          "getter": "get_mass",
          "description": ""
        },
        {
          "name": "steering",
          "type": "float",
          "setter": "set_steering",
          "getter": "get_steering",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptConstructor": {
      "name": "VisualScriptConstructor",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node which calls a base type constructor.",
      "description": "A Visual Script node which calls a base type constructor. It can be used for type conversion as well.",
      "methods": [
        {
          "name": "get_constructor",
          "qualifiers": "const",
          "description": "",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_constructor_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_constructor",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "constructor",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constructor_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "constructor",
          "type": "Dictionary",
          "setter": "set_constructor",
          "getter": "get_constructor",
          "description": "The constructor function's method info. Has roughly the following structure:\n\t\t\t[codeblock]\n\t\t\t{\n\t\t\t\tname = \"string\",\n\t\t\t\targs = [{\n\t\t\t\t\tname = \"string\"\n\t\t\t\t\tclass_name = \"string\"\n\t\t\t\t\ttype = TYPE_*\n\t\t\t\t\thint = PROPERTY_HINT_*\n\t\t\t\t\thint_string = \"string\"\n\t\t\t\t}]\n\t\t\t\tdefault_args = [] # Array of variants\n\t\t\t\tflags = METHOD_FLAG_*\n\t\t\t\tid = 0\n\t\t\t\treturn = {type = TYPE_*}\n\t\t\t}\n\t\t\t[/codeblock]"
        },
        {
          "name": "type",
          "type": "int",
          "setter": "set_constructor_type",
          "getter": "get_constructor_type",
          "enum": "Variant.Type",
          "description": "The type to be constructed."
        }
      ],
      "theme_properties": []
    },
    "Position3D": {
      "name": "Position3D",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Generic 3D Position hint for editing",
      "description": "Generic 3D Position hint for editing. It's just like a plain [Spatial] but displays as a cross in the 3D-Editor at all times.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DDirectBodyState": {
      "name": "Physics2DDirectBodyState",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Direct access object to a physics body in the [Physics2DServer].",
      "description": "Direct access object to a physics body in the [Physics2DServer]. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body.",
      "methods": [
        {
          "name": "get_angular_velocity",
          "qualifiers": "const",
          "description": "Return the angular velocity of the body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_contact_collider",
          "qualifiers": "const",
          "description": "Return the [RID] of the collider.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_id",
          "qualifiers": "const",
          "description": "Return the object id of the collider.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_object",
          "qualifiers": "const",
          "description": "Return the collider object, this depends on how it was created (will return a scene node if such was used to create it).",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_position",
          "qualifiers": "const",
          "description": "Return the contact position in the collider.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_shape",
          "qualifiers": "const",
          "description": "Return the collider shape index.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_shape_metadata",
          "qualifiers": "const",
          "description": "Return the metadata of the collided shape. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_velocity_at_position",
          "qualifiers": "const",
          "description": "Return the linear velocity vector at contact point of the collider.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_count",
          "qualifiers": "const",
          "description": "Return the amount of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_contact_local_normal",
          "qualifiers": "const",
          "description": "Return the local normal (of this body) of the contact point.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_position",
          "qualifiers": "const",
          "description": "Return the local position (of this body) of the contact point.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_shape",
          "qualifiers": "const",
          "description": "Return the local shape index of the collision.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_inverse_inertia",
          "qualifiers": "const",
          "description": "Return the inverse of the inertia of the body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_inverse_mass",
          "qualifiers": "const",
          "description": "Return the inverse of the mass of the body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "Return the current linear velocity of the body.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_space_state",
          "description": "Return the current state of space, useful for queries.",
          "return_type": "Physics2DDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_step",
          "qualifiers": "const",
          "description": "Return the timestep (delta) used for the simulation.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_total_angular_damp",
          "qualifiers": "const",
          "description": "Return the rate at which the body stops rotating, if there are not any other forces moving it.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_total_gravity",
          "qualifiers": "const",
          "description": "Return the total gravity vector being currently applied to this body.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_total_linear_damp",
          "qualifiers": "const",
          "description": "Return the rate at which the body stops moving, if there are not any other forces moving it.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix of the body.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "integrate_forces",
          "description": "Call the built-in force integration code.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_sleeping",
          "qualifiers": "const",
          "description": "Return true if this body is currently sleeping (not active).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_angular_velocity",
          "description": "Change the angular velocity of the body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "velocity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_velocity",
          "description": "Change the linear velocity of the body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sleep_state",
          "description": "Set the sleeping state of the body, only affects character/rigid bodies.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Change the transform matrix of the body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "BaseButton": {
      "name": "BaseButton",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Provides a base class for different kinds of buttons.",
      "description": "BaseButton is the abstract base class for buttons, so it shouldn't be used directly (It doesn't display anything). Other types of buttons inherit from it.",
      "methods": [
        {
          "name": "_pressed",
          "qualifiers": "virtual",
          "description": "Called when button is pressed.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_toggled",
          "qualifiers": "virtual",
          "description": "Called when button is toggled (only if toggle_mode is active).",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_action_mode",
          "qualifiers": "const",
          "description": "Return the current mode of action (see [method set_action_mode]) (one of the ACTION_MODE_* constants).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_button_group",
          "qualifiers": "const",
          "description": "",
          "return_type": "ButtonGroup",
          "arguments": []
        },
        {
          "name": "get_draw_mode",
          "qualifiers": "const",
          "description": "Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to \"draw\" signal. The visual state of the button is defined by the DRAW_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_enabled_focus_mode",
          "qualifiers": "const",
          "description": "Returns focus access mode used when switching between enabled/disabled (see [method Control.set_focus_mode] and [method set_disabled]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shortcut",
          "qualifiers": "const",
          "description": "",
          "return_type": "ShortCut",
          "arguments": []
        },
        {
          "name": "is_disabled",
          "qualifiers": "const",
          "description": "Return whether the button is in disabled state (see [method set_disabled]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_hovered",
          "qualifiers": "const",
          "description": "Return true if mouse entered the button before it exit.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "qualifiers": "const",
          "description": "If toggle_mode is active, return whether the button is toggled. If toggle_mode is not active, return whether the button is pressed down.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_toggle_mode",
          "qualifiers": "const",
          "description": "Return the toggle_mode property (see [method set_toggle_mode]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_action_mode",
          "description": "Set the current mode of action, determining when the button is considered clicked (see the ACTION_MODE_* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "BaseButton.ActionMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_button_group",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_group",
              "type": "ButtonGroup",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disabled",
          "description": "Set the button into disabled state. When a button is disabled, it can't be clicked or toggled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled_focus_mode",
          "description": "Sets the focus access mode to use when switching between enabled/disabled (see [method Control.set_focus_mode] and [method set_disabled]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Control.FocusMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressed",
          "description": "Set the button to pressed state (only if toggle_mode is active).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_toggle_mode",
          "description": "Set the button toggle_mode property. Toggle mode makes the button flip state between pressed and unpressed each time its area is clicked.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "button_down",
          "description": "Emitted when the button starts being held down.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "button_up",
          "description": "Emitted when the button stops being held down.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pressed",
          "description": "This signal is emitted every time the button is toggled or pressed (i.e. activated, so on [code]button_down[/code] if \"Click on press\" is active and on [code]button_up[/code] otherwise).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "toggled",
          "description": "This signal is emitted when the button was just toggled between pressed and normal states (only if toggle_mode is active). The new state is contained in the [i]pressed[/i] argument.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "DRAW_NORMAL",
          "value": "0",
          "description": "The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons."
        },
        {
          "name": "DRAW_PRESSED",
          "value": "1",
          "description": "The state of buttons are pressed."
        },
        {
          "name": "DRAW_HOVER",
          "value": "2",
          "description": "The state of buttons are hovered."
        },
        {
          "name": "DRAW_DISABLED",
          "value": "3",
          "description": "The state of buttons are disabled."
        },
        {
          "name": "ACTION_MODE_BUTTON_PRESS",
          "value": "0",
          "description": "Require just a press to consider the button clicked."
        },
        {
          "name": "ACTION_MODE_BUTTON_RELEASE",
          "value": "1",
          "description": "Require a press and a subsequent release before considering the button clicked."
        }
      ],
      "properties": [
        {
          "name": "action_mode",
          "type": "int",
          "setter": "set_action_mode",
          "getter": "get_action_mode",
          "enum": "BaseButton.ActionMode",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": ""
        },
        {
          "name": "enabled_focus_mode",
          "type": "int",
          "setter": "set_enabled_focus_mode",
          "getter": "get_enabled_focus_mode",
          "enum": "Control.FocusMode",
          "description": ""
        },
        {
          "name": "group",
          "type": "ButtonGroup",
          "setter": "set_button_group",
          "getter": "get_button_group",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": ""
        },
        {
          "name": "shortcut",
          "type": "ShortCut",
          "setter": "set_shortcut",
          "getter": "get_shortcut",
          "description": ""
        },
        {
          "name": "toggle_mode",
          "type": "bool",
          "setter": "set_toggle_mode",
          "getter": "is_toggle_mode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "InputMap": {
      "name": "InputMap",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Singleton that manages actions.",
      "description": "",
      "methods": [
        {
          "name": "action_add_event",
          "description": "Add an [InputEvent] to an action. This [InputEvent] will trigger the action.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "action_erase_event",
          "description": "Remove an [InputEvent] from an action.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "action_has_event",
          "description": "Whether an action has an [InputEvent] associated with it.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_action",
          "description": "Add an (empty) action to the [InputMap]. An [InputEvent] can then be added to this action with [method action_add_event].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_action",
          "description": "Remove an action from the [InputMap].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "event_is_action",
          "qualifiers": "const",
          "description": "Return whether the given event is part of an existing action. This method ignores keyboard modifiers if the given [InputEvent] is not pressed (for proper release detection). See [method action_has_event] if you don't want this behavior.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_action_list",
          "description": "Return an array of InputEvents associated with a given action.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_actions",
          "description": "Return an array of all actions in the [InputMap].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_action",
          "qualifiers": "const",
          "description": "Whether this InputMap has a registered action with the given name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load_from_globals",
          "description": "Clear the [InputMap] and load it anew from [ProjectSettings].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "OS": {
      "name": "OS",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Operating System functions.",
      "description": "Operating System functions. OS Wraps the most common functionality to communicate with the host Operating System, such as: mouse grabbing, mouse cursors, clipboard, video mode, date and time, timers, environment variables, execution of binaries, command line, etc.",
      "methods": [
        {
          "name": "alert",
          "description": "Displays a modal dialog box utilizing the host OS.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": "\"Alert!\""
            }
          ]
        },
        {
          "name": "can_draw",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the host OS allows drawing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "can_use_threads",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the current host platform is using multiple threads.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "delay_msec",
          "qualifiers": "const",
          "description": "Delay executing of the current thread by given milliseconds.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "msec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "delay_usec",
          "qualifiers": "const",
          "description": "Delay executing of the current thread by given microseconds.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "usec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dump_memory_to_file",
          "description": "Dumps the memory allocation ringlist to a file (only works in debug).\n\t\t\t\tEntry format per line: \"Address - Size - Description\"",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dump_resources_to_file",
          "description": "Dumps all used resources to file (only works in debug).\n\t\t\t\tEntry format per line: \"Resource Type : Resource Location\"\n\t\t\t\tAt the end of the file is a statistic of all used Resource Types.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "execute",
          "description": "Execute the binary file in given path, optionally blocking until it returns. A process ID is returned.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arguments",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "blocking",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "output",
              "type": "Array",
              "default_value": "[  ]"
            }
          ]
        },
        {
          "name": "find_scancode_from_string",
          "qualifiers": "const",
          "description": "Returns the scancode of the given string (e.g. \"Escape\")",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_borderless_window",
          "qualifiers": "const",
          "description": "Returns true if the current window is borderless.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_clipboard",
          "qualifiers": "const",
          "description": "Get clipboard from the host OS.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_cmdline_args",
          "description": "Returns the command line arguments passed to the engine.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_current_screen",
          "qualifiers": "const",
          "description": "Returns the current screen index (0 padded).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_data_dir",
          "qualifiers": "const",
          "description": "Returns the absolute directory path of user data path([user://]).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_date",
          "qualifiers": "const",
          "description": "Returns current date as a dictionary of keys: year, month, day, weekday, dst (daylight savings time).",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "utc",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_datetime",
          "qualifiers": "const",
          "description": "Returns current datetime as a dictionary of keys: year, month, day, weekday, dst (daylight savings time), hour, minute, second.",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "utc",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_datetime_from_unix_time",
          "qualifiers": "const",
          "description": "Get a dictionary of time values when given epoch time.\n\t\t\t\tDictionary Time values will be a union of values from [method get_time] and [method get_date] dictionaries (with the exception of dst = day light standard time, as it cannot be determined from epoch).",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "unix_time_val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_dynamic_memory_usage",
          "qualifiers": "const",
          "description": "Returns the total amount of dynamic memory used (only works in debug).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_environment",
          "qualifiers": "const",
          "description": "Returns an environment variable.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "environment",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_executable_path",
          "qualifiers": "const",
          "description": "Returns the path to the current engine executable.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_exit_code",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_latin_keyboard_variant",
          "qualifiers": "const",
          "description": "Returns the current latin keyboard variant as a String.\n\t\t\t\tPossible return values are: \"QWERTY\", \"AZERTY\", \"QZERTY\", \"DVORAK\", \"NEO\" or \"ERROR\"",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_locale",
          "qualifiers": "const",
          "description": "Returns the host OS locale.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_model_name",
          "qualifiers": "const",
          "description": "Returns the model name of the current device.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Returns the name of the host OS. Possible values are: \"Android\", \"Haiku\", \"iOS\", \"HTML5\", \"OSX\", \"Server\", \"Windows\", \"UWP\", \"X11\".",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_power_percent_left",
          "description": "Returns the amount of battery left in the device as a percentage.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_power_seconds_left",
          "description": "Returns the time in seconds before the device runs out of battery.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_power_state",
          "description": "Returns the current state of the device regarding battery and power. See [code]POWERSTATE_*[/code] constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_process_id",
          "qualifiers": "const",
          "description": "Returns the game process ID",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_processor_count",
          "qualifiers": "const",
          "description": "Returns the number of cores available in the host machine.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_scancode_string",
          "qualifiers": "const",
          "description": "Returns the given scancode as a string (e.g. Return values: \"Escape\", \"Shift+Escape\").",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_screen_count",
          "qualifiers": "const",
          "description": "Returns the number of displays attached to the host machine.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_screen_dpi",
          "qualifiers": "const",
          "description": "Returns the dots per inch density of the specified screen.\n\n\t\t\t\tOn Android Devices, the actual screen densities are grouped into six generalized densities:\n\t\t\t\t\tldpi    - 120 dpi\n\t\t\t\t\tmdpi    - 160 dpi\n\t\t\t\t\thdpi    - 240 dpi\n\t\t\t\t\txhdpi   - 320 dpi\n\t\t\t\t\txxhdpi  - 480 dpi\n\t\t\t\t\txxxhdpi - 640 dpi",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_screen_orientation",
          "qualifiers": "const",
          "description": "Returns the current screen orientation, the return value will be one of the SCREEN_ORIENTATION constants in this class.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_screen_position",
          "qualifiers": "const",
          "description": "Returns the position of the specified screen by index. If no screen index is provided, the current screen will be used.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_screen_size",
          "qualifiers": "const",
          "description": "Returns the dimensions in pixels of the specified screen.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_splash_tick_msec",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_static_memory_peak_usage",
          "qualifiers": "const",
          "description": "Returns the max amount of static memory used (only works in debug).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_static_memory_usage",
          "qualifiers": "const",
          "description": "Returns the amount of static memory being used by the program in bytes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_system_dir",
          "qualifiers": "const",
          "description": "Returns the actual path to commonly used folders across different platforms. Available locations are specified in [OS.SystemDir].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "int",
              "enum": "OS.SystemDir",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_system_time_secs",
          "qualifiers": "const",
          "description": "Returns the epoch time of the operating system in seconds.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_ticks_msec",
          "qualifiers": "const",
          "description": "Returns the amount of time passed in milliseconds since the engine started.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_time",
          "qualifiers": "const",
          "description": "Returns current time as a dictionary of keys: hour, minute, second.",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "utc",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_time_zone_info",
          "qualifiers": "const",
          "description": "Returns the current time zone as a dictionary with the keys: bias and name.",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_unique_id",
          "qualifiers": "const",
          "description": "Returns a unique string.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_unix_time",
          "qualifiers": "const",
          "description": "Return\tthe current unix timestamp.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_unix_time_from_datetime",
          "qualifiers": "const",
          "description": "Get an epoch time value from a dictionary of time values.\n\t\t\t\t[code]datetime[/code] must be populated with the following keys: year, month, day, hour, minute, second.\n\t\t\t\tYou can pass the output from [method get_datetime_from_unix_time] directly into this function. Daylight savings time (dst), if present, is ignored.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "datetime",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_virtual_keyboard_height",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_window_position",
          "qualifiers": "const",
          "description": "Returns the window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_window_size",
          "qualifiers": "const",
          "description": "Returns the size of the window (without counting window manager decorations).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "has_environment",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if an environment variable exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "environment",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_feature",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "tag_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_touchscreen_ui_hint",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the device has a touchscreen or emulates one.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_virtual_keyboard",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the platform has a virtual keyboard, [code]false[/code] otherwise.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "hide_virtual_keyboard",
          "description": "Hides the virtual keyboard if it is shown, does nothing otherwise.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_debug_build",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the build is a debug build.\n\t\t\t\tReturns [code]true[/code] when running in the editor.\n\t\t\t\tReturns [code]false[/code] if the build is a release build.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_in_low_processor_usage_mode",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if low cpu usage mode is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_keep_screen_on",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the screen is being kept on.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_ok_left_and_cancel_right",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the \"Okay\" button should appear on the left and \"Cancel\" on the right.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_scancode_unicode",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the input code has a unicode character.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_stdout_verbose",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the engine was executed with -v (verbose stdout).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_userfs_persistent",
          "qualifiers": "const",
          "description": "If [code]true[/code], the [code]user://[/code] file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_vsync_enabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if synchronizing the framerate to the monitor's refresh rate is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_window_fullscreen",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the window is in fullscreen mode.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_window_maximized",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the window is maximized.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_window_minimized",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the window is minimized.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_window_resizable",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the window is resizable.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "kill",
          "description": "Kill a process ID (this method can be used to kill processes that were not spawned by the game).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pid",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "native_video_is_playing",
          "description": "Returns [code]true[/code] if native video is playing.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "native_video_pause",
          "description": "Pauses native video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "native_video_play",
          "description": "Plays native video from the specified path, at the given volume and with audio and subtitle tracks.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "volume",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "audio_track",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "subtitle_track",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "native_video_stop",
          "description": "Stops native video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "native_video_unpause",
          "description": "Resumes native video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "print_all_resources",
          "description": "Shows all resources in the game. Optionally the list can be written to a file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tofile",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "print_all_textures_by_size",
          "description": "Shows the list of loaded textures sorted by size in memory.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "print_resources_by_type",
          "description": "Shows the number of resources loaded by the game of the given types.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "types",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print_resources_in_use",
          "description": "Shows all resources currently used by the game.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "short",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "request_attention",
          "description": "Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_borderless_window",
          "description": "Removes the window frame.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "borderless",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clipboard",
          "description": "Sets clipboard to the OS.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "clipboard",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_screen",
          "description": "Sets the current screen by index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "screen",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_exit_code",
          "description": "Sets the exit code that will be returned by the game.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon",
          "description": "Sets the game's icon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "icon",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ime_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_keep_screen_on",
          "description": "Sets keep screen on if true, or goes to sleep by device setting if false. (for Android/iOS)",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_low_processor_usage_mode",
          "description": "Set to [code]true[/code] to enable the low cpu usage mode. In this mode, the screen only redraws when there are changes, and a considerable sleep time is inserted between frames. Use this in tool mode to reduce CPU usage.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_screen_orientation",
          "description": "Sets the current screen orientation, the argument value must be one of the SCREEN_ORIENTATION constants in this class.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "orientation",
              "type": "int",
              "enum": "OS.ScreenOrientation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_thread_name",
          "description": "Sets the name of the current thread.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_file_access_save_and_swap",
          "description": "Enables backup saves if [code]enabled[/code] is [code]true[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_vsync",
          "description": "If [code]true[/code] the framerate will synchronize to the monitor's refresh rate.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_fullscreen",
          "description": "Sets window fullscreen mode to the [i]enabled[/i] argument, [i]enabled[/i] is a toggle for the fullscreen mode, calling the function with [i]enabled[/i] true when the screen is not on fullscreen mode will cause the screen to go to fullscreen mode, calling the function with [i]enabled[/i] false when the screen is in fullscreen mode will cause the window to exit the fullscreen mode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_maximized",
          "description": "Set [code]true[/code] to maximize the window.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_minimized",
          "description": "Set [code]true[/code] to minimize the window.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_position",
          "description": "Sets the position of the window to the specified position (this function could be restricted by the window manager, meaning that there could be some unreachable areas of the screen).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_resizable",
          "description": "Sets the window resizable state, if the window is not resizable it will preserve the dimensions specified in the project settings.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_size",
          "description": "Sets the window size to the specified size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_title",
          "description": "Sets the window title to the specified string.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shell_open",
          "description": "Requests the OS to open a resource with the most appropriate program. For example.\n\t\t\t\t\t[code]OS.shell_open(\"C:\\\\Users\\name\\Downloads\")[/code] on Windows opens the file explorer at the downloads folders of the user.\n\t\t\t\t\t[code]OS.shell_open(\"http://godotengine.org\")[/code] opens the default web browser on the official Godot website.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uri",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show_virtual_keyboard",
          "description": "Shows the virtual keyboard if the platform has one. The [i]existing_text[/i] parameter is useful for implementing your own LineEdit, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing_text",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "DAY_SUNDAY",
          "value": "0",
          "description": ""
        },
        {
          "name": "DAY_MONDAY",
          "value": "1",
          "description": ""
        },
        {
          "name": "DAY_TUESDAY",
          "value": "2",
          "description": ""
        },
        {
          "name": "DAY_WEDNESDAY",
          "value": "3",
          "description": ""
        },
        {
          "name": "DAY_THURSDAY",
          "value": "4",
          "description": ""
        },
        {
          "name": "DAY_FRIDAY",
          "value": "5",
          "description": ""
        },
        {
          "name": "DAY_SATURDAY",
          "value": "6",
          "description": ""
        },
        {
          "name": "MONTH_JANUARY",
          "value": "1",
          "description": ""
        },
        {
          "name": "MONTH_FEBRUARY",
          "value": "2",
          "description": ""
        },
        {
          "name": "MONTH_MARCH",
          "value": "3",
          "description": ""
        },
        {
          "name": "MONTH_APRIL",
          "value": "4",
          "description": ""
        },
        {
          "name": "MONTH_MAY",
          "value": "5",
          "description": ""
        },
        {
          "name": "MONTH_JUNE",
          "value": "6",
          "description": ""
        },
        {
          "name": "MONTH_JULY",
          "value": "7",
          "description": ""
        },
        {
          "name": "MONTH_AUGUST",
          "value": "8",
          "description": ""
        },
        {
          "name": "MONTH_SEPTEMBER",
          "value": "9",
          "description": ""
        },
        {
          "name": "MONTH_OCTOBER",
          "value": "10",
          "description": ""
        },
        {
          "name": "MONTH_NOVEMBER",
          "value": "11",
          "description": ""
        },
        {
          "name": "MONTH_DECEMBER",
          "value": "12",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_LANDSCAPE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_PORTRAIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_REVERSE_LANDSCAPE",
          "value": "2",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_REVERSE_PORTRAIT",
          "value": "3",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_SENSOR_LANDSCAPE",
          "value": "4",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_SENSOR_PORTRAIT",
          "value": "5",
          "description": ""
        },
        {
          "name": "SCREEN_ORIENTATION_SENSOR",
          "value": "6",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DESKTOP",
          "value": "0",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DCIM",
          "value": "1",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DOCUMENTS",
          "value": "2",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_DOWNLOADS",
          "value": "3",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_MOVIES",
          "value": "4",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_MUSIC",
          "value": "5",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_PICTURES",
          "value": "6",
          "description": ""
        },
        {
          "name": "SYSTEM_DIR_RINGTONES",
          "value": "7",
          "description": ""
        },
        {
          "name": "POWERSTATE_UNKNOWN",
          "value": "0",
          "description": ""
        },
        {
          "name": "POWERSTATE_ON_BATTERY",
          "value": "1",
          "description": ""
        },
        {
          "name": "POWERSTATE_NO_BATTERY",
          "value": "2",
          "description": ""
        },
        {
          "name": "POWERSTATE_CHARGING",
          "value": "3",
          "description": ""
        },
        {
          "name": "POWERSTATE_CHARGED",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "NetworkedMultiplayerENet": {
      "name": "NetworkedMultiplayerENet",
      "inherits": "NetworkedMultiplayerPeer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "PacketPeer implementation using the ENet library.",
      "description": "A connection (or a listening server) that should be passed to [method SceneTree.set_network_peer]. Socket events can be handled by connecting to [SceneTree] signals.",
      "methods": [
        {
          "name": "close_connection",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_client",
          "description": "Create client that connects to a server at address [code]ip[/code] using specified [code]port[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ip",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "in_bandwidth",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "out_bandwidth",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "create_server",
          "description": "Create server that listens to connections via [code]port[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_clients",
              "type": "int",
              "default_value": "32"
            },
            {
              "index": "2",
              "name": "in_bandwidth",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "out_bandwidth",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_compression_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_bind_ip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ip",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_compression_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "NetworkedMultiplayerENet.CompressionMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "COMPRESS_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "COMPRESS_RANGE_CODER",
          "value": "1",
          "description": ""
        },
        {
          "name": "COMPRESS_FASTLZ",
          "value": "2",
          "description": ""
        },
        {
          "name": "COMPRESS_ZLIB",
          "value": "3",
          "description": ""
        },
        {
          "name": "COMPRESS_ZSTD",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectAmplify": {
      "name": "AudioEffectAmplify",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a Amplify audio effect to an Audio bus.\n\t\tIncreases or decreases the volume of the selected audio bus.",
      "description": "Increases or decreases the volume being routed through the audio bus.",
      "methods": [
        {
          "name": "get_volume_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_volume_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "volume",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "volume_db",
          "type": "float",
          "setter": "set_volume_db",
          "getter": "get_volume_db",
          "description": "Amount of amplification. Positive values make the sound louder, negative values make it quieter. Value can range from -80 to 24. Default value: [code]0[/code]."
        }
      ],
      "theme_properties": []
    },
    "StreamTexture": {
      "name": "StreamTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_load_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "load",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "load_path",
          "type": "String",
          "setter": "load",
          "getter": "get_load_path",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "InputEventWithModifiers": {
      "name": "InputEventWithModifiers",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for input events with modifiers.",
      "description": "",
      "methods": [
        {
          "name": "get_alt",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_command",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_control",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_metakey",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_shift",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_alt",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_command",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_control",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_metakey",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shift",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "alt",
          "type": "bool",
          "setter": "set_alt",
          "getter": "get_alt",
          "description": "State of the Alt modifier."
        },
        {
          "name": "command",
          "type": "bool",
          "setter": "set_command",
          "getter": "get_command",
          "description": "State of the Command modifier."
        },
        {
          "name": "control",
          "type": "bool",
          "setter": "set_control",
          "getter": "get_control",
          "description": "State of the Ctrl modifier."
        },
        {
          "name": "meta",
          "type": "bool",
          "setter": "set_metakey",
          "getter": "get_metakey",
          "description": "State of the Meta modifier."
        },
        {
          "name": "shift",
          "type": "bool",
          "setter": "set_shift",
          "getter": "get_shift",
          "description": "State of the Shift modifier."
        }
      ],
      "theme_properties": []
    },
    "Reference": {
      "name": "Reference",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for anything that keeps a reference count.",
      "description": "Base class for anything that keeps a reference count. Resource and many other helper objects inherit this. References keep an internal reference counter so they are only released when no longer in use.",
      "methods": [
        {
          "name": "init_ref",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reference",
          "description": "Increase the internal reference counter. Use this only if you really know what you are doing.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unreference",
          "description": "Decrease the internal reference counter. Use this only if you really know what you are doing.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Light": {
      "name": "Light",
      "inherits": "VisualInstance",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Provides a base class for different kinds of light nodes.",
      "description": "Light is the abstract base class for light nodes, so it shouldn't be used directly (It can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.",
      "methods": [
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_cull_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "Light.Param",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_shadow_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_shadow_reverse_cull_face",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_shadow",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_editor_only",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_negative",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cull_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cull_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editor_only",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "editor_only",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_negative",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "Light.Param",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shadow_color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_reverse_cull_face",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_ENERGY",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_SPECULAR",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_RANGE",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_ATTENUATION",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_SPOT_ANGLE",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_SPOT_ATTENUATION",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARAM_CONTACT_SHADOW_SIZE",
          "value": "6",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_MAX_DISTANCE",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_SPLIT_1_OFFSET",
          "value": "8",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_SPLIT_2_OFFSET",
          "value": "9",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_SPLIT_3_OFFSET",
          "value": "10",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_NORMAL_BIAS",
          "value": "11",
          "description": ""
        },
        {
          "name": "PARAM_SHADOW_BIAS",
          "value": "12",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "14",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "editor_only",
          "type": "bool",
          "setter": "set_editor_only",
          "getter": "is_editor_only",
          "description": ""
        },
        {
          "name": "light_color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": ""
        },
        {
          "name": "light_cull_mask",
          "type": "int",
          "setter": "set_cull_mask",
          "getter": "get_cull_mask",
          "description": ""
        },
        {
          "name": "light_energy",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "light_negative",
          "type": "bool",
          "setter": "set_negative",
          "getter": "is_negative",
          "description": ""
        },
        {
          "name": "light_specular",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "shadow_bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "shadow_color",
          "type": "Color",
          "setter": "set_shadow_color",
          "getter": "get_shadow_color",
          "description": ""
        },
        {
          "name": "shadow_contact",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "shadow_enabled",
          "type": "bool",
          "setter": "set_shadow",
          "getter": "has_shadow",
          "description": ""
        },
        {
          "name": "shadow_reverse_cull_face",
          "type": "bool",
          "setter": "set_shadow_reverse_cull_face",
          "getter": "get_shadow_reverse_cull_face",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ProceduralSky": {
      "name": "ProceduralSky",
      "inherits": "Sky",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_ground_bottom_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_ground_curve",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ground_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ground_horizon_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_sky_curve",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sky_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sky_horizon_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_sky_top_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_sun_angle_max",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sun_angle_min",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sun_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_sun_curve",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sun_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sun_latitude",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sun_longitude",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_texture_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_ground_bottom_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ground_curve",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ground_energy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ground_horizon_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sky_curve",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sky_energy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sky_horizon_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sky_top_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sun_angle_max",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sun_angle_min",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sun_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sun_curve",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sun_energy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sun_latitude",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sun_longitude",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "enum": "ProceduralSky.TextureSize",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TEXTURE_SIZE_256",
          "value": "0",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_512",
          "value": "1",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_1024",
          "value": "2",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_2048",
          "value": "3",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_4096",
          "value": "4",
          "description": ""
        },
        {
          "name": "TEXTURE_SIZE_MAX",
          "value": "5",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "ground_bottom_color",
          "type": "Color",
          "setter": "set_ground_bottom_color",
          "getter": "get_ground_bottom_color",
          "description": ""
        },
        {
          "name": "ground_curve",
          "type": "float",
          "setter": "set_ground_curve",
          "getter": "get_ground_curve",
          "description": ""
        },
        {
          "name": "ground_energy",
          "type": "float",
          "setter": "set_ground_energy",
          "getter": "get_ground_energy",
          "description": ""
        },
        {
          "name": "ground_horizon_color",
          "type": "Color",
          "setter": "set_ground_horizon_color",
          "getter": "get_ground_horizon_color",
          "description": ""
        },
        {
          "name": "sky_curve",
          "type": "float",
          "setter": "set_sky_curve",
          "getter": "get_sky_curve",
          "description": ""
        },
        {
          "name": "sky_energy",
          "type": "float",
          "setter": "set_sky_energy",
          "getter": "get_sky_energy",
          "description": ""
        },
        {
          "name": "sky_horizon_color",
          "type": "Color",
          "setter": "set_sky_horizon_color",
          "getter": "get_sky_horizon_color",
          "description": ""
        },
        {
          "name": "sky_top_color",
          "type": "Color",
          "setter": "set_sky_top_color",
          "getter": "get_sky_top_color",
          "description": ""
        },
        {
          "name": "sun_angle_max",
          "type": "float",
          "setter": "set_sun_angle_max",
          "getter": "get_sun_angle_max",
          "description": ""
        },
        {
          "name": "sun_angle_min",
          "type": "float",
          "setter": "set_sun_angle_min",
          "getter": "get_sun_angle_min",
          "description": ""
        },
        {
          "name": "sun_color",
          "type": "Color",
          "setter": "set_sun_color",
          "getter": "get_sun_color",
          "description": ""
        },
        {
          "name": "sun_curve",
          "type": "float",
          "setter": "set_sun_curve",
          "getter": "get_sun_curve",
          "description": ""
        },
        {
          "name": "sun_energy",
          "type": "float",
          "setter": "set_sun_energy",
          "getter": "get_sun_energy",
          "description": ""
        },
        {
          "name": "sun_latitude",
          "type": "float",
          "setter": "set_sun_latitude",
          "getter": "get_sun_latitude",
          "description": ""
        },
        {
          "name": "sun_longitude",
          "type": "float",
          "setter": "set_sun_longitude",
          "getter": "get_sun_longitude",
          "description": ""
        },
        {
          "name": "texture_size",
          "type": "int",
          "setter": "set_texture_size",
          "getter": "get_texture_size",
          "enum": "ProceduralSky.TextureSize",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "EditorPlugin": {
      "name": "EditorPlugin",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Used by the editor to extend its functionality.",
      "description": "Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins.",
      "methods": [
        {
          "name": "add_control_to_bottom_panel",
          "description": "Add a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_bottom_panel].",
          "return_type": "ToolButton",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_control_to_container",
          "description": "Add a custom control to a container (see CONTAINER_* enum). There are many locations where custom controls can be added in the editor UI.\n\t\t\t\tPlease remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).\n\t\t\t\tIf your plugin is being removed, also make sure to remove your custom controls too.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "container",
              "type": "int",
              "enum": "EditorPlugin.CustomControlContainer",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_control_to_dock",
          "description": "Add the control to a specific dock slot (see DOCK_* enum for options).\n\t\t\t\tIf the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.\n\t\t\t\tIf your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_docks].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "slot",
              "type": "int",
              "enum": "EditorPlugin.DockSlot",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_custom_type",
          "description": "Add a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.\n\t\t\t\tWhen given node or resource is selected, the base type will be instanced (ie, \"Spatial\", \"Control\", \"Resource\"), then the script will be loaded and set to this object.\n\t\t\t\tYou can use the [method EditorPlugin.handles] to check if your custom object is being edited by checking the script or using 'is' keyword.\n\t\t\t\tDuring run-time, this will be a simple object with a script so this function does not need to be called then.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "base",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "script",
              "type": "Script",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_export_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exporter",
              "type": "EditorExportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_import_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "importer",
              "type": "EditorImportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_tool_submenu_item",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "submenu",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_changes",
          "qualifiers": "virtual",
          "description": "This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.\n\t\t\t\tThis is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "clear",
          "qualifiers": "virtual",
          "description": "Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "create_spatial_gizmo",
          "qualifiers": "virtual",
          "description": "This is used for plugins that create gizmos used by the spatial editor. Just check that the node passed in the \"for_spatial\" argument matches your plugin.",
          "return_type": "EditorSpatialGizmo",
          "arguments": [
            {
              "index": "0",
              "name": "for_spatial",
              "type": "Spatial",
              "default_value": ""
            }
          ]
        },
        {
          "name": "edit",
          "qualifiers": "virtual",
          "description": "This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "forward_canvas_gui_input",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "forward_draw_over_canvas",
          "qualifiers": "virtual",
          "description": "This function is called every time the 2D canvas editor draws (which overlays over the edited scene). Drawing over the supplied control will draw over the edited scene. To convert from control coordinates to edited scene coordinates (including zoom and offset), a transform is also provided. If you require this control to be redraw, call [method update_canvas].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "canvas",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "forward_spatial_gui_input",
          "qualifiers": "virtual",
          "description": "Implement this function if you are interested in 3D view screen input events. It will be called only if currently selected node is handled by your plugin.\n\t\t\t\tIf you would like to always gets those input events then additionally use [method set_input_forwarding_always_enabled].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Camera",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_breakpoints",
          "qualifiers": "virtual",
          "description": "This is for editors that edit script based objects. You can return a list of breakpoints in the format (script:line), for example: res://path_to_script.gd:25",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_editor_interface",
          "description": "",
          "return_type": "EditorInterface",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_plugin_name",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_state",
          "qualifiers": "virtual",
          "description": "Get the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_undo_redo",
          "description": "Get the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.",
          "return_type": "UndoRedo",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_window_layout",
          "qualifiers": "virtual",
          "description": "Get the GUI layout of the plugin. This is used to save the project's editor layout when the [method EditorPlugin.queue_save_layout] is called or the editor layout was changed(For example changing the position of a dock).",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "layout",
              "type": "ConfigFile",
              "default_value": ""
            }
          ]
        },
        {
          "name": "handles",
          "qualifiers": "virtual",
          "description": "Implement this function if your plugin edits a specific type of object (Resource or Node). If you return true, then you will get the functions [method EditorPlugin.edit] and [method EditorPlugin.make_visible] called when the editor requests them.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_main_screen",
          "qualifiers": "virtual",
          "description": "Return true if this is a main screen editor plugin (it goes in the main screen selector together with 2D, 3D, Script).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "hide_bottom_panel",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "make_bottom_panel_item_visible",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_visible",
          "qualifiers": "virtual",
          "description": "This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.\n\t\t\t\tRemember that you have to manage the visibility of all your editor controls manually.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_save_layout",
          "qualifiers": "const",
          "description": "Queue save the project's editor layout.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "remove_control_from_bottom_panel",
          "description": "Remove the control from the bottom panel. Don't forget to call this if you added one, so the editor can remove it cleanly.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_control_from_docks",
          "description": "Remove the control from the dock. Don't forget to call this if you added one, so the editor can save the layout and remove it cleanly.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_custom_type",
          "description": "Remove a custom type added by [method EditorPlugin.add_custom_type]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_export_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exporter",
              "type": "EditorExportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_import_plugin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "importer",
              "type": "EditorImportPlugin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save_external_data",
          "qualifiers": "virtual",
          "description": "This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "set_input_event_forwarding_always_enabled",
          "description": "Use this method if you always want to receive inputs from 3D view screen inside [method forward_spatial_gui_input]. It might be especially usable if your plugin will want to use raycast in the scene.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_state",
          "qualifiers": "virtual",
          "description": "Restore the state saved by [method EditorPlugin.get_state].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_window_layout",
          "qualifiers": "virtual",
          "description": "Restore the plugin GUI layout saved by [method EditorPlugin.get_window_layout].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "layout",
              "type": "ConfigFile",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_canvas",
          "description": "Updates the control used to draw the edited scene over the 2D canvas. This is used together with [method forward_canvas_input_event].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "main_screen_changed",
          "description": "Emitted when user change main screen view (2D, 3D, Script, AssetLib). Works also with screens which are defined by plugins.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "screen_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scene_changed",
          "description": "Emitted when user change scene. The argument is a root node of freshly opened scene.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene_root",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scene_closed",
          "description": "Emitted when user close scene. The argument is file path to a closed scene.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filepath",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "CONTAINER_TOOLBAR",
          "value": "0",
          "description": ""
        },
        {
          "name": "CONTAINER_SPATIAL_EDITOR_MENU",
          "value": "1",
          "description": ""
        },
        {
          "name": "CONTAINER_SPATIAL_EDITOR_SIDE",
          "value": "2",
          "description": ""
        },
        {
          "name": "CONTAINER_SPATIAL_EDITOR_BOTTOM",
          "value": "3",
          "description": ""
        },
        {
          "name": "CONTAINER_CANVAS_EDITOR_MENU",
          "value": "4",
          "description": ""
        },
        {
          "name": "CONTAINER_CANVAS_EDITOR_SIDE",
          "value": "5",
          "description": ""
        },
        {
          "name": "CONTAINER_PROPERTY_EDITOR_BOTTOM",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_UL",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_BL",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_UR",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_LEFT_BR",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_UL",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_BL",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_UR",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_RIGHT_BR",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOCK_SLOT_MAX",
          "value": "8",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Quat": {
      "name": "Quat",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Quaternion.",
      "description": "Quaternion is a 4 dimensional vector that is used to represent a rotation. It mainly exists to perform SLERP (spherical-linear interpolation) between two rotations. Multiplying quaternions also cheaply reproduces rotation sequences. However quaternions need to be often renormalized, or else they suffer from precision issues.",
      "methods": [
        {
          "name": "Quat",
          "description": "",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "w",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Quat",
          "description": "Returns a quaternion that will rotate around the given axis by the specified angle. The axis must be a normalized vector.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "angle",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Quat",
          "description": "Returns the rotation matrix corresponding to the given quaternion.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Basis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubic_slerp",
          "description": "",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pre_a",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "post_b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dot",
          "description": "Returns the dot product of two quaternions.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the quaternion.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_normalized",
          "description": "Returns whether the quaternion is normalized or not.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length",
          "description": "Returns the length of the quaternion.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length_squared",
          "description": "Returns the length of the quaternion, squared.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "normalized",
          "description": "Returns a copy of the quaternion, normalized to unit length.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "slerp",
          "description": "Perform a spherical-linear interpolation with another quaternion.",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slerpni",
          "description": "",
          "return_type": "Quat",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "w",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "x",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "z",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "EditorFileDialog": {
      "name": "EditorFileDialog",
      "inherits": "ConfirmationDialog",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_filter",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_filters",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_access",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_current_dir",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_file",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_display_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vbox",
          "description": "",
          "return_type": "VBoxContainer",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "invalidate",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_overwrite_warning_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_showing_hidden_files",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_access",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "access",
              "type": "int",
              "enum": "EditorFileDialog.Access",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_dir",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_file",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disable_overwrite_warning",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_display_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "EditorFileDialog.DisplayMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "EditorFileDialog.Mode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_show_hidden_files",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "dir_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "file_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "files_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paths",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MODE_OPEN_FILE",
          "value": "0",
          "description": ""
        },
        {
          "name": "MODE_OPEN_FILES",
          "value": "1",
          "description": ""
        },
        {
          "name": "MODE_OPEN_DIR",
          "value": "2",
          "description": ""
        },
        {
          "name": "MODE_OPEN_ANY",
          "value": "3",
          "description": ""
        },
        {
          "name": "MODE_SAVE_FILE",
          "value": "4",
          "description": ""
        },
        {
          "name": "ACCESS_RESOURCES",
          "value": "0",
          "description": ""
        },
        {
          "name": "ACCESS_USERDATA",
          "value": "1",
          "description": ""
        },
        {
          "name": "ACCESS_FILESYSTEM",
          "value": "2",
          "description": ""
        },
        {
          "name": "DISPLAY_THUMBNAILS",
          "value": "0",
          "description": ""
        },
        {
          "name": "DISPLAY_LIST",
          "value": "1",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "YSort": {
      "name": "YSort",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Sort all child nodes based on their Y positions.",
      "description": "Sort all child nodes based on their Y positions. The child node must inherit from [CanvasItem] for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.",
      "methods": [
        {
          "name": "is_sort_enabled",
          "qualifiers": "const",
          "description": "Returns true if the children nodes are being sorted.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_sort_enabled",
          "description": "Set whether the children nodes are sorted or not. (default true)",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "sort_enabled",
          "type": "bool",
          "setter": "set_sort_enabled",
          "getter": "is_sort_enabled",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "LineEdit": {
      "name": "LineEdit",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Control that provides single line string editing.",
      "description": "LineEdit provides a single line string editor, used for text fields.",
      "methods": [
        {
          "name": "append_at_cursor",
          "description": "Append text at cursor, scrolling the [LineEdit] when needed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the [LineEdit] text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "cursor_get_blink_enabled",
          "qualifiers": "const",
          "description": "Gets whether the line edit caret is blinking.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "cursor_get_blink_speed",
          "qualifiers": "const",
          "description": "Gets the line edit caret blink speed.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "cursor_set_blink_enabled",
          "description": "Set the line edit caret to blink.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_blink_speed",
          "description": "Set the line edit caret blink speed. Cannot be less then or equal to 0.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "blink_speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_align",
          "qualifiers": "const",
          "description": "Return the align mode of the [LineEdit].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_cursor_position",
          "qualifiers": "const",
          "description": "Return the cursor position inside the [LineEdit].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_expand_to_text_length",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_max_length",
          "qualifiers": "const",
          "description": "Return the maximum amount of characters the [LineEdit] can edit. If 0 is returned, no limit exists.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_menu",
          "qualifiers": "const",
          "description": "Return the [PopupMenu] of this [LineEdit].",
          "return_type": "PopupMenu",
          "arguments": []
        },
        {
          "name": "get_placeholder",
          "qualifiers": "const",
          "description": "Return the placeholder text.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_placeholder_alpha",
          "qualifiers": "const",
          "description": "Return transparency of the placeholder text.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Return the text in the [LineEdit].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_editable",
          "qualifiers": "const",
          "description": "Return the [i]editable[/i] status of the [LineEdit] (see [method set_editable]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_secret",
          "qualifiers": "const",
          "description": "Return the [i]secret[/i] status of the [LineEdit] (see [method set_secret]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "menu_option",
          "description": "Execute a given action as defined in the MENU_* enum.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "option",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Select the text inside [LineEdit] by the given character positions. [code]from[/code] is default to the beginning. [code]to[/code] is default to the end.\n\t\t\t\t[codeblock]\n\t\t\t\tselect()     # select all\n\t\t\t\tselect(5)    # select from the fifth character to the end.\n\t\t\t\tselect(2, 5) # select from the second to the fifth character.\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "1",
              "name": "to",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "select_all",
          "description": "Select the whole string.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_align",
          "description": "Set text alignment of the [LineEdit].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "enum": "LineEdit.Align",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cursor_position",
          "description": "Set the cursor position inside the [LineEdit], causing it to scroll if needed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editable",
          "description": "Set the [i]editable[/i] status of the [LineEdit]. When disabled, existing text can't be modified and new text can't be added.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_to_text_length",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_length",
          "description": "Set the maximum amount of characters the [LineEdit] can edit, and cropping existing text in case it exceeds that limit. Setting 0 removes the limit.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "chars",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_placeholder",
          "description": "Set the placeholder text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_placeholder_alpha",
          "description": "Set transparency of the placeholder text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "alpha",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_secret",
          "description": "Set the [i]secret[/i] status of the [LineEdit]. When enabled, every character is displayed as \"*\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "Set the text in the [LineEdit], clearing the existing one and the selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "text_changed",
          "description": "When the text changes, this signal is emitted.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "text_entered",
          "description": "This signal is emitted when the user presses KEY_ENTER on the [LineEdit]. This signal is often used as an alternate confirmation mechanism in dialogs.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": "Align left."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": "Align center."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": "Align right."
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "description": "Align fill."
        },
        {
          "name": "MENU_CUT",
          "value": "0",
          "description": "Cut (Copy and clear)."
        },
        {
          "name": "MENU_COPY",
          "value": "1",
          "description": "Copy the selected text."
        },
        {
          "name": "MENU_PASTE",
          "value": "2",
          "description": "Paste the clipboard text over the selected text."
        },
        {
          "name": "MENU_CLEAR",
          "value": "3",
          "description": "Clear the text."
        },
        {
          "name": "MENU_SELECT_ALL",
          "value": "4",
          "description": "Select all text."
        },
        {
          "name": "MENU_UNDO",
          "value": "5",
          "description": "Undo an action."
        },
        {
          "name": "MENU_MAX",
          "value": "6",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "align",
          "type": "int",
          "setter": "set_align",
          "getter": "get_align",
          "enum": "LineEdit.Align",
          "description": ""
        },
        {
          "name": "caret_blink",
          "type": "bool",
          "setter": "cursor_set_blink_enabled",
          "getter": "cursor_get_blink_enabled",
          "description": ""
        },
        {
          "name": "caret_blink_speed",
          "type": "float",
          "setter": "cursor_set_blink_speed",
          "getter": "cursor_get_blink_speed",
          "description": ""
        },
        {
          "name": "editable",
          "type": "bool",
          "setter": "set_editable",
          "getter": "is_editable",
          "description": ""
        },
        {
          "name": "expand_to_len",
          "type": "bool",
          "setter": "set_expand_to_text_length",
          "getter": "get_expand_to_text_length",
          "description": ""
        },
        {
          "name": "focus_mode",
          "type": "int",
          "setter": "set_focus_mode",
          "getter": "get_focus_mode",
          "enum": "Control.FocusMode",
          "description": ""
        },
        {
          "name": "max_length",
          "type": "int",
          "setter": "set_max_length",
          "getter": "get_max_length",
          "description": ""
        },
        {
          "name": "placeholder_alpha",
          "type": "float",
          "setter": "set_placeholder_alpha",
          "getter": "get_placeholder_alpha",
          "description": ""
        },
        {
          "name": "placeholder_text",
          "type": "String",
          "setter": "set_placeholder",
          "getter": "get_placeholder",
          "description": ""
        },
        {
          "name": "secret",
          "type": "bool",
          "setter": "set_secret",
          "getter": "is_secret",
          "description": ""
        },
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "cursor_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "minimum_spaces",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "read_only",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        }
      ]
    },
    "Button": {
      "name": "Button",
      "inherits": "BaseButton",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Standard themed Button.",
      "description": "Button is the standard themed button. It can contain text and an icon, and will display them according to the current [Theme].",
      "methods": [
        {
          "name": "get_button_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_clip_text",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_text_align",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_flat",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_button_icon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clip_text",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flat",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text_align",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "enum": "Button.TextAlign",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": "Align the text to the left."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": "Align the text to the center."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": "Align the text to the right."
        }
      ],
      "properties": [
        {
          "name": "align",
          "type": "int",
          "setter": "set_text_align",
          "getter": "get_text_align",
          "enum": "Button.TextAlign",
          "description": "Text alignment policy for the button's text, use one of the ALIGN_* constants."
        },
        {
          "name": "clip_text",
          "type": "bool",
          "setter": "set_clip_text",
          "getter": "get_clip_text",
          "description": "When this property is enabled, text that is too large to fit the button is clipped, when disabled the Button will always be wide enough to hold the text. This property is disabled by default."
        },
        {
          "name": "flat",
          "type": "bool",
          "setter": "set_flat",
          "getter": "is_flat",
          "description": "Flat buttons don't display decoration."
        },
        {
          "name": "icon",
          "type": "Texture",
          "setter": "set_button_icon",
          "getter": "get_button_icon",
          "description": "Button's icon, if text is present the icon will be placed before the text."
        },
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": "The button's text that will be displayed inside the button's area."
        }
      ],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "CylinderMesh": {
      "name": "CylinderMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class representing a cylindrical [PrimitiveMesh].",
      "description": "Class representing a cylindrical [PrimitiveMesh].",
      "methods": [
        {
          "name": "get_bottom_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_radial_segments",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_rings",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_top_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_bottom_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_height",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radial_segments",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rings",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rings",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_top_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bottom_radius",
          "type": "float",
          "setter": "set_bottom_radius",
          "getter": "get_bottom_radius",
          "description": "Bottom radius of the cylinder. Defaults to 1.0."
        },
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "Full height of the cylinder. Defaults to 2.0."
        },
        {
          "name": "radial_segments",
          "type": "int",
          "setter": "set_radial_segments",
          "getter": "get_radial_segments",
          "description": "Number of radial segments on the cylinder. Defaults to 64."
        },
        {
          "name": "rings",
          "type": "int",
          "setter": "set_rings",
          "getter": "get_rings",
          "description": "Number of edge rings along the height of the cylinder. Defaults to 4."
        },
        {
          "name": "top_radius",
          "type": "float",
          "setter": "set_top_radius",
          "getter": "get_top_radius",
          "description": "Top radius of the cylinder. Defaults to 1.0."
        }
      ],
      "theme_properties": []
    },
    "Timer": {
      "name": "Timer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A countdown timer.",
      "description": "Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or \"one shot\" mode.",
      "methods": [
        {
          "name": "get_time_left",
          "qualifiers": "const",
          "description": "Return the time left for timeout in seconds if the timer is active, 0 otherwise.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_timer_process_mode",
          "qualifiers": "const",
          "description": "Return the timer's processing mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_wait_time",
          "qualifiers": "const",
          "description": "Return the wait time in seconds.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_autostart",
          "qualifiers": "const",
          "description": "Return true if set to automatically start when entering the scene.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_one_shot",
          "qualifiers": "const",
          "description": "Return true if configured as one-shot.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_paused",
          "qualifiers": "const",
          "description": "Return if the timer is paused or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_stopped",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_autostart",
          "description": "Set to automatically start when entering the scene.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_one_shot",
          "description": "Set as one-shot. If enabled, the timer will stop after timeout, otherwise it will automatically restart.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_paused",
          "description": "Set whether the timer is paused or not. A paused timer will be inactive until it is unpaused again.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paused",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_timer_process_mode",
          "description": "Set the timer's processing mode (fixed or idle, use TIMER_PROCESS_* constants as argument).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Timer.TimerProcessMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_wait_time",
          "description": "Set wait time in seconds. When the time is over, it will emit the timeout signal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "start",
          "description": "Start the Timer.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "stop",
          "description": "Stop (cancel) the Timer.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "timeout",
          "description": "Emitted when the Timer reaches 0.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "TIMER_PROCESS_PHYSICS",
          "value": "0",
          "description": "Update the Timer during the physics step at each frame (fixed framerate processing)."
        },
        {
          "name": "TIMER_PROCESS_IDLE",
          "value": "1",
          "description": "Update the Timer during the idle time at each frame."
        }
      ],
      "properties": [
        {
          "name": "autostart",
          "type": "bool",
          "setter": "set_autostart",
          "getter": "has_autostart",
          "description": "If [code]true[/code], Timer will automatically start when entering the scene tree. Default value: [code]false[/code]."
        },
        {
          "name": "one_shot",
          "type": "bool",
          "setter": "set_one_shot",
          "getter": "is_one_shot",
          "description": "If [code]true[/code], Timer will stop when reaching 0. If [code]false[/code], it will restart. Default value: [code]false[/code]."
        },
        {
          "name": "process_mode",
          "type": "int",
          "setter": "set_timer_process_mode",
          "getter": "get_timer_process_mode",
          "enum": "Timer.TimerProcessMode",
          "description": "Processing mode. Uses TIMER_PROCESS_* constants as value."
        },
        {
          "name": "wait_time",
          "type": "float",
          "setter": "set_wait_time",
          "getter": "get_wait_time",
          "description": "Wait time in seconds."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptFunction": {
      "name": "VisualScriptFunction",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PacketPeerUDP": {
      "name": "PacketPeerUDP",
      "inherits": "PacketPeer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "UDP packet peer.",
      "description": "UDP packet peer. Can be used to send raw UDP packets as well as [Variant]\\ s.",
      "methods": [
        {
          "name": "close",
          "description": "Close the UDP socket the [PacketPeerUDP] is currently listening on.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_packet_ip",
          "qualifiers": "const",
          "description": "Return the IP of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_packet_port",
          "qualifiers": "const",
          "description": "Return the port of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_listening",
          "qualifiers": "const",
          "description": "Return whether this [PacketPeerUDP] is listening.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "listen",
          "description": "Make this [PacketPeerUDP] listen on the \"port\" binding to \"bind_address\" with a buffer size \"recv_buf_size\".\n\t\t\t\tIf \"bind_address\" is set as \"*\" (default), the peer will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf \"bind_address\" is set as \"0.0.0.0\" (for IPv4) or \"::\" (for IPv6), the peer will listen on all available addresses matching that IP type.\n\t\t\t\tIf \"bind_address\" is set to any valid address (e.g. \"192.168.1.101\", \"::1\", etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bind_address",
              "type": "String",
              "default_value": "\"*\""
            },
            {
              "index": "2",
              "name": "recv_buf_size",
              "type": "int",
              "default_value": "65536"
            }
          ]
        },
        {
          "name": "set_dest_address",
          "description": "Set the destination address and port for sending packets and variables, a hostname will be resolved using if valid.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "wait",
          "description": "Wait for a packet to arrive on the listening port, see [method listen].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ShaderMaterial": {
      "name": "ShaderMaterial",
      "inherits": "Material",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_shader",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shader",
          "arguments": []
        },
        {
          "name": "get_shader_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shader",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shader",
              "type": "Shader",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shader_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Transform": {
      "name": "Transform",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "3D Transformation. 3x4 matrix.",
      "description": "Represents one or many transformations in 3D space such as translation, rotation, or scaling. It consists of a [Basis] \"basis\" and an [Vector3] \"origin\". It is similar to a 3x4 matrix.",
      "methods": [
        {
          "name": "Transform",
          "description": "Constructs the Transform from four [Vector3]. Each axis corresponds to local basis vectors (some of which may be scaled).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "origin",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Constructs the Transform from a [Basis] and [Vector3].",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "basis",
              "type": "Basis",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "origin",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Constructs the Transform from a [Transform2D].",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Constructs the Transform from a [Quat]. The origin will be Vector3(0, 0, 0).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform",
          "description": "Constructs the Transform from a [Basis]. The origin will be Vector3(0, 0, 0).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Basis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "affine_inverse",
          "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation, scaling and translation.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "interpolate_with",
          "description": "Interpolates the transform to other Transform by weight amount (0-1).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling).",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "looking_at",
          "description": "Rotate the transform around the up vector to face the target.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "orthonormalized",
          "description": "Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotated",
          "description": "Rotates the transform around given axis by phi. The axis must be a normalized vector.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scaled",
          "description": "Scales the transform by the specified 3D scaling factors.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translated",
          "description": "Translates the transform by the specified offset.",
          "return_type": "Transform",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform",
          "description": "Transforms the given vector \"v\" by this transform.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_inv",
          "description": "Inverse-transforms the given vector \"v\" by this transform.",
          "return_type": "var",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "basis",
          "type": "Basis",
          "setter": "",
          "getter": "",
          "description": "The basis is a matrix containing 3 [Vector3] as its columns: X axis, Y axis, and Z axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object."
        },
        {
          "name": "origin",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "The translation offset of the transform."
        }
      ],
      "theme_properties": []
    },
    "InputEventKey": {
      "name": "InputEventKey",
      "inherits": "InputEventWithModifiers",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Input event type for keyboard events.",
      "description": "",
      "methods": [
        {
          "name": "get_scancode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_scancode_with_modifiers",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_unicode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_echo",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "echo",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scancode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scancode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_unicode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "unicode",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "echo",
          "type": "bool",
          "setter": "set_echo",
          "getter": "is_echo",
          "description": "Echo state of the key, i.e. whether it's a repeat event or not."
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "Pressed state of the key."
        },
        {
          "name": "scancode",
          "type": "int",
          "setter": "set_scancode",
          "getter": "get_scancode",
          "description": "Scancode of the key, one of the KEY_* constants in [@Global Scope]."
        },
        {
          "name": "unicode",
          "type": "int",
          "setter": "set_unicode",
          "getter": "get_unicode",
          "description": "Unicode identifier of the key (when relevant)."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptIterator": {
      "name": "VisualScriptIterator",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MultiMesh": {
      "name": "MultiMesh",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Provides high performance mesh instancing.",
      "description": "MultiMesh provides low level mesh instancing. If the amount of [Mesh] instances needed goes from hundreds to thousands (and most need to be visible at close proximity) creating such a large amount of [MeshInstance] nodes may affect performance by using too much CPU or video memory.\n\t\tFor this case a MultiMesh becomes very useful, as it can draw thousands of instances with little API overhead.\n\t\tAs a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object).\n\t\tSince instances may have any behavior, the Rect3 used for visibility must be provided by the user.",
      "methods": [
        {
          "name": "get_aabb",
          "qualifiers": "const",
          "description": "Return the visibility Rect3.",
          "return_type": "Rect3",
          "arguments": []
        },
        {
          "name": "get_color_format",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_instance_color",
          "qualifiers": "const",
          "description": "Get the color of a specific instance.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_instance_count",
          "qualifiers": "const",
          "description": "Return the amount of instances that is going to be drawn.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_instance_transform",
          "qualifiers": "const",
          "description": "Return the transform of a specific instance.",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_mesh",
          "qualifiers": "const",
          "description": "Return the [Mesh] resource drawn as multiple instances.",
          "return_type": "Mesh",
          "arguments": []
        },
        {
          "name": "get_transform_format",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_color_format",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "enum": "MultiMesh.ColorFormat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_color",
          "description": "Set the color of a specific instance.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_count",
          "description": "Set the amount of instances that is going to be drawn. Changing this number will erase all the existing instance transform and color data.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "count",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_transform",
          "description": "Set the transform for a specific instance.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mesh",
          "description": "Set the [Mesh] resource to be drawn in multiple instances.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform_format",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "enum": "MultiMesh.TransformFormat",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TRANSFORM_2D",
          "value": "0",
          "description": ""
        },
        {
          "name": "TRANSFORM_3D",
          "value": "1",
          "description": ""
        },
        {
          "name": "COLOR_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "COLOR_8BIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "COLOR_FLOAT",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "color_array",
          "type": "PoolColorArray",
          "setter": "_set_color_array",
          "getter": "_get_color_array",
          "description": ""
        },
        {
          "name": "color_format",
          "type": "int",
          "setter": "set_color_format",
          "getter": "get_color_format",
          "enum": "MultiMesh.ColorFormat",
          "description": ""
        },
        {
          "name": "instance_count",
          "type": "int",
          "setter": "set_instance_count",
          "getter": "get_instance_count",
          "description": ""
        },
        {
          "name": "mesh",
          "type": "Mesh",
          "setter": "set_mesh",
          "getter": "get_mesh",
          "description": ""
        },
        {
          "name": "transform_array",
          "type": "PoolVector3Array",
          "setter": "_set_transform_array",
          "getter": "_get_transform_array",
          "description": ""
        },
        {
          "name": "transform_format",
          "type": "int",
          "setter": "set_transform_format",
          "getter": "get_transform_format",
          "enum": "MultiMesh.TransformFormat",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectCompressor": {
      "name": "AudioEffectCompressor",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a Compressor audio effect to an Audio bus.\n\t\tReduces sounds that exceed a certain threshold level, smooths out the dynamics and increases the overall volume.",
      "description": "Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).\n\t\tCompressor has many uses in the mix:\n\t\t- In the Master bus to compress the whole output (Although a [AudioEffectLimiter] is probably better)\n\t\t- In voice channels to ensure they sound as balanced as possible.\n\t\t- Sidechained. Sidechained, which can reduce the sound level sidechained with another audio bus for threshold detection.. This technique is very common in video game mixing to download the level of Music/SFX while voices are being heard.\n\t\t- Accentuates transients by using a wider attack, making effects sound more punchy.",
      "methods": [
        {
          "name": "get_attack_us",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gain",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_mix",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ratio",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_release_ms",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sidechain",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_threshold",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_attack_us",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "attack_us",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gain",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gain",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mix",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mix",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ratio",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_release_ms",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "release_ms",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sidechain",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sidechain",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_threshold",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "threshold",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "attack_us",
          "type": "float",
          "setter": "set_attack_us",
          "getter": "get_attack_us",
          "description": "Compressor's reaction time when the signal exceeds the threshold. Value can range from 20 to 2000. Default value: [code]20ms[/code]."
        },
        {
          "name": "gain",
          "type": "float",
          "setter": "set_gain",
          "getter": "get_gain",
          "description": "Gain applied to the output signal."
        },
        {
          "name": "mix",
          "type": "float",
          "setter": "set_mix",
          "getter": "get_mix",
          "description": "Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet). Default value: [code]1[/code]."
        },
        {
          "name": "ratio",
          "type": "float",
          "setter": "set_ratio",
          "getter": "get_ratio",
          "description": "Amount of compression applied to the audio once it passes the threshold level. The higher the ratio the more the loud parts of the audio will be compressed. Value can range from 1 to 48. Default value: [code]4[/code]."
        },
        {
          "name": "release_ms",
          "type": "float",
          "setter": "set_release_ms",
          "getter": "get_release_ms",
          "description": "Compressor's delay time to stop reducing the signal after the signal level falls below the threshold. Value can range from 20 to 2000. Default value: [code]250ms[/code]."
        },
        {
          "name": "sidechain",
          "type": "String",
          "setter": "set_sidechain",
          "getter": "get_sidechain",
          "description": "Reduce the sound level using another audio bus for threshold detection."
        },
        {
          "name": "threshold",
          "type": "float",
          "setter": "set_threshold",
          "getter": "get_threshold",
          "description": "The level above which compression is applied to the audio. Value can range from -60 to 0. Default value: [code]0[/code]."
        }
      ],
      "theme_properties": []
    },
    "CircleShape2D": {
      "name": "CircleShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Circular shape for 2D collisions.",
      "description": "Circular shape for 2D collisions. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast.",
      "methods": [
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "Return the radius of the circle shape.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_radius",
          "description": "Set the radius of the circle shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "The circle's radius."
        }
      ],
      "theme_properties": []
    },
    "Particles": {
      "name": "Particles",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "3D particle emitter.",
      "description": "3D particle node used to create a variety of particle systems and effects. [code]Particles[/code] features an emitter that generates some number of particles at a given rate.\n\t\tUse the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.",
      "methods": [
        {
          "name": "capture_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect3",
          "arguments": []
        },
        {
          "name": "get_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_draw_order",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_draw_pass_mesh",
          "qualifiers": "const",
          "description": "",
          "return_type": "Mesh",
          "arguments": [
            {
              "index": "0",
              "name": "pass",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_draw_passes",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_explosiveness_ratio",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fixed_fps",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_fractional_delta",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_lifetime",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_one_shot",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_pre_process_time",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_process_material",
          "qualifiers": "const",
          "description": "",
          "return_type": "Material",
          "arguments": []
        },
        {
          "name": "get_randomness_ratio",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_speed_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_use_local_coordinates",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_visibility_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect3",
          "arguments": []
        },
        {
          "name": "is_emitting",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "restart",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_amount",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_order",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "order",
              "type": "int",
              "enum": "Particles.DrawOrder",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_pass_mesh",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pass",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_passes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "passes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emitting",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "emitting",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_explosiveness_ratio",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fixed_fps",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fps",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fractional_delta",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lifetime",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "secs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_one_shot",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pre_process_time",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "secs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_material",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_randomness_ratio",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_local_coordinates",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visibility_aabb",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "aabb",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "DRAW_ORDER_INDEX",
          "value": "0",
          "description": "Particles are drawn in the order emitted."
        },
        {
          "name": "DRAW_ORDER_LIFETIME",
          "value": "1",
          "description": "Particles are drawn in order of remaining lifetime."
        },
        {
          "name": "DRAW_ORDER_VIEW_DEPTH",
          "value": "2",
          "description": "Particles are drawn in order of depth."
        },
        {
          "name": "MAX_DRAW_PASSES",
          "value": "4",
          "enum": "",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "amount",
          "type": "int",
          "setter": "set_amount",
          "getter": "get_amount",
          "description": "Number of particles to emit."
        },
        {
          "name": "draw_order",
          "type": "int",
          "setter": "set_draw_order",
          "getter": "get_draw_order",
          "enum": "Particles.DrawOrder",
          "description": "Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code]."
        },
        {
          "name": "draw_pass_1",
          "type": "Mesh",
          "setter": "set_draw_pass_mesh",
          "getter": "get_draw_pass_mesh",
          "description": ""
        },
        {
          "name": "draw_pass_2",
          "type": "Mesh",
          "setter": "set_draw_pass_mesh",
          "getter": "get_draw_pass_mesh",
          "description": ""
        },
        {
          "name": "draw_pass_3",
          "type": "Mesh",
          "setter": "set_draw_pass_mesh",
          "getter": "get_draw_pass_mesh",
          "description": ""
        },
        {
          "name": "draw_pass_4",
          "type": "Mesh",
          "setter": "set_draw_pass_mesh",
          "getter": "get_draw_pass_mesh",
          "description": ""
        },
        {
          "name": "draw_passes",
          "type": "int",
          "setter": "set_draw_passes",
          "getter": "get_draw_passes",
          "description": ""
        },
        {
          "name": "emitting",
          "type": "bool",
          "setter": "set_emitting",
          "getter": "is_emitting",
          "description": "If [code]true[/code] particles are being emitted. Default value: [code]true[/code]."
        },
        {
          "name": "explosiveness",
          "type": "float",
          "setter": "set_explosiveness_ratio",
          "getter": "get_explosiveness_ratio",
          "description": "Time ratio between each emission. If [code]0[/code] particles are emitted continuously. If [code]1[/code] all particles are emitted simultaneously. Default value: [code]0[/code]."
        },
        {
          "name": "fixed_fps",
          "type": "int",
          "setter": "set_fixed_fps",
          "getter": "get_fixed_fps",
          "description": ""
        },
        {
          "name": "fract_delta",
          "type": "bool",
          "setter": "set_fractional_delta",
          "getter": "get_fractional_delta",
          "description": ""
        },
        {
          "name": "lifetime",
          "type": "float",
          "setter": "set_lifetime",
          "getter": "get_lifetime",
          "description": "Amount of time each particle will exist. Default value: [code]1[/code]."
        },
        {
          "name": "local_coords",
          "type": "bool",
          "setter": "set_use_local_coordinates",
          "getter": "get_use_local_coordinates",
          "description": "If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code]."
        },
        {
          "name": "one_shot",
          "type": "bool",
          "setter": "set_one_shot",
          "getter": "get_one_shot",
          "description": "If [code]true[/code] only [code]amount[/code] particles will be emitted. Default value: [code]false[/code]."
        },
        {
          "name": "preprocess",
          "type": "float",
          "setter": "set_pre_process_time",
          "getter": "get_pre_process_time",
          "description": ""
        },
        {
          "name": "process_material",
          "type": "Material",
          "setter": "set_process_material",
          "getter": "get_process_material",
          "description": "[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial]."
        },
        {
          "name": "randomness",
          "type": "float",
          "setter": "set_randomness_ratio",
          "getter": "get_randomness_ratio",
          "description": "Emission randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "speed_scale",
          "type": "float",
          "setter": "set_speed_scale",
          "getter": "get_speed_scale",
          "description": "Speed scaling ratio. Default value: [code]1[/code]."
        },
        {
          "name": "visibility_aabb",
          "type": "Rect3",
          "setter": "set_visibility_aabb",
          "getter": "get_visibility_aabb",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Navigation2D": {
      "name": "Navigation2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_closest_point",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_owner",
          "description": "",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_simple_path",
          "description": "",
          "return_type": "PoolVector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "optimize",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "navpoly_create",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "NavigationPolygon",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "owner",
              "type": "Object",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "navpoly_remove",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "navpoly_set_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "int": {
      "name": "int",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Integer built-in type.",
      "description": "Integer built-in type.",
      "methods": [
        {
          "name": "int",
          "description": "Cast a [bool] value to an integer value, [code]int(true)[/code] will be equals to 1 and [code]int(false)[/code] will be equals to 0.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "int",
          "description": "Cast a float value to an integer value, this method simply removes the number fractions, so for example [code]int(2.7)[/code] will be equals to 2, [code]int(.1)[/code] will be equals to 0 and [code]int(-2.7)[/code] will be equals to -2.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "int",
          "description": "Cast a [String] value to an integer value, this method is an integer parser from a string, so calling this method with an invalid integer string will return 0, a valid string will be something like [code]'1.7'[/code]. This method will ignore all non-number characters, so calling [code]int('1e3')[/code] will return 13.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptGlobalConstant": {
      "name": "VisualScriptGlobalConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_global_constant",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_global_constant",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "constant",
          "type": "int",
          "setter": "set_global_constant",
          "getter": "get_global_constant",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ConeTwistJoint": {
      "name": "ConeTwistJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "ConeTwistJoint.Param",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "ConeTwistJoint.Param",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_SWING_SPAN",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_TWIST_SPAN",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_BIAS",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_SOFTNESS",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_RELAXATION",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "5",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "relaxation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "swing_span",
          "type": "float",
          "setter": "_set_swing_span",
          "getter": "_get_swing_span",
          "description": ""
        },
        {
          "name": "twist_span",
          "type": "float",
          "setter": "_set_twist_span",
          "getter": "_get_twist_span",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Camera2D": {
      "name": "Camera2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Camera node for 2D scenes.",
      "description": "Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem] based nodes.\n\t\tThis node is intended to be a simple helper to get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [Node2D] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [Viewport].",
      "methods": [
        {
          "name": "align",
          "description": "Align the camera to the tracked node",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_current",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_update_scroll",
          "description": "Force the camera to update scroll immediately.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_anchor_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_camera_position",
          "qualifiers": "const",
          "description": "Return the camera position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_camera_screen_center",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_custom_viewport",
          "qualifiers": "const",
          "description": "",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_drag_margin",
          "qualifiers": "const",
          "description": "Return the margins needed to drag the camera (see [method set_drag_margin]).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_follow_smoothing",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_h_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_limit",
          "qualifiers": "const",
          "description": "Return the scrolling limit in pixels.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the scroll offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_v_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_zoom",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "is_current",
          "qualifiers": "const",
          "description": "Return true of this is the current camera (see [method make_current]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_follow_smoothing_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_h_drag_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_limit_drawing_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_limit_smoothing_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_margin_drawing_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_rotating",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_screen_drawing_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_v_drag_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_current",
          "description": "Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reset_smoothing",
          "description": "Set the camera's position immediately to its current smoothing destination.\n\t\t\t\tThis has no effect if smoothing is disabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_anchor_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anchor_mode",
              "type": "int",
              "enum": "Camera2D.AnchorMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_viewport",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drag_margin",
          "description": "Set the margins needed to drag the camera (relative to the screen size). Margin uses the MARGIN_* enum. Drag margins of 0,0,0,0 will keep the camera at the center of the screen, while drag margins of 1,1,1,1 will only move when the camera is at the edges.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "drag_margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enable_follow_smoothing",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "follow_smoothing",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_follow_smoothing",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "follow_smoothing",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_drag_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_limit",
          "description": "Set the scrolling limit in pixels.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "limit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_limit_drawing_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "limit_drawing_enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_limit_smoothing_enabled",
          "description": "Smooth camera when reaching camera limits.\n\t\t\t\tThis requires camera smoothing being enabled to have a noticeable effect.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "limit_smoothing_enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin_drawing_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin_drawing_enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the scroll offset. Useful for looking around or camera shake animations.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotating",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotating",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_screen_drawing_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "screen_drawing_enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_drag_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_zoom",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "zoom",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ANCHOR_MODE_DRAG_CENTER",
          "value": "1",
          "description": ""
        },
        {
          "name": "ANCHOR_MODE_FIXED_TOP_LEFT",
          "value": "0",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "anchor_mode",
          "type": "int",
          "setter": "set_anchor_mode",
          "getter": "get_anchor_mode",
          "enum": "Camera2D.AnchorMode",
          "description": "The Camera2D's anchor point. See [code]ANCHOR_MODE_*[/code] constants."
        },
        {
          "name": "current",
          "type": "bool",
          "setter": "_set_current",
          "getter": "is_current",
          "description": "If [code]true[/code] this camera is the active camera for the current scene. Only one camera can be current, so setting a different camera [code]current[/code] will disable this one."
        },
        {
          "name": "drag_margin_bottom",
          "type": "float",
          "setter": "set_drag_margin",
          "getter": "get_drag_margin",
          "description": "Bottom margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen."
        },
        {
          "name": "drag_margin_h_enabled",
          "type": "bool",
          "setter": "set_h_drag_enabled",
          "getter": "is_h_drag_enabled",
          "description": ""
        },
        {
          "name": "drag_margin_left",
          "type": "float",
          "setter": "set_drag_margin",
          "getter": "get_drag_margin",
          "description": "Left margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen."
        },
        {
          "name": "drag_margin_right",
          "type": "float",
          "setter": "set_drag_margin",
          "getter": "get_drag_margin",
          "description": "Right margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen."
        },
        {
          "name": "drag_margin_top",
          "type": "float",
          "setter": "set_drag_margin",
          "getter": "get_drag_margin",
          "description": "Top margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen."
        },
        {
          "name": "drag_margin_v_enabled",
          "type": "bool",
          "setter": "set_v_drag_enabled",
          "getter": "is_v_drag_enabled",
          "description": ""
        },
        {
          "name": "editor_draw_drag_margin",
          "type": "bool",
          "setter": "set_margin_drawing_enabled",
          "getter": "is_margin_drawing_enabled",
          "description": ""
        },
        {
          "name": "editor_draw_limits",
          "type": "bool",
          "setter": "set_limit_drawing_enabled",
          "getter": "is_limit_drawing_enabled",
          "description": ""
        },
        {
          "name": "editor_draw_screen",
          "type": "bool",
          "setter": "set_screen_drawing_enabled",
          "getter": "is_screen_drawing_enabled",
          "description": ""
        },
        {
          "name": "limit_bottom",
          "type": "int",
          "setter": "set_limit",
          "getter": "get_limit",
          "description": "Bottom scroll limit in pixels. The camera stops moving when reaching this value."
        },
        {
          "name": "limit_left",
          "type": "int",
          "setter": "set_limit",
          "getter": "get_limit",
          "description": "Left scroll limit in pixels. The camera stops moving when reaching this value."
        },
        {
          "name": "limit_right",
          "type": "int",
          "setter": "set_limit",
          "getter": "get_limit",
          "description": "Right scroll limit in pixels. The camera stops moving when reaching this value."
        },
        {
          "name": "limit_smoothed",
          "type": "bool",
          "setter": "set_limit_smoothing_enabled",
          "getter": "is_limit_smoothing_enabled",
          "description": ""
        },
        {
          "name": "limit_top",
          "type": "int",
          "setter": "set_limit",
          "getter": "get_limit",
          "description": "Top scroll limit in pixels. The camera stops moving when reaching this value."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The camera's offset, useful for looking around or camera shake animations."
        },
        {
          "name": "rotating",
          "type": "bool",
          "setter": "set_rotating",
          "getter": "is_rotating",
          "description": ""
        },
        {
          "name": "smoothing_enabled",
          "type": "bool",
          "setter": "set_enable_follow_smoothing",
          "getter": "is_follow_smoothing_enabled",
          "description": ""
        },
        {
          "name": "smoothing_speed",
          "type": "float",
          "setter": "set_follow_smoothing",
          "getter": "get_follow_smoothing",
          "description": ""
        },
        {
          "name": "zoom",
          "type": "Vector2",
          "setter": "set_zoom",
          "getter": "get_zoom",
          "description": "The camera's zoom relative to the viewport. Values larger than [code]Vector2(1, 1)[/code] zoom out and smaller values zoom in. For an example, use [code]Vector2(0.5, 0.5)[/code] for a 2x zoom in, and [code]Vector2(4, 4)[/code] for a 4x zoom out."
        }
      ],
      "theme_properties": []
    },
    "HSlider": {
      "name": "HSlider",
      "inherits": "Slider",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Horizontal slider.",
      "description": "Horizontal slider. See [Slider]. This one goes from left (min) to right (max).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_area",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_disabled",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "slider",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tick",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "Theme": {
      "name": "Theme",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Theme for controls.",
      "description": "Theme for skinning controls. Controls can be skinned individually, but for complex applications it's more efficient to just create a global theme that defines everything. This theme can be applied to any [Control], and it and its children will automatically use it.\n\t\tTheme resources can be alternatively loaded by writing them in a .theme file, see docs for more info.",
      "methods": [
        {
          "name": "clear_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_constant",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_font",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_icon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_stylebox",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "copy_default_theme",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_constant_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_default_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "Font",
          "arguments": []
        },
        {
          "name": "get_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "Font",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_font_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "StyleBox",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_stylebox_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_stylebox_types",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_type_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "constant",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_font",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_font",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stylebox",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "texture",
              "type": "StyleBox",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "default_font",
          "type": "Font",
          "setter": "set_default_font",
          "getter": "get_default_font",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "RayCast": {
      "name": "RayCast",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Query the closest object intersecting a ray.",
      "description": "A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 3D space in order to find the closest object along the path of the ray.\n\t\tRayCast can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.\n\t\tOnly enabled raycasts will be able to query the space and report collisions.\n\t\tRayCast calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.",
      "methods": [
        {
          "name": "add_exception",
          "description": "Adds a collision exception so the ray does not report collisions with the specified node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_exception_rid",
          "description": "Adds a collision exception so the ray does not report collisions with the specified [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_exceptions",
          "description": "Removes all collision exceptions for this ray.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_raycast_update",
          "description": "Updates the collision information for the ray.\n\t\t\t\tUse this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state. Note: [code]enabled == true[/code] is not required for this to work.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cast_to",
          "qualifiers": "const",
          "description": "Return the destination point of this ray object.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "Return the closest object the ray is pointing to. Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tif RayCast.is_colliding():\n\t\t\t\t    var collider = RayCast.get_collider()\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "Returns the collision shape of the closest object the ray is pointing to.  Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tif RayCast.is_colliding():\n\t\t\t\t    var shape = RayCast.get_collider_shape()\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "Returns the collision layer for this ray.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "Returns the normal of the intersecting object's shape at the collision point.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_collision_point",
          "qualifiers": "const",
          "description": "Returns the collision point at which the ray intersects the closest object. Note: this point is in the [b]global[/b] coordinate system.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_type_mask",
          "qualifiers": "const",
          "description": "Returns the type mask (types of objects to detect) for this ray. The value is a sum (bitwise OR'd) of constants available for [PhysicsDirectSpaceState].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_colliding",
          "qualifiers": "const",
          "description": "Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "Returns whether the ray is enabled or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove_exception",
          "description": "Removes a collision exception so the ray does report collisions with the specified node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_exception_rid",
          "description": "Removes a collision exception so the ray does report collisions with the specified [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cast_to",
          "description": "Sets the ray destination point, so that the ray will test from the ray's origin to [code]local_point[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer",
          "description": "Set the mask to filter objects. Only objects with at least the same mask element set will be detected.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled",
          "description": "Enables the RayCast2D. Only enabled raycasts will be able to query the space and report collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_type_mask",
          "description": "Set the types of objects to detect. For [code]mask[/code] use a logic sum (OR operation) of constants defined in [PhysicsDirectSpaceState], eg. [code]PhysicsDirectSpaceState.TYPE_MASK_STATIC_BODY | PhysicsDirectSpaceState.TYPE_MASK_KINEMATIC_BODY[/code] to detect only those two types.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "cast_to",
          "type": "Vector3",
          "setter": "set_cast_to",
          "getter": "get_cast_to",
          "description": "The ray's destination point, relative to the RayCast's [code]position[/code]."
        },
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The RayCast's collision layer(s). Only bodies in the same collision layer(s) will be detected."
        },
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": "If [code]true[/code], collisions will be reported. Default value: [code]false[/code]."
        },
        {
          "name": "type_mask",
          "type": "int",
          "setter": "set_type_mask",
          "getter": "get_type_mask",
          "description": "Object types to detect using a logical sum (OR operation) of type constants defined in [Physics2DDirectSpaceState].\n\t\t\tExample:\n\t\t\t[codeblock]\n\t\t\tRayCast.type_mask = Physics2DDirectSpaceState.TYPE_MASK_STATIC_BODY | Physics2DDirectSpaceState.TYPE_MASK_KINEMATIC_BODY\n\t\t\t[/codeblock]"
        }
      ],
      "theme_properties": []
    },
    "AudioServer": {
      "name": "AudioServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Server interface for low level audio access.",
      "description": "AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.",
      "methods": [
        {
          "name": "add_bus",
          "description": "Adds a bus at [code]at_position[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_bus_effect",
          "description": "Adds an [AudioEffect] effect to the bus [code]bus_idx[/code] at [code]at_position[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect",
              "type": "AudioEffect",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "generate_bus_layout",
          "qualifiers": "const",
          "description": "Generates an [AudioBusLayout] using the available busses and effects.",
          "return_type": "AudioBusLayout",
          "arguments": []
        },
        {
          "name": "get_bus_count",
          "qualifiers": "const",
          "description": "Returns the number of available busses.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bus_effect",
          "description": "Returns the [AudioEffect] at position [code]effect_idx[/code] in bus [code]bus_idx[/code].",
          "return_type": "AudioEffect",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_effect_count",
          "description": "Returns the number of effects on the bus at [code]bus_idx[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_index",
          "qualifiers": "const",
          "description": "Returns the index of the bus with the name [code]bus_name[/code].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "bus_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_name",
          "qualifiers": "const",
          "description": "Returns the name of the bus with the index [code]bus_idx[/code].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_peak_volume_left_db",
          "qualifiers": "const",
          "description": "Returns the peak volume of the left speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "channel",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_peak_volume_right_db",
          "qualifiers": "const",
          "description": "Returns the peak volume of the right speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "channel",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_send",
          "qualifiers": "const",
          "description": "Returns the name of the bus that the bus at index [code]bus_idx[/code] sends to.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bus_volume_db",
          "qualifiers": "const",
          "description": "Returns the volume of the bus at index [code]bus_idx[/code] in dB.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_mix_rate",
          "qualifiers": "const",
          "description": "Returns the sample rate at the output of the audioserver.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_speaker_mode",
          "qualifiers": "const",
          "description": "Returns the speaker configuration.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_bus_bypassing_effects",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_bus_effect_enabled",
          "qualifiers": "const",
          "description": "If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_bus_mute",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_bus_solo",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "lock",
          "description": "Locks the audio drivers mainloop. Remember to unlock it afterwards.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "move_bus",
          "description": "Moves the bus from index [code]index[/code] to index [code]to_index[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_bus",
          "description": "Removes the bus at index [code]index[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_bus_effect",
          "description": "Removes the effect at index [code]effect_idx[/code] from the bus at index [code]bus_idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_bypass_effects",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_count",
          "description": "Adds and removes busses to make the number of busses match [code]amount[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_effect_enabled",
          "description": "If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_layout",
          "description": "Overwrites the currently used [AudioBusLayout].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_layout",
              "type": "AudioBusLayout",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_mute",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_name",
          "description": "Sets the name of the bus at index [code]bus_idx[/code] to [code]name[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_send",
          "description": "Connects the output of the bus at [code]bus_idx[/code] to the bus named [code]send[/send].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "send",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_solo",
          "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus_volume_db",
          "description": "Sets the volume of the bus at index [code]bus_idx[/code] to [code]volume_db[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "volume_db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "swap_bus_effects",
          "description": "Swaps the position of two effects in bus [code]bus_idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "effect_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "by_effect_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unlock",
          "description": "Unlocks the audiodriver's main loop. After locking it always unlock it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "bus_layout_changed",
          "description": "Emitted when the [AudioBusLayout] changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "SPEAKER_MODE_STEREO",
          "value": "0",
          "description": "Two or fewer speakers are detected."
        },
        {
          "name": "SPEAKER_SURROUND_51",
          "value": "2",
          "description": "A 5.1 channel surround setup detected."
        },
        {
          "name": "SPEAKER_SURROUND_71",
          "value": "3",
          "description": "A 7.1 channel surround setup detected."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Sprite": {
      "name": "Sprite",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "General purpose Sprite node.",
      "description": "A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.",
      "methods": [
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "Return the texture frame for a sprite-sheet, works when vframes or hframes are greater than 1.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_hframes",
          "qualifiers": "const",
          "description": "Return the amount of horizontal frames. See [method set_hframes].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_normal_map",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return sprite draw offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_region_rect",
          "qualifiers": "const",
          "description": "Return the region rect to read from.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Return the base texture for the sprite.",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_vframes",
          "qualifiers": "const",
          "description": "Return the amount of vertical frames. See [method set_vframes].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_centered",
          "qualifiers": "const",
          "description": "Return if the sprite is centered at the local origin.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_h",
          "qualifiers": "const",
          "description": "Return true if the sprite is flipped horizontally.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_v",
          "qualifiers": "const",
          "description": "Return true if the sprite is flipped vertically.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_region",
          "qualifiers": "const",
          "description": "Return if the sprite reads from a region.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_region_filter_clip_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_centered",
          "description": "Set whether the sprite should be centered on the origin.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "centered",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_h",
          "description": "Set true to flip the sprite horizontally.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_h",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_v",
          "description": "Set true to flip the sprite vertically.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_v",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_frame",
          "description": "Set the texture frame for a sprite-sheet, works when vframes or hframes are greater than 1.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frame",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hframes",
          "description": "Set the amount of horizontal frames and converts the sprite into a sprite-sheet. This is useful for animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hframes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal_map",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal_map",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the sprite draw offset, useful for setting rotation pivots.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region",
          "description": "Set the sprite as a sub-region of a bigger texture. Useful for texture-atlases.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_filter_clip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_rect",
          "description": "Set the region rect to read from.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "Set the base texture for the sprite.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vframes",
          "description": "Set the amount of vertical frames and converts the sprite into a sprite-sheet. This is useful for animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vframes",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "frame_changed",
          "description": "Emitted when the [member frame] changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "texture_changed",
          "description": "Emitted when the [member texture] changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "centered",
          "type": "bool",
          "setter": "set_centered",
          "getter": "is_centered",
          "description": "If [code]true[/code] texture is centered. Default value: [code]true[/code]."
        },
        {
          "name": "flip_h",
          "type": "bool",
          "setter": "set_flip_h",
          "getter": "is_flipped_h",
          "description": "If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code]."
        },
        {
          "name": "flip_v",
          "type": "bool",
          "setter": "set_flip_v",
          "getter": "is_flipped_v",
          "description": "If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code]."
        },
        {
          "name": "frame",
          "type": "int",
          "setter": "set_frame",
          "getter": "get_frame",
          "description": "Current frame to display from sprite sheet. [member vframes] or [member hframes] must be greater than 1."
        },
        {
          "name": "hframes",
          "type": "int",
          "setter": "set_hframes",
          "getter": "get_hframes",
          "description": "The number of collumns in the sprite sheet."
        },
        {
          "name": "normal_map",
          "type": "Texture",
          "setter": "set_normal_map",
          "getter": "get_normal_map",
          "description": "The normal map gives depth to the Sprite."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The texture's drawing offset."
        },
        {
          "name": "region_enabled",
          "type": "bool",
          "setter": "set_region",
          "getter": "is_region",
          "description": "If [code]true[/code] texture is cut from a larger atlas texture. See [code]region_rect[/code]. Default value: [code]false[/code]."
        },
        {
          "name": "region_filter_clip",
          "type": "bool",
          "setter": "set_region_filter_clip",
          "getter": "is_region_filter_clip_enabled",
          "description": "If [code]true[/code] the outermost pixels get blurred out."
        },
        {
          "name": "region_rect",
          "type": "Rect2",
          "setter": "set_region_rect",
          "getter": "get_region_rect",
          "description": "The region of the atlas texture to display. [member region_enabled] must be [code]true[/code]."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "[Texture] object to draw."
        },
        {
          "name": "vframes",
          "type": "int",
          "setter": "set_vframes",
          "getter": "get_vframes",
          "description": "The number of rows in the sprite sheet."
        }
      ],
      "theme_properties": []
    },
    "ShortCut": {
      "name": "ShortCut",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_as_text",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_shortcut",
          "qualifiers": "const",
          "description": "",
          "return_type": "InputEvent",
          "arguments": []
        },
        {
          "name": "is_shortcut",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "shortcut",
          "type": "InputEvent",
          "setter": "set_shortcut",
          "getter": "get_shortcut",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "MeshInstance": {
      "name": "MeshInstance",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Node that instances meshes into a scenario.",
      "description": "MeshInstance is a [Node] that takes a [Mesh] resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single [Mesh] in many places. This allows to reuse geometry and save on resources. When a [Mesh] has to be instanced more than thousands of times at close proximity, consider using a [MultiMesh] in a [MultiMeshInstance] instead.",
      "methods": [
        {
          "name": "create_convex_collision",
          "description": "This helper creates a [StaticBody] child [Node] with a [ConvexPolygonShape] [CollisionShape] calculated from the mesh geometry. It's mainly used for testing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_debug_tangents",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_trimesh_collision",
          "description": "This helper creates a [StaticBody] child [Node] with a [ConcavePolygonShape] [CollisionShape] calculated from the mesh geometry. It's mainly used for testing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_mesh",
          "qualifiers": "const",
          "description": "Returns the current [Mesh] resource for the instance.",
          "return_type": "Mesh",
          "arguments": []
        },
        {
          "name": "get_skeleton_path",
          "description": "",
          "return_type": "NodePath",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_surface_material",
          "qualifiers": "const",
          "description": "Returns the [Material] for a surface of the [Mesh] resource.",
          "return_type": "Material",
          "arguments": [
            {
              "index": "0",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mesh",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_skeleton_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "skeleton_path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_surface_material",
          "description": "Sets the [Material] for a surface of the [Mesh] resource.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surface",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "mesh",
          "type": "Mesh",
          "setter": "set_mesh",
          "getter": "get_mesh",
          "description": "The [Mesh] resource for the instance."
        },
        {
          "name": "skeleton",
          "type": "NodePath",
          "setter": "set_skeleton_path",
          "getter": "get_skeleton_path",
          "description": "[NodePath] to the [Skeleton] associated with the instance."
        }
      ],
      "theme_properties": []
    },
    "HingeJoint": {
      "name": "HingeJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "HingeJoint.Flag",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "HingeJoint.Param",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "HingeJoint.Flag",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "HingeJoint.Param",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_BIAS",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_UPPER",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_LOWER",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_BIAS",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_SOFTNESS",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_LIMIT_RELAXATION",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARAM_MOTOR_TARGET_VELOCITY",
          "value": "6",
          "description": ""
        },
        {
          "name": "PARAM_MOTOR_MAX_IMPULSE",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "8",
          "description": ""
        },
        {
          "name": "FLAG_USE_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "FLAG_ENABLE_MOTOR",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "angular_limit/bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_limit/enable",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "angular_limit/lower",
          "type": "float",
          "setter": "_set_lower_limit",
          "getter": "_get_lower_limit",
          "description": ""
        },
        {
          "name": "angular_limit/relaxation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_limit/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_limit/upper",
          "type": "float",
          "setter": "_set_upper_limit",
          "getter": "_get_upper_limit",
          "description": ""
        },
        {
          "name": "motor/enable",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "motor/max_impulse",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "motor/target_velocity",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "params/bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "BoneAttachment": {
      "name": "BoneAttachment",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A node that will attach to a bone.",
      "description": "This node must be the child of a [Skeleton] node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone.",
      "methods": [
        {
          "name": "get_bone_name",
          "qualifiers": "const",
          "description": "Returns the name of the bone node attached to.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_bone_name",
          "description": "Changes the name of the bone node",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bone_name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptFunctionCall": {
      "name": "VisualScriptFunctionCall",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_base_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_base_script",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_base_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_basic_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_call_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_function",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_rpc_call_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_singleton",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_use_default_args",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_validate",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_base_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_script",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_script",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_basic_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "basic_type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_call_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "VisualScriptFunctionCall.CallMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_function",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "function",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rpc_call_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "VisualScriptFunctionCall.RPCCallMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_singleton",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "singleton",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_default_args",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_validate",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CALL_MODE_SELF",
          "value": "0",
          "description": ""
        },
        {
          "name": "CALL_MODE_NODE_PATH",
          "value": "1",
          "description": ""
        },
        {
          "name": "CALL_MODE_INSTANCE",
          "value": "2",
          "description": ""
        },
        {
          "name": "CALL_MODE_BASIC_TYPE",
          "value": "3",
          "description": ""
        },
        {
          "name": "CALL_MODE_SINGLETON",
          "value": "4",
          "description": ""
        },
        {
          "name": "RPC_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "RPC_RELIABLE",
          "value": "1",
          "description": ""
        },
        {
          "name": "RPC_UNRELIABLE",
          "value": "2",
          "description": ""
        },
        {
          "name": "RPC_RELIABLE_TO_ID",
          "value": "3",
          "description": ""
        },
        {
          "name": "RPC_UNRELIABLE_TO_ID",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "argument_cache",
          "type": "Dictionary",
          "setter": "_set_argument_cache",
          "getter": "_get_argument_cache",
          "description": ""
        },
        {
          "name": "base_script",
          "type": "String",
          "setter": "set_base_script",
          "getter": "get_base_script",
          "description": ""
        },
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        },
        {
          "name": "basic_type",
          "type": "int",
          "setter": "set_basic_type",
          "getter": "get_basic_type",
          "enum": "Variant.Type",
          "description": ""
        },
        {
          "name": "call_mode",
          "type": "int",
          "setter": "set_call_mode",
          "getter": "get_call_mode",
          "enum": "VisualScriptFunctionCall.CallMode",
          "description": ""
        },
        {
          "name": "function",
          "type": "String",
          "setter": "set_function",
          "getter": "get_function",
          "description": ""
        },
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_base_path",
          "getter": "get_base_path",
          "description": ""
        },
        {
          "name": "rpc_call_mode",
          "type": "int",
          "setter": "set_rpc_call_mode",
          "getter": "get_rpc_call_mode",
          "enum": "VisualScriptFunctionCall.RPCCallMode",
          "description": ""
        },
        {
          "name": "singleton",
          "type": "String",
          "setter": "set_singleton",
          "getter": "get_singleton",
          "description": ""
        },
        {
          "name": "use_default_args",
          "type": "int",
          "setter": "set_use_default_args",
          "getter": "get_use_default_args",
          "description": ""
        },
        {
          "name": "validate",
          "type": "bool",
          "setter": "set_validate",
          "getter": "get_validate",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "MainLoop": {
      "name": "MainLoop",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Main loop is the abstract main loop base class.",
      "description": "Main loop is the abstract main loop base class. All other main loop classes are derived from it. Upon application start, a [MainLoop] has to be provided to OS, else the application will exit. This happens automatically (and a [SceneTree] is created), unless a main [Script] is supplied, which may or not create and return a [MainLoop].",
      "methods": [
        {
          "name": "_drop_files",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "files",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "screen",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_finalize",
          "qualifiers": "virtual",
          "description": "Called before the program exits.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_idle",
          "qualifiers": "virtual",
          "description": "Called each idle frame with time since last call as an only argument.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_initialize",
          "qualifiers": "virtual",
          "description": "Called once during initialization.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "ev",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_input_text",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_iteration",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "finish",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "idle",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "init",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "input_event",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ev",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "input_text",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "iteration",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NOTIFICATION_WM_MOUSE_ENTER",
          "value": "2",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_MOUSE_EXIT",
          "value": "3",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_FOCUS_IN",
          "value": "4",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_FOCUS_OUT",
          "value": "5",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_QUIT_REQUEST",
          "value": "6",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_UNFOCUS_REQUEST",
          "value": "8",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_OS_MEMORY_WARNING",
          "value": "9",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_TRANSLATION_CHANGED",
          "value": "90",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_WM_ABOUT",
          "value": "91",
          "enum": "",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SplitContainer": {
      "name": "SplitContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Container for splitting and adjusting.",
      "description": "Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.",
      "methods": [
        {
          "name": "get_dragger_visibility",
          "qualifiers": "const",
          "description": "Return visibility of the split dragger (one of [DRAGGER_VISIBLE], [DRAGGER_HIDDEN] or [DRAGGER_HIDDEN_COLLAPSED]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_split_offset",
          "qualifiers": "const",
          "description": "Return the split offset.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_collapsed",
          "qualifiers": "const",
          "description": "Return true if the split is collapsed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_collapsed",
          "description": "Set if the split must be collapsed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collapsed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dragger_visibility",
          "description": "Set visibility of the split dragger ([i]mode[/i] must be one of [DRAGGER_VISIBLE], [DRAGGER_HIDDEN] or [DRAGGER_HIDDEN_COLLAPSED]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "SplitContainer.DraggerVisibility",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_split_offset",
          "description": "Set the split offset.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "dragged",
          "description": "Emitted when the dragger is dragged by user.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "DRAGGER_VISIBLE",
          "value": "0",
          "description": "The split dragger is visible."
        },
        {
          "name": "DRAGGER_HIDDEN",
          "value": "1",
          "description": "The split dragger is invisible."
        },
        {
          "name": "DRAGGER_HIDDEN_COLLAPSED",
          "value": "2",
          "description": "The split dragger is invisible and collapsed."
        }
      ],
      "properties": [
        {
          "name": "collapsed",
          "type": "bool",
          "setter": "set_collapsed",
          "getter": "is_collapsed",
          "description": ""
        },
        {
          "name": "dragger_visibility",
          "type": "int",
          "setter": "set_dragger_visibility",
          "getter": "get_dragger_visibility",
          "enum": "SplitContainer.DraggerVisibility",
          "description": ""
        },
        {
          "name": "split_offset",
          "type": "int",
          "setter": "set_split_offset",
          "getter": "get_split_offset",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Engine": {
      "name": "Engine",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Access to basic engine properties.",
      "description": "The [Engine] class allows you to query and modify the game's run-time parameters, such as frames per second, time scale, and others.",
      "methods": [
        {
          "name": "get_frames_drawn",
          "description": "Returns the total number of frames drawn.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_frames_per_second",
          "qualifiers": "const",
          "description": "Returns the frames per second of the running game.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_iterations_per_second",
          "qualifiers": "const",
          "description": "Returns the number of fixed iterations per second (for fixed process and physics).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_main_loop",
          "qualifiers": "const",
          "description": "Returns the main loop object (see [MainLoop] and [SceneTree]).",
          "return_type": "MainLoop",
          "arguments": []
        },
        {
          "name": "get_target_fps",
          "qualifiers": "const",
          "description": "Returns the desired frames per second. If the hardware cannot keep up, this setting may not be respected. It defaults to 0, which indicates no limit.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_time_scale",
          "description": "Returns how fast or slow the in-game clock ticks versus the real life one. It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, whilst a value of 0.5 means the game moves at half the regular speed.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_version_info",
          "qualifiers": "const",
          "description": "Returns the current engine version information in a Dictionary.\n\n\t\t\t\t\"major\"    - Holds the major version number as a String\n\t\t\t\t\"minor\"    - Holds the minor version number as a String\n\t\t\t\t\"patch\"    - Holds the patch version number as a String\n\t\t\t\t\"status\"   - Holds the status (e.g. \"beta\", \"rc1\", \"rc2\", ... \"stable\") as a String\n\t\t\t\t\"revision\" - Holds the revision (e.g. \"custom-build\") as a String\n\t\t\t\t\"string\"   - major + minor + patch + status + revision in a single String",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "is_editor_hint",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the editor is running.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_in_physics_frame",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the game is inside the fixed process and physics phase of the game loop.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_editor_hint",
          "description": "Sets the running inside the editor hint if [code]enabled[/code] is [code]true[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_iterations_per_second",
          "description": "Sets the number of fixed iterations per second (for fixed process and physics).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "iterations_per_second",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_target_fps",
          "description": "Sets the target frames per second.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target_fps",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_time_scale",
          "description": "Sets the time scale.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SceneTreeTimer": {
      "name": "SceneTreeTimer",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_time_left",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_time_left",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "timeout",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Shader": {
      "name": "Shader",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "To be changed, ignore.",
      "description": "To be changed, ignore.",
      "methods": [
        {
          "name": "get_code",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_default_texture_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_code",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "code",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_texture_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MODE_SPATIAL",
          "value": "0",
          "description": ""
        },
        {
          "name": "MODE_CANVAS_ITEM",
          "value": "1",
          "description": ""
        },
        {
          "name": "MODE_PARTICLES",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "code",
          "type": "String",
          "setter": "set_code",
          "getter": "get_code",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ConfirmationDialog": {
      "name": "ConfirmationDialog",
      "inherits": "AcceptDialog",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Dialog for confirmation of actions.",
      "description": "Dialog for confirmation of actions. This dialog inherits from [AcceptDialog], but has by default an OK and Cancel button (in host OS order).",
      "methods": [
        {
          "name": "get_cancel",
          "description": "Return the cancel button.",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Position2D": {
      "name": "Position2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Generic 2D Position hint for editing.",
      "description": "Generic 2D Position hint for editing. It's just like a plain [Node2D] but displays as a cross in the 2D-Editor at all times.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NavigationPolygon": {
      "name": "NavigationPolygon",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_outline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "outline",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_outline_at_index",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "outline",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_polygon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_outlines",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_polygons",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_outline",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_outline_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "description": "",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_polygon_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertices",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "make_polygons_from_outlines",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_outline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_outline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "outline",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertices",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertices",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "outlines",
          "type": "Array",
          "setter": "_set_outlines",
          "getter": "_get_outlines",
          "description": ""
        },
        {
          "name": "polygons",
          "type": "Array",
          "setter": "_set_polygons",
          "getter": "_get_polygons",
          "description": ""
        },
        {
          "name": "vertices",
          "type": "PoolVector2Array",
          "setter": "set_vertices",
          "getter": "get_vertices",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "SpinBox": {
      "name": "SpinBox",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Numerical input text field.",
      "description": "SpinBox is a numerical input text field. It allows entering integers and floats.",
      "methods": [
        {
          "name": "get_line_edit",
          "description": "",
          "return_type": "LineEdit",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_prefix",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_suffix",
          "qualifiers": "const",
          "description": "Return the specific suffix.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_editable",
          "qualifiers": "const",
          "description": "Return if the spinbox is editable.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_editable",
          "description": "Set whether the spinbox is editable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "editable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_prefix",
          "description": "Set a prefix.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "prefix",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suffix",
          "description": "Set a specific suffix.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "suffix",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "editable",
          "type": "bool",
          "setter": "set_editable",
          "getter": "is_editable",
          "description": ""
        },
        {
          "name": "prefix",
          "type": "String",
          "setter": "set_prefix",
          "getter": "get_prefix",
          "description": ""
        },
        {
          "name": "suffix",
          "type": "String",
          "setter": "set_suffix",
          "getter": "get_suffix",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "updown",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "AudioEffect": {
      "name": "AudioEffect",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Audio Effect For Audio.",
      "description": "Base resource for audio bus. Applies an audio effect on the bus that the resource is applied on.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorExportPlugin": {
      "name": "EditorExportPlugin",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "_export_begin",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "features",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_export_file",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "features",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_file",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "file",
              "type": "PoolByteArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "remap",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_shared_object",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "skip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NetworkedMultiplayerPeer": {
      "name": "NetworkedMultiplayerPeer",
      "inherits": "PacketPeer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_connection_status",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_packet_peer",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_unique_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_refusing_new_connections",
          "qualifiers": "const",
          "description": "Return whether this [NetworkedMultiplayerPeer] is refusing new connections.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "poll",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_refuse_new_connections",
          "description": "If [code]endable[/code] is true, this [NetworkedMultiplayerPeer] will refuse new connections.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_target_peer",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transfer_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "NetworkedMultiplayerPeer.TransferMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "connection_failed",
          "description": "Emitted when failed to connect to server.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connection_succeeded",
          "description": "Emitted when successfully connected to server.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "peer_connected",
          "description": "Emitted by the server when a client is connected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "peer_disconnected",
          "description": "Emitted by the server when a client is disconnected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "server_disconnected",
          "description": "Emitted by clients when server is disconnected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "TRANSFER_MODE_UNRELIABLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "TRANSFER_MODE_UNRELIABLE_ORDERED",
          "value": "1",
          "description": ""
        },
        {
          "name": "TRANSFER_MODE_RELIABLE",
          "value": "2",
          "description": ""
        },
        {
          "name": "CONNECTION_DISCONNECTED",
          "value": "0",
          "description": ""
        },
        {
          "name": "CONNECTION_CONNECTING",
          "value": "1",
          "description": ""
        },
        {
          "name": "CONNECTION_CONNECTED",
          "value": "2",
          "description": ""
        },
        {
          "name": "TARGET_PEER_BROADCAST",
          "value": "0",
          "enum": "",
          "description": ""
        },
        {
          "name": "TARGET_PEER_SERVER",
          "value": "1",
          "enum": "",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "PinJoint": {
      "name": "PinJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "PinJoint.Param",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "PinJoint.Param",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_BIAS",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_DAMPING",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_IMPULSE_CLAMP",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "params/bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "params/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "params/impulse_clamp",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectChorus": {
      "name": "AudioEffectChorus",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a chorus audio effect.",
      "description": "Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter.",
      "methods": [
        {
          "name": "get_dry",
          "qualifiers": "const",
          "description": "Returns the set dry ratio.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_voice_count",
          "qualifiers": "const",
          "description": "Returns the set voice count.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_voice_cutoff_hz",
          "qualifiers": "const",
          "description": "Returns the voice's set cutoff frequency.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_voice_delay_ms",
          "qualifiers": "const",
          "description": "Returns the voice's set delay.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_voice_depth_ms",
          "qualifiers": "const",
          "description": "Returns the voice's set filter depth.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_voice_level_db",
          "qualifiers": "const",
          "description": "Returns the voice's set maximum volume.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_voice_pan",
          "qualifiers": "const",
          "description": "Returns the voice's set pan.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_voice_rate_hz",
          "qualifiers": "const",
          "description": "Returns the voice filter's set rate in cycles.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_wet",
          "qualifiers": "const",
          "description": "Returns the set applied wetness of the effect.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_dry",
          "description": "Returns the set applied dryness of the effect.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_voice_count",
          "description": "Set the number of voices in the effect's filter.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voices",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_voice_cutoff_hz",
          "description": "Set the cutoff frequency of the voice. The maximum frequency the voice may affect.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cutoff_hz",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_voice_delay_ms",
          "description": "Set the delay of the voice's signal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "delay_ms",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_voice_depth_ms",
          "description": "Set the filter depth of the voice's signal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "depth_ms",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_voice_level_db",
          "description": "Set the volume level of the voice.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "level_db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_voice_pan",
          "description": "Set the pan level of the voice.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pan",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_voice_rate_hz",
          "description": "Set the voice filter's rate.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "voice_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rate_hz",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_wet",
          "description": "Set the amount of effect.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "dry",
          "type": "float",
          "setter": "set_dry",
          "getter": "get_dry",
          "description": "The effect's raw signal."
        },
        {
          "name": "voice/1/cutoff_hz",
          "type": "float",
          "setter": "set_voice_cutoff_hz",
          "getter": "get_voice_cutoff_hz",
          "description": "The voice's cutoff frequency."
        },
        {
          "name": "voice/1/delay_ms",
          "type": "float",
          "setter": "set_voice_delay_ms",
          "getter": "get_voice_delay_ms",
          "description": "The voice's signal delay."
        },
        {
          "name": "voice/1/depth_ms",
          "type": "float",
          "setter": "set_voice_depth_ms",
          "getter": "get_voice_depth_ms",
          "description": "The voice filter's depth."
        },
        {
          "name": "voice/1/level_db",
          "type": "float",
          "setter": "set_voice_level_db",
          "getter": "get_voice_level_db",
          "description": "The voice's volume."
        },
        {
          "name": "voice/1/pan",
          "type": "float",
          "setter": "set_voice_pan",
          "getter": "get_voice_pan",
          "description": "The voice's pan level."
        },
        {
          "name": "voice/1/rate_hz",
          "type": "float",
          "setter": "set_voice_rate_hz",
          "getter": "get_voice_rate_hz",
          "description": "The voice's filter rate."
        },
        {
          "name": "voice/2/cutoff_hz",
          "type": "float",
          "setter": "set_voice_cutoff_hz",
          "getter": "get_voice_cutoff_hz",
          "description": "The voice's cutoff frequency."
        },
        {
          "name": "voice/2/delay_ms",
          "type": "float",
          "setter": "set_voice_delay_ms",
          "getter": "get_voice_delay_ms",
          "description": "The voice's signal delay."
        },
        {
          "name": "voice/2/depth_ms",
          "type": "float",
          "setter": "set_voice_depth_ms",
          "getter": "get_voice_depth_ms",
          "description": "The voice filter's depth."
        },
        {
          "name": "voice/2/level_db",
          "type": "float",
          "setter": "set_voice_level_db",
          "getter": "get_voice_level_db",
          "description": "The voice's volume."
        },
        {
          "name": "voice/2/pan",
          "type": "float",
          "setter": "set_voice_pan",
          "getter": "get_voice_pan",
          "description": "The voice's pan level."
        },
        {
          "name": "voice/2/rate_hz",
          "type": "float",
          "setter": "set_voice_rate_hz",
          "getter": "get_voice_rate_hz",
          "description": "The voice's filter rate."
        },
        {
          "name": "voice/3/cutoff_hz",
          "type": "float",
          "setter": "set_voice_cutoff_hz",
          "getter": "get_voice_cutoff_hz",
          "description": "The voice's cutoff frequency."
        },
        {
          "name": "voice/3/delay_ms",
          "type": "float",
          "setter": "set_voice_delay_ms",
          "getter": "get_voice_delay_ms",
          "description": "The voice's signal delay."
        },
        {
          "name": "voice/3/depth_ms",
          "type": "float",
          "setter": "set_voice_depth_ms",
          "getter": "get_voice_depth_ms",
          "description": "The voice filter's depth."
        },
        {
          "name": "voice/3/level_db",
          "type": "float",
          "setter": "set_voice_level_db",
          "getter": "get_voice_level_db",
          "description": "The voice's volume."
        },
        {
          "name": "voice/3/pan",
          "type": "float",
          "setter": "set_voice_pan",
          "getter": "get_voice_pan",
          "description": "The voice's pan level."
        },
        {
          "name": "voice/3/rate_hz",
          "type": "float",
          "setter": "set_voice_rate_hz",
          "getter": "get_voice_rate_hz",
          "description": "The voice's filter rate."
        },
        {
          "name": "voice/4/cutoff_hz",
          "type": "float",
          "setter": "set_voice_cutoff_hz",
          "getter": "get_voice_cutoff_hz",
          "description": "The voice's cutoff frequency."
        },
        {
          "name": "voice/4/delay_ms",
          "type": "float",
          "setter": "set_voice_delay_ms",
          "getter": "get_voice_delay_ms",
          "description": "The voice's signal delay."
        },
        {
          "name": "voice/4/depth_ms",
          "type": "float",
          "setter": "set_voice_depth_ms",
          "getter": "get_voice_depth_ms",
          "description": "The voice filter's depth."
        },
        {
          "name": "voice/4/level_db",
          "type": "float",
          "setter": "set_voice_level_db",
          "getter": "get_voice_level_db",
          "description": "The voice's volume."
        },
        {
          "name": "voice/4/pan",
          "type": "float",
          "setter": "set_voice_pan",
          "getter": "get_voice_pan",
          "description": "The voice's pan level."
        },
        {
          "name": "voice/4/rate_hz",
          "type": "float",
          "setter": "set_voice_rate_hz",
          "getter": "get_voice_rate_hz",
          "description": "The voice's filter rate."
        },
        {
          "name": "voice_count",
          "type": "int",
          "setter": "set_voice_count",
          "getter": "get_voice_count",
          "description": "The amount of voices in the effect."
        },
        {
          "name": "wet",
          "type": "float",
          "setter": "set_wet",
          "getter": "get_wet",
          "description": "The effect's processed signal."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptLocalVarSet": {
      "name": "VisualScriptLocalVarSet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_var_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_var_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_var_name",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_var_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "type",
          "type": "int",
          "setter": "set_var_type",
          "getter": "get_var_type",
          "enum": "Variant.Type",
          "description": ""
        },
        {
          "name": "var_name",
          "type": "String",
          "setter": "set_var_name",
          "getter": "get_var_name",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "World2D": {
      "name": "World2D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class that has everything pertaining to a 2D world.",
      "description": "Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world.",
      "methods": [
        {
          "name": "get_canvas",
          "description": "Retrieve the [RID] of this world's canvas resource. Used by the [VisualServer] for 2D drawing.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_direct_space_state",
          "description": "Retrieve the state of this world's physics space. This allows arbitrary querying for collision.",
          "return_type": "Physics2DDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_space",
          "description": "Retrieve the [RID] of this world's physics space resource. Used by the [Physics2DServer] for 2D physics, treating it as both a space and an area.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectEQ": {
      "name": "AudioEffectEQ",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for audio equalizers. Gives you control over frequencies.\n\t\tUse it to create a custom equalizer if [AudioEffectEQ6], [AudioEffectEQ10] or [AudioEffectEQ21] don't fit your needs.",
      "description": "AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQ are very useful on the Master Bus to completely master a mix and give it character. They are also very useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged).",
      "methods": [
        {
          "name": "get_band_count",
          "qualifiers": "const",
          "description": "Returns the number of bands of the equalizer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_band_gain_db",
          "qualifiers": "const",
          "description": "Returns the band's gain at the specified index, in dB.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "band_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_band_gain_db",
          "description": "Sets band's gain at the specified index, in dB.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "band_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "volume_db",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "StyleBoxTexture": {
      "name": "StyleBoxTexture",
      "inherits": "StyleBox",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Texture Based 3x3 scale style.",
      "description": "Texture Based 3x3 scale style. This stylebox performs a 3x3 scaling of a texture, where only the center cell is fully stretched. This allows for the easy creation of bordered styles.",
      "methods": [
        {
          "name": "get_expand_margin_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_h_axis_stretch_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_margin_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_normal_map",
          "qualifiers": "const",
          "description": "",
          "return_type": "Resource",
          "arguments": []
        },
        {
          "name": "get_region_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Resource",
          "arguments": []
        },
        {
          "name": "get_v_axis_stretch_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_draw_center_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_draw_center",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_all",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_individual",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size_left",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size_top",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "size_right",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "size_bottom",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_axis_stretch_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "StyleBoxTexture.AxisStretchMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal_map",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal_map",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_rect",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_axis_stretch_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "StyleBoxTexture.AxisStretchMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "texture_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "AXIS_STRETCH_MODE_STRETCH",
          "value": "0",
          "description": ""
        },
        {
          "name": "AXIS_STRETCH_MODE_TILE",
          "value": "1",
          "description": ""
        },
        {
          "name": "AXIS_STRETCH_MODE_TILE_FIT",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "axis_stretch_horizontal",
          "type": "int",
          "setter": "set_h_axis_stretch_mode",
          "getter": "get_h_axis_stretch_mode",
          "enum": "StyleBoxTexture.AxisStretchMode",
          "description": ""
        },
        {
          "name": "axis_stretch_vertical",
          "type": "int",
          "setter": "set_v_axis_stretch_mode",
          "getter": "get_v_axis_stretch_mode",
          "enum": "StyleBoxTexture.AxisStretchMode",
          "description": ""
        },
        {
          "name": "draw_center",
          "type": "bool",
          "setter": "set_draw_center",
          "getter": "is_draw_center_enabled",
          "description": ""
        },
        {
          "name": "expand_margin_bottom",
          "type": "float",
          "setter": "set_expand_margin_size",
          "getter": "get_expand_margin_size",
          "description": ""
        },
        {
          "name": "expand_margin_left",
          "type": "float",
          "setter": "set_expand_margin_size",
          "getter": "get_expand_margin_size",
          "description": ""
        },
        {
          "name": "expand_margin_right",
          "type": "float",
          "setter": "set_expand_margin_size",
          "getter": "get_expand_margin_size",
          "description": ""
        },
        {
          "name": "expand_margin_top",
          "type": "float",
          "setter": "set_expand_margin_size",
          "getter": "get_expand_margin_size",
          "description": ""
        },
        {
          "name": "margin_bottom",
          "type": "float",
          "setter": "set_margin_size",
          "getter": "get_margin_size",
          "description": ""
        },
        {
          "name": "margin_left",
          "type": "float",
          "setter": "set_margin_size",
          "getter": "get_margin_size",
          "description": ""
        },
        {
          "name": "margin_right",
          "type": "float",
          "setter": "set_margin_size",
          "getter": "get_margin_size",
          "description": ""
        },
        {
          "name": "margin_top",
          "type": "float",
          "setter": "set_margin_size",
          "getter": "get_margin_size",
          "description": ""
        },
        {
          "name": "modulate_color",
          "type": "Color",
          "setter": "set_modulate",
          "getter": "get_modulate",
          "description": ""
        },
        {
          "name": "normal_map",
          "type": "Resource",
          "setter": "set_normal_map",
          "getter": "get_normal_map",
          "description": ""
        },
        {
          "name": "region_rect",
          "type": "Rect2",
          "setter": "set_region_rect",
          "getter": "get_region_rect",
          "description": ""
        },
        {
          "name": "texture",
          "type": "Resource",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "BackBufferCopy": {
      "name": "BackBufferCopy",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Copies a region of the screen (or the whole screen) to a buffer so it can be accessed with the texscreen() shader instruction.",
      "description": "Node for back-buffering the currently displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Accessing this buffer is done with the texscreen() shader instruction.",
      "methods": [
        {
          "name": "get_copy_mode",
          "qualifiers": "const",
          "description": "Return the copy mode currently applied to the BackBufferCopy. See [code]COPY_MODE_*[/code] constants.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Return the area covered by the BackBufferCopy.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "set_copy_mode",
          "description": "Set the copy mode of the BackBufferCopy. See [code]COPY_MODE_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "copy_mode",
              "type": "int",
              "enum": "BackBufferCopy.CopyMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rect",
          "description": "Defines the area covered by the BackBufferCopy.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "COPY_MODE_DISABLED",
          "value": "0",
          "description": "Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers."
        },
        {
          "name": "COPY_MODE_RECT",
          "value": "1",
          "description": "BackBufferCopy buffers a rectangular region."
        },
        {
          "name": "COPY_MODE_VIEWPORT",
          "value": "2",
          "description": "BackBufferCopy buffers the entire screen."
        }
      ],
      "properties": [
        {
          "name": "copy_mode",
          "type": "int",
          "setter": "set_copy_mode",
          "getter": "get_copy_mode",
          "enum": "BackBufferCopy.CopyMode",
          "description": "Buffer mode. See [code]COPY_MODE_*[/code] constants."
        },
        {
          "name": "rect",
          "type": "Rect2",
          "setter": "set_rect",
          "getter": "get_rect",
          "description": "The area covered by the BackBufferCopy. Only used if [code]copy_mode[/code] is [code]COPY_MODE_RECT[/code]."
        }
      ],
      "theme_properties": []
    },
    "ARVRPositionalTracker": {
      "name": "ARVRPositionalTracker",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A tracked object",
      "description": "An instance of this object represents a device that is tracked such as a controller or anchor point. HMDs aren't represented here as they are fully handled internally.\n\t\tAs controllers are turned on and the AR/VR interface detects them instances of this object are automatically added to this list of active tracking objects accessible through the ARVRServer\n\t\tThe ARVRController and ARVRAnchor both consume objects of this type and should be the objects you use in game. The positional trackers are just the under the hood objects that make this all work and are mostly exposed so GDNative based interfaces can interact with them.",
      "methods": [
        {
          "name": "get_hand",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_joy_id",
          "qualifiers": "const",
          "description": "If this is a controller that is being tracked the controller will also be represented by a joystick entry with this id.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "If available this returns the name of the controller or anchor point.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_orientation",
          "qualifiers": "const",
          "description": "Returns the orientation matrix of the controller.",
          "return_type": "Basis",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "Returns the position of the controller adjusted by world scale.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_tracks_orientation",
          "qualifiers": "const",
          "description": "Returns true if the orientation of this device is being tracked.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_tracks_position",
          "qualifiers": "const",
          "description": "Returns true if the position of this device is being tracked.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Returns the transform combining the orientation and position of this device.",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "adjust_by_reference_frame",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_type",
          "qualifiers": "const",
          "description": "Type of tracker.",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TRACKER_HAND_UNKNOWN",
          "value": "0",
          "description": ""
        },
        {
          "name": "TRACKER_LEFT_HAND",
          "value": "1",
          "description": ""
        },
        {
          "name": "TRACKER_RIGHT_HAND",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptConstant": {
      "name": "VisualScriptConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node which returns a constant value.",
      "description": "A Visual Script node which returns the specified constant value.",
      "methods": [
        {
          "name": "get_constant_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_constant_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "set_constant_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "type",
          "type": "int",
          "setter": "set_constant_type",
          "getter": "get_constant_type",
          "enum": "Variant.Type",
          "description": "The constant's type."
        },
        {
          "name": "value",
          "type": "Variant",
          "setter": "set_constant_value",
          "getter": "get_constant_value",
          "description": "The constant's value."
        }
      ],
      "theme_properties": []
    },
    "Variant": {
      "name": "Variant",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "The most important data type in Godot.",
      "description": "A Variant takes up only 20 bytes and can store almost any engine datatype inside of it. Variants are rarely used to hold information for long periods of time, instead they are used mainly for communication, editing, serialization and moving data around.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionShape": {
      "name": "CollisionShape",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Node that represents collision shape data in 3D space.",
      "description": "Editor facility for creating and editing collision shapes in 3D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area] to give it a detection shape, or add it to a [PhysicsBody] to give create solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.",
      "methods": [
        {
          "name": "get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shape",
          "arguments": []
        },
        {
          "name": "is_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_convex_from_brothers",
          "description": "Sets the collision shape's shape to the addition of all its convexed [MeshInstance] siblings geometry.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resource_changed",
          "description": "If this method exists within a script it will be called whenever the shape resource has been modified.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Shape",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": "A disabled collision shape has no effect in the world."
        },
        {
          "name": "shape",
          "type": "Shape",
          "setter": "set_shape",
          "getter": "get_shape",
          "description": "The actual shape owned by this collision shape."
        }
      ],
      "theme_properties": []
    },
    "ARVRController": {
      "name": "ARVRController",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A spatial node representing a spatially tracked controller.",
      "description": "This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy pass throughs to the state of buttons and such on the controllers.\n\t\tControllers are linked by their id. You can create controller nodes before the controllers are available. Say your game always uses two controllers (one for each hand) you can predefine the controllers with id 1 and 2 and they will become active as soon as the controllers are identified. If you expect additional controllers to be used you should react to the signals and add ARVRController nodes to your scene.\n\t\tThe position of the controller node is automatically updated by the ARVR Server. This makes this node ideal to add child  nodes to visualise the controller.",
      "methods": [
        {
          "name": "get_controller_id",
          "qualifiers": "const",
          "description": "Returns the controller id currently assigned to this node.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_controller_name",
          "qualifiers": "const",
          "description": "If active, returns the name of the associated controller if provided by the AR/VR SDK used.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_hand",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_is_active",
          "qualifiers": "const",
          "description": "Returns true if the controller bound to this node is currently active and being tracked.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_joystick_axis",
          "qualifiers": "const",
          "description": "Returns the value of the given axis for things like triggers, touchpads, etc. that are embedded into the controller.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joystick_id",
          "qualifiers": "const",
          "description": "Returns the ID of the joystick object bound to this. Every controller tracked by the ARVR Server that has buttons and axis will also be registered as a joystick within Godot. This means that all the normal joystick tracking and input mapping will work for buttons and axis found on the AR/VR controllers. This ID is purely offered as information so you can link up the controller with its joystick entry.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_button_pressed",
          "qualifiers": "const",
          "description": "Is the given button currently pressed?",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_controller_id",
          "description": "Changes the id that identifies the controller bound to this node. The first controller that the ARVR Server detects will have id 1, the second id 2, the third id 3, etc. When a controller is turned off that slot is freed ensuring that controllers will keep the same id while it is turned on even when controllers with lower ids are turned off.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "controller_id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "button_pressed",
          "description": "When a button on this controller is pressed, this signal is given.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "button_release",
          "description": "When a button on this controller is released, this signal is given.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "controller_id",
          "type": "int",
          "setter": "set_controller_id",
          "getter": "get_controller_id",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptFunctionState": {
      "name": "VisualScriptFunctionState",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "connect_to_signal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "signals",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "args",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "resume",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "args",
              "type": "Array",
              "default_value": "null"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GDScript": {
      "name": "GDScript",
      "inherits": "Script",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A script implemented in the GDScript programming language.",
      "description": "A script implemented in the GDScript programming language. The script exends the functionality of all objects that instance it.\n\t\t[method new] creates a new instance of the script. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.",
      "methods": [
        {
          "name": "get_as_byte_code",
          "qualifiers": "const",
          "description": "Returns byte code for the script source code.",
          "return_type": "PoolByteArray",
          "arguments": []
        },
        {
          "name": "new",
          "qualifiers": "vararg",
          "description": "Returns a new instance of the script.\n\t\t\t\tFor example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar MyClass = load(\"myclass.gd\")\n\t\t\t\tvar instance = MyClass.new()\n\t\t\t\tassert(instance.get_script() == MyClass)\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DServerSW": {
      "name": "Physics2DServerSW",
      "inherits": "Physics2DServer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Software implementation of [Physics2DServer].",
      "description": "Software implementation of [Physics2DServer]. This class exposes no new methods or properties and should not be used, as [Physics2DServer] automatically selects the best implementation available.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RID": {
      "name": "RID",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Handle for a [Resource]'s unique ID.",
      "description": "The RID type is used to access the unique integer ID of a resource.  They are opaque, so they do not grant access to the associated resource by themselves. They are used by and with the low-level Server classes such as [VisualServer].",
      "methods": [
        {
          "name": "RID",
          "description": "Create a new RID instance with the ID of a given resource. When not handed a valid resource, silently stores the unused ID 0.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_id",
          "description": "Retrieve the ID of the referenced resource.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NavigationMeshInstance": {
      "name": "NavigationMeshInstance",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_navigation_mesh",
          "qualifiers": "const",
          "description": "",
          "return_type": "NavigationMesh",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_navigation_mesh",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "navmesh",
              "type": "NavigationMesh",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": ""
        },
        {
          "name": "navmesh",
          "type": "NavigationMesh",
          "setter": "set_navigation_mesh",
          "getter": "get_navigation_mesh",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptInputAction": {
      "name": "VisualScriptInputAction",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_action_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_action_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_action_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "VisualScriptInputAction.Mode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_action_name",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MODE_PRESSED",
          "value": "0",
          "description": ""
        },
        {
          "name": "MODE_RELEASED",
          "value": "1",
          "description": ""
        },
        {
          "name": "MODE_JUST_PRESSED",
          "value": "2",
          "description": ""
        },
        {
          "name": "MODE_JUST_RELEASED",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "action",
          "type": "String",
          "setter": "set_action_name",
          "getter": "get_action_name",
          "description": ""
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_action_mode",
          "getter": "get_action_mode",
          "enum": "VisualScriptInputAction.Mode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Input": {
      "name": "Input",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Singleton that deals with inputs.",
      "description": "A Singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions. Actions and their events can be set in the Project Settings / Input Map tab. Or be set with [InputMap].",
      "methods": [
        {
          "name": "action_press",
          "description": "This will simulate pressing the specificed action.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "action_release",
          "description": "If the specified action is already pressed, this will release it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_joy_mapping",
          "description": "Add a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mapping",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "update_existing",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_accelerometer",
          "qualifiers": "const",
          "description": "If the device has an accelerometer, this will return the movement.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_connected_joypads",
          "description": "Returns an [Array] containing the device IDs of all currently connected joypads.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_gravity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_gyroscope",
          "qualifiers": "const",
          "description": "If the device has a gyroscope, this will return the rate of rotation in rad/s around a device's x, y, and z axis.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_joy_axis",
          "qualifiers": "const",
          "description": "Returns the current value of the joypad axis at given index (see [code]JOY_*[/code] constants in [@Global Scope])",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_axis_index_from_string",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_axis_string",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_button_index_from_string",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_button_string",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_guid",
          "qualifiers": "const",
          "description": "Returns a SDL2 compatible device guid on platforms that use gamepad remapping. Returns \"Default Gamepad\" otherwise.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_name",
          "description": "Returns the name of the joypad at the specified device index",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_vibration_duration",
          "description": "Returns the duration of the current vibration effect in seconds.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_joy_vibration_strength",
          "description": "Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_last_mouse_speed",
          "qualifiers": "const",
          "description": "Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_magnetometer",
          "qualifiers": "const",
          "description": "If the device has a magnetometer, this will return the magnetic field strength in micro-Tesla for all axes.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_mouse_button_mask",
          "qualifiers": "const",
          "description": "Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time the bits are added together.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mouse_mode",
          "qualifiers": "const",
          "description": "Return the mouse mode. See the constants for more information.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_action_just_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] when you start pressing the action event.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_just_released",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] when you stop pressing the action event.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if you are pressing the action event.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_joy_button_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if you are pressing the joypad button. (see [code]JOY_*[/code] constants in [@Global Scope])",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_joy_known",
          "description": "Returns [code]true[/code] if the system knows the specified device. This means that it sets all button and axis indices exactly as defined in the [code]JOY_*[/code] constants (see [@Global Scope]). Unknown joypads are not expected to match these constants, but you can still retrieve events from them.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_key_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if you are pressing the key. You can pass [code]KEY_*[/code], which are pre-defined constants listed in [@Global Scope].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "scancode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_mouse_button_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if you are pressing the mouse button. You can pass [code]BUTTON_*[/code], which are pre-defined constants listed in [@Global Scope].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "button",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joy_connection_changed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "connected",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "guid",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "parse_input_event",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_joy_mapping",
          "description": "Removes all mappings from the internal db that match the given uid.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "guid",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_mouse_cursor",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Resource",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "hotspot",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "set_mouse_mode",
          "description": "Set the mouse mode. See the constants for more information.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Input.MouseMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "start_joy_vibration",
          "description": "Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. weak_magnitude is the strength of the weak motor (between 0 and 1) and strong_magnitude is the strength of the strong motor (between 0 and 1). duration is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).\n\t\t\t\tNote that not every hardware is compatible with long effect durations, it is recommended to restart an effect if in need to play it for more than a few seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weak_magnitude",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "strong_magnitude",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "duration",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "stop_joy_vibration",
          "description": "Stops the vibration of the joypad.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "warp_mouse_position",
          "description": "Sets the mouse position to the specified vector.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "joy_connection_changed",
          "description": "Emitted when a joypad device has been connected or disconnected",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "connected",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MOUSE_MODE_VISIBLE",
          "value": "0",
          "description": "Makes the mouse cursor visible if it is hidden."
        },
        {
          "name": "MOUSE_MODE_HIDDEN",
          "value": "1",
          "description": "Makes the mouse cursor hidden if it is visible."
        },
        {
          "name": "MOUSE_MODE_CAPTURED",
          "value": "2",
          "description": "Captures the mouse. The mouse will be hidden and unable to leave the game window. But it will still register movement and mouse button presses."
        },
        {
          "name": "MOUSE_MODE_CONFINED",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamPlayer2D": {
      "name": "AudioStreamPlayer2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Plays audio in 2D.",
      "description": "Plays audio that dampens with distance from screen center.",
      "methods": [
        {
          "name": "get_area_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_attenuation",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_bus",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_max_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_playback_position",
          "description": "Returns the position in the [AudioStream].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_stream",
          "qualifiers": "const",
          "description": "",
          "return_type": "AudioStream",
          "arguments": []
        },
        {
          "name": "get_volume_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_autoplay_enabled",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Plays the audio from the given position 'from_position', in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_position",
              "type": "float",
              "default_value": "0.0"
            }
          ]
        },
        {
          "name": "seek",
          "description": "Sets the position from which audio will be played, in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_area_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_attenuation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pixels",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "AudioStream",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "volume_db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stops the audio.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "finished",
          "description": "Emitted when the audio stops playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "area_mask",
          "type": "int",
          "setter": "set_area_mask",
          "getter": "get_area_mask",
          "description": "Areas in which this sound plays."
        },
        {
          "name": "attenuation",
          "type": "float",
          "setter": "set_attenuation",
          "getter": "get_attenuation",
          "description": "Dampens audio over distance with this as an exponent."
        },
        {
          "name": "autoplay",
          "type": "bool",
          "setter": "set_autoplay",
          "getter": "is_autoplay_enabled",
          "description": "If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code]."
        },
        {
          "name": "bus",
          "type": "String",
          "setter": "set_bus",
          "getter": "get_bus",
          "description": "Bus on which this audio is playing."
        },
        {
          "name": "max_distance",
          "type": "float",
          "setter": "set_max_distance",
          "getter": "get_max_distance",
          "description": "Maximum distance from which audio is still hearable."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "is_playing",
          "description": "If [code]true[/code] audio is playing."
        },
        {
          "name": "stream",
          "type": "AudioStream",
          "setter": "set_stream",
          "getter": "get_stream",
          "description": "The [AudioStream] object to be played."
        },
        {
          "name": "volume_db",
          "type": "float",
          "setter": "set_volume_db",
          "getter": "get_volume_db",
          "description": "Base volume without dampening."
        }
      ],
      "theme_properties": []
    },
    "GodotSharp": {
      "name": "GodotSharp",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "attach_thread",
          "description": "Attaches the current thread to the mono runtime.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "detach_thread",
          "description": "Detaches the current thread from the mono runtime.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_domain_loaded",
          "description": "Returns whether the scripts domain is loaded.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_finalizing_domain",
          "description": "Returns whether the scripts domain is being finalized.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualInstance": {
      "name": "VisualInstance",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect3",
          "arguments": []
        },
        {
          "name": "get_layer_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_transformed_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect3",
          "arguments": []
        },
        {
          "name": "set_base",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "layers",
          "type": "int",
          "setter": "set_layer_mask",
          "getter": "get_layer_mask",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisibilityEnabler2D": {
      "name": "VisibilityEnabler2D",
      "inherits": "VisibilityNotifier2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Enable certain nodes only when visible.",
      "description": "The VisibilityEnabler2D will disable [RigidBody2D], [AnimationPlayer], and other nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler2D itself.",
      "methods": [
        {
          "name": "is_enabler_enabled",
          "qualifiers": "const",
          "description": "Returns whether the specified enabler was set to true or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "enabler",
              "type": "int",
              "enum": "VisibilityEnabler2D.Enabler",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabler",
          "description": "Set an enabler to true for all nodes of its type to be disabled when the VisibilityEnabler2D is not in view. See the constants for enablers and what they affect.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabler",
              "type": "int",
              "enum": "VisibilityEnabler2D.Enabler",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ENABLER_FREEZE_BODIES",
          "value": "1",
          "description": "This enabler will freeze [RigidBody2D] nodes."
        },
        {
          "name": "ENABLER_PAUSE_ANIMATIONS",
          "value": "0",
          "description": "This enabler will pause [AnimationPlayer] nodes."
        },
        {
          "name": "ENABLER_PAUSE_PARTICLES",
          "value": "2",
          "description": "This enabler will stop [Particles2D] nodes."
        },
        {
          "name": "ENABLER_PAUSE_ANIMATED_SPRITES",
          "value": "5",
          "description": ""
        },
        {
          "name": "ENABLER_PARENT_PROCESS",
          "value": "3",
          "description": "This enabler will stop the parent's _process function."
        },
        {
          "name": "ENABLER_PARENT_PHYSICS_PROCESS",
          "value": "4",
          "description": "This enabler will stop the parent's _physics_process function."
        },
        {
          "name": "ENABLER_MAX",
          "value": "6",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "freeze_bodies",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "pause_animated_sprites",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "pause_animations",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "pause_particles",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "physics_process_parent",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "process_parent",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PhysicsShapeQueryResult": {
      "name": "PhysicsShapeQueryResult",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Result of a shape query in Physics2DServer.",
      "description": "",
      "methods": [
        {
          "name": "get_result_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_result_object",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptSequence": {
      "name": "VisualScriptSequence",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_steps",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_steps",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "steps",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "steps",
          "type": "int",
          "setter": "set_steps",
          "getter": "get_steps",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "InterpolatedCamera": {
      "name": "InterpolatedCamera",
      "inherits": "Camera",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_speed",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_target_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "is_interpolation_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_interpolation_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target_path",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_target",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_target_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target_path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_interpolation_enabled",
          "getter": "is_interpolation_enabled",
          "description": ""
        },
        {
          "name": "speed",
          "type": "float",
          "setter": "set_speed",
          "getter": "get_speed",
          "description": ""
        },
        {
          "name": "target",
          "type": "NodePath",
          "setter": "set_target_path",
          "getter": "get_target_path",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "BoxContainer": {
      "name": "BoxContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for box containers.",
      "description": "Arranges child controls vertically or horizontally, and rearranges the controls automatically when their minimum size changes.",
      "methods": [
        {
          "name": "add_spacer",
          "description": "Adds a control to the box as a spacer. If [code]true[/code], [i]begin[/i] will insert the spacer control in front of other children.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "begin",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_alignment",
          "qualifiers": "const",
          "description": "Return the alignment of children in the container.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_alignment",
          "description": "Set the alignment of children in the container(Must be one of ALIGN_BEGIN, ALIGN_CENTER or ALIGN_END).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "alignment",
              "type": "int",
              "enum": "BoxContainer.AlignMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ALIGN_BEGIN",
          "value": "0",
          "description": "Aligns children with the beginning of the container."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": "Aligns children with the center of the container."
        },
        {
          "name": "ALIGN_END",
          "value": "2",
          "description": "Aligns children with the end of the container."
        }
      ],
      "properties": [
        {
          "name": "alignment",
          "type": "int",
          "setter": "set_alignment",
          "getter": "get_alignment",
          "enum": "BoxContainer.AlignMode",
          "description": "The alignment of the container's children (must be one of ALIGN_BEGIN, ALIGN_CENTER, or ALIGN_END)."
        }
      ],
      "theme_properties": []
    },
    "UndoRedo": {
      "name": "UndoRedo",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Helper to manage UndoRedo in the editor or custom tools.",
      "description": "Helper to manage UndoRedo in the editor or custom tools. It works by storing calls to functions in both 'do' an 'undo' lists.\n\t\tCommon behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.",
      "methods": [
        {
          "name": "add_do_method",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_do_property",
          "description": "Set a property with a custom value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_do_reference",
          "description": "Add a 'do' reference that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_undo_method",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_undo_property",
          "description": "Undo setting of a property with a custom value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_undo_reference",
          "description": "Add an 'undo' reference that will be erased if the 'undo' history is lost. This is useful mostly for nodes removed with the 'do' call (not the 'undo' call!).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_history",
          "description": "Clear the undo/redo history and associated references.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit_action",
          "description": "Commit the action. All 'do' methods/properties are called/set when this function is called.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_action",
          "description": "Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property] and [method add_undo_property].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "merge_mode",
              "type": "int",
              "enum": "UndoRedo.MergeMode",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_current_action_name",
          "qualifiers": "const",
          "description": "Get the name of the current action.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_max_steps",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_version",
          "qualifiers": "const",
          "description": "Get the version, each time a new action is committed, the version number of the UndoRedo is increased automatically.\n\t\t\t\tThis is useful mostly to check if something changed from a saved version.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "redo",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_max_steps",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max_steps",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "undo",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MERGE_DISABLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "MERGE_ENDS",
          "value": "1",
          "description": ""
        },
        {
          "name": "MERGE_ALL",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectDistortion": {
      "name": "AudioEffectDistortion",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a Distortion audio effect to an Audio bus.\n\t\tModify the sound to make it dirty.",
      "description": "Modify the sound and make it dirty. Different types are available : clip, tan, lofi (bit crushing), overdrive, or waveshape.\n\t\tBy distorting the waveform the frequency content change, which will often make the sound \"crunchy\" or \"abrasive\". For games, it can simulate sound coming from some saturated device or speaker very efficiently.",
      "methods": [
        {
          "name": "get_drive",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_keep_hf_hz",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_post_gain",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_pre_gain",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_drive",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "drive",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_keep_hf_hz",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keep_hf_hz",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "AudioEffectDistortion.Mode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_post_gain",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "post_gain",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pre_gain",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pre_gain",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MODE_CLIP",
          "value": "0",
          "description": "Digital distortion effect which cuts off peaks at the top and bottom of the waveform."
        },
        {
          "name": "MODE_ATAN",
          "value": "1",
          "description": ""
        },
        {
          "name": "MODE_LOFI",
          "value": "2",
          "description": "Low-resolution digital distortion effect. You can use it to emulate the sound of early digital audio devices."
        },
        {
          "name": "MODE_OVERDRIVE",
          "value": "3",
          "description": "Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers."
        },
        {
          "name": "MODE_WAVESHAPE",
          "value": "4",
          "description": "Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound."
        }
      ],
      "properties": [
        {
          "name": "drive",
          "type": "float",
          "setter": "set_drive",
          "getter": "get_drive",
          "description": "Distortion power. Value can range from 0 to 1. Default value: [code]0[/code]."
        },
        {
          "name": "keep_hf_hz",
          "type": "float",
          "setter": "set_keep_hf_hz",
          "getter": "get_keep_hf_hz",
          "description": "High-pass filter. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000. Default value: [code]16000[/code]."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "AudioEffectDistortion.Mode",
          "description": "Distortion type. Default value: [code]MODE_CLIP[/code]."
        },
        {
          "name": "post_gain",
          "type": "float",
          "setter": "set_post_gain",
          "getter": "get_post_gain",
          "description": "Increases or decreases the volume after the effect. Value can range from -80 to 24. Default value: [code]0[/code]."
        },
        {
          "name": "pre_gain",
          "type": "float",
          "setter": "set_pre_gain",
          "getter": "get_pre_gain",
          "description": "Increases or decreases the volume before the effect. Value can range from -60 to 60. Default value: [code]0[/code]."
        }
      ],
      "theme_properties": []
    },
    "TriangleMesh": {
      "name": "TriangleMesh",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MarginContainer": {
      "name": "MarginContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Simple margin container.",
      "description": "Simple margin container. Adds a left margin to anything contained.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "margin_bottom",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin_left",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin_right",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin_top",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Path2D": {
      "name": "Path2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Container for a [Curve2D].",
      "description": "This class is a container/Node-ification of a [Curve2D], so it can have [Node2D] properties and [Node] info.",
      "methods": [
        {
          "name": "get_curve",
          "qualifiers": "const",
          "description": "Returns the [Curve2D] contained.",
          "return_type": "Curve2D",
          "arguments": []
        },
        {
          "name": "set_curve",
          "description": "Sets the [Curve2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "Curve2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "curve",
          "type": "Curve2D",
          "setter": "set_curve",
          "getter": "get_curve",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptYieldSignal": {
      "name": "VisualScriptYieldSignal",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_base_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_base_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_call_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_signal",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_base_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_call_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "VisualScriptYieldSignal.CallMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_signal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CALL_MODE_SELF",
          "value": "0",
          "description": ""
        },
        {
          "name": "CALL_MODE_NODE_PATH",
          "value": "1",
          "description": ""
        },
        {
          "name": "CALL_MODE_INSTANCE",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        },
        {
          "name": "call_mode",
          "type": "int",
          "setter": "set_call_mode",
          "getter": "get_call_mode",
          "enum": "VisualScriptYieldSignal.CallMode",
          "description": ""
        },
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_base_path",
          "getter": "get_base_path",
          "description": ""
        },
        {
          "name": "signal",
          "type": "String",
          "setter": "set_signal",
          "getter": "get_signal",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "KinematicBody2D": {
      "name": "KinematicBody2D",
      "inherits": "PhysicsBody2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Kinematic body 2D node.",
      "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:\n\t\tSimulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\tKinematic Characters: KinematicBody2D also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.",
      "methods": [
        {
          "name": "get_floor_velocity",
          "qualifiers": "const",
          "description": "Returns the velocity of the floor. Only updates when calling [method move_and_slide].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_safe_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_slide_collision",
          "description": "Returns a [KinematicCollision2D], which contains information about a collision that occured during the last [method move_and_slide] call. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count]()-1).",
          "return_type": "KinematicCollision2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "slide_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slide_count",
          "qualifiers": "const",
          "description": "Returns the number of times the body collided and changed direction during the last call to [method move_and_slide].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_on_ceiling",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on the ceiling. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_on_floor",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on the floor. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_on_wall",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on a wall. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "move_and_collide",
          "description": "Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision2D], which contains information about the collision.",
          "return_type": "KinematicCollision2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rel_vec",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_and_slide",
          "description": "Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [KinematicBody2D] or [RigidBody2D], it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.\n\t\t\t\t[code]linear_velocity[/code] is a value in pixels per second. Unlike in for example [method move_and_collide], you should [i]not[/i] multiply it with [code]delta[/code] — this is done by the method.\n\t\t\t\t[code]floor_normal[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector2(0, 0)[/code], everything is considered a wall. This is useful for topdown games.\n\t\t\t\tIf the body is standing on a slope and the horizontal speed (relative to the floor's speed) goes below [code]slope_stop_min_velocity[/code], the body will stop completely. This prevents the body from sliding down slopes when you include gravity in [code]linear_velocity[/code]. When set to lower values, the body will not be able to stand still on steep slopes.\n\t\t\t\tIf the body collides, it will change direction a maximum of [code]max_bounces[/code] times before it stops.\n\t\t\t\t[code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.\n\t\t\t\tReturns the movement that remained when the body stopped. To get more detailed information about collisions that occured, use [method get_slide_collision].",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_velocity",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "floor_normal",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            },
            {
              "index": "2",
              "name": "slope_stop_min_velocity",
              "type": "float",
              "default_value": "5"
            },
            {
              "index": "3",
              "name": "max_bounces",
              "type": "int",
              "default_value": "4"
            },
            {
              "index": "4",
              "name": "floor_max_angle",
              "type": "float",
              "default_value": "0.785398"
            }
          ]
        },
        {
          "name": "set_safe_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pixels",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "test_move",
          "description": "Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform2D], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rel_vec",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision/safe_margin",
          "type": "float",
          "setter": "set_safe_margin",
          "getter": "get_safe_margin",
          "description": "If the body is at least this close to another body, this body will consider them to be colliding."
        }
      ],
      "theme_properties": []
    },
    "Spatial": {
      "name": "Spatial",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Most basic 3D game object, parent of all 3D related nodes.",
      "description": "Most basic 3D game object, with a 3D [Transform] and visibility settings. All other 3D game objects inherit from Spatial. Use Spatial as a parent node to move, scale, rotate and show/hide children in a 3D project.",
      "methods": [
        {
          "name": "get_gizmo",
          "qualifiers": "const",
          "description": "Returns the SpatialGizmo for this node. Used for example in [EditorSpatialGizmo] as custom visualization and editing handles in Editor.",
          "return_type": "SpatialGizmo",
          "arguments": []
        },
        {
          "name": "get_global_transform",
          "qualifiers": "const",
          "description": "Returns the global transform, relative to worldspace.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "get_parent_spatial",
          "qualifiers": "const",
          "description": "Returns the parent [Spatial], or an empty [Object] if no parent exists or parent is not of type [Spatial].",
          "return_type": "Spatial",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "qualifiers": "const",
          "description": "Returns the rotation (in radians).",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_rotation_deg",
          "qualifiers": "const",
          "description": "Returns the rotation (in degrees).",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Returns the local transform, relative to the bone parent.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "get_translation",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_world",
          "qualifiers": "const",
          "description": "Returns the current [World] resource this Spatial node is registered to.",
          "return_type": "World",
          "arguments": []
        },
        {
          "name": "global_rotate",
          "description": "Rotates the current node along normal [Vector3] by angle in radians in Global space.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "global_translate",
          "description": "Moves the node by [Vector3] offset in Global space.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hide",
          "description": "Disables rendering of this node. Change Spatial Visible property to false.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_local_transform_notification_enabled",
          "qualifiers": "const",
          "description": "Returns whether node notifies about its local transformation changes. Spatial will not propagate this by default.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_set_as_toplevel",
          "qualifiers": "const",
          "description": "Returns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_transform_notification_enabled",
          "qualifiers": "const",
          "description": "Returns whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_visible",
          "qualifiers": "const",
          "description": "Returns whether the node is set to be visible.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_visible_in_tree",
          "qualifiers": "const",
          "description": "Returns whether the node is visible, taking into consideration that its parents visibility.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "look_at",
          "description": "Rotates itself to point into direction of target position. Operations take place in global space.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "look_at_from_position",
          "description": "Moves the node to specified position and then rotates itself to point into direction of target position. Operations take place in global space.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "orthonormalize",
          "description": "Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation. Performs orthonormalization on this node [Transform3D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotate",
          "description": "Rotates the node in local space on given normal [Vector3] by angle in radians.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_x",
          "description": "Rotates the node in local space on X axis by angle in radians.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_y",
          "description": "Rotates the node in local space on Y axis by angle in radians.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotate_z",
          "description": "Rotates the node in local space on Z axis by angle in radians.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_as_toplevel",
          "description": "Makes the node ignore its parents transformations. Node transformations are only in global space.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gizmo",
          "description": "Set [SpatialGizmo] for this node. Used for example in [EditorSpatialGizmo] as custom visualization and editing handles in Editor.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gizmo",
              "type": "SpatialGizmo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_transform",
          "description": "Set the transform globally, relative to world space.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "global",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_identity",
          "description": "Reset all transformations for this node. Set its [Transform3D] to identity matrix.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_ignore_transform_notification",
          "description": "Set whether the node ignores notification that its transformation (global or local) changed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_notify_local_transform",
          "description": "Set whether the node notifies about its local transformation changes. Spatial will not propagate this by default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_notify_transform",
          "description": "Set whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation",
          "description": "Set the rotation (in radians).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotation_rad",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation_deg",
          "description": "Set the rotation (in degrees).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotation_deg",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scale",
          "description": "Set the scale.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Set the transform locally, relative to the parent spatial node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_translation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "translation",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visible",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show",
          "description": "Enables rendering of this node. Change Spatial Visible property to \"True\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_global",
          "qualifiers": "const",
          "description": "Transforms [Vector3] \"local_point\" from this node's local space to world space.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "local_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_local",
          "qualifiers": "const",
          "description": "Transforms [Vector3] \"global_point\" from world space to this node's local space.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "global_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translate",
          "description": "Changes the node's position by given offset [Vector3].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_gizmo",
          "description": "Updates the [SpatialGizmo] of this node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "visibility_changed",
          "description": "Emitted when node visibility changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_TRANSFORM_CHANGED",
          "value": "29",
          "enum": "",
          "description": "Spatial nodes receives this notification when their global transform changes. This means that either the current or a parent node changed its transform.\n\t\t\tIn order for NOTIFICATION_TRANSFORM_CHANGED to work user first needs to ask for it, with set_notify_transform(true)."
        },
        {
          "name": "NOTIFICATION_ENTER_WORLD",
          "value": "41",
          "enum": "",
          "description": "Spatial nodes receives this notification when they are registered to new [World] resource."
        },
        {
          "name": "NOTIFICATION_EXIT_WORLD",
          "value": "42",
          "enum": "",
          "description": "Spatial nodes receives this notification when they are unregistered from current [World] resource."
        },
        {
          "name": "NOTIFICATION_VISIBILITY_CHANGED",
          "value": "43",
          "enum": "",
          "description": "Spatial nodes receives this notification when their visibility changes."
        }
      ],
      "properties": [
        {
          "name": "global_transform",
          "type": "Transform",
          "setter": "set_global_transform",
          "getter": "get_global_transform",
          "description": "World space (global) [Transform] of this node."
        },
        {
          "name": "rotation",
          "type": "Vector3",
          "setter": "set_rotation",
          "getter": "get_rotation",
          "description": "Local euler rotation in radians of this node."
        },
        {
          "name": "rotation_deg",
          "type": "Vector3",
          "setter": "set_rotation_deg",
          "getter": "get_rotation_deg",
          "description": "Local euler rotation in degrees of this node."
        },
        {
          "name": "scale",
          "type": "Vector3",
          "setter": "set_scale",
          "getter": "get_scale",
          "description": "Local scale of this node."
        },
        {
          "name": "transform",
          "type": "Transform",
          "setter": "set_transform",
          "getter": "get_transform",
          "description": "Local space [Transform] of this node."
        },
        {
          "name": "translation",
          "type": "Vector3",
          "setter": "set_translation",
          "getter": "get_translation",
          "description": "Local translation of this node."
        },
        {
          "name": "visible",
          "type": "bool",
          "setter": "set_visible",
          "getter": "is_visible",
          "description": "Visibility of this node. Toggles if this node is rendered."
        }
      ],
      "theme_properties": []
    },
    "ResourceLoader": {
      "name": "ResourceLoader",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Resource Loader.",
      "description": "Resource Loader. This is a static object accessible as [ResourceLoader]. GDScript has a simplified load() function, though.",
      "methods": [
        {
          "name": "get_dependencies",
          "description": "",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_recognized_extensions_for_type",
          "description": "Return the list of recognized extensions for a resource type.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load",
          "description": "",
          "return_type": "Resource",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type_hint",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "2",
              "name": "p_no_cache",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "load_interactive",
          "description": "Load a resource interactively, the returned object allows to load with high granularity.",
          "return_type": "ResourceInteractiveLoader",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type_hint",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "set_abort_on_missing_resources",
          "description": "Change the behavior on missing sub-resources. Default is to abort load.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "abort",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ImageTexture": {
      "name": "ImageTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A [Texture] based on an [Image].",
      "description": "A [Texture] based on an [Image]. Can be created from an [Image] with [method create_from_image].",
      "methods": [
        {
          "name": "create",
          "description": "Create a new [ImageTexture] with \"width\" and \"height\".\n\t\t\t\t\"format\" one of [Image].FORMAT_*.\n\t\t\t\t\"flags\" one or more of [Texture].FLAG_*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "create_from_image",
          "description": "Create a new [ImageTexture] from an [Image] with \"flags\" from [Texture].FLAG_*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "Return the format of the [ImageTexture], one of [Image].FORMAT_*.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_lossy_storage_quality",
          "qualifiers": "const",
          "description": "Return the storage quality for [ImageTexture].STORAGE_COMPRESS_LOSSY.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_storage",
          "qualifiers": "const",
          "description": "Return the storage type. One of [ImageTexture].STORAGE_*.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "load",
          "description": "Load an [ImageTexture].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_data",
          "description": "Set the [Image] of this [ImageTexture].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lossy_storage_quality",
          "description": "Set the storage quality in case of [ImageTexture].STORAGE_COMPRESS_LOSSY.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "quality",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size_override",
          "description": "Resizes the [code]ImageTexture[/code] to the specified dimensions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_storage",
          "description": "Set the storage type. One of [ImageTexture].STORAGE_*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "ImageTexture.Storage",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STORAGE_RAW",
          "value": "0",
          "description": "[Image] data is stored raw and unaltered."
        },
        {
          "name": "STORAGE_COMPRESS_LOSSY",
          "value": "1",
          "description": "[Image] data is compressed with a lossy algorithm. You can set the storage quality with [method set_lossy_storage_quality]."
        },
        {
          "name": "STORAGE_COMPRESS_LOSSLESS",
          "value": "2",
          "description": "[Image] data is compressed with a lossless algorithm."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Script": {
      "name": "Script",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A class stored as a resource.",
      "description": "A class stored as a resource. The script exends the functionality of all objects that instance it.\n\t\tThe 'new' method of a script subclass creates a new instance. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.",
      "methods": [
        {
          "name": "can_instance",
          "qualifiers": "const",
          "description": "Returns true if the script can be instanced.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_node_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_source_code",
          "qualifiers": "const",
          "description": "Returns the script source code, or an empty string if source code is not available.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "has_script_signal",
          "qualifiers": "const",
          "description": "Returns true if the script, or a base class, defines a signal with the given name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "signal_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_source_code",
          "qualifiers": "const",
          "description": "Returns true if the script contains non-empty source code.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "instance_has",
          "qualifiers": "const",
          "description": "Returns true if 'base_object' is an instance of this script.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "base_object",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_tool",
          "qualifiers": "const",
          "description": "Returns true if the script is a tool script. A tool script can run in the editor.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "reload",
          "description": "Reloads the script's class implementation. Returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keep_state",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_source_code",
          "description": "Sets the script source code. Does not reload the class implementation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "source",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PoolRealArray": {
      "name": "PoolRealArray",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Real Array.",
      "description": "Real Array. Array of floating point values. Can only contain floats. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolRealArray",
          "description": "Create from a generic array.",
          "return_type": "PoolRealArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [RealArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append an element at the end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the float at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsBody2D": {
      "name": "PhysicsBody2D",
      "inherits": "CollisionObject2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for all objects affected by physics in 2D space.",
      "description": "PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it.",
      "methods": [
        {
          "name": "add_collision_exception_with",
          "description": "Adds a body to the list of bodies that this body can't collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "Return the physics layer this area is in.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "Return the physics layers this area can scan for collisions.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_collision_exception_with",
          "description": "Removes a body from the list of bodies that this body can't collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer",
          "description": "Set the physics layers this area is in.\n\t\t\t\tCollidable objects can exist in any of 32 different layers. These layers are not visual, but more of a tagging system instead. A collidable can use these layers/tags to select with which objects it can collide, using [method set_collision_mask].\n\t\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "Set/clear individual bits on the layer mask. This makes getting a body in/out of only one layer easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "Set the physics layers this area can scan for collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The physics layers this area is in.\n\t\t\tCollidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.\n\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The physics layers this area can scan for collisions."
        },
        {
          "name": "layers",
          "type": "int",
          "setter": "_set_layers",
          "getter": "_get_layers",
          "description": "Both collision_layer and collision_mask. Returns collision_layer when accessed. Updates collision_layers and collision_mask when modified."
        }
      ],
      "theme_properties": []
    },
    "PoolVector3Array": {
      "name": "PoolVector3Array",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "An Array of Vector3.",
      "description": "An Array specifically designed to hold Vector3.",
      "methods": [
        {
          "name": "PoolVector3Array",
          "description": "Construct a new PoolVector3Array. Optionally, you can pass in an Array that will be converted.",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [PoolVector3Array] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Insert a [Vector3] at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [Vector3] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "RemoteTransform2D": {
      "name": "RemoteTransform2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_remote_node",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_update_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_update_rotation",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_update_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_use_global_coordinates",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_remote_node",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_update_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "update_remote_position",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_update_rotation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "update_remote_rotation",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_update_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "update_remote_scale",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_global_coordinates",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "use_global_coordinates",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "remote_path",
          "type": "NodePath",
          "setter": "set_remote_node",
          "getter": "get_remote_node",
          "description": ""
        },
        {
          "name": "update_position",
          "type": "bool",
          "setter": "set_update_position",
          "getter": "get_update_position",
          "description": ""
        },
        {
          "name": "update_rotation",
          "type": "bool",
          "setter": "set_update_rotation",
          "getter": "get_update_rotation",
          "description": ""
        },
        {
          "name": "update_scale",
          "type": "bool",
          "setter": "set_update_scale",
          "getter": "get_update_scale",
          "description": ""
        },
        {
          "name": "use_global_coordinates",
          "type": "bool",
          "setter": "set_use_global_coordinates",
          "getter": "get_use_global_coordinates",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VideoPlayer": {
      "name": "VideoPlayer",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Control to play video files.",
      "description": "This control has the ability to play video streams. The only format accepted is the OGV Theora, so any other format must be converted before using in a project.",
      "methods": [
        {
          "name": "get_audio_track",
          "qualifiers": "const",
          "description": "Get the selected audio track (for multitrack videos).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_buffering_msec",
          "qualifiers": "const",
          "description": "Get the amount of milliseconds to store in buffer while playing.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_stream",
          "qualifiers": "const",
          "description": "Get the video stream.",
          "return_type": "VideoStream",
          "arguments": []
        },
        {
          "name": "get_stream_name",
          "qualifiers": "const",
          "description": "Get the name of the video stream.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_stream_position",
          "qualifiers": "const",
          "description": "Get the current position of the stream, in seconds.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_video_texture",
          "description": "Get the current frame of the video as a [Texture].",
          "return_type": "Texture",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_volume",
          "qualifiers": "const",
          "description": "Get the volume of the audio track as a linear value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_volume_db",
          "qualifiers": "const",
          "description": "Get the volume of the audio track in decibels.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_autoplay",
          "qualifiers": "const",
          "description": "Get whether or not the video is set as autoplay.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_expand",
          "qualifiers": "const",
          "description": "Get whether or not the expand property is set.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_paused",
          "qualifiers": "const",
          "description": "Get whether or not the video is paused.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Get whether or not the video is playing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Start the video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_audio_track",
          "description": "Set the audio track (for multitrack videos).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "track",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "Set whether this node should start playing automatically.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_buffering_msec",
          "description": "Set the amount of milliseconds to buffer during playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "msec",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand",
          "description": "Set the expand property. If enabled, the video will grow or shrink to fit the player size, otherwise it will play at the stream resolution.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_paused",
          "description": "Set whether the video should pause the playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paused",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream",
          "description": "Set the video stream for this player.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "VideoStream",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream_position",
          "description": "Set the current position of the stream, in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume",
          "description": "Set the audio volume as a linear value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "volume",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume_db",
          "description": "Set the audio volume in decibels.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the video playback.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "audio_track",
          "type": "int",
          "setter": "set_audio_track",
          "getter": "get_audio_track",
          "description": ""
        },
        {
          "name": "autoplay",
          "type": "bool",
          "setter": "set_autoplay",
          "getter": "has_autoplay",
          "description": ""
        },
        {
          "name": "expand",
          "type": "bool",
          "setter": "set_expand",
          "getter": "has_expand",
          "description": ""
        },
        {
          "name": "paused",
          "type": "bool",
          "setter": "set_paused",
          "getter": "is_paused",
          "description": ""
        },
        {
          "name": "stream",
          "type": "VideoStream",
          "setter": "set_stream",
          "getter": "get_stream",
          "description": ""
        },
        {
          "name": "volume_db",
          "type": "float",
          "setter": "set_volume_db",
          "getter": "get_volume_db",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "StreamPeerBuffer": {
      "name": "StreamPeerBuffer",
      "inherits": "StreamPeer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "duplicate",
          "qualifiers": "const",
          "description": "",
          "return_type": "StreamPeerBuffer",
          "arguments": []
        },
        {
          "name": "get_data_array",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolByteArray",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "resize",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_data_array",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ClassDB": {
      "name": "ClassDB",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class information repository.",
      "description": "Provides access to metadata stored for every available class.",
      "methods": [
        {
          "name": "can_instance",
          "qualifiers": "const",
          "description": "Returns true if you can instance objects from the specified 'class', false in other case.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_exists",
          "qualifiers": "const",
          "description": "Returns whether the specified 'class' is available or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_category",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_integer_constant",
          "qualifiers": "const",
          "description": "Returns the value of the integer constant 'name' of 'class' or its ancestry. Always returns 0 when the constant could not be found.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_integer_constant_list",
          "qualifiers": "const",
          "description": "Returns an array with the names all the integer constants of 'class' or its ancestry.",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_get_method_list",
          "qualifiers": "const",
          "description": "Returns an array with all the methods of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a [Dictionary] with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_get_property",
          "qualifiers": "const",
          "description": "Returns the value of 'property' of 'class' or its ancestry.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_property_list",
          "qualifiers": "const",
          "description": "Returns an array with all the properties of 'class' or its ancestry if 'no_inheritance' is false.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_get_signal",
          "qualifiers": "const",
          "description": "Returns the 'signal' data of 'class' or its ancestry. The returned value is a [Dictionary] with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_get_signal_list",
          "qualifiers": "const",
          "description": "Returns an array with all the signals of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a [Dictionary] as described in [class_get_signal].",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_has_integer_constant",
          "qualifiers": "const",
          "description": "Return whether 'class' or its ancestry has an integer constant called 'name' or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_has_method",
          "qualifiers": "const",
          "description": "Return whether 'class' (or its ancestry if 'no_inheritance' is false) has a method called 'method' or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "no_inheritance",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "class_has_signal",
          "qualifiers": "const",
          "description": "Return whether 'class' or its ancestry has a signal called 'signal' or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "class_set_property",
          "qualifiers": "const",
          "description": "Sets 'property' value of 'class' to 'value'.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_class_list",
          "qualifiers": "const",
          "description": "Returns the names of all the classes available.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_inheriters_from_class",
          "qualifiers": "const",
          "description": "Returns the names of all the classes that directly or indirectly inherit from 'class'.",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_parent_class",
          "qualifiers": "const",
          "description": "Returns the parent class of 'class'.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance",
          "qualifiers": "const",
          "description": "Creates an instance of 'class'.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_class_enabled",
          "qualifiers": "const",
          "description": "Returns whether this class is enabled or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_parent_class",
          "qualifiers": "const",
          "description": "Returns whether 'inherits' is an ancestor of 'class' or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "class",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "inherits",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SphereMesh": {
      "name": "SphereMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class representing a spherical [PrimitiveMesh].",
      "description": "Class representing a spherical [PrimitiveMesh].",
      "methods": [
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_is_hemisphere",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_radial_segments",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rings",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_height",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_is_hemisphere",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "is_hemisphere",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radial_segments",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radial_segments",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rings",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rings",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "Full height of the sphere. Defaults to 2.0."
        },
        {
          "name": "is_hemisphere",
          "type": "bool",
          "setter": "set_is_hemisphere",
          "getter": "get_is_hemisphere",
          "description": "Determines whether a full sphere or a hemisphere is created. Attention: To get a regular hemisphere the height and radius of the sphere have to equal. Defaults to false."
        },
        {
          "name": "radial_segments",
          "type": "int",
          "setter": "set_radial_segments",
          "getter": "get_radial_segments",
          "description": "Number of radial segments on the sphere. Defaults to 64."
        },
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "Radius of sphere. Defaults to 1.0."
        },
        {
          "name": "rings",
          "type": "int",
          "setter": "set_rings",
          "getter": "get_rings",
          "description": "Number of segments along the height of the sphere. Defaults to 32."
        }
      ],
      "theme_properties": []
    },
    "OccluderPolygon2D": {
      "name": "OccluderPolygon2D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_cull_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "is_closed",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_closed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "closed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cull_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cull_mode",
              "type": "int",
              "enum": "OccluderPolygon2D.CullMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_polygon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CULL_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "CULL_CLOCKWISE",
          "value": "1",
          "description": ""
        },
        {
          "name": "CULL_COUNTER_CLOCKWISE",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "closed",
          "type": "bool",
          "setter": "set_closed",
          "getter": "is_closed",
          "description": ""
        },
        {
          "name": "cull_mode",
          "type": "int",
          "setter": "set_cull_mode",
          "getter": "get_cull_mode",
          "enum": "OccluderPolygon2D.CullMode",
          "description": ""
        },
        {
          "name": "polygon",
          "type": "PoolVector2Array",
          "setter": "set_polygon",
          "getter": "get_polygon",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TileMap": {
      "name": "TileMap",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Node for 2D tile-based maps.",
      "description": "Node for 2D tile-based maps. Tilemaps use a [TileSet] which contain a list of tiles (textures plus optional collision, navigation, and/or occluder shapes) which are used to create grid-based maps.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear all cells.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cell",
          "qualifiers": "const",
          "description": "Return the tile index of the referenced cell.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_size",
          "qualifiers": "const",
          "description": "Return the cell size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_cellv",
          "qualifiers": "const",
          "description": "Return the tile index of the cell referenced by a Vector2.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_center_x",
          "qualifiers": "const",
          "description": "Return true if tiles are to be centered in x coordinate (by default this is false and they are drawn from upper left cell corner).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_center_y",
          "qualifiers": "const",
          "description": "Return true if tiles are to be centered in y coordinate (by default this is false and they are drawn from upper left cell corner).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_collision_bounce",
          "qualifiers": "const",
          "description": "Return the collision bounce parameter.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_collision_friction",
          "qualifiers": "const",
          "description": "Return the collision friction parameter.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "Return the collision layer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "Return the collision mask.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_use_kinematic",
          "qualifiers": "const",
          "description": "Return whether the tilemap handles collisions as a kinematic body.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_custom_transform",
          "qualifiers": "const",
          "description": "Return the custom transform matrix.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_half_offset",
          "qualifiers": "const",
          "description": "Return the current half offset configuration.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Return the orientation mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_occluder_light_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_quadrant_size",
          "qualifiers": "const",
          "description": "Return the quadrant size.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tile_origin",
          "qualifiers": "const",
          "description": "Return the tile origin configuration.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tileset",
          "qualifiers": "const",
          "description": "Return the current tileset.",
          "return_type": "TileSet",
          "arguments": []
        },
        {
          "name": "get_used_cells",
          "qualifiers": "const",
          "description": "Return an array of all cells containing a tile from the tileset (i.e. a tile index different from -1).",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_used_cells_by_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_used_rect",
          "description": "",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_cell_transposed",
          "qualifiers": "const",
          "description": "Return whether the referenced cell is transposed, i.e. the X and Y axes are swapped (mirroring with regard to the (1,1) vector).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_cell_x_flipped",
          "qualifiers": "const",
          "description": "Return whether the referenced cell is flipped over the X axis.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_cell_y_flipped",
          "qualifiers": "const",
          "description": "Return whether the referenced cell is flipped over the Y axis.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_y_sort_mode_enabled",
          "qualifiers": "const",
          "description": "Return the Y sort mode.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "map_to_world",
          "qualifiers": "const",
          "description": "Return the absolute world position corresponding to the tilemap (grid-based) coordinates given as an argument.\n\t\t\t\tOptionally, the tilemap's potential half offset can be ignored.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "map_position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ignore_half_ofs",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_cell",
          "description": "Set the tile index for the cell referenced by its grid-based X and Y coordinates.\n\t\t\t\tA tile index of -1 clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped over the X and Y coordinates or transposed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tile",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "flip_x",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "flip_y",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_cell_size",
          "description": "Set the cell size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cellv",
          "description": "Set the tile index for the cell referenced by a Vector2 of grid-based coordinates.\n\t\t\t\tA tile index of -1 clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped over the X and Y axes or transposed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tile",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flip_x",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "flip_y",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_center_x",
          "description": "Set tiles to be centered in x coordinate. (by default this is false and they are drawn from upper left cell corner).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_center_y",
          "description": "Set tiles to be centered in y coordinate. (by default this is false and they are drawn from upper left cell corner).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_bounce",
          "description": "Set the collision bounce parameter. Allowable values range from 0 to 1.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_friction",
          "description": "Set the collision friction parameter. Allowable values range from 0 to 1.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer",
          "description": "Set the collision layer.\n\t\t\t\tLayers are referenced by binary indexes, so allowable values to describe the 20 available layers range from 0 to 2^20-1.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "Set the collision masks.\n\t\t\t\tMasks are referenced by binary indexes, so allowable values to describe the 20 available masks range from 0 to 2^20-1.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_use_kinematic",
          "description": "Set the tilemap to handle collisions as a kinematic body (enabled) or a static body (disabled).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "use_kinematic",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_transform",
          "description": "Set custom transform matrix, to use in combination with the custom orientation mode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "custom_transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_half_offset",
          "description": "Set a half offset on the X coordinate, Y coordinate, or none (use HALF_OFFSET_* constants as argument).\n\t\t\t\tHalf offset sets every other tile off by a half tile size in the specified direction.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "half_offset",
              "type": "int",
              "enum": "TileMap.HalfOffset",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the orientation mode as square, isometric or custom (use MODE_* constants as argument).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "TileMap.Mode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_occluder_light_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_quadrant_size",
          "description": "Set the quadrant size, this optimizes drawing by batching chunks of map at draw/cull time.\n\t\t\t\tAllowed values are integers ranging from 1 to 128.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tile_origin",
          "description": "Set the tile origin to the tile center or its top-left corner (use TILE_ORIGIN_* constants as argument).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "origin",
              "type": "int",
              "enum": "TileMap.TileOrigin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tileset",
          "description": "Set the current tileset.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tileset",
              "type": "TileSet",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_y_sort_mode",
          "description": "Set the Y sort mode. Enabled Y sort mode means that children of the tilemap will be drawn in the order defined by their Y coordinate.\n\t\t\t\tA tile with a higher Y coordinate will therefore be drawn later, potentially covering up the tile(s) above it if its sprite is higher than its cell size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "world_to_map",
          "qualifiers": "const",
          "description": "Return the tilemap (grid-based) coordinates corresponding to the absolute world position given as an argument.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "world_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "settings_changed",
          "description": "Emitted when a tilemap setting has changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "INVALID_CELL",
          "value": "-1",
          "enum": "",
          "description": "Returned when a cell doesn't exist."
        },
        {
          "name": "MODE_SQUARE",
          "value": "0",
          "description": "Orthogonal orientation mode."
        },
        {
          "name": "MODE_ISOMETRIC",
          "value": "1",
          "description": "Isometric orientation mode."
        },
        {
          "name": "MODE_CUSTOM",
          "value": "2",
          "description": "Custom orientation mode."
        },
        {
          "name": "HALF_OFFSET_X",
          "value": "0",
          "description": "Half offset on the X coordinate."
        },
        {
          "name": "HALF_OFFSET_Y",
          "value": "1",
          "description": "Half offset on the Y coordinate."
        },
        {
          "name": "HALF_OFFSET_DISABLED",
          "value": "2",
          "description": "Half offset disabled."
        },
        {
          "name": "TILE_ORIGIN_TOP_LEFT",
          "value": "0",
          "description": "Tile origin at its top-left corner."
        },
        {
          "name": "TILE_ORIGIN_CENTER",
          "value": "1",
          "description": "Tile origin at its center."
        },
        {
          "name": "TILE_ORIGIN_BOTTOM_LEFT",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "cell_custom_transform",
          "type": "Transform2D",
          "setter": "set_custom_transform",
          "getter": "get_custom_transform",
          "description": "The custom [Transform2D] to be applied to the TileMap's cells."
        },
        {
          "name": "cell_half_offset",
          "type": "int",
          "setter": "set_half_offset",
          "getter": "get_half_offset",
          "enum": "TileMap.HalfOffset",
          "description": "Amount to offset alternating tiles. Uses HALF_OFFSET_* constants. Default value: HALF_OFFSET_DISABLED."
        },
        {
          "name": "cell_quadrant_size",
          "type": "int",
          "setter": "set_quadrant_size",
          "getter": "get_quadrant_size",
          "description": "The TileMap's quadrant size.  Optimizes drawing by batching, using chunks of this size. Default value: 16."
        },
        {
          "name": "cell_size",
          "type": "Vector2",
          "setter": "set_cell_size",
          "getter": "get_cell_size",
          "description": "The TileMap's cell size."
        },
        {
          "name": "cell_tile_origin",
          "type": "int",
          "setter": "set_tile_origin",
          "getter": "get_tile_origin",
          "enum": "TileMap.TileOrigin",
          "description": "Position for tile origin. Uses TILE_ORIGIN_* constants. Default value: TILE_ORIGIN_TOP_LEFT."
        },
        {
          "name": "cell_y_sort",
          "type": "bool",
          "setter": "set_y_sort_mode",
          "getter": "is_y_sort_mode_enabled",
          "description": "If [code]true[/code] the TileMap's children will be drawn in order of their Y coordinate. Default value: [code]false[/code]."
        },
        {
          "name": "collision_bounce",
          "type": "float",
          "setter": "set_collision_bounce",
          "getter": "get_collision_bounce",
          "description": "Bounce value for static body collisions (see [code]collision_use_kinematic[/code]). Default value: 0."
        },
        {
          "name": "collision_friction",
          "type": "float",
          "setter": "set_collision_friction",
          "getter": "get_collision_friction",
          "description": "Friction value for static body collisions (see [code]collision_use_kinematic[/code]). Default value: 1."
        },
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The collision layer(s) for all colliders in the TileMap."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The collision mask(s) for all colliders in the TileMap."
        },
        {
          "name": "collision_use_kinematic",
          "type": "bool",
          "setter": "set_collision_use_kinematic",
          "getter": "get_collision_use_kinematic",
          "description": "If [code]true[/code] TileMap collisions will be handled as a kinematic body. If [code]false[/code] collisions will be handled as static body. Default value: [code]false[/code]."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "TileMap.Mode",
          "description": "The TileMap orientation mode. Uses MODE_* constants. Default value: MODE_SQUARE."
        },
        {
          "name": "occluder_light_mask",
          "type": "int",
          "setter": "set_occluder_light_mask",
          "getter": "get_occluder_light_mask",
          "description": "The light mask assigned to all light occluders in the TileMap.  The TileSet's light occluders will cast shadows only from Light2D(s) that have the same light mask(s)."
        },
        {
          "name": "tile_data",
          "type": "PoolIntArray",
          "setter": "_set_tile_data",
          "getter": "_get_tile_data",
          "description": "A [PoolIntArray] containing"
        },
        {
          "name": "tile_set",
          "type": "TileSet",
          "setter": "set_tileset",
          "getter": "get_tileset",
          "description": "The assigned [TileSet]."
        }
      ],
      "theme_properties": []
    },
    "PhysicsDirectBodyStateSW": {
      "name": "PhysicsDirectBodyStateSW",
      "inherits": "PhysicsDirectBodyState",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PoolIntArray": {
      "name": "PoolIntArray",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Integer Array.",
      "description": "Integer Array. Contains integers. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolIntArray",
          "description": "Create from a generic array.",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [PoolIntArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new int at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append a value to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the int at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "integer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the array size.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptEngineSingleton": {
      "name": "VisualScriptEngineSingleton",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node returning a singleton from [@GlobalScope]",
      "description": "A Visual Script node returning a singleton from [@GlobalScope]",
      "methods": [
        {
          "name": "get_singleton",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_singleton",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "constant",
          "type": "String",
          "setter": "set_singleton",
          "getter": "get_singleton",
          "description": "The singleton's name."
        }
      ],
      "theme_properties": []
    },
    "ScriptEditor": {
      "name": "ScriptEditor",
      "inherits": "PanelContainer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_current_script",
          "description": "Returns a [Script] that is currently active in editor.",
          "return_type": "Script",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_open_scripts",
          "qualifiers": "const",
          "description": "Returns an array with all [Script] objects which are currently open in editor.",
          "return_type": "Array",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "editor_script_changed",
          "description": "Emitted when user changed active script. Argument is a freshly activated [Script].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "script",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "script_close",
          "description": "Emitted when editor is about to close the active script. Argument is a [Script] that is going to be closed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "script",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CapsuleShape": {
      "name": "CapsuleShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Capsule shape for collisions.",
      "description": "Capsule shape for collisions.",
      "methods": [
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the capsule height.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "Return the capsule radius.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_height",
          "description": "Set the capsule height.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radius",
          "description": "Set the capsule radius.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "The capsule's height."
        },
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "The capsule's radius."
        }
      ],
      "theme_properties": []
    },
    "Physics2DDirectBodyStateSW": {
      "name": "Physics2DDirectBodyStateSW",
      "inherits": "Physics2DDirectBodyState",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Software implementation of [Physics2DDirectBodyState].",
      "description": "Software implementation of [Physics2DDirectBodyState]. This object exposes no new methods or properties and should not be used, as [Physics2DDirectBodyState] selects the best implementation available.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptCustomNode": {
      "name": "VisualScriptCustomNode",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A scripted Visual Script node.",
      "description": "A custom Visual Script node which can be scripted in powerful ways.",
      "methods": [
        {
          "name": "_get_caption",
          "qualifiers": "virtual",
          "description": "Return the node's title.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "_get_category",
          "qualifiers": "virtual",
          "description": "Return the node's category.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "_get_input_value_port_count",
          "qualifiers": "virtual",
          "description": "Return the count of input value ports.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "_get_input_value_port_name",
          "qualifiers": "virtual",
          "description": "Return the specified input port's name.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_input_value_port_type",
          "qualifiers": "virtual",
          "description": "Return the specified input port's type. See the TYPE_* enum in [@GlobalScope].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_output_sequence_port_count",
          "qualifiers": "virtual",
          "description": "Return the amount of output [b]sequence[/b] ports.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "_get_output_sequence_port_text",
          "qualifiers": "virtual",
          "description": "Return the specified [b]sequence[/b] output's name.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_output_value_port_count",
          "qualifiers": "virtual",
          "description": "Return the amount of output value ports.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "_get_output_value_port_name",
          "qualifiers": "virtual",
          "description": "Return the specified output's name.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_output_value_port_type",
          "qualifiers": "virtual",
          "description": "Return the specified output's type. See the TYPE_* enum in [@GlobalScope].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_text",
          "qualifiers": "virtual",
          "description": "Return the custom node's text, which is shown right next to the input [b]sequence[/b] port (if there is none, on the place that is usually taken by it).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "_get_working_memory_size",
          "qualifiers": "virtual",
          "description": "Return the size of the custom node's working memory. See [method _step] for more details.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "_has_input_sequence_port",
          "qualifiers": "virtual",
          "description": "Return whether the custom node has an input [b]sequence[/b] port.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "_step",
          "qualifiers": "virtual",
          "description": "Execute the custom node's logic, returning the index of the output sequence port to use or a [String] when there is an error.\n\t\t\t\t\n\t\t\t\tThe [code]inputs[/code] array contains the values of the input ports.\n\t\t\t\t[code]outputs[/code] is an array whose indices should be set to the respective outputs.\n\t\t\t\tThe [code]start_mode[/code] is usually [code]START_MODE_BEGIN_SEQUENCE[/code], unless you have used the STEP_* constants.\n\t\t\t\t[code]working_mem[/code] is an array which can be used to persist information between runs of the custom node.\n\t\t\t\t\n\t\t\t\tWhen returning, you can mask the returned value with one of the STEP_* constants.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "inputs",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "outputs",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "start_mode",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "working_mem",
              "type": "Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "START_MODE_BEGIN_SEQUENCE",
          "value": "0",
          "description": "The start mode used the first time when [method _step] is called."
        },
        {
          "name": "START_MODE_CONTINUE_SEQUENCE",
          "value": "1",
          "description": "The start mode used when [method _step] is called after coming back from a STEP_PUSH_STACK_BIT."
        },
        {
          "name": "START_MODE_RESUME_YIELD",
          "value": "2",
          "description": "The start mode used when [method _step] is called after resuming from STEP_YIELD_BIT."
        },
        {
          "name": "STEP_PUSH_STACK_BIT",
          "value": "16777216",
          "enum": "",
          "description": "Hint used by [method _step] to tell that control should return to it when there is no other node left to execute.\n\t\t\tThis is used by [VisualScriptCondition] to redirect the sequence to the \"Done\" port after the true/false branch has finished execution."
        },
        {
          "name": "STEP_GO_BACK_BIT",
          "value": "33554432",
          "enum": "",
          "description": "Hint used by [method _step] to tell that control should return back, either hitting a previous STEP_PUSH_STACK_BIT or exiting the function."
        },
        {
          "name": "STEP_NO_ADVANCE_BIT",
          "value": "67108864",
          "enum": "",
          "description": ""
        },
        {
          "name": "STEP_EXIT_FUNCTION_BIT",
          "value": "134217728",
          "enum": "",
          "description": "Hint used by [method _step] to tell that control should stop and exit the function."
        },
        {
          "name": "STEP_YIELD_BIT",
          "value": "268435456",
          "enum": "",
          "description": "Hint used by [method _step] to tell that the function should be yielded.\n\t\t\tUsing this requires you to have at least one working memory slot, which is used for the [VisualScriptFunctionState]."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectHighShelfFilter": {
      "name": "AudioEffectHighShelfFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "DynamicFont": {
      "name": "DynamicFont",
      "inherits": "Font",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "DynamicFont renders vector font files at runtime.",
      "description": "DynamicFont renders vector font files (such as TTF or OTF) dynamically at runtime instead of using a prerendered texture atlas like [BitmapFont]. This trades the faster loading time of [BitmapFont]\\ s for the ability to change font parameters like size and spacing during runtime. [DynamicFontData] is used for referencing the font file paths.",
      "methods": [
        {
          "name": "add_fallback",
          "description": "Adds a fallback font.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "DynamicFontData",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_fallback",
          "qualifiers": "const",
          "description": "Returns the fallback font at index [code]idx[/code].",
          "return_type": "DynamicFontData",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_fallback_count",
          "qualifiers": "const",
          "description": "Returns the number of fallback fonts.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_font_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "DynamicFontData",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Returns the font size in pixels.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_spacing",
          "qualifiers": "const",
          "description": "Returns the given type of spacing in pixels. See [code]SPACING_*[/code] constants.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_use_filter",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if filtering is used.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_use_mipmaps",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if mipmapping is used.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove_fallback",
          "description": "Removes the fallback font at index [code]idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fallback",
          "description": "Sets the fallback font at index [code]idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "DynamicFontData",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_font_data",
          "description": "Sets the [DynamicFontData].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "DynamicFontData",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "Sets the font size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_spacing",
          "description": "Sets the spacing of the given type. See [code]SPACING_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_filter",
          "description": "Set to [code]true[/code] to use filtering.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_mipmaps",
          "description": "Set to [code]true[/code] to use mipmapping.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SPACING_TOP",
          "value": "0",
          "description": "Spacing at the top."
        },
        {
          "name": "SPACING_BOTTOM",
          "value": "1",
          "description": "Spacing at the bottom."
        },
        {
          "name": "SPACING_CHAR",
          "value": "2",
          "description": "Character spacing."
        },
        {
          "name": "SPACING_SPACE",
          "value": "3",
          "description": "Space spacing."
        }
      ],
      "properties": [
        {
          "name": "extra_spacing_bottom",
          "type": "int",
          "setter": "set_spacing",
          "getter": "get_spacing",
          "description": "Extra spacing at the bottom in pixels."
        },
        {
          "name": "extra_spacing_char",
          "type": "int",
          "setter": "set_spacing",
          "getter": "get_spacing",
          "description": "Extra character spacing in pixels."
        },
        {
          "name": "extra_spacing_space",
          "type": "int",
          "setter": "set_spacing",
          "getter": "get_spacing",
          "description": "Extra space spacing in pixels."
        },
        {
          "name": "extra_spacing_top",
          "type": "int",
          "setter": "set_spacing",
          "getter": "get_spacing",
          "description": "Extra spacing at the top in pixels."
        },
        {
          "name": "font_data",
          "type": "DynamicFontData",
          "setter": "set_font_data",
          "getter": "get_font_data",
          "description": "The font data."
        },
        {
          "name": "size",
          "type": "int",
          "setter": "set_size",
          "getter": "get_size",
          "description": "The font size."
        },
        {
          "name": "use_filter",
          "type": "bool",
          "setter": "set_use_filter",
          "getter": "get_use_filter",
          "description": "If [code]true[/code] filtering is used."
        },
        {
          "name": "use_mipmaps",
          "type": "bool",
          "setter": "set_use_mipmaps",
          "getter": "get_use_mipmaps",
          "description": "If [code]true[/code] mipmapping is used."
        }
      ],
      "theme_properties": []
    },
    "PackedDataContainer": {
      "name": "PackedDataContainer",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "pack",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "__data__",
          "type": "PoolByteArray",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AnimationTreePlayer": {
      "name": "AnimationTreePlayer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Animation Player that uses a node graph for the blending.",
      "description": "Animation Player that uses a node graph for the blending. This kind of player is very useful when animating character or other skeleton based rigs, because it can combine several animations to form a desired pose.",
      "methods": [
        {
          "name": "add_node",
          "description": "Add a node of a given type in the graph with given id.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "AnimationTreePlayer.NodeType",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "advance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_get_animation",
          "qualifiers": "const",
          "description": "Returns an animation given its name.",
          "return_type": "Animation",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_get_master_animation",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_set_animation",
          "description": "Set the animation for an animation node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_set_filter_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_node_set_master_animation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "source",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "are_nodes_connected",
          "qualifiers": "const",
          "description": "Returns whether node [code]id[/code] and [code]dst_id[/code] are connected at the specified slot.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dst_id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst_input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend2_node_get_amount",
          "qualifiers": "const",
          "description": "Returns the blend amount of a Blend2 node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend2_node_set_amount",
          "description": "Sets the blend amount of a Blend2 node given its name and value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "blend",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend2_node_set_filter_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend3_node_get_amount",
          "qualifiers": "const",
          "description": "Returns the blend amount of a Blend3 node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend3_node_set_amount",
          "description": "Sets the blend amount of a Blend3 node given its name and value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "blend",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend4_node_get_amount",
          "qualifiers": "const",
          "description": "Returns the blend amount of a Blend4 node given its name.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend4_node_set_amount",
          "description": "Sets the blend amount of a Blend4 node given its name and value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "blend",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "connect_nodes",
          "description": "Connects node [code]id[/code] to [code]dst_id[/code] at the specified input slot.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dst_id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst_input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect_nodes",
          "description": "Disconnects nodes connected to [code]id[/code] at the specified input slot.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dst_input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation_process_mode",
          "qualifiers": "const",
          "description": "Returns playback process mode of this AnimationTreePlayer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_base_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_master_player",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_node_list",
          "description": "Returns a PoolStringArray containing the name of all nodes.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Returns whether this AnimationTreePlayer is active.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "mix_node_get_amount",
          "qualifiers": "const",
          "description": "Returns mix amount of a Mix node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mix_node_set_amount",
          "description": "Sets mix amount of a Mix node given its name and value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_exists",
          "qualifiers": "const",
          "description": "Check if a node exists (by name).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_input_count",
          "qualifiers": "const",
          "description": "Return the input count for a given node. Different types of nodes have different amount of inputs.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_input_source",
          "qualifiers": "const",
          "description": "Return the input source for a given node input.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_position",
          "qualifiers": "const",
          "description": "Returns position of a node in the graph given its name.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_get_type",
          "qualifiers": "const",
          "description": "Get the node type, will return from NODE_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_rename",
          "description": "Rename a node in the graph.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_set_position",
          "description": "Sets position of a node in the graph given its name and position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "screen_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_autorestart_delay",
          "qualifiers": "const",
          "description": "Returns autostart delay of a OneShot node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_autorestart_random_delay",
          "qualifiers": "const",
          "description": "Returns autostart random delay of a OneShot node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_fadein_time",
          "qualifiers": "const",
          "description": "Returns fade in time of a OneShot node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_get_fadeout_time",
          "qualifiers": "const",
          "description": "Returns fade out time of a OneShot node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_has_autorestart",
          "qualifiers": "const",
          "description": "Returns whether a OneShot node will auto restart given its name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_is_active",
          "qualifiers": "const",
          "description": "Returns whether a OneShot node is active given its name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_autorestart",
          "description": "Sets autorestart property of a OneShot node given its name and value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_autorestart_delay",
          "description": "Sets autorestart delay of a OneShot node given its name and value in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "delay_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_autorestart_random_delay",
          "description": "Sets autorestart random delay of a OneShot node given its name and value in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rand_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_fadein_time",
          "description": "Sets fade in time of a OneShot node given its name and value in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_fadeout_time",
          "description": "Sets fade out time of a OneShot node given its name and value in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_set_filter_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_start",
          "description": "Starts a OneShot node given its name.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "oneshot_node_stop",
          "description": "Stops a OneShot node given its name.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "recompute_caches",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_node",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reset",
          "description": "Resets this AnimationTreePlayer.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_active",
          "description": "Sets whether this AnimationTreePlayer is active. AnimationTreePlayer will start processing if set to active.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_process_mode",
          "description": "Sets process mode (ANIMATION_PROCESS_*) of this AnimationTreePlayer.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "AnimationTreePlayer.AnimationProcessMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_path",
          "description": "Sets base path of this AnimationTreePlayer.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_master_player",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "nodepath",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "timescale_node_get_scale",
          "qualifiers": "const",
          "description": "Returns time scale value of a TimeScale node given its name.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "timescale_node_set_scale",
          "description": "Sets time scale value of a TimeScale node given its name and value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "timeseek_node_seek",
          "description": "Sets time seek value of a TimeSeek node given its name and value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "seconds",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_delete_input",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_get_current",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_get_input_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_get_xfade_time",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_has_input_auto_advance",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_current",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_input_auto_advance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "input_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_input_count",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "count",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transition_node_set_xfade_time",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NODE_OUTPUT",
          "value": "0",
          "description": "Output node."
        },
        {
          "name": "NODE_ANIMATION",
          "value": "1",
          "description": "Animation node."
        },
        {
          "name": "NODE_ONESHOT",
          "value": "2",
          "description": "OneShot node."
        },
        {
          "name": "NODE_MIX",
          "value": "3",
          "description": "Mix node."
        },
        {
          "name": "NODE_BLEND2",
          "value": "4",
          "description": "Blend2 node."
        },
        {
          "name": "NODE_BLEND3",
          "value": "5",
          "description": "Blend3 node."
        },
        {
          "name": "NODE_BLEND4",
          "value": "6",
          "description": "Blend4 node."
        },
        {
          "name": "NODE_TIMESCALE",
          "value": "7",
          "description": "TimeScale node."
        },
        {
          "name": "NODE_TIMESEEK",
          "value": "8",
          "description": "TimeSeek node."
        },
        {
          "name": "NODE_TRANSITION",
          "value": "9",
          "description": "Transition node."
        },
        {
          "name": "ANIMATION_PROCESS_PHYSICS",
          "value": "0",
          "description": ""
        },
        {
          "name": "ANIMATION_PROCESS_IDLE",
          "value": "1",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "playback_process_mode",
          "type": "int",
          "setter": "set_animation_process_mode",
          "getter": "get_animation_process_mode",
          "enum": "AnimationTreePlayer.AnimationProcessMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioStreamPlayer": {
      "name": "AudioStreamPlayer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Plays back audio.",
      "description": "Plays background audio.",
      "methods": [
        {
          "name": "get_bus",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_mix_target",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_playback_position",
          "description": "Returns the position in the [AudioStream].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_stream",
          "qualifiers": "const",
          "description": "",
          "return_type": "AudioStream",
          "arguments": []
        },
        {
          "name": "get_volume_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_autoplay_enabled",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Plays the audio from the given position 'from_position', in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_position",
              "type": "float",
              "default_value": "0.0"
            }
          ]
        },
        {
          "name": "seek",
          "description": "Sets the position from which audio will be played, in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mix_target",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mix_target",
              "type": "int",
              "enum": "AudioStreamPlayer.MixTarget",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "AudioStream",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_volume_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "volume_db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stops the audio.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "finished",
          "description": "Emitted when the audio stops playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "MIX_TARGET_STEREO",
          "value": "0",
          "description": "The audio will be played only on the first channel."
        },
        {
          "name": "MIX_TARGET_SURROUND",
          "value": "1",
          "description": "The audio will be played on all surround channels."
        },
        {
          "name": "MIX_TARGET_CENTER",
          "value": "2",
          "description": "The audio will be played on the second channel, which is usually the center."
        }
      ],
      "properties": [
        {
          "name": "autoplay",
          "type": "bool",
          "setter": "set_autoplay",
          "getter": "is_autoplay_enabled",
          "description": "If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code]."
        },
        {
          "name": "bus",
          "type": "String",
          "setter": "set_bus",
          "getter": "get_bus",
          "description": "Bus on which this audio is playing."
        },
        {
          "name": "mix_target",
          "type": "int",
          "setter": "set_mix_target",
          "getter": "get_mix_target",
          "enum": "AudioStreamPlayer.MixTarget",
          "description": "If the audio configuration has more than two speakers, this sets the target channels. See [code]MIX_TARGET_*[/code] constants."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "is_playing",
          "description": "If [code]true[/code] audio is playing."
        },
        {
          "name": "stream",
          "type": "AudioStream",
          "setter": "set_stream",
          "getter": "get_stream",
          "description": "The [AudioStream] object to be played."
        },
        {
          "name": "volume_db",
          "type": "float",
          "setter": "set_volume_db",
          "getter": "get_volume_db",
          "description": "Volume of sound, in dB."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptDeconstruct": {
      "name": "VisualScriptDeconstruct",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node which deconstructs a base type instance into its parts.",
      "description": "A Visual Script node which deconstructs a base type instance into its parts.",
      "methods": [
        {
          "name": "get_deconstruct_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_deconstruct_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "elem_cache",
          "type": "Array",
          "setter": "_set_elem_cache",
          "getter": "_get_elem_cache",
          "description": ""
        },
        {
          "name": "type",
          "type": "int",
          "setter": "set_deconstruct_type",
          "getter": "get_deconstruct_type",
          "enum": "Variant.Type",
          "description": "The type to deconstruct."
        }
      ],
      "theme_properties": []
    },
    "AudioBusLayout": {
      "name": "AudioBusLayout",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Stores information about the audiobusses.",
      "description": "Stores position, muting, solo, bypass, effects, effect position, volume, and the connections between busses. See [AudioServer] for usage.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "NinePatchRect": {
      "name": "NinePatchRect",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Scalable texture-based frame that tiles the texture's centers and sides, but keeps the corners' original size. Perfect for panels and dialog boxes.",
      "description": "Better known as 9-slice panels, NinePatchRect produces clean panels of any size, based on a small texture. To do so, it splits the texture in a 3 by 3 grid. When you scale the node, it tiles the texture's sides horizontally or vertically, the center on both axes but it doesn't scale or tile the corners.",
      "methods": [
        {
          "name": "get_h_axis_stretch_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_patch_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_region_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_v_axis_stretch_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_draw_center_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_draw_center",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "draw_center",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_axis_stretch_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "NinePatchRect.AxisStretchMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_patch_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_rect",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_axis_stretch_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "NinePatchRect.AxisStretchMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "texture_changed",
          "description": "Fired when the node's texture changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "AXIS_STRETCH_MODE_STRETCH",
          "value": "0",
          "description": "Doesn't do anything at the time of writing. Default value for [code]axis_stretch_horizontal[/code] and [code]axis_stretch_vertical[/code]."
        },
        {
          "name": "AXIS_STRETCH_MODE_TILE",
          "value": "1",
          "description": "Doesn't do anything at the time of writing."
        },
        {
          "name": "AXIS_STRETCH_MODE_TILE_FIT",
          "value": "2",
          "description": "Doesn't do anything at the time of writing."
        }
      ],
      "properties": [
        {
          "name": "axis_stretch_horizontal",
          "type": "int",
          "setter": "set_h_axis_stretch_mode",
          "getter": "get_h_axis_stretch_mode",
          "enum": "NinePatchRect.AxisStretchMode",
          "description": "Doesn't do anything at the time of writing."
        },
        {
          "name": "axis_stretch_vertical",
          "type": "int",
          "setter": "set_v_axis_stretch_mode",
          "getter": "get_v_axis_stretch_mode",
          "enum": "NinePatchRect.AxisStretchMode",
          "description": "Doesn't do anything at the time of writing."
        },
        {
          "name": "draw_center",
          "type": "bool",
          "setter": "set_draw_center",
          "getter": "is_draw_center_enabled",
          "description": "If [code]true[/code], draw the panel's center. Else, only draw the 9-slice's borders. Default value: [code]true[/code]"
        },
        {
          "name": "patch_margin_bottom",
          "type": "int",
          "setter": "set_patch_margin",
          "getter": "get_patch_margin",
          "description": "The height of the 9-slice's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders."
        },
        {
          "name": "patch_margin_left",
          "type": "int",
          "setter": "set_patch_margin",
          "getter": "get_patch_margin",
          "description": "The height of the 9-slice's left column."
        },
        {
          "name": "patch_margin_right",
          "type": "int",
          "setter": "set_patch_margin",
          "getter": "get_patch_margin",
          "description": "The height of the 9-slice's right column."
        },
        {
          "name": "patch_margin_top",
          "type": "int",
          "setter": "set_patch_margin",
          "getter": "get_patch_margin",
          "description": "The height of the 9-slice's top row."
        },
        {
          "name": "region_rect",
          "type": "Rect2",
          "setter": "set_region_rect",
          "getter": "get_region_rect",
          "description": "Rectangular region of the texture to sample from. If you're working with an atlas, use this property to define the area the 9-slice should use. All other properties are relative to this one."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The node's texture resource."
        }
      ],
      "theme_properties": []
    },
    "ResourcePreloader": {
      "name": "ResourcePreloader",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Resource Preloader Node.",
      "description": "Resource Preloader Node. This node is used to preload sub-resources inside a scene, so when the scene is loaded all the resources are ready to use and be retrieved from here.",
      "methods": [
        {
          "name": "add_resource",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resource",
          "qualifiers": "const",
          "description": "Return the resource given a text-id.",
          "return_type": "Resource",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resource_list",
          "qualifiers": "const",
          "description": "Return the list of resources inside the preloader.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "has_resource",
          "qualifiers": "const",
          "description": "Return true if the preloader has a given resource.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_resource",
          "description": "Remove a resource from the preloader by text id.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_resource",
          "description": "Rename a resource inside the preloader, from a text-id to a new text-id.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "newname",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "resources",
          "type": "Array",
          "setter": "_set_resources",
          "getter": "_get_resources",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptSelf": {
      "name": "VisualScriptSelf",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputDefault": {
      "name": "InputDefault",
      "inherits": "Input",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Default implementation of the [Input] class.",
      "description": "Default implementation of the [Input] class, used internally by the editor and games for default input management.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpriteBase3D": {
      "name": "SpriteBase3D",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "2D Sprite node in 3D environment.",
      "description": "A node that displays 2D texture information in a 3D environment.",
      "methods": [
        {
          "name": "get_alpha_cut_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_axis",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_draw_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "SpriteBase3D.DrawFlags",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_opacity",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_pixel_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_centered",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_h",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_v",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_alpha_cut_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "SpriteBase3D.AlphaCutMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_axis",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_centered",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "centered",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_flag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "SpriteBase3D.DrawFlags",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_h",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_h",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_v",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_v",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "modulate",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_opacity",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "opacity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pixel_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pixel_size",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_TRANSPARENT",
          "value": "0",
          "description": "If set, the texture's transparency and the opacity are used to make those parts of the Sprite invisible."
        },
        {
          "name": "FLAG_SHADED",
          "value": "1",
          "description": "If set, the Light in the Environment has effects on the Sprite."
        },
        {
          "name": "FLAG_DOUBLE_SIDED",
          "value": "2",
          "description": "If set, texture can be seen from the back as well, if not, it is invisible when looking at it from behind."
        },
        {
          "name": "FLAG_MAX",
          "value": "3",
          "description": "Used internally to mark the end of the Flags section."
        },
        {
          "name": "ALPHA_CUT_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "ALPHA_CUT_DISCARD",
          "value": "1",
          "description": ""
        },
        {
          "name": "ALPHA_CUT_OPAQUE_PREPASS",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "alpha_cut",
          "type": "int",
          "setter": "set_alpha_cut_mode",
          "getter": "get_alpha_cut_mode",
          "enum": "SpriteBase3D.AlphaCutMode",
          "description": ""
        },
        {
          "name": "axis",
          "type": "int",
          "setter": "set_axis",
          "getter": "get_axis",
          "enum": "Vector3.Axis",
          "description": "The direction in which the front of the texture faces."
        },
        {
          "name": "centered",
          "type": "bool",
          "setter": "set_centered",
          "getter": "is_centered",
          "description": "If [code]true[/code] texture will be centered. Default value: [code]true[/code]."
        },
        {
          "name": "double_sided",
          "type": "bool",
          "setter": "set_draw_flag",
          "getter": "get_draw_flag",
          "description": "If [code]true[/code] texture can be seen from the back as well, if [code]false[/code], it is invisible when looking at it from behind. Default value: [code]true[/code]."
        },
        {
          "name": "flip_h",
          "type": "bool",
          "setter": "set_flip_h",
          "getter": "is_flipped_h",
          "description": "If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code]."
        },
        {
          "name": "flip_v",
          "type": "bool",
          "setter": "set_flip_v",
          "getter": "is_flipped_v",
          "description": "If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code]."
        },
        {
          "name": "modulate",
          "type": "Color",
          "setter": "set_modulate",
          "getter": "get_modulate",
          "description": "A color value that gets multiplied on, could be used for mood-coloring or to simulate the color of light."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The texture's drawing offset."
        },
        {
          "name": "opacity",
          "type": "float",
          "setter": "set_opacity",
          "getter": "get_opacity",
          "description": "The objects visibility on a scale from [code]0[/code] fully invisible to [code]1[/code] fully visible."
        },
        {
          "name": "pixel_size",
          "type": "float",
          "setter": "set_pixel_size",
          "getter": "get_pixel_size",
          "description": "The size of one pixel's width on the Sprite to scale it in 3D."
        },
        {
          "name": "shaded",
          "type": "bool",
          "setter": "set_draw_flag",
          "getter": "get_draw_flag",
          "description": "If [code]true[/code] the [Light] in the [Environment] has effects on the Sprite. Default value: [code]false[/code]."
        },
        {
          "name": "transparent",
          "type": "bool",
          "setter": "set_draw_flag",
          "getter": "get_draw_flag",
          "description": "If [code]true[/code] the texture's transparency and the opacity are used to make those parts of the Sprite invisible. Default value: [code]true[/code]."
        }
      ],
      "theme_properties": []
    },
    "ConcavePolygonShape2D": {
      "name": "ConcavePolygonShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Concave polygon 2D shape resource for physics.",
      "description": "Concave polygon 2D shape resource for physics. It is made out of segments and is very optimal for complex polygonal concave collisions. It is really not advised to use for [RigidBody2D] nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.\n\t\tThe main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.",
      "methods": [
        {
          "name": "get_segments",
          "qualifiers": "const",
          "description": "Return the array of segments.",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "set_segments",
          "description": "Set the array of segments.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "segments",
          "type": "PoolVector2Array",
          "setter": "set_segments",
          "getter": "get_segments",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "EditorSpatialGizmo": {
      "name": "EditorSpatialGizmo",
      "inherits": "SpatialGizmo",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Custom gizmo for editing Spatial objects.",
      "description": "Custom gizmo that is used for providing custom visualization and editing (handles) for 3D Spatial objects. These are created by [method EditorPlugin.create_spatial_gizmo].",
      "methods": [
        {
          "name": "add_collision_segments",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_collision_triangles",
          "description": "Add collision triangles to the gizmo for picking. A [TriangleMesh] can be generated from a regular [Mesh] too. Call this function during [method redraw].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "triangles",
              "type": "TriangleMesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bounds",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_handles",
          "description": "Add a list of handles (points) which can be used to deform the object being edited.\n\t\t\t\tThere are virtual functions which will be called upon editing of these handles. Call this function during [method redraw].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "handles",
              "type": "PoolVector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "billboard",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "secondary",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_lines",
          "description": "Add lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this function during [method redraw].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lines",
              "type": "PoolVector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "Material",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "billboard",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_mesh",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "ArrayMesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "billboard",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "skeleton",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_unscaled_billboard",
          "description": "Add an unscaled billboard for visualization. Call this function during [method redraw].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "default_scale",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit_handle",
          "qualifiers": "virtual",
          "description": "Commit a handle being edited (handles must have been previously added by [method add_handles]).\n\t\t\t\tIf the cancel parameter is true, an option to restore the edited value to the original is provided.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "restore",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "cancel",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_handle_name",
          "qualifiers": "virtual",
          "description": "Get the name of an edited handle (handles must have been previously added by [method add_handles]).\n\t\t\t\tHandles can be named for reference to the user when editing.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_handle_value",
          "qualifiers": "virtual",
          "description": "Get actual value of a handle. This value can be anything and used for eventually undoing the motion when calling [method commit_handle]",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "redraw",
          "qualifiers": "virtual",
          "description": "This function is called when the Spatial this gizmo refers to changes (the [method Spatial.update_gizmo] is called).",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "set_handle",
          "qualifiers": "virtual",
          "description": "This function is used when the user drags a gizmo handle (previously added with [method add_handles]) in screen coordinates.\n\t\t\t\tThe [Camera] is also provided so screen coordinates can be converted to raycasts.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "camera",
              "type": "Camera",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_spatial_node",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "BoxShape": {
      "name": "BoxShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Box shape resource.",
      "description": "3D box shape that can be a child of a [PhysicsBody] or [Area].",
      "methods": [
        {
          "name": "get_extents",
          "qualifiers": "const",
          "description": "Return the half extents of the shape.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "set_extents",
          "description": "Set the half extents for the shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "extents",
          "type": "Vector3",
          "setter": "set_extents",
          "getter": "get_extents",
          "description": "The shape's half extents."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectLowPassFilter": {
      "name": "AudioEffectLowPassFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PoolStringArray": {
      "name": "PoolStringArray",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "String Array.",
      "description": "String Array. Array of strings. Can only contain strings. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolStringArray",
          "description": "Create from a generic array.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [StringArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "join",
          "description": "Returns a [String] with each element of the array joined with the delimiter.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delimiter",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_back",
          "description": "Append a string element at end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [String] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptExpression": {
      "name": "VisualScriptExpression",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Joint": {
      "name": "Joint",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_exclude_nodes_from_collision",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_node_a",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_node_b",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_solver_priority",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_exclude_nodes_from_collision",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_a",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_b",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_solver_priority",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "priority",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision/exclude_nodes",
          "type": "bool",
          "setter": "set_exclude_nodes_from_collision",
          "getter": "get_exclude_nodes_from_collision",
          "description": ""
        },
        {
          "name": "nodes/node_a",
          "type": "NodePath",
          "setter": "set_node_a",
          "getter": "get_node_a",
          "description": ""
        },
        {
          "name": "nodes/node_b",
          "type": "NodePath",
          "setter": "set_node_b",
          "getter": "get_node_b",
          "description": ""
        },
        {
          "name": "solver/priority",
          "type": "int",
          "setter": "set_solver_priority",
          "getter": "get_solver_priority",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PanelContainer": {
      "name": "PanelContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Panel container type.",
      "description": "Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "VisualScriptIndexSet": {
      "name": "VisualScriptIndexSet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AStar": {
      "name": "AStar",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "AStar class representation that uses vectors as edges.",
      "description": "A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently directed path between multiple points. It enjoys widespread use due to its performance and accuracy. Godot's A* implementation make use of vectors as points.\n\t\tYou must add points manually with [method AStar.add_point] and create segments manually with [method AStar.connect_points]. So you can test if there is a path between two points with the [method AStar.are_points_connected] function, get the list of existing ids in the found path with [method AStar.get_id_path], or the points list with [method AStar.get_point_path].",
      "methods": [
        {
          "name": "_compute_cost",
          "qualifiers": "virtual",
          "description": "Called when computing the cost between two connected points.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_estimate_cost",
          "qualifiers": "virtual",
          "description": "Called when estimating the cost between a point and the path's ending point.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_point",
          "description": "Adds a new point at the given position with the given identifier. The algorithm prefers points with lower [code]weight_scale[/code] to form a path. The [code]id[/code] must be 0 or larger, and the [code]weight_scale[/code] must be 1 or larger.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\t\t\t\t\n\t\t\t\tas.add_point(1, Vector3(1,0,0), 4) # Adds the point (1,0,0) with weight_scale=4 and id=1\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "weight_scale",
              "type": "float",
              "default_value": "1.0"
            }
          ]
        },
        {
          "name": "are_points_connected",
          "qualifiers": "const",
          "description": "Returns whether there is a connection/segment between the given points.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clears all the points and segments.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connect_points",
          "description": "Creates a segment between the given points.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\t\t\t\t\n\t\t\t\tas.add_point(1, Vector3(1,1,0))\n\t\t\t\tas.add_point(2, Vector3(0,5,0))\n\t\t\t\t\n\t\t\t\tas.connect_points(1, 2, false) # If bidirectional=false it's only possible to go from point 1 to point 2\n\t\t\t\t                               # and not from point 2 to point 1.\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "bidirectional",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "disconnect_points",
          "description": "Deletes the segment between the given points.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_available_point_id",
          "qualifiers": "const",
          "description": "Returns an id with no point associated to it.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_closest_point",
          "qualifiers": "const",
          "description": "Returns the id of the closest point to [code]to_position[/code]. Returns -1 if there are no points in the points pool.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_position_in_segment",
          "qualifiers": "const",
          "description": "Returns the closest position to [code]to_position[/code] that resides inside a segment between two connected points.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\t\t\t\t\n\t\t\t\tas.add_point(1, Vector3(0,0,0))\n\t\t\t\tas.add_point(2, Vector3(0,5,0))\n\t\t\t\t\n\t\t\t\tas.connect_points(1, 2)\n\t\t\t\t\n\t\t\t\tvar res = as.get_closest_position_in_segment(Vector3(3,3,0)) # returns (0, 3, 0)\n\t\t\t\t[/codeblock]\n\t\t\t\tThe result is in the segment that goes from [code]y=0[/code] to [code]y=5[/code]. It's the closest position in the segment to the given point.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_id_path",
          "description": "Returns an array with the ids of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\t\t\t\t\n\t\t\t\tas.add_point(1, Vector3(0,0,0))\n\t\t\t\tas.add_point(2, Vector3(0,1,0), 1) # default weight is 1\n\t\t\t\tas.add_point(3, Vector3(1,1,0))\n\t\t\t\tas.add_point(4, Vector3(2,0,0))\n\t\t\t\t\n\t\t\t\tas.connect_points(1, 2, false)\n\t\t\t\tas.connect_points(2, 3, false)\n\t\t\t\tas.connect_points(4, 3, false)\n\t\t\t\tas.connect_points(1, 4, false)\n\t\t\t\tas.connect_points(5, 4, false)\n\t\t\t\t\n\t\t\t\tvar res = as.get_id_path(1, 3) # returns [1, 2, 3]\n\t\t\t\t[/codeblock]\n\t\t\t\tIf you change the 2nd point's weight to 3, then the result will be [code][1, 4, 3][/code] instead, because now even though the distance is longer, it's \"easier\" to get through point 4 than through point 2.",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_path",
          "description": "Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "Returns the position of the point associated with the given id.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_weight_scale",
          "qualifiers": "const",
          "description": "Returns the weight scale of the point associated with the given id.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_points",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "qualifiers": "const",
          "description": "Returns whether a point associated with the given id exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Removes the point associated with the given id from the points pool.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ColorPickerButton": {
      "name": "ColorPickerButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Button that pops out a [ColorPicker]",
      "description": "Encapsulates a [ColorPicker] making it accesible by pressing a button, pressing the button will toggle the [ColorPicker] visibility",
      "methods": [
        {
          "name": "get_pick_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_picker",
          "description": "",
          "return_type": "ColorPicker",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_editing_alpha",
          "qualifiers": "const",
          "description": "See [method ColorPicker.is_edit_alpha]",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_edit_alpha",
          "description": "See [method ColorPicker.set_edit_alpha]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pick_color",
          "description": "Set new color to ColorRect.\n\n\t\t\t[codeblock]\n\t\t\tvar cr = get_node(\"colorrect_node\")\n\t\t\tcr.set_frame_color(Color(1, 0, 0, 1)) # Set color rect node to red\n\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "color_changed",
          "description": "Emitted when the color is changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_pick_color",
          "getter": "get_pick_color",
          "description": ""
        },
        {
          "name": "edit_alpha",
          "type": "bool",
          "setter": "set_edit_alpha",
          "getter": "is_editing_alpha",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "bg",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "GridContainer": {
      "name": "GridContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Grid container used to arrange elements in a grid like layout",
      "description": "Grid container will arrange its children in a grid like structure, the grid columns are specified using the [method set_columns] method and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.",
      "methods": [
        {
          "name": "get_columns",
          "qualifiers": "const",
          "description": "Returns the number of columns in this container",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_columns",
          "description": "Sets the numbers of columns in the container, then reorder its children to accommodate the new layout",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "columns",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "columns",
          "type": "int",
          "setter": "set_columns",
          "getter": "get_columns",
          "description": "The number of columns in the [code]GridContainer[/code]. If modified, [code]GridContainer[/code] reorders its children to accommodate the new layout."
        }
      ],
      "theme_properties": [
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "PolygonPathFinder": {
      "name": "PolygonPathFinder",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "find_path",
          "description": "",
          "return_type": "PoolVector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bounds",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_closest_point",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_intersections",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_penalty",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_point_inside",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_penalty",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "penalty",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "setup",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "connections",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "data",
          "type": "Dictionary",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "GDFunctionState": {
      "name": "GDFunctionState",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "State of a function call after yielding.",
      "description": "Calling [method @GDScript.yield] within a function will cause that function to yield and return its current state as an object of this type. The yielded function call can then be resumed later by calling [method resume] on this state object.",
      "methods": [
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "Check whether the function call may be resumed. This is not the case if the function state was already resumed.\n\t\t\t\tIf [code]extended_check[/code] is enabled, it also checks if the associated script and object still exist. The extended check is done in debug mode as part of [method GDFunctionState.resume], but you can use this if you know you may be trying to resume without knowing for sure the object and/or script have survived up to that point.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "extended_check",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "resume",
          "description": "Resume execution of the yielded function call.\n\t\t\t\tIf handed an argument, return the argument from the [method @GDScript.yield] call in the yielded function call. You can pass e.g. an [Array] to hand multiple arguments.\n\t\t\t\tThis function returns what the resumed function call returns, possibly another function state if yielded again.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "completed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "result",
              "type": "Nil",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "LineShape2D": {
      "name": "LineShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Line shape for 2D collisions.",
      "description": "Line shape for 2D collisions. It works like a 2D plane and will not allow any body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame.",
      "methods": [
        {
          "name": "get_d",
          "qualifiers": "const",
          "description": "Return the line distance from the origin.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_normal",
          "qualifiers": "const",
          "description": "Return the line normal.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_d",
          "description": "Set the line distance from the origin.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "d",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal",
          "description": "Set the line normal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "d",
          "type": "float",
          "setter": "set_d",
          "getter": "get_d",
          "description": "The line's distance from the origin."
        },
        {
          "name": "normal",
          "type": "Vector2",
          "setter": "set_normal",
          "getter": "get_normal",
          "description": "The line's normal."
        }
      ],
      "theme_properties": []
    },
    "ParallaxLayer": {
      "name": "ParallaxLayer",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A parallax scrolling layer to be used with [ParallaxBackground].",
      "description": "A ParallaxLayer must be the child of a [ParallaxBackground] node. All child nodes will be affected by the parallax scrolling of this layer.",
      "methods": [
        {
          "name": "get_mirroring",
          "qualifiers": "const",
          "description": "Return the mirroring of the ParallaxLayer.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_motion_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_motion_scale",
          "qualifiers": "const",
          "description": "Return the motion scale of the ParallaxLayer.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_mirroring",
          "description": "Set the mirroring of the ParallaxLayer. If an axis is set to 0 then that axis will have no mirroring.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mirror",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_motion_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_motion_scale",
          "description": "Set the motion scale of the ParallaxLayer. If an axis is set to 0 then it will not move at all, it will stick with the camera.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "motion_mirroring",
          "type": "Vector2",
          "setter": "set_mirroring",
          "getter": "get_mirroring",
          "description": ""
        },
        {
          "name": "motion_offset",
          "type": "Vector2",
          "setter": "set_motion_offset",
          "getter": "get_motion_offset",
          "description": ""
        },
        {
          "name": "motion_scale",
          "type": "Vector2",
          "setter": "set_motion_scale",
          "getter": "get_motion_scale",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "JSON": {
      "name": "JSON",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Helper class for parsing JSON data.",
      "description": "Helper class for parsing JSON data.",
      "methods": [
        {
          "name": "parse",
          "description": "Parses a JSON encoded string and returns a [JSONParseResult] containing the result.",
          "return_type": "JSONParseResult",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "json",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print",
          "description": "Converts a Variant var to JSON text and returns the result. Useful for serializing data to store or send over the network.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionPolygon": {
      "name": "CollisionPolygon",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Editor-only class for defining a collision polygon in 3D space.",
      "description": "Allows editing a collision polygon's vertices on a selected plane. Can also set a depth perpendicular to that plane. This class is only available in the editor. It will not appear in the scene tree at runtime. Creates a [Shape] for gameplay. Properties modified during gameplay will have no effect.",
      "methods": [
        {
          "name": "get_depth",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "is_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_depth",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "depth",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_polygon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "depth",
          "type": "float",
          "setter": "set_depth",
          "getter": "get_depth",
          "description": "Length that the resulting collision extends in either direction perpendicular to its polygon."
        },
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": "If true, no collision will be produced."
        },
        {
          "name": "polygon",
          "type": "PoolVector2Array",
          "setter": "set_polygon",
          "getter": "get_polygon",
          "description": "Array of vertices which define the polygon."
        }
      ],
      "theme_properties": []
    },
    "EditorSettings": {
      "name": "EditorSettings",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Object that holds the project-independent editor settings.",
      "description": "Object that holds the project-independent editor settings. These settings are generally visible in the Editor Settings menu.\n\t\tAccessing the settings is done by using the regular [Object] API, such as:\n\t\t[codeblock]\n\t\tsettings.set(prop,value)\n\t\tsettings.get(prop)\n\t\tlist_of_settings = settings.get_property_list()\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "add_property_info",
          "description": "Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@Global Scope]), and optionally hint:[int](see PROPERTY_HINT_* in [@Global Scope]), hint_string:[String].\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\teditor_settings.set(\"category/property_name\", 0)\n\n\t\t\t\tvar property_info = {\n\t\t\t\t    \"name\": \"category/property_name\",\n\t\t\t\t    \"type\": TYPE_INT,\n\t\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t\t}\n\n\t\t\t\teditor_settings.add_property_info(property_info)\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "info",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase",
          "description": "Erase a given setting (pass full property path).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_favorite_dirs",
          "qualifiers": "const",
          "description": "Get the list of favorite directories for this project.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_project_settings_path",
          "qualifiers": "const",
          "description": "Get the specific project settings path. Projects all have a unique sub-directory inside the settings path where project specific settings are saved.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_recent_dirs",
          "qualifiers": "const",
          "description": "Get the list of recently visited folders in the file dialog for this project.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_setting",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_settings_path",
          "qualifiers": "const",
          "description": "Get the global settings path for the engine. Inside this path you can find some standard paths such as:\n\t\t\t\tsettings/tmp - used for temporary storage of files\n\t\t\t\tsettings/templates - where export templates are located",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "has_setting",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "property_can_revert",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "property_get_revert",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_favorite_dirs",
          "description": "Set the list of favorite directories for this project.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dirs",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_initial_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_recent_dirs",
          "description": "Set the list of recently visited folders in the file dialog for this project.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dirs",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_setting",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "settings_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GIProbe": {
      "name": "GIProbe",
      "inherits": "VisualInstance",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "bake",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_node",
              "type": "Node",
              "default_value": "null"
            },
            {
              "index": "1",
              "name": "create_visual_debug",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "debug_bake",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_bias",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_dynamic_range",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_extents",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_normal_bias",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_probe_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "GIProbeData",
          "arguments": []
        },
        {
          "name": "get_propagation",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_subdiv",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_compressed",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_interior",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_bias",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_compress",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dynamic_range",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_energy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_extents",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_interior",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal_bias",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_probe_data",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "GIProbeData",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_propagation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subdiv",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "subdiv",
              "type": "int",
              "enum": "GIProbe.Subdiv",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SUBDIV_64",
          "value": "0",
          "description": ""
        },
        {
          "name": "SUBDIV_128",
          "value": "1",
          "description": ""
        },
        {
          "name": "SUBDIV_256",
          "value": "2",
          "description": ""
        },
        {
          "name": "SUBDIV_MAX",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "bias",
          "type": "float",
          "setter": "set_bias",
          "getter": "get_bias",
          "description": ""
        },
        {
          "name": "compress",
          "type": "bool",
          "setter": "set_compress",
          "getter": "is_compressed",
          "description": ""
        },
        {
          "name": "data",
          "type": "GIProbeData",
          "setter": "set_probe_data",
          "getter": "get_probe_data",
          "description": ""
        },
        {
          "name": "dynamic_range",
          "type": "int",
          "setter": "set_dynamic_range",
          "getter": "get_dynamic_range",
          "description": ""
        },
        {
          "name": "energy",
          "type": "float",
          "setter": "set_energy",
          "getter": "get_energy",
          "description": ""
        },
        {
          "name": "extents",
          "type": "Vector3",
          "setter": "set_extents",
          "getter": "get_extents",
          "description": ""
        },
        {
          "name": "interior",
          "type": "bool",
          "setter": "set_interior",
          "getter": "is_interior",
          "description": ""
        },
        {
          "name": "normal_bias",
          "type": "float",
          "setter": "set_normal_bias",
          "getter": "get_normal_bias",
          "description": ""
        },
        {
          "name": "propagation",
          "type": "float",
          "setter": "set_propagation",
          "getter": "get_propagation",
          "description": ""
        },
        {
          "name": "subdiv",
          "type": "int",
          "setter": "set_subdiv",
          "getter": "get_subdiv",
          "enum": "GIProbe.Subdiv",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Resource": {
      "name": "Resource",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for all resources.",
      "description": "Resource is the base class for all resource types. Resources are primarily data containers. They are reference counted and freed when no longer in use. They are also loaded only once from disk, and further attempts to load the resource will return the same reference (all this in contrast to a [Node], which is not reference counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a [Node] or another resource.",
      "methods": [
        {
          "name": "_setup_local_to_scene",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "duplicate",
          "qualifiers": "const",
          "description": "",
          "return_type": "Resource",
          "arguments": [
            {
              "index": "0",
              "name": "subresources",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_local_scene",
          "qualifiers": "const",
          "description": "",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Return the name of the resources, any name is valid (it doesn't have to be unique). Name is for descriptive purposes only.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_path",
          "qualifiers": "const",
          "description": "Return the path of the resource. This is useful mainly for editors when saving/loading, and shouldn't be changed by anything else.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "Return the RID of the resource (or an empty RID). Many resources (such as [Texture], [Mesh], etc) are high level abstractions of resources stored in a server, so this function will return the original RID.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "is_local_to_scene",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_local_to_scene",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_name",
          "description": "Set the name of the resources, any name is valid (it doesn't have to be unique). Name is for descriptive purposes only.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_path",
          "description": "Set the path of the resource. This is useful mainly for editors when saving/loading, and shouldn't be changed by anything else. Fails if another [Resource] already has path \"path\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "setup_local_to_scene",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "take_over_path",
          "description": "Set the path of the resource. Differs from set_path(), if another [Resource] exists with \"path\" it over-takes it, instead of failing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "resource_local_to_scene",
          "type": "bool",
          "setter": "set_local_to_scene",
          "getter": "is_local_to_scene",
          "description": ""
        },
        {
          "name": "resource_name",
          "type": "String",
          "setter": "set_name",
          "getter": "get_name",
          "description": ""
        },
        {
          "name": "resource_path",
          "type": "String",
          "setter": "set_path",
          "getter": "get_path",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AnimatedSprite": {
      "name": "AnimatedSprite",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Sprite node that can use multiple textures for animation.",
      "description": "Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.",
      "methods": [
        {
          "name": "get_animation",
          "qualifiers": "const",
          "description": "Return the name of the current animation set to the node.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "Return the visible frame index.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the offset of the sprite in the node origin.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_sprite_frames",
          "qualifiers": "const",
          "description": "Get the [SpriteFrames] resource, which contains all frames.",
          "return_type": "SpriteFrames",
          "arguments": []
        },
        {
          "name": "is_centered",
          "qualifiers": "const",
          "description": "Return true when centered. See [method set_centered].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_h",
          "qualifiers": "const",
          "description": "Return true if sprite is flipped horizontally.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_flipped_v",
          "qualifiers": "const",
          "description": "Return true if sprite is flipped vertically.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return true if an animation if currently being played.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play the animation set in parameter. If no parameter is provided, the current animation is played.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "set_animation",
          "description": "Set the current animation of the node and reinits the frame counter of the animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "animation",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_centered",
          "description": "When turned on, offset at (0,0) is the center of the sprite, when off, the top-left corner is.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "centered",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_h",
          "description": "If true, sprite is flipped horizontally.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_h",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flip_v",
          "description": "If true, sprite is flipped vertically.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flip_v",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_frame",
          "description": "Set the visible sprite frame index (from the list of frames inside the [SpriteFrames] resource).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frame",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the offset of the sprite in the node origin. Position varies depending on whether it is centered or not.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sprite_frames",
          "description": "Set the [SpriteFrames] resource, which contains all frames.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sprite_frames",
              "type": "SpriteFrames",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the current animation (does not reset the frame counter).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "animation_finished",
          "description": "Emitted when the animation is finished (when it plays the last frame). If the animation is looping, this signal is emitted every time the last frame is drawn.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "frame_changed",
          "description": "Emitted when [member frame] changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "animation",
          "type": "String",
          "setter": "set_animation",
          "getter": "get_animation",
          "description": "The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset."
        },
        {
          "name": "centered",
          "type": "bool",
          "setter": "set_centered",
          "getter": "is_centered",
          "description": "If [code]true[/code] texture will be centered. Default value: [code]true[/code]."
        },
        {
          "name": "flip_h",
          "type": "bool",
          "setter": "set_flip_h",
          "getter": "is_flipped_h",
          "description": "If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code]."
        },
        {
          "name": "flip_v",
          "type": "bool",
          "setter": "set_flip_v",
          "getter": "is_flipped_v",
          "description": "If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code]."
        },
        {
          "name": "frame",
          "type": "int",
          "setter": "set_frame",
          "getter": "get_frame",
          "description": "The displayed animation frame's index."
        },
        {
          "name": "frames",
          "type": "SpriteFrames",
          "setter": "set_sprite_frames",
          "getter": "get_sprite_frames",
          "description": "The [SpriteFrames] resource containing the animation(s)."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The texture's drawing offset."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "_is_playing",
          "description": "If [code]true[/code] the [member animation] is currently playing."
        }
      ],
      "theme_properties": []
    },
    "AudioStream": {
      "name": "AudioStream",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for audio streams.",
      "description": "Base class for audio streams. Audio streams are used for music playback, or other types of streamed sounds that don't fit or require more flexibility than a [Sample].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Viewport": {
      "name": "Viewport",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Creates a sub-view into the screen.",
      "description": "A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.\n\t\tOptionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.\n\t\tIf a viewport is a child of a [Control], it will automatically take up its same rect and position, otherwise they must be set manually.\n\t\tViewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.\n\t\tAlso, viewports can be assigned to different screens in case the devices have multiple screens.\n\t\tFinally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.",
      "methods": [
        {
          "name": "find_world",
          "qualifiers": "const",
          "description": "Return the 3D world of the viewport, or if no such present, the one of the parent viewport.",
          "return_type": "World",
          "arguments": []
        },
        {
          "name": "find_world_2d",
          "qualifiers": "const",
          "description": "Return the 2D world of the viewport.",
          "return_type": "World2D",
          "arguments": []
        },
        {
          "name": "get_camera",
          "qualifiers": "const",
          "description": "Return the active 3D camera.",
          "return_type": "Camera",
          "arguments": []
        },
        {
          "name": "get_canvas_transform",
          "qualifiers": "const",
          "description": "Get the canvas transform of the viewport.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_clear_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_debug_draw",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_final_transform",
          "qualifiers": "const",
          "description": "Get the total transform of the viewport.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_global_canvas_transform",
          "qualifiers": "const",
          "description": "Get the global canvas transform of the viewport.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_hdr",
          "qualifiers": "const",
          "description": "Get whether the rendered texture has filters enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_mouse_position",
          "qualifiers": "const",
          "description": "Get the mouse position, relative to the viewport.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_msaa",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_physics_object_picking",
          "description": "Get whether picking for all physics objects inside the viewport is enabled.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_render_info",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "info",
              "type": "int",
              "enum": "Viewport.RenderInfo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_shadow_atlas_quadrant_subdiv",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "quadrant",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_shadow_atlas_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Return the viewport rect. If the viewport is child of a control, it will use the same rect as the parent. Otherwise, if the rect is empty, the viewport will use all the allowed space.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_size_override",
          "qualifiers": "const",
          "description": "Get the size override set with [method set_size_override].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Get the viewport's texture, for use with various objects that you want to texture with the viewport.",
          "return_type": "ViewportTexture",
          "arguments": []
        },
        {
          "name": "get_update_mode",
          "qualifiers": "const",
          "description": "Get when the viewport would be updated, will be one of the [code]UPDATE_*[/code] constants.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_usage",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vflip",
          "qualifiers": "const",
          "description": "Set whether the render target is flipped on the Y axis.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_viewport_rid",
          "qualifiers": "const",
          "description": "Get the viewport RID from the [VisualServer].",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_visible_rect",
          "qualifiers": "const",
          "description": "Return the final, visible rect in global screen coordinates.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_world",
          "qualifiers": "const",
          "description": "Return the 3D world of the viewport.",
          "return_type": "World",
          "arguments": []
        },
        {
          "name": "get_world_2d",
          "qualifiers": "const",
          "description": "Return the 2D world of the viewport.",
          "return_type": "World2D",
          "arguments": []
        },
        {
          "name": "gui_get_drag_data",
          "qualifiers": "const",
          "description": "Returns the drag data from the GUI, that was previously returned by [method Control.get_drag_data].",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "gui_has_modal_stack",
          "qualifiers": "const",
          "description": "Returns whether there are shown modals on-screen.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_transparent_background",
          "qualifiers": "const",
          "description": "Return whether the viewport lets whatever is behind it to show.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "input",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_3d_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_audio_listener",
          "qualifiers": "const",
          "description": "Returns whether the viewport sends sounds to the speakers.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_audio_listener_2d",
          "qualifiers": "const",
          "description": "Returns whether the viewport sends soundsfrom 2D emitters to the speakers.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_input_disabled",
          "qualifiers": "const",
          "description": "Return whether input to the viewport is disabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_size_override_enabled",
          "qualifiers": "const",
          "description": "Get the enabled status of the size override set with [method set_size_override].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_size_override_stretch_enabled",
          "qualifiers": "const",
          "description": "Get the enabled status of the size strech override set with [method set_size_override_stretch].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_snap_controls_to_pixels_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_own_world",
          "qualifiers": "const",
          "description": "Return whether the viewport is using a world separate from the parent viewport's world.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_as_audio_listener",
          "description": "Makes the viewport send sounds to the speakers.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_as_audio_listener_2d",
          "description": "Makes the viewport send sounds from 2D emitters to the speakers.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_attach_to_screen_rect",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_canvas_transform",
          "description": "Set the canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]\\ s. This is relative to the global canvas transform of the viewport.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clear_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Viewport.ClearMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_debug_draw",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "debug_draw",
              "type": "int",
              "enum": "Viewport.DebugDraw",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disable_3d",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disable_input",
          "description": "Set whether input to the viewport is disabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_canvas_transform",
          "description": "Set the global canvas transform of the viewport. The canvas transform is relative to this.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hdr",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_msaa",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "msaa",
              "type": "int",
              "enum": "Viewport.MSAA",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_physics_object_picking",
          "description": "Enable/disable picking for all physics objects inside the viewport.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_atlas_quadrant_subdiv",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "quadrant",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "subdiv",
              "type": "int",
              "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_atlas_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "Set the size of the viewport.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size_override",
          "description": "Set the size override of the viewport. If the enable parameter is true, it would use the override, otherwise it would use the default size. If the size parameter is equal to [code](-1, -1)[/code], it won't update the size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "Vector2",
              "default_value": "Vector2( -1, -1 )"
            },
            {
              "index": "2",
              "name": "margin",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "set_size_override_stretch",
          "description": "Set whether the size override affects stretch as well.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_snap_controls_to_pixels",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transparent_background",
          "description": "If this viewport is a child of another viewport, keep the previously drawn background visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_update_mode",
          "description": "Set when the render target would be updated, using the [code]UPDATE_*[/code] constants",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Viewport.UpdateMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_usage",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "usage",
              "type": "int",
              "enum": "Viewport.Usage",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_arvr",
          "description": "If true this viewport will be bound to our ARVR Server.\n\t\t\t\tIf this is our main Godot viewport our AR/VR output will be displayed on screen.\n\t\t\t\tIf output is redirected to an HMD we'll see the output of just one of the eyes without any distortion applied else we'll see the stereo buffer with distortion applied if applicable\n\t\t\t\tIf this is an extra viewport output will only work if redirection to an HMD is supported by the interface. The render target will allow you to use the undistorted output for the right eye in the display.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "use",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_own_world",
          "description": "Make the viewport use a world separate from the parent viewport's world.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vflip",
          "description": "Set whether the viewport is flipped on the Y axis.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_world",
          "description": "Change the 3D world of the viewport.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "world",
              "type": "World",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_world_2d",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "world_2d",
              "type": "World2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unhandled_input",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_worlds",
          "description": "Force update of the 2D and 3D worlds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "use_arvr",
          "description": "Returns whether this viewport is using our ARVR Server",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "warp_mouse",
          "description": "Warp the mouse to a position, relative to the viewport.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "size_changed",
          "description": "Emitted when the size of the viewport is changed, whether by [method set_size_override], resize of window, or some other means.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "UPDATE_DISABLED",
          "value": "0",
          "description": "Do not update the render target."
        },
        {
          "name": "UPDATE_ONCE",
          "value": "1",
          "description": "Update the render target once, then switch to [code]UPDATE_DISABLED[/code]"
        },
        {
          "name": "UPDATE_WHEN_VISIBLE",
          "value": "2",
          "description": "Update the render target only when it is visible. This is the default value."
        },
        {
          "name": "UPDATE_ALWAYS",
          "value": "3",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_1",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_4",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_16",
          "value": "3",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_64",
          "value": "4",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_256",
          "value": "5",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_1024",
          "value": "6",
          "description": ""
        },
        {
          "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_MAX",
          "value": "7",
          "description": ""
        },
        {
          "name": "RENDER_INFO_OBJECTS_IN_FRAME",
          "value": "0",
          "description": ""
        },
        {
          "name": "RENDER_INFO_VERTICES_IN_FRAME",
          "value": "1",
          "description": ""
        },
        {
          "name": "RENDER_INFO_MATERIAL_CHANGES_IN_FRAME",
          "value": "2",
          "description": ""
        },
        {
          "name": "RENDER_INFO_SHADER_CHANGES_IN_FRAME",
          "value": "3",
          "description": ""
        },
        {
          "name": "RENDER_INFO_SURFACE_CHANGES_IN_FRAME",
          "value": "4",
          "description": ""
        },
        {
          "name": "RENDER_INFO_DRAW_CALLS_IN_FRAME",
          "value": "5",
          "description": ""
        },
        {
          "name": "RENDER_INFO_MAX",
          "value": "6",
          "description": ""
        },
        {
          "name": "DEBUG_DRAW_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "DEBUG_DRAW_UNSHADED",
          "value": "1",
          "description": ""
        },
        {
          "name": "DEBUG_DRAW_OVERDRAW",
          "value": "2",
          "description": ""
        },
        {
          "name": "DEBUG_DRAW_WIREFRAME",
          "value": "3",
          "description": ""
        },
        {
          "name": "MSAA_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "MSAA_2X",
          "value": "1",
          "description": ""
        },
        {
          "name": "MSAA_4X",
          "value": "2",
          "description": ""
        },
        {
          "name": "MSAA_8X",
          "value": "3",
          "description": ""
        },
        {
          "name": "MSAA_16X",
          "value": "4",
          "description": ""
        },
        {
          "name": "USAGE_2D",
          "value": "0",
          "description": ""
        },
        {
          "name": "USAGE_2D_NO_SAMPLING",
          "value": "1",
          "description": ""
        },
        {
          "name": "USAGE_3D",
          "value": "2",
          "description": ""
        },
        {
          "name": "USAGE_3D_NO_EFFECTS",
          "value": "3",
          "description": ""
        },
        {
          "name": "CLEAR_MODE_ALWAYS",
          "value": "0",
          "description": ""
        },
        {
          "name": "CLEAR_MODE_NEVER",
          "value": "1",
          "description": ""
        },
        {
          "name": "CLEAR_MODE_ONLY_NEXT_FRAME",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "arvr",
          "type": "bool",
          "setter": "set_use_arvr",
          "getter": "use_arvr",
          "description": ""
        },
        {
          "name": "audio_listener_enable_2d",
          "type": "bool",
          "setter": "set_as_audio_listener_2d",
          "getter": "is_audio_listener_2d",
          "description": ""
        },
        {
          "name": "audio_listener_enable_3d",
          "type": "bool",
          "setter": "set_as_audio_listener",
          "getter": "is_audio_listener",
          "description": ""
        },
        {
          "name": "debug_draw",
          "type": "int",
          "setter": "set_debug_draw",
          "getter": "get_debug_draw",
          "enum": "Viewport.DebugDraw",
          "description": ""
        },
        {
          "name": "disable_3d",
          "type": "bool",
          "setter": "set_disable_3d",
          "getter": "is_3d_disabled",
          "description": ""
        },
        {
          "name": "gui_disable_input",
          "type": "bool",
          "setter": "set_disable_input",
          "getter": "is_input_disabled",
          "description": ""
        },
        {
          "name": "gui_snap_controls_to_pixels",
          "type": "bool",
          "setter": "set_snap_controls_to_pixels",
          "getter": "is_snap_controls_to_pixels_enabled",
          "description": ""
        },
        {
          "name": "hdr",
          "type": "bool",
          "setter": "set_hdr",
          "getter": "get_hdr",
          "description": ""
        },
        {
          "name": "msaa",
          "type": "int",
          "setter": "set_msaa",
          "getter": "get_msaa",
          "enum": "Viewport.MSAA",
          "description": ""
        },
        {
          "name": "own_world",
          "type": "bool",
          "setter": "set_use_own_world",
          "getter": "is_using_own_world",
          "description": ""
        },
        {
          "name": "physics_object_picking",
          "type": "bool",
          "setter": "set_physics_object_picking",
          "getter": "get_physics_object_picking",
          "description": ""
        },
        {
          "name": "render_target_clear_mode",
          "type": "int",
          "setter": "set_clear_mode",
          "getter": "get_clear_mode",
          "enum": "Viewport.ClearMode",
          "description": ""
        },
        {
          "name": "render_target_update_mode",
          "type": "int",
          "setter": "set_update_mode",
          "getter": "get_update_mode",
          "enum": "Viewport.UpdateMode",
          "description": ""
        },
        {
          "name": "render_target_v_flip",
          "type": "bool",
          "setter": "set_vflip",
          "getter": "get_vflip",
          "description": ""
        },
        {
          "name": "shadow_atlas_quad_0",
          "type": "int",
          "setter": "set_shadow_atlas_quadrant_subdiv",
          "getter": "get_shadow_atlas_quadrant_subdiv",
          "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "shadow_atlas_quad_1",
          "type": "int",
          "setter": "set_shadow_atlas_quadrant_subdiv",
          "getter": "get_shadow_atlas_quadrant_subdiv",
          "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "shadow_atlas_quad_2",
          "type": "int",
          "setter": "set_shadow_atlas_quadrant_subdiv",
          "getter": "get_shadow_atlas_quadrant_subdiv",
          "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "shadow_atlas_quad_3",
          "type": "int",
          "setter": "set_shadow_atlas_quadrant_subdiv",
          "getter": "get_shadow_atlas_quadrant_subdiv",
          "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
          "description": ""
        },
        {
          "name": "shadow_atlas_size",
          "type": "int",
          "setter": "set_shadow_atlas_size",
          "getter": "get_shadow_atlas_size",
          "description": ""
        },
        {
          "name": "size",
          "type": "Vector2",
          "setter": "set_size",
          "getter": "get_size",
          "description": ""
        },
        {
          "name": "transparent_bg",
          "type": "bool",
          "setter": "set_transparent_background",
          "getter": "has_transparent_background",
          "description": ""
        },
        {
          "name": "usage",
          "type": "int",
          "setter": "set_usage",
          "getter": "get_usage",
          "enum": "Viewport.Usage",
          "description": ""
        },
        {
          "name": "world",
          "type": "World",
          "setter": "set_world",
          "getter": "get_world",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ReflectionProbe": {
      "name": "ReflectionProbe",
      "inherits": "VisualInstance",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "are_shadows_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_cull_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_extents",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_intensity",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_interior_ambient",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_interior_ambient_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_interior_ambient_probe_contribution",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_max_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_origin_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_update_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_box_projection_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_set_as_interior",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_as_interior",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cull_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layers",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enable_box_projection",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enable_shadows",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_extents",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_intensity",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "intensity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_interior_ambient",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ambient",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_interior_ambient_energy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ambient_energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_interior_ambient_probe_contribution",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ambient_probe_contribution",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max_distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_origin_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "origin_offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_update_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "ReflectionProbe.UpdateMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "UPDATE_ONCE",
          "value": "0",
          "description": ""
        },
        {
          "name": "UPDATE_ALWAYS",
          "value": "1",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "box_projection",
          "type": "bool",
          "setter": "set_enable_box_projection",
          "getter": "is_box_projection_enabled",
          "description": ""
        },
        {
          "name": "cull_mask",
          "type": "int",
          "setter": "set_cull_mask",
          "getter": "get_cull_mask",
          "description": ""
        },
        {
          "name": "enable_shadows",
          "type": "bool",
          "setter": "set_enable_shadows",
          "getter": "are_shadows_enabled",
          "description": ""
        },
        {
          "name": "extents",
          "type": "Vector3",
          "setter": "set_extents",
          "getter": "get_extents",
          "description": ""
        },
        {
          "name": "intensity",
          "type": "float",
          "setter": "set_intensity",
          "getter": "get_intensity",
          "description": ""
        },
        {
          "name": "interior_ambient_color",
          "type": "Color",
          "setter": "set_interior_ambient",
          "getter": "get_interior_ambient",
          "description": ""
        },
        {
          "name": "interior_ambient_contrib",
          "type": "float",
          "setter": "set_interior_ambient_probe_contribution",
          "getter": "get_interior_ambient_probe_contribution",
          "description": ""
        },
        {
          "name": "interior_ambient_energy",
          "type": "float",
          "setter": "set_interior_ambient_energy",
          "getter": "get_interior_ambient_energy",
          "description": ""
        },
        {
          "name": "interior_enable",
          "type": "bool",
          "setter": "set_as_interior",
          "getter": "is_set_as_interior",
          "description": ""
        },
        {
          "name": "max_distance",
          "type": "float",
          "setter": "set_max_distance",
          "getter": "get_max_distance",
          "description": ""
        },
        {
          "name": "origin_offset",
          "type": "Vector3",
          "setter": "set_origin_offset",
          "getter": "get_origin_offset",
          "description": ""
        },
        {
          "name": "update_mode",
          "type": "int",
          "setter": "set_update_mode",
          "getter": "get_update_mode",
          "enum": "ReflectionProbe.UpdateMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "SliderJoint": {
      "name": "SliderJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "SliderJoint.Param",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "SliderJoint.Param",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_LINEAR_LIMIT_UPPER",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_LOWER",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_RESTITUTION",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_DAMPING",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_MOTION_SOFTNESS",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_MOTION_RESTITUTION",
          "value": "6",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_MOTION_DAMPING",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_ORTHOGONAL_SOFTNESS",
          "value": "8",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_ORTHOGONAL_RESTITUTION",
          "value": "9",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_ORTHOGONAL_DAMPING",
          "value": "10",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_UPPER",
          "value": "11",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_LOWER",
          "value": "12",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_SOFTNESS",
          "value": "13",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_RESTITUTION",
          "value": "14",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_DAMPING",
          "value": "15",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTION_SOFTNESS",
          "value": "16",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTION_RESTITUTION",
          "value": "17",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTION_DAMPING",
          "value": "18",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_ORTHOGONAL_SOFTNESS",
          "value": "19",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_ORTHOGONAL_RESTITUTION",
          "value": "20",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_ORTHOGONAL_DAMPING",
          "value": "21",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "22",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "angular_limit/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_limit/lower_angle",
          "type": "float",
          "setter": "_set_lower_limit_angular",
          "getter": "_get_lower_limit_angular",
          "description": ""
        },
        {
          "name": "angular_limit/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_limit/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_limit/upper_angle",
          "type": "float",
          "setter": "_set_upper_limit_angular",
          "getter": "_get_upper_limit_angular",
          "description": ""
        },
        {
          "name": "angular_motion/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_motion/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_motion/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_ortho/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_ortho/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "angular_ortho/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_limit/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_limit/lower_distance",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_limit/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_limit/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_limit/upper_distance",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_motion/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_motion/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_motion/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_ortho/damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_ortho/restitution",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "linear_ortho/softness",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Geometry": {
      "name": "Geometry",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "build_box_planes",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "build_capsule_planes",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sides",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "lats",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": "2"
            }
          ]
        },
        {
          "name": "build_cylinder_planes",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sides",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": "2"
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment_2d",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment_uncapped",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment_uncapped_2d",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "s1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "s2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_points_between_segments",
          "description": "",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "p2",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "q1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "q2",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_points_between_segments_2d",
          "description": "",
          "return_type": "PoolVector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "q1",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "p2",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "q2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_uv84_normal_bit",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_atlas",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sizes",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "point_is_inside_triangle",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "c",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ray_intersects_triangle",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dir",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "a",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "c",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_circle",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segment_from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "segment_to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "circle_position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "circle_radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_convex",
          "description": "",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "planes",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_cylinder",
          "description": "",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "height",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_segment_2d",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_b",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_sphere",
          "description": "",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sphere_position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "sphere_radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "segment_intersects_triangle",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "a",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "c",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "triangulate_polygon",
          "description": "",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CSharpScript": {
      "name": "CSharpScript",
      "inherits": "Script",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "new",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Object",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptNode": {
      "name": "VisualScriptNode",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A node which is part of a [VisualScript].",
      "description": "A node which is part of a [VisualScript]. Not to be confused with [Node], which is a part of a [SceneTree].",
      "methods": [
        {
          "name": "get_default_input_value",
          "qualifiers": "const",
          "description": "Returns the default value of a given port. The default value is used when nothing is connected to the port.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "port_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_visual_script",
          "qualifiers": "const",
          "description": "Returns the [VisualScript] instance the node is bound to.",
          "return_type": "VisualScript",
          "arguments": []
        },
        {
          "name": "ports_changed_notify",
          "description": "Notify that the node's ports have changed. Usually used in conjunction with [VisualScriptCustomNode] .",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_default_input_value",
          "description": "Change the default value of a given port.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "ports_changed",
          "description": "Emitted when the available input/output ports are changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "_default_input_values",
          "type": "Array",
          "setter": "_set_default_input_values",
          "getter": "_get_default_input_values",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ViewportContainer": {
      "name": "ViewportContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "is_stretch_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_stretch",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "stretch",
          "type": "bool",
          "setter": "set_stretch",
          "getter": "is_stretch_enabled",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "RegEx": {
      "name": "RegEx",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Simple regular expression matcher.",
      "description": "Class for finding text patterns in a string using regular expressions. It can not perform replacements. Regular expressions are a way to define patterns of text to be searched. Details on writing patterns are too long to explain here but the Internet is full of tutorials and detailed explanations.\n\t\tOnce created, the RegEx object needs to be compiled with the search pattern before it can be used. The search pattern must be escaped first for gdscript before it is escaped for the expression. For example:\n\t\t[code]var exp = RegEx.new()[/code]\n\t\t[code]exp.compile(\"\\\\d+\")[/code]\n\t\twould be read by RegEx as [code]\\d+[/code]\n\t\tSimilarly:\n\t\t[code]exp.compile(\"\\\"(?:\\\\\\\\.|[^\\\"])*\\\"\")[/code]\n\t\twould be read as [code]\"(?:\\\\.|[^\"])*\"[/code]\n\t\tCurrently supported features:\n\t\t* Capturing [code]()[/code] and non-capturing [code](?:)[/code] groups\n\t\t* Named capturing groups [code](?P<name>)[/code]\n\t\t* Any character [code].[/code]\n\t\t* Shorthand character classes [code]\\w \\W \\s \\S \\d \\D[/code]\n\t\t* User-defined character classes such as [code][A-Za-z][/code]\n\t\t* Simple quantifiers [code]?[/code], [code]*[/code] and [code]+[/code]\n\t\t* Range quantifiers [code]{x,y}[/code]\n\t\t* Lazy (non-greedy) quantifiers [code]*?[/code]\n\t\t* Beginning [code]^[/code] and end [code]$[/code] anchors\n\t\t* Alternation [code]|[/code]\n\t\t* Backreferences [code]\\1[/code], [code]\\g{1}[/code], and [code]\\g<name>[/code]\n\t\t* POSIX character classes [code][[:alnum:]][/code]\n\t\t* Lookahead [code](?=)[/code], [code](?!)[/code] and lookbehind [code](?<=)[/code], [code](?<!)[/code]\n\t\t* ASCII [code]\\xFF[/code] and Unicode [code]\\uFFFF[/code] code points (in a style similar to Python)\n\t\t* Word boundaries [code]\\b[/code], [code]\\B[/code]",
      "methods": [
        {
          "name": "clear",
          "description": "This method resets the state of the object, as it was freshly created. Namely, it unassigns the regular expression of this object.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "compile",
          "description": "Compiles and assign the search pattern to use.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pattern",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_group_count",
          "qualifiers": "const",
          "description": "Returns the number of numeric capturing groups.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_names",
          "qualifiers": "const",
          "description": "Returns an array of names of named capturing groups.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_pattern",
          "qualifiers": "const",
          "description": "Returns the search pattern used to compile the code.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_valid",
          "qualifiers": "const",
          "description": "Returns whether this object has a valid search pattern assigned.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "search",
          "qualifiers": "const",
          "description": "Searches the text for the compiled pattern. Returns a [RegExMatch] container of the first matching result if found, otherwise null. The region to search within can be specified without modifying where the start and end anchor would be.",
          "return_type": "RegExMatch",
          "arguments": [
            {
              "index": "0",
              "name": "subject",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "end",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "sub",
          "qualifiers": "const",
          "description": "Searches the text for the compiled pattern and replaces it with the specified string. Escapes and backreferences such as [code]\\1[/code] and [code]\\g<name>[/code] expanded and resolved. By default only the first instance is replaced but it can be changed for all instances (global replacement). The region to search within can be specified without modifying where the start and end anchor would be.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "subject",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "replacement",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "all",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "offset",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "4",
              "name": "end",
              "type": "int",
              "default_value": "-1"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Transform2D": {
      "name": "Transform2D",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "2D Transformation. 3x2 matrix.",
      "description": "Represents one or many transformations in 3D space such as translation, rotation, or scaling. It consists of a two [Vector2] x, y and [Vector2] \"origin\". It is similar to a 3x2 matrix.",
      "methods": [
        {
          "name": "Transform2D",
          "description": "Constructs the [Transform2D] from a 3D [Transform].",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform2D",
          "description": "Constructs the [Transform2D] from 3 [Vector2] consisting of rows x, y and origin.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x_axis",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y_axis",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "origin",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Transform2D",
          "description": "Constructs the [Transform2D] from rotation angle in radians and position [Vector2].",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotation",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "affine_inverse",
          "description": "Returns the inverse of the matrix.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "basis_xform",
          "description": "Transforms the given vector \"v\" by this transform basis (no translation).",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "basis_xform_inv",
          "description": "Inverse-transforms the given vector \"v\" by this transform basis (no translation).",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_origin",
          "description": "Returns the origin [Vector2] (translation).",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "description": "Returns the rotation (in radians).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scale",
          "description": "Returns the scale.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "interpolate_with",
          "description": "Interpolates the transform to other Transform2D by weight amount (0-1).",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling).",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "orthonormalized",
          "description": "Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotated",
          "description": "Rotates the transform by phi.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scaled",
          "description": "Scales the transform by the specified 2D scaling factors.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translated",
          "description": "Translates the transform by the specified offset.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform",
          "description": "Transforms the given vector \"v\" by this transform.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_inv",
          "description": "Inverse-transforms the given vector \"v\" by this transform.",
          "return_type": "Transform2D",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "var",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "origin",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "The translation offset of the transform."
        },
        {
          "name": "x",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "The X axis of 2x2 basis matrix containing 2 [Vector2] as its columns: X axis and Y axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object."
        },
        {
          "name": "y",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "The Y axis of 2x2 basis matrix containing 2 [Vector2] as its columns: X axis and Y axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object."
        }
      ],
      "theme_properties": []
    },
    "XMLParser": {
      "name": "XMLParser",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Low-level class for creating parsers for XML files.",
      "description": "This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low level so it can be applied to any possible schema.",
      "methods": [
        {
          "name": "get_attribute_count",
          "qualifiers": "const",
          "description": "Get the amount of attributes in the current element.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_attribute_name",
          "qualifiers": "const",
          "description": "Get the name of the attribute specified by the index in [code]idx[/code] argument.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_attribute_value",
          "qualifiers": "const",
          "description": "Get the value of the attribute specified by the index in [code]idx[/code] argument.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_line",
          "qualifiers": "const",
          "description": "Get the current line in the parsed file (currently not implemented).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_named_attribute_value",
          "qualifiers": "const",
          "description": "Get the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_named_attribute_value_safe",
          "qualifiers": "const",
          "description": "Get the value of a certain attribute of the current element by name. This will return an empty [String] if the attribute is not found.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_data",
          "qualifiers": "const",
          "description": "Get the contents of a text node. This will raise an error in any other type of node.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_node_name",
          "qualifiers": "const",
          "description": "Get the name of the current element node. This will raise an error if the current node type is not [code]NODE_ELEMENT[/code] nor [code]NODE_ELEMENT_END[/code]",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_node_offset",
          "qualifiers": "const",
          "description": "Get the byte offset of the current node since the beginning of the file or buffer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node_type",
          "description": "Get the type of the current node. Compare with [code]NODE_*[/code] constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_attribute",
          "qualifiers": "const",
          "description": "Check whether or not the current element has a certain attribute.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_empty",
          "qualifiers": "const",
          "description": "Check whether the current element is empty (this only works for completely empty tags, e.g. <element \\>).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "open",
          "description": "Open a XML file for parsing. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_buffer",
          "description": "Open a XML raw buffer for parsing. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "read",
          "description": "Read the next node of the file. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "seek",
          "description": "Move the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "skip_section",
          "description": "Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NODE_NONE",
          "value": "0",
          "description": "There's no node (no file or buffer opened)"
        },
        {
          "name": "NODE_ELEMENT",
          "value": "1",
          "description": "Element (tag)"
        },
        {
          "name": "NODE_ELEMENT_END",
          "value": "2",
          "description": "End of element"
        },
        {
          "name": "NODE_TEXT",
          "value": "3",
          "description": "Text node"
        },
        {
          "name": "NODE_COMMENT",
          "value": "4",
          "description": "Comment node"
        },
        {
          "name": "NODE_CDATA",
          "value": "5",
          "description": "CDATA content"
        },
        {
          "name": "NODE_UNKNOWN",
          "value": "6",
          "description": "Unknown node"
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisibilityEnabler": {
      "name": "VisibilityEnabler",
      "inherits": "VisibilityNotifier",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Enable certain nodes only when visible.",
      "description": "The VisibilityEnabler will disable [RigidBody] and [AnimationPlayer] nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler itself.",
      "methods": [
        {
          "name": "is_enabler_enabled",
          "qualifiers": "const",
          "description": "Returns whether the specified enabler was set to true or not.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "enabler",
              "type": "int",
              "enum": "VisibilityEnabler.Enabler",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabler",
          "description": "Set an enabler to true for all nodes of its type to be disabled when the VisibilityEnabler is not in view. See the constants for enablers and what they affect.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabler",
              "type": "int",
              "enum": "VisibilityEnabler.Enabler",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ENABLER_FREEZE_BODIES",
          "value": "1",
          "description": "This enabler will freeze [RigidBody] nodes."
        },
        {
          "name": "ENABLER_PAUSE_ANIMATIONS",
          "value": "0",
          "description": "This enabler will pause [AnimationPlayer] nodes."
        },
        {
          "name": "ENABLER_MAX",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "freeze_bodies",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        },
        {
          "name": "pause_animations",
          "type": "bool",
          "setter": "set_enabler",
          "getter": "is_enabler_enabled",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "CubeMap": {
      "name": "CubeMap",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_flags",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_lossy_storage_quality",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_side",
          "qualifiers": "const",
          "description": "",
          "return_type": "Image",
          "arguments": [
            {
              "index": "0",
              "name": "side",
              "type": "int",
              "enum": "CubeMap.Side",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_storage",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_flags",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lossy_storage_quality",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "quality",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_side",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "side",
              "type": "int",
              "enum": "CubeMap.Side",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_storage",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "CubeMap.Storage",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STORAGE_RAW",
          "value": "0",
          "description": ""
        },
        {
          "name": "STORAGE_COMPRESS_LOSSY",
          "value": "1",
          "description": ""
        },
        {
          "name": "STORAGE_COMPRESS_LOSSLESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "SIDE_LEFT",
          "value": "0",
          "description": ""
        },
        {
          "name": "SIDE_RIGHT",
          "value": "1",
          "description": ""
        },
        {
          "name": "SIDE_BOTTOM",
          "value": "2",
          "description": ""
        },
        {
          "name": "SIDE_TOP",
          "value": "3",
          "description": ""
        },
        {
          "name": "SIDE_FRONT",
          "value": "4",
          "description": ""
        },
        {
          "name": "SIDE_BACK",
          "value": "5",
          "description": ""
        },
        {
          "name": "FLAG_MIPMAPS",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_REPEAT",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_FILTER",
          "value": "4",
          "description": ""
        },
        {
          "name": "FLAGS_DEFAULT",
          "value": "7",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "CapsuleShape2D": {
      "name": "CapsuleShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Capsule shape for 2D collisions.",
      "description": "Capsule shape for 2D collisions.",
      "methods": [
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the height of the [CapsuleShape2D].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "Return the radius of the [CapsuleShape2D].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_height",
          "description": "Set the height of the [CapsuleShape2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radius",
          "description": "Set the radius of the [CapsuleShape2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "The capsule's height."
        },
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "The capsules's radius."
        }
      ],
      "theme_properties": []
    },
    "KinematicCollision2D": {
      "name": "KinematicCollision2D",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Collision data for KinematicBody2D collisions.",
      "description": "Contains collision data for KinematicBody2D collisions. When a [KinematicBody2D] is moved using [method KinematicBody2D.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision2D object is returned.\n\t\tThis object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.",
      "methods": [
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_shape_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_local_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_remainder",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_travel",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collider",
          "type": "Object",
          "setter": "",
          "getter": "get_collider",
          "description": "The colliding body."
        },
        {
          "name": "collider_id",
          "type": "int",
          "setter": "",
          "getter": "get_collider_id",
          "description": "The colliding body's unique [RID]."
        },
        {
          "name": "collider_metadata",
          "type": "Variant",
          "setter": "",
          "getter": "get_collider_metadata",
          "description": "The colliding body's metadata. See [Object]."
        },
        {
          "name": "collider_shape",
          "type": "Object",
          "setter": "",
          "getter": "get_collider_shape",
          "description": "The colliding body's shape."
        },
        {
          "name": "collider_shape_index",
          "type": "int",
          "setter": "",
          "getter": "get_collider_shape_index",
          "description": "The colliding shape's index. See [CollisionObject2D]."
        },
        {
          "name": "collider_velocity",
          "type": "Vector2",
          "setter": "",
          "getter": "get_collider_velocity",
          "description": "The colliding object's velocity."
        },
        {
          "name": "local_shape",
          "type": "Object",
          "setter": "",
          "getter": "get_local_shape",
          "description": "The moving object's colliding shape."
        },
        {
          "name": "normal",
          "type": "Vector2",
          "setter": "",
          "getter": "get_normal",
          "description": "The colliding body's shape's normal at the point of collision."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "",
          "getter": "get_position",
          "description": "The point of collision."
        },
        {
          "name": "remainder",
          "type": "Vector2",
          "setter": "",
          "getter": "get_remainder",
          "description": "The moving object's remaining movement vector."
        },
        {
          "name": "travel",
          "type": "Vector2",
          "setter": "",
          "getter": "get_travel",
          "description": "The distance the moving object traveled before collision."
        }
      ],
      "theme_properties": []
    },
    "GDNative": {
      "name": "GDNative",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "call_native",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "procedure_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arguments",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "arg2",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_library",
          "description": "",
          "return_type": "GDNativeLibrary",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "initialize",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_library",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "library",
              "type": "GDNativeLibrary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "terminate",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "library",
          "type": "GDNativeLibrary",
          "setter": "set_library",
          "getter": "get_library",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptYield": {
      "name": "VisualScriptYield",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_wait_time",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_yield_mode",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_wait_time",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_yield_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "VisualScriptYield.YieldMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "YIELD_FRAME",
          "value": "1",
          "description": ""
        },
        {
          "name": "YIELD_PHYSICS_FRAME",
          "value": "2",
          "description": ""
        },
        {
          "name": "YIELD_WAIT",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "mode",
          "type": "int",
          "setter": "set_yield_mode",
          "getter": "get_yield_mode",
          "enum": "VisualScriptYield.YieldMode",
          "description": ""
        },
        {
          "name": "wait_time",
          "type": "float",
          "setter": "set_wait_time",
          "getter": "get_wait_time",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Shape2D": {
      "name": "Shape2D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for all 2D Shapes.",
      "description": "Base class for all 2D Shapes. All 2D shape types inherit from this.",
      "methods": [
        {
          "name": "collide",
          "description": "Return whether this shape is colliding with another.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_and_get_contacts",
          "description": "Return a list of the points where this shape touches another. If there are no collisions, the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_with_motion",
          "description": "Return whether this shape would collide with another, if a given movement was applied.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "shape_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_motion",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_with_motion_and_get_contacts",
          "description": "Return a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions, the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "with_shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "shape_xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_motion",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_custom_solver_bias",
          "qualifiers": "const",
          "description": "Return the custom solver bias.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_custom_solver_bias",
          "description": "Use a custom solver bias. No need to change this unless you really know what you are doing.\n\t\t\t\tThe solver bias is a factor controlling how much two objects \"rebound\" off each other, when colliding, to avoid them getting into each other because of numerical imprecision.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bias",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "custom_solver_bias",
          "type": "float",
          "setter": "set_custom_solver_bias",
          "getter": "get_custom_solver_bias",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioStreamPlayback": {
      "name": "AudioStreamPlayback",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Meta class for playing back audio.",
      "description": "Can play, loop, pause a scroll through Audio. See [AudioStream] and [AudioStreamOGGVorbis] for usage.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PhysicsShapeQueryParameters": {
      "name": "PhysicsShapeQueryParameters",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_exclude",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_object_type_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shape_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "set_collision_layer",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collision_layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_exclude",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exclude",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_object_type_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object_type_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_rid",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SphereShape": {
      "name": "SphereShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Sphere shape for 3D collisions.",
      "description": "Sphere shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. This shape is useful for modeling sphere-like 3D objects.",
      "methods": [
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "The sphere's radius. The shape's diameter is double the radius."
        }
      ],
      "theme_properties": []
    },
    "PackedDataContainerRef": {
      "name": "PackedDataContainerRef",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "LargeTexture": {
      "name": "LargeTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Texture capable of storing many smaller Textures with offsets.",
      "description": "A Texture capable of storing many smaller Textures with offsets.\n\t\tYou can dynamically add pieces([Texture]) to this [code]LargeTexture[/code] using different offsets.",
      "methods": [
        {
          "name": "add_piece",
          "description": "Add another [Texture] to this [code]LargeTexture[/code], starting on offset \"ofs\".",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clears the [code]LargeTexture[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_piece_count",
          "qualifiers": "const",
          "description": "Returns the number of pieces currently in this [code]LargeTexture[/code].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_piece_offset",
          "qualifiers": "const",
          "description": "Returns the offset of the piece with index \"idx\".",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_piece_texture",
          "qualifiers": "const",
          "description": "Returns the [Texture] of the piece with index \"idx\".",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_piece_offset",
          "description": "Sets the offset of the piece with index \"idx\" to \"ofs\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_piece_texture",
          "description": "Sets the [Texture] of the piece with index \"idx\" to  \"ofs\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "Sets the size of this [code]LargeTexture[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "_data",
          "type": "Array",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": "Returns an [Array] with offsets and textures data of each added piece. Schema is [offsets1, texture1, offsets2, texture2, large_texture_size].\n\t\t\t[code]offsets[/code] : [Vector2] offsets of the texture piece.\n\t\t\t[code]second[/code] : [StreamTexture] data of the texture piece.\n\t\t\t[code]last entry[/code] : [Vector2] size of the entire large texture."
        }
      ],
      "theme_properties": []
    },
    "AudioStreamRandomPitch": {
      "name": "AudioStreamRandomPitch",
      "inherits": "AudioStream",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Plays audio with random pitch tweaking.",
      "description": "Randomly varies pitch on each start.",
      "methods": [
        {
          "name": "get_audio_stream",
          "qualifiers": "const",
          "description": "",
          "return_type": "AudioStream",
          "arguments": []
        },
        {
          "name": "get_random_pitch",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_audio_stream",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "AudioStream",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_random_pitch",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "audio_stream",
          "type": "AudioStream",
          "setter": "set_audio_stream",
          "getter": "get_audio_stream",
          "description": "The current [AudioStream]."
        },
        {
          "name": "random_pitch",
          "type": "float",
          "setter": "set_random_pitch",
          "getter": "get_random_pitch",
          "description": "The intensity of random pitch variation."
        }
      ],
      "theme_properties": []
    },
    "VScrollBar": {
      "name": "VScrollBar",
      "inherits": "ScrollBar",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Vertical version of [ScrollBar], which goes from left (min) to right (max).",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "scroll",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "scroll_focus",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "RigidBody": {
      "name": "RigidBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Physics Body whose position is determined through physics simulation in 3D space.",
      "description": "This is the node that implements full 3D physics. This means that you do not control a RigidBody directly. Instead you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.\n\t\tThis node can use custom force integration, for writing complex physics motion behavior per node.\n\t\tThis node can shift state between regular Rigid body, Kinematic, Character or Static.\n\t\tCharacter mode forbids this node from being rotated.\n\t\tAs a warning, don't change RigidBody's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior.",
      "methods": [
        {
          "name": "_integrate_forces",
          "qualifiers": "virtual",
          "description": "Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default it works in addition to the usual physics behavior, but [method set_use_custom_integrator] allows you to disable the default behavior and do fully custom force integration for a body.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "PhysicsDirectBodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_impulse",
          "description": "Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the offset from the body origin are in global coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "impulse",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_angular_damp",
          "qualifiers": "const",
          "description": "Return the current body angular damp. Default is -1.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_angular_velocity",
          "qualifiers": "const",
          "description": "Return the current body angular velocity.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_axis_lock",
          "qualifiers": "const",
          "description": "Return the current axis lock of the body. One of AXIS_LOCK_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bounce",
          "qualifiers": "const",
          "description": "Return the current body bounciness.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_colliding_bodies",
          "qualifiers": "const",
          "description": "Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "Return the current body friction, from 0 (frictionless) to 1 (max friction).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_scale",
          "qualifiers": "const",
          "description": "Return the current body gravity scale.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_damp",
          "qualifiers": "const",
          "description": "Return the current body linear damp. Default is -1.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "Return the current body linear velocity.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_mass",
          "qualifiers": "const",
          "description": "Return the current body mass.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_max_contacts_reported",
          "qualifiers": "const",
          "description": "Return the maximum contacts that can be reported. See [method set_max_contacts_reported].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Return the current body mode, see [method set_mode].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_weight",
          "qualifiers": "const",
          "description": "Return the current body weight, given standard earth-weight (gravity 9.8).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_able_to_sleep",
          "qualifiers": "const",
          "description": "Return whether the body has the ability to fall asleep when not moving. See [method set_can_sleep].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_contact_monitor_enabled",
          "qualifiers": "const",
          "description": "Return whether contact monitoring is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_sleeping",
          "qualifiers": "const",
          "description": "Return whether the body is sleeping.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_continuous_collision_detection",
          "qualifiers": "const",
          "description": "Return whether this body is using continuous collision detection.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_custom_integrator",
          "description": "Return whether the body is using a custom integrator.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_angular_damp",
          "description": "Set the angular damp for this body. Default of -1, cannot be less than -1. If this value is different from -1, any angular damp derived from the world or areas will be overridden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_angular_velocity",
          "description": "Set the body angular velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_axis_lock",
          "description": "Set the axis lock of the body, from the AXIS_LOCK_* enum. Axis lock stops the body from moving along the specified axis(X/Y/Z) and rotating along the other two axes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_lock",
              "type": "int",
              "enum": "RigidBody.AxisLock",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_axis_velocity",
          "description": "Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bounce",
          "description": "Set the body bounciness, from 0 (no bounciness) to 1 (max bounciness).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounce",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_can_sleep",
          "description": "Set the body ability to fall asleep when not moving. This saves an enormous amount of processor time when there are plenty of rigid bodies (non static) in a scene.\n\t\t\t\tSleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "able_to_sleep",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_contact_monitor",
          "description": "Enable contact monitoring. This allows the body to emit signals when it collides with another.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "Set the body friction, from 0 (frictionless) to 1 (max friction).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_scale",
          "description": "Set the gravity factor. This factor multiplies gravity intensity just for this body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gravity_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_damp",
          "description": "Set the linear damp for this body. Default of -1, cannot be less than -1. If this value is different from -1, any linear damp derived from the world or areas will be overridden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_velocity",
          "description": "Set the body linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mass",
          "description": "Set the body mass.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mass",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_contacts_reported",
          "description": "Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the body mode, from the MODE_* enum. This allows to change to a static body or a character body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "RigidBody.Mode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sleeping",
          "description": "Set whether a body is sleeping or not. Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] wakes them up. Until then, they behave like a static body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sleeping",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_continuous_collision_detection",
          "description": "Set the continuous collision detection mode from the enum CCD_MODE_*.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. The first is more precise, and misses less impacts by small, fast-moving objects. The second is faster to compute, but can miss small, fast-moving objects.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_custom_integrator",
          "description": "Pass true to disable the internal force integration (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_weight",
          "description": "Set the body weight given standard earth-weight (gravity 9.8).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "body_entered",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exited",
          "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_entered",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that collided with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body collided with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_exited",
          "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that stopped colliding with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body stopped colliding with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sleeping_state_changed",
          "description": "Emitted when the body changes its sleeping state. Either by sleeping or waking up.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "MODE_STATIC",
          "value": "1",
          "description": "Static mode. The body behaves like a [StaticBody], and can only move by user code."
        },
        {
          "name": "MODE_KINEMATIC",
          "value": "3",
          "description": "Kinematic body. The body behaves like a [KinematicBody], and can only move by user code."
        },
        {
          "name": "MODE_RIGID",
          "value": "0",
          "description": "Rigid body. This is the \"natural\" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code."
        },
        {
          "name": "MODE_CHARACTER",
          "value": "2",
          "description": "Character body. This behaves like a rigid body, but can not rotate."
        },
        {
          "name": "AXIS_LOCK_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "AXIS_LOCK_X",
          "value": "1",
          "description": ""
        },
        {
          "name": "AXIS_LOCK_Y",
          "value": "2",
          "description": ""
        },
        {
          "name": "AXIS_LOCK_Z",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "angular_damp",
          "type": "float",
          "setter": "set_angular_damp",
          "getter": "get_angular_damp",
          "description": "Damps RigidBody's rotational forces."
        },
        {
          "name": "angular_velocity",
          "type": "Vector3",
          "setter": "set_angular_velocity",
          "getter": "get_angular_velocity",
          "description": "RigidBody's rotational velocity."
        },
        {
          "name": "axis_lock",
          "type": "int",
          "setter": "set_axis_lock",
          "getter": "get_axis_lock",
          "enum": "RigidBody.AxisLock",
          "description": "Locks the rotational forces to a particular axis, preventing rotations on other axes."
        },
        {
          "name": "bounce",
          "type": "float",
          "setter": "set_bounce",
          "getter": "get_bounce",
          "description": "RigidBody's bounciness."
        },
        {
          "name": "can_sleep",
          "type": "bool",
          "setter": "set_can_sleep",
          "getter": "is_able_to_sleep",
          "description": "If [code]true[/code] the RigidBody will not calculate forces and will act as a static body while there is no movement. It will wake up when forces are applied through other collisions or when the [code]apply_impulse[/code] method is used."
        },
        {
          "name": "contact_monitor",
          "type": "bool",
          "setter": "set_contact_monitor",
          "getter": "is_contact_monitor_enabled",
          "description": "If true, the RigidBody will emit signals when it collides with another RigidBody."
        },
        {
          "name": "contacts_reported",
          "type": "int",
          "setter": "set_max_contacts_reported",
          "getter": "get_max_contacts_reported",
          "description": "The maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0."
        },
        {
          "name": "continuous_cd",
          "type": "bool",
          "setter": "set_use_continuous_collision_detection",
          "getter": "is_using_continuous_collision_detection",
          "description": "If [code]true[/code] continuous collision detection is used.\n\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses less impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects."
        },
        {
          "name": "custom_integrator",
          "type": "bool",
          "setter": "set_use_custom_integrator",
          "getter": "is_using_custom_integrator",
          "description": "If [code]true[/code] internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined."
        },
        {
          "name": "friction",
          "type": "float",
          "setter": "set_friction",
          "getter": "get_friction",
          "description": "The body friction, from 0 (frictionless) to 1 (max friction)."
        },
        {
          "name": "gravity_scale",
          "type": "float",
          "setter": "set_gravity_scale",
          "getter": "get_gravity_scale",
          "description": "This is multiplied by the global 3D gravity setting found in \"Project > Project Settings > Physics > 3d\" to produce RigidBody's gravity. E.g. a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object."
        },
        {
          "name": "linear_damp",
          "type": "float",
          "setter": "set_linear_damp",
          "getter": "get_linear_damp",
          "description": "RigidBody's linear damp. Default value: -1, cannot be less than -1. If this value is different from -1, any linear damp derived from the world or areas will be overridden."
        },
        {
          "name": "linear_velocity",
          "type": "Vector3",
          "setter": "set_linear_velocity",
          "getter": "get_linear_velocity",
          "description": "RigidBody's linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may run in another thread and runs at a different granularity. Use [method _integrate_forces] as your process loop for precise control of the body state."
        },
        {
          "name": "mass",
          "type": "float",
          "setter": "set_mass",
          "getter": "get_mass",
          "description": "RigidBody's mass."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "RigidBody.Mode",
          "description": "The body mode from the MODE_* enum. Modes include: MODE_STATIC, MODE_KINEMATIC, MODE_RIGID, and MODE_CHARACTER."
        },
        {
          "name": "sleeping",
          "type": "bool",
          "setter": "set_sleeping",
          "getter": "is_sleeping",
          "description": "If [code]true[/code] RigidBody is sleeping and will not calculate forces until woken up by a collision or the [code]apply_impulse[/code] method."
        },
        {
          "name": "weight",
          "type": "float",
          "setter": "set_weight",
          "getter": "get_weight",
          "description": "RigidBody's weight based on its mass and the global 3D gravity. Global values are set in \"Project > Project Settings > Physics > 3d\"."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectLimiter": {
      "name": "AudioEffectLimiter",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a soft clip Limiter audio effect to an Audio bus.",
      "description": "A limiter is similar to a compressor, but it’s less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master Bus is always recommended to reduce the effects of clipping.\n\t\tSoft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.",
      "methods": [
        {
          "name": "get_ceiling_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_soft_clip_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_soft_clip_ratio",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_threshold_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_ceiling_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ceiling",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_soft_clip_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "soft_clip",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_soft_clip_ratio",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "soft_clip",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_threshold_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "threshold",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "ceiling_db",
          "type": "float",
          "setter": "set_ceiling_db",
          "getter": "get_ceiling_db",
          "description": "The waveform's maximum allowed value. Value can range from -20 to -0.1. Default value: [code]-0.1dB[/code]."
        },
        {
          "name": "soft_clip_db",
          "type": "float",
          "setter": "set_soft_clip_db",
          "getter": "get_soft_clip_db",
          "description": "Applies a gain to the limited waves. Value can range from 0 to 6. Default value: [code]2dB[/code]."
        },
        {
          "name": "soft_clip_ratio",
          "type": "float",
          "setter": "set_soft_clip_ratio",
          "getter": "get_soft_clip_ratio",
          "description": ""
        },
        {
          "name": "threshold_db",
          "type": "float",
          "setter": "set_threshold_db",
          "getter": "get_threshold_db",
          "description": "Threshold from which the limiter begins to be active. Value can range from -30 to 0. Default value: [code]0dB[/code]."
        }
      ],
      "theme_properties": []
    },
    "PinJoint2D": {
      "name": "PinJoint2D",
      "inherits": "Joint2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Pin Joint for 2D Shapes.",
      "description": "Pin Joint for 2D Rigid Bodies. It pins 2 bodies (rigid or static) together, or a single body to a fixed position in space.",
      "methods": [
        {
          "name": "get_softness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_softness",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "softness",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "softness",
          "type": "float",
          "setter": "set_softness",
          "getter": "get_softness",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "CubeMesh": {
      "name": "CubeMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Generate an axis-aligned cuboid [PrimitiveMesh].",
      "description": "Generate an axis-aligned cuboid [PrimitiveMesh].",
      "methods": [
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_subdivide_depth",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_subdivide_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_subdivide_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subdivide_depth",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "divisions",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subdivide_height",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "divisions",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subdivide_width",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "subdivide",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "size",
          "type": "Vector3",
          "setter": "set_size",
          "getter": "get_size",
          "description": "Size of the cuboid mesh. Defaults to (2, 2, 2)."
        },
        {
          "name": "subdivide_depth",
          "type": "int",
          "setter": "set_subdivide_depth",
          "getter": "get_subdivide_depth",
          "description": "Number of extra edge loops inserted along the z-axis. Defaults to 0."
        },
        {
          "name": "subdivide_height",
          "type": "int",
          "setter": "set_subdivide_height",
          "getter": "get_subdivide_height",
          "description": "Number of extra edge loops inserted along the y-axis. Defaults to 0."
        },
        {
          "name": "subdivide_width",
          "type": "int",
          "setter": "set_subdivide_width",
          "getter": "get_subdivide_width",
          "description": "Number of extra edge loops inserted along the x-axis. Defaults to 0."
        }
      ],
      "theme_properties": []
    },
    "InputEvent": {
      "name": "InputEvent",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Generic input event",
      "description": "",
      "methods": [
        {
          "name": "action_match",
          "qualifiers": "const",
          "description": "Returns true if this input event matches the event passed.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "as_text",
          "qualifiers": "const",
          "description": "Returns a [String] representation of the event.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_device",
          "qualifiers": "const",
          "description": "Returns the id of the device that generated the event.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_id",
          "qualifiers": "const",
          "description": "Returns the id of the event.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_action",
          "qualifiers": "const",
          "description": "Returns true if this input event matches a pre-defined action, no matter the type.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_pressed",
          "qualifiers": "const",
          "description": "Returns true if the given action is being pressed (and is not an echo event for KEY events). Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_released",
          "qualifiers": "const",
          "description": "Returns true if the given action is released (i.e. not pressed). Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_action_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_echo",
          "qualifiers": "const",
          "description": "Returns true if this input event is an echo event (only for events of type KEY, it will return false for other types).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "qualifiers": "const",
          "description": "Returns true if this input event is pressed. Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_device",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "device",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_id",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shortcut_match",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xformed_by",
          "qualifiers": "const",
          "description": "",
          "return_type": "InputEvent",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ofs",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "device",
          "type": "int",
          "setter": "set_device",
          "getter": "get_device",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectEQ21": {
      "name": "AudioEffectEQ21",
      "inherits": "AudioEffectEQ",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a 21-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 22 Hz to 22000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.",
      "description": "Frequency bands :\n\t\tBand 1 : 22 Hz\n\t\tBand 2 : 32 Hz\n\t\tBand 3 : 44 Hz\n\t\tBand 4 : 63 Hz\n\t\tBand 5 : 90 Hz\n\t\tBand 6 : 125 Hz\n\t\tBand 7 : 175 Hz\n\t\tBand 8 : 250 Hz\n\t\tBand 9 : 350 Hz\n\t\tBand 10 : 500 Hz\n\t\tBand 11 : 700 Hz\n\t\tBand 12 : 1000 Hz\n\t\tBand 13 : 1400 Hz\n\t\tBand 14 : 2000 Hz\n\t\tBand 15 : 2800 Hz\n\t\tBand 16 : 4000 Hz\n\t\tBand 17 : 5600 Hz\n\t\tBand 18 : 8000 Hz\n\t\tBand 19 : 11000 Hz\n\t\tBand 20 : 16000 Hz\n\t\tBand 21 : 22000 Hz\n\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ10].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VBoxContainer": {
      "name": "VBoxContainer",
      "inherits": "BoxContainer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Vertical box container.",
      "description": "Vertical box container. See [BoxContainer].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "DampedSpringJoint2D": {
      "name": "DampedSpringJoint2D",
      "inherits": "Joint2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Damped spring constraint for 2D physics.",
      "description": "Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.",
      "methods": [
        {
          "name": "get_damping",
          "qualifiers": "const",
          "description": "Return the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the maximum length of the spring joint.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rest_length",
          "qualifiers": "const",
          "description": "Return the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_stiffness",
          "qualifiers": "const",
          "description": "Return the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_damping",
          "description": "Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "damping",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_length",
          "description": "Set the maximum length of the spring joint.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rest_length",
          "description": "Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rest_length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stiffness",
          "description": "Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stiffness",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "damping",
          "type": "float",
          "setter": "set_damping",
          "getter": "get_damping",
          "description": ""
        },
        {
          "name": "length",
          "type": "float",
          "setter": "set_length",
          "getter": "get_length",
          "description": ""
        },
        {
          "name": "rest_length",
          "type": "float",
          "setter": "set_rest_length",
          "getter": "get_rest_length",
          "description": ""
        },
        {
          "name": "stiffness",
          "type": "float",
          "setter": "set_stiffness",
          "getter": "get_stiffness",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Shape": {
      "name": "Shape",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for all 3D shape resources.",
      "description": "Base class for all 3D shape resources. All 3D shapes that inherit from this can be set into a [PhysicsBody] or [Area].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventMouseButton": {
      "name": "InputEventMouseButton",
      "inherits": "InputEventMouse",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Input event type for mouse button events.",
      "description": "",
      "methods": [
        {
          "name": "get_button_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_factor",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_doubleclick",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_button_index",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_doubleclick",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "doubleclick",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_factor",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "factor",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "button_index",
          "type": "int",
          "setter": "set_button_index",
          "getter": "get_button_index",
          "description": "Mouse button identifier, one of the BUTTON_* or BUTTON_WHEEL_* constants in [@Global Scope]."
        },
        {
          "name": "doubleclick",
          "type": "bool",
          "setter": "set_doubleclick",
          "getter": "is_doubleclick",
          "description": "Whether the event is a double-click."
        },
        {
          "name": "factor",
          "type": "float",
          "setter": "set_factor",
          "getter": "get_factor",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "Pressed state of the mouse button."
        }
      ],
      "theme_properties": []
    },
    "Panel": {
      "name": "Panel",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Provides an opaque background for [Control] children.",
      "description": "Panel is a [Control] that displays an opaque background. It's commonly used as a parent and container for other types of [Control] nodes.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "panelf",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "panelnc",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "VisualScriptPropertySet": {
      "name": "VisualScriptPropertySet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_assign_op",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_base_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_base_script",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_base_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_basic_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_call_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_property",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_assign_op",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "assign_op",
              "type": "int",
              "enum": "VisualScriptPropertySet.AssignOp",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_script",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_script",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_basic_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "basic_type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_call_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "VisualScriptPropertySet.CallMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_index",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_property",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CALL_MODE_SELF",
          "value": "0",
          "description": ""
        },
        {
          "name": "CALL_MODE_NODE_PATH",
          "value": "1",
          "description": ""
        },
        {
          "name": "CALL_MODE_INSTANCE",
          "value": "2",
          "description": ""
        },
        {
          "name": "CALL_MODE_BASIC_TYPE",
          "value": "3",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_ADD",
          "value": "1",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_SUB",
          "value": "2",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_MUL",
          "value": "3",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_DIV",
          "value": "4",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_MOD",
          "value": "5",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_SHIFT_LEFT",
          "value": "6",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_SHIFT_RIGHT",
          "value": "7",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_BIT_AND",
          "value": "8",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_BIT_OR",
          "value": "9",
          "description": ""
        },
        {
          "name": "ASSIGN_OP_BIT_XOR",
          "value": "10",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "assign_op",
          "type": "int",
          "setter": "set_assign_op",
          "getter": "get_assign_op",
          "enum": "VisualScriptPropertySet.AssignOp",
          "description": ""
        },
        {
          "name": "base_script",
          "type": "String",
          "setter": "set_base_script",
          "getter": "get_base_script",
          "description": ""
        },
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        },
        {
          "name": "basic_type",
          "type": "int",
          "setter": "set_basic_type",
          "getter": "get_basic_type",
          "enum": "Variant.Type",
          "description": ""
        },
        {
          "name": "index",
          "type": "String",
          "setter": "set_index",
          "getter": "get_index",
          "description": ""
        },
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_base_path",
          "getter": "get_base_path",
          "description": ""
        },
        {
          "name": "property",
          "type": "String",
          "setter": "set_property",
          "getter": "get_property",
          "description": ""
        },
        {
          "name": "set_mode",
          "type": "int",
          "setter": "set_call_mode",
          "getter": "get_call_mode",
          "enum": "VisualScriptPropertySet.CallMode",
          "description": ""
        },
        {
          "name": "type_cache",
          "type": "Dictionary",
          "setter": "_set_type_cache",
          "getter": "_get_type_cache",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "WindowDialog": {
      "name": "WindowDialog",
      "inherits": "Popup",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for window dialogs.",
      "description": "Windowdialog is the base class for all window-based dialogs. It's a by-default toplevel [Control] that draws a window decoration and allows motion and resizing.",
      "methods": [
        {
          "name": "get_close_button",
          "description": "Return the close [TextureButton].",
          "return_type": "TextureButton",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_resizable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_title",
          "qualifiers": "const",
          "description": "Return the title of the window.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_resizable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resizable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_title",
          "description": "Set the title of the window.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "resizable",
          "type": "bool",
          "setter": "set_resizable",
          "getter": "get_resizable",
          "description": ""
        },
        {
          "name": "window_title",
          "type": "String",
          "setter": "set_title",
          "getter": "get_title",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "close",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "close_h_ofs",
          "type": "int",
          "description": ""
        },
        {
          "name": "close_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "close_v_ofs",
          "type": "int",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "scaleborder_size",
          "type": "int",
          "description": ""
        },
        {
          "name": "title_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "title_height",
          "type": "int",
          "description": ""
        }
      ]
    },
    "MultiMeshInstance": {
      "name": "MultiMeshInstance",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Node that instances a [MultiMesh].",
      "description": "MultiMeshInstance is a [Node] that takes a [MultiMesh] resource and adds it to the current scenario by creating an instance of it (yes, this is an instance of instances).",
      "methods": [
        {
          "name": "get_multimesh",
          "qualifiers": "const",
          "description": "Return the [MultiMesh] that is used for instancing.",
          "return_type": "MultiMesh",
          "arguments": []
        },
        {
          "name": "set_multimesh",
          "description": "Set the [MultiMesh] to be instanced.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "multimesh",
              "type": "MultiMesh",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "multimesh",
          "type": "MultiMesh",
          "setter": "set_multimesh",
          "getter": "get_multimesh",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "@NativeScript": {
      "name": "@NativeScript",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "TextureRect": {
      "name": "TextureRect",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Draws a sprite or a texture inside a User Interface. The texture can tile or not.",
      "description": "Use TextureRect to draw icons and sprites in your User Interfaces. To create panels and menu boxes, take a look at [NinePatchFrame]. Its Stretch Mode property controls the texture's scale and placement. It can scale, tile and stay centered inside its bounding rectangle. TextureRect is one of the 5 most common nodes to create game UI.",
      "methods": [
        {
          "name": "get_stretch_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "has_expand",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_expand",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stretch_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stretch_mode",
              "type": "int",
              "enum": "TextureRect.StretchMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STRETCH_SCALE_ON_EXPAND",
          "value": "0",
          "description": "Scale to fit the node's bounding rectangle, only if [code]expand[/code] is [code]true[/code]. Default [code]stretch_mode[/code], for backwards compatibility. Until you set [code]expand[/code] to [code]true[/code], the texture will behave like [code]STRETCH_KEEP[/code]."
        },
        {
          "name": "STRETCH_SCALE",
          "value": "1",
          "description": "Scale to fit the node's bounding rectangle."
        },
        {
          "name": "STRETCH_TILE",
          "value": "2",
          "description": "Tile inside the node's bounding rectangle."
        },
        {
          "name": "STRETCH_KEEP",
          "value": "3",
          "description": "The texture keeps its original size and stays in the bounding rectangle's top-left corner."
        },
        {
          "name": "STRETCH_KEEP_CENTERED",
          "value": "4",
          "description": "The texture keeps its original size and stays centered in the node's bounding rectangle."
        },
        {
          "name": "STRETCH_KEEP_ASPECT",
          "value": "5",
          "description": "Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio."
        },
        {
          "name": "STRETCH_KEEP_ASPECT_CENTERED",
          "value": "6",
          "description": "Scale the texture to fit the node's bounding rectangle, center it and maintain its aspect ratio."
        },
        {
          "name": "STRETCH_KEEP_ASPECT_COVERED",
          "value": "7",
          "description": "Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits."
        }
      ],
      "properties": [
        {
          "name": "expand",
          "type": "bool",
          "setter": "set_expand",
          "getter": "has_expand",
          "description": "If [code]true[/code], the texture scales to fit its bounding rectangle. Default value: [code]false[/code]."
        },
        {
          "name": "stretch_mode",
          "type": "int",
          "setter": "set_stretch_mode",
          "getter": "get_stretch_mode",
          "enum": "TextureRect.StretchMode",
          "description": "Controls the texture's behavior when you resize the node's bounding rectangle. Set it to one of the [code]STRETCH_*[/code] constants. See the constants to learn more."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The node's [Texture] resource."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptTypeCast": {
      "name": "VisualScriptTypeCast",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_base_script",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_base_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_base_script",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "base_script",
          "type": "String",
          "setter": "set_base_script",
          "getter": "get_base_script",
          "description": ""
        },
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Animation": {
      "name": "Animation",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Contains data used to animate everything in the engine.",
      "description": "An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.\n\t\tAnimations are just data containers, and must be added to odes such as an [AnimationPlayer] or [AnimationTreePlayer] to be played back.",
      "methods": [
        {
          "name": "add_track",
          "description": "Add a track to the Animation. The track type must be specified as any of the values in the TYPE_* enumeration.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Animation.TrackType",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the animation (clear all tracks and reset all).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "find_track",
          "qualifiers": "const",
          "description": "Return the index of the specified track. If the track is not found, return -1.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the total length of the animation (in seconds).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_step",
          "qualifiers": "const",
          "description": "Get the animation step value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_track_count",
          "qualifiers": "const",
          "description": "Return the amount of tracks in the animation.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "Return whether the animation has the loop flag set.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "method_track_get_key_indices",
          "qualifiers": "const",
          "description": "Return all the key indices of a method track, given a position and delta time.",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "method_track_get_name",
          "qualifiers": "const",
          "description": "Return the method name of a method track.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "method_track_get_params",
          "qualifiers": "const",
          "description": "Return the arguments values to be called on a method track for a given key in a given track.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_track",
          "description": "Remove a track by specifying the track index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_length",
          "description": "Set the total length of the animation (in seconds). Note that length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "Set a flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_step",
          "description": "Set the animation step value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_find_key",
          "qualifiers": "const",
          "description": "Find the key index by time in a given track. Optionally, only find it if the exact time is given.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "exact",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "track_get_interpolation_loop_wrap",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_interpolation_type",
          "qualifiers": "const",
          "description": "Return the interpolation type of a given track, from the INTERPOLATION_* enum.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_count",
          "qualifiers": "const",
          "description": "Return the amount of keys in a given track.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_time",
          "qualifiers": "const",
          "description": "Return the time at which the key is located.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_transition",
          "qualifiers": "const",
          "description": "Return the transition curve (easing) for a specific key (see built-in math function \"ease\").",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_key_value",
          "qualifiers": "const",
          "description": "Return the value of a given key in a given track.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_path",
          "qualifiers": "const",
          "description": "Get the path of a track. for more information on the path format, see [method track_set_path]",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_get_type",
          "qualifiers": "const",
          "description": "Get the type of a track.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_insert_key",
          "description": "Insert a generic key in a given track.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "key",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "transition",
              "type": "float",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "track_is_imported",
          "qualifiers": "const",
          "description": "Return true if the given track is imported. Else, return false.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_move_down",
          "description": "Move a track down.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_move_up",
          "description": "Move a track up.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_remove_key",
          "description": "Remove a key by index in a given track.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_remove_key_at_position",
          "description": "Remove a key by position (seconds) in a given track.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_imported",
          "description": "Set the given track as imported or not.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "imported",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_interpolation_loop_wrap",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "interpolation",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_interpolation_type",
          "description": "Set the interpolation type of a given track, from the INTERPOLATION_* enum.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "interpolation",
              "type": "int",
              "enum": "Animation.InterpolationType",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_key_transition",
          "description": "Set the transition curve (easing) for a specific key (see built-in math function \"ease\").",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transition",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_key_value",
          "description": "Set the value of an existing key.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "track_set_path",
          "description": "Set the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by \":\". Example: \"character/skeleton:ankle\" or \"character/mesh:transform/local\"",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transform_track_insert_key",
          "description": "Insert a transform key for a transform track.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "location",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "rotation",
              "type": "Quat",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transform_track_interpolate",
          "qualifiers": "const",
          "description": "Return the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position ([Vector3]), rotation ([Quat]) and scale ([Vector3]).",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "value_track_get_key_indices",
          "qualifiers": "const",
          "description": "Return all the key indices of a value track, given a position and delta time.",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "value_track_get_update_mode",
          "qualifiers": "const",
          "description": "Return the update mode of a value track.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "value_track_set_update_mode",
          "description": "Set the update mode (UPDATE_*) of a value track.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Animation.UpdateMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TYPE_VALUE",
          "value": "0",
          "description": "Value tracks set values in node properties, but only those which can be Interpolated."
        },
        {
          "name": "TYPE_TRANSFORM",
          "value": "1",
          "description": "Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are Interpolated."
        },
        {
          "name": "TYPE_METHOD",
          "value": "2",
          "description": "Method tracks call functions with given arguments per key."
        },
        {
          "name": "INTERPOLATION_NEAREST",
          "value": "0",
          "description": "No interpolation (nearest value)."
        },
        {
          "name": "INTERPOLATION_LINEAR",
          "value": "1",
          "description": "Linear interpolation."
        },
        {
          "name": "INTERPOLATION_CUBIC",
          "value": "2",
          "description": "Cubic interpolation."
        },
        {
          "name": "UPDATE_CONTINUOUS",
          "value": "0",
          "description": "Update between keyframes."
        },
        {
          "name": "UPDATE_DISCRETE",
          "value": "1",
          "description": "Update at the keyframes and hold the value."
        },
        {
          "name": "UPDATE_TRIGGER",
          "value": "2",
          "description": "Update at the keyframes."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "RemoteTransform": {
      "name": "RemoteTransform",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_remote_node",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_update_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_update_rotation",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_update_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_use_global_coordinates",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_remote_node",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_update_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "update_remote_position",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_update_rotation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "update_remote_rotation",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_update_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "update_remote_scale",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_global_coordinates",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "use_global_coordinates",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "remote_path",
          "type": "NodePath",
          "setter": "set_remote_node",
          "getter": "get_remote_node",
          "description": ""
        },
        {
          "name": "update_position",
          "type": "bool",
          "setter": "set_update_position",
          "getter": "get_update_position",
          "description": ""
        },
        {
          "name": "update_rotation",
          "type": "bool",
          "setter": "set_update_rotation",
          "getter": "get_update_rotation",
          "description": ""
        },
        {
          "name": "update_scale",
          "type": "bool",
          "setter": "set_update_scale",
          "getter": "get_update_scale",
          "description": ""
        },
        {
          "name": "use_global_coordinates",
          "type": "bool",
          "setter": "set_use_global_coordinates",
          "getter": "get_use_global_coordinates",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PoolVector2Array": {
      "name": "PoolVector2Array",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "An Array of Vector2.",
      "description": "An Array specifically designed to hold Vector2.",
      "methods": [
        {
          "name": "PoolVector2Array",
          "description": "Construct a new [PoolVector2Array]. Optionally, you can pass in an Array that will be converted.",
          "return_type": "PoolVector2Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append an [PoolVector2Array] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Insert a [Vector2] at the end.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [Vector2] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vector2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectBandLimitFilter": {
      "name": "AudioEffectBandLimitFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ConvexPolygonShape2D": {
      "name": "ConvexPolygonShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Convex Polygon Shape for 2D physics.",
      "description": "Convex Polygon Shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).\n\t\tThe main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.",
      "methods": [
        {
          "name": "get_points",
          "qualifiers": "const",
          "description": "Returns a list of points in either clockwise or counter clockwise order, forming a convex polygon.",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "set_point_cloud",
          "description": "Currently, this method does nothing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point_cloud",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_points",
          "description": "Sets a list of points in either clockwise or counter clockwise order, forming a convex polygon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "points",
          "type": "PoolVector2Array",
          "setter": "set_points",
          "getter": "get_points",
          "description": "The polygon's list of vertices. Can be in either clockwise or counterclockwise order."
        }
      ],
      "theme_properties": []
    },
    "NativeScript": {
      "name": "NativeScript",
      "inherits": "Script",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_class_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_library",
          "qualifiers": "const",
          "description": "",
          "return_type": "GDNativeLibrary",
          "arguments": []
        },
        {
          "name": "new",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "set_class_name",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "class_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_library",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "library",
              "type": "GDNativeLibrary",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "class_name",
          "type": "String",
          "setter": "set_class_name",
          "getter": "get_class_name",
          "description": ""
        },
        {
          "name": "library",
          "type": "GDNativeLibrary",
          "setter": "set_library",
          "getter": "get_library",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TreeItem": {
      "name": "TreeItem",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Control for a single item inside a [Tree].",
      "description": "Control for a single item inside a [Tree]. May have child [TreeItem]\\ s and be styled as well as contain buttons.",
      "methods": [
        {
          "name": "add_button",
          "description": "Adds a button with [Texture] [code]button[/code] at column [code]column[/code]. The [code]button_idx[/code] index is used to identify the button when calling other methods. If not specified, the next available index is used, which may be retrieved by calling [code]get_buton_count()[/code] immediately after this method. Optionally, the button can be [code]disabled[/code] and have a [code]tooltip[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "button_idx",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "disabled",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "tooltip",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "clear_custom_bg_color",
          "description": "Resets the background color for the given column to default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_custom_color",
          "description": "Resets the color for the given column to default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "deselect",
          "description": "Deselects the given column.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_button",
          "description": "Removes the button at index [code]button_idx[/code] in column [code]column[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_button",
          "qualifiers": "const",
          "description": "Returns the [Texture] of the button at index [code]button_idx[/code] in column [code]column[/code].",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_button_count",
          "qualifiers": "const",
          "description": "Returns the number of buttons in column [code]column[/code]. May be used to get the most recently added button's index, if no index was specified.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_mode",
          "qualifiers": "const",
          "description": "Returns the column's cell mode. See [code]CELL_MODE_*[/code] constants.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_children",
          "description": "Returns the TreeItem's child items.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_custom_bg_color",
          "qualifiers": "const",
          "description": "Returns the custom background color of column [code]column[/code].",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_custom_minimum_height",
          "qualifiers": "const",
          "description": "Returns the custom minimum height.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_expand_right",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if [code]expand_right[/code] is set.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon",
          "qualifiers": "const",
          "description": "Returns the given column's icon [Texture]. Error if no icon is set.",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon_max_width",
          "qualifiers": "const",
          "description": "Returns the column's icon's maximum width.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_icon_region",
          "qualifiers": "const",
          "description": "Returns the icon [Texture] region as [Rect2].",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_next",
          "description": "Returns the next TreeItem in the tree.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_next_visible",
          "description": "Returns the next visible TreeItem in the tree.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_parent",
          "description": "Returns the parent TreeItem.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_prev",
          "description": "Returns the previous TreeItem in the tree.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_prev_visible",
          "description": "Returns the previous visible TreeItem in the tree.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_range",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_range_config",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Returns the given column's text.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_text_align",
          "qualifiers": "const",
          "description": "Returns the given column's text alignment.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tooltip",
          "qualifiers": "const",
          "description": "Returns the given column's tooltip.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_button_disabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the button at index [code]button_idx[/code] for the given column is disabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_checked",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the given column is checked.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_collapsed",
          "description": "Returns [code]true[/code] if this TreeItem is collapsed.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_custom_set_as_button",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_editable",
          "description": "Returns [code]true[/code] if column [code]column[/code] is editable.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_folding_disabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if folding is disabled for this TreeItem.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_selectable",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if column [code]column[/code] is selectable.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_selected",
          "description": "Returns [code]true[/code] if column [code]column[/code] is selected.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_to_bottom",
          "description": "Moves this TreeItem to the bottom in the [Tree] hierarchy.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "move_to_top",
          "description": "Moves this TreeItem to the top in the [Tree] hierarchy.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_child",
          "description": "Removes the child TreeItem at index [code]index[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Selects the column [code]column[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_button",
          "description": "Sets the given column's button [Texture] at index [code]button_idx[/code] to [code]button[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "button_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "button",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_mode",
          "description": "Sets the given column's cell mode to [code]mode[/code]. See [code]CELL_MODE_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "TreeItem.TreeCellMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_checked",
          "description": "If [code]true[/code] the column [code]column[/code] is checked.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "checked",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collapsed",
          "description": "If [code]true[/code] the TreeItem is collapsed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_as_button",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_bg_color",
          "description": "Sets the given column's custom background color and whether to just use it as an outline.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "just_outline",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_custom_color",
          "description": "Sets the given column's custom color.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_draw",
          "description": "Sets the given column's custom draw callback to [code]callback[/code] method on [code]object[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "callback",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_minimum_height",
          "description": "Sets the custom minimum height of this TreeItem.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disable_folding",
          "description": "If [code]true[/code] folding is disabled for this TreeItem.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editable",
          "description": "If [code]true[/code] column [code]column[/code] is editable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_right",
          "description": "If [code]true[/code] column [code]column[/code] is expanded to the right.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon",
          "description": "Sets the given column's icon [Texture].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_max_width",
          "description": "Sets the given column's icon's maximum width.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_region",
          "description": "Sets the given column's icon's texture region.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_metadata",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_range",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_range_config",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "step",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "expr",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_selectable",
          "description": "If [code]true[/code] the given column is selectable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selectable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text_align",
          "description": "Sets the given column's text alignment. See [code]ALIGN_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text_align",
              "type": "int",
              "enum": "TreeItem.TextAlign",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tooltip",
          "description": "Sets the given column's tooltip text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CELL_MODE_STRING",
          "value": "0",
          "description": "Cell contains a string."
        },
        {
          "name": "CELL_MODE_CHECK",
          "value": "1",
          "description": "Cell can be checked."
        },
        {
          "name": "CELL_MODE_RANGE",
          "value": "2",
          "description": "Cell contains a range."
        },
        {
          "name": "CELL_MODE_RANGE_EXPRESSION",
          "value": "3",
          "description": "Cell contains a range expression."
        },
        {
          "name": "CELL_MODE_ICON",
          "value": "4",
          "description": "Cell contains an icon."
        },
        {
          "name": "CELL_MODE_CUSTOM",
          "value": "5",
          "description": ""
        },
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": "Align text to the left. See [code]set_text_align()[/code]."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": "Center text. See [code]set_text_align()[/code]."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": "Align text to the right. See [code]set_text_align()[/code]."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "RigidBody2D": {
      "name": "RigidBody2D",
      "inherits": "PhysicsBody2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Physics Body whose position is determined through physics simulation in 2D space.",
      "description": "This is the node that implements full 2D physics. This means that you do not control a RigidBody2D directly. Instead you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.\n\t\tThis node can use custom force integration, for writing complex physics motion behavior per node.\n\t\tThis node can shift state between regular Rigid body, Kinematic, Character or Static.\n\t\tCharacter mode forbids this node from being rotated.\n\t\tAs a warning, don't change RigidBody2D's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior.",
      "methods": [
        {
          "name": "_integrate_forces",
          "qualifiers": "virtual",
          "description": "Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default it works in addition to the usual physics behavior, but [method set_use_custom_integrator] allows you to disable the default behavior and do fully custom force integration for a body.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "Physics2DDirectBodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_force",
          "description": "Add a positioned force to the applied force and torque. As with [method apply_impulse], both the force and the offset from the body origin are in global coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "force",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_impulse",
          "description": "Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the offset from the body origin are in global coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "impulse",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_angular_damp",
          "qualifiers": "const",
          "description": "Return the angular damp for this body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_angular_velocity",
          "qualifiers": "const",
          "description": "Return the body angular velocity. This changes by physics granularity. See [method set_angular_velocity].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_applied_force",
          "qualifiers": "const",
          "description": "Return the applied force vector.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_applied_torque",
          "qualifiers": "const",
          "description": "Return the torque which is being applied to this body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_bounce",
          "qualifiers": "const",
          "description": "Return the body bounciness.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_colliding_bodies",
          "qualifiers": "const",
          "description": "Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it. You must also enable contact monitor, see [method set_contact_monitor]",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_continuous_collision_detection_mode",
          "qualifiers": "const",
          "description": "Return whether this body is using continuous collision detection.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "Return the body friction.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_scale",
          "qualifiers": "const",
          "description": "Return the gravity factor.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_inertia",
          "qualifiers": "const",
          "description": "Return the body's moment of inertia. This is usually automatically computed from the mass and the shapes. Note that this doesn't seem to work in a [code]_ready[/code] function: it apparently has not been auto-computed yet.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_damp",
          "qualifiers": "const",
          "description": "Return the linear damp for this body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "Return the body linear velocity. This changes by physics granularity. See [method set_linear_velocity].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_mass",
          "qualifiers": "const",
          "description": "Return the body mass.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_max_contacts_reported",
          "qualifiers": "const",
          "description": "Return the maximum contacts that can be reported. See [method set_max_contacts_reported].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Return the current body mode, see [method set_mode].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_weight",
          "qualifiers": "const",
          "description": "Return the body weight given standard earth-weight (gravity 9.8).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_able_to_sleep",
          "qualifiers": "const",
          "description": "Return true if the body has the ability to fall asleep when not moving. See [method set_can_sleep].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_contact_monitor_enabled",
          "qualifiers": "const",
          "description": "Return whether contact monitoring is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_sleeping",
          "qualifiers": "const",
          "description": "Return whether the body is sleeping.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_custom_integrator",
          "description": "Return true if the body is not doing any built-in force integration.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_angular_damp",
          "description": "Set the angular damp for this body. If this value is different from -1, any angular damp derived from the world or areas will be overridden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_angular_velocity",
          "description": "Set the body angular velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_velocity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_applied_force",
          "description": "Set the applied force vector. This is the equivalent of pushing a box over the ground: the force applied is applied constantly.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "force",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_applied_torque",
          "description": "Set a constant torque which will be applied to this body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "torque",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_axis_velocity",
          "description": "Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bounce",
          "description": "Set the body bounciness, from 0 (no bounce) to 1 (full bounce).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounce",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_can_sleep",
          "description": "Set the body ability to fall asleep when not moving. This saves an enormous amount of processor time when there are plenty of rigid bodies (non static) in a scene.\n\t\t\t\tSleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "able_to_sleep",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_contact_monitor",
          "description": "Enable contact monitoring. This allows the body to emit signals when it collides with another.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_continuous_collision_detection_mode",
          "description": "Set the continuous collision detection mode from the enum CCD_MODE_*.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. The first is more precise, and misses less impacts by small, fast-moving objects. The second is faster to compute, but can miss small, fast-moving objects.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "RigidBody2D.CCDMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "Set the body friction, from 0 (frictionless) to 1 (full friction).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_scale",
          "description": "Set the gravity factor. This factor multiplies gravity intensity just for this body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gravity_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_inertia",
          "description": "Set the body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 (or negative) inertia to return to automatically computing it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "inertia",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_damp",
          "description": "Set the linear damp for this body. If this value is different from -1, any linear damp derived from the world or areas will be overridden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_velocity",
          "description": "Set the body linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mass",
          "description": "Set the body mass.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mass",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_contacts_reported",
          "description": "Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the body mode, from the MODE_* enum. This allows to change to a static body or a character body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "RigidBody2D.Mode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sleeping",
          "description": "Set whether a body is sleeping or not. Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sleeping",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_custom_integrator",
          "description": "Pass true to disable the internal force integration (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_weight",
          "description": "Set the body weight given standard earth-weight (gravity 9.8). Not really useful for 2D since most measures for this node are in pixels.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "test_motion",
          "description": "Return whether the body would collide, if it tried to move in the given vector. This method allows two extra parameters: A margin, which increases slightly the size of the shapes involved in the collision detection, and an object of type [Physics2DTestMotionResult], which will store additional information about the collision (should there be one).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "margin",
              "type": "float",
              "default_value": "0.08"
            },
            {
              "index": "2",
              "name": "result",
              "type": "Physics2DTestMotionResult",
              "default_value": "null"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "body_entered",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exited",
          "description": "Emitted when a body exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_entered",
          "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that collided with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body collided with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_exited",
          "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that stopped colliding with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body stopped colliding with.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sleeping_state_changed",
          "description": "Emitted when the body changes its sleeping state. Either by sleeping or waking up.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "MODE_STATIC",
          "value": "1",
          "description": "Static mode. The body behaves like a [StaticBody2D], and can only move by user code."
        },
        {
          "name": "MODE_KINEMATIC",
          "value": "3",
          "description": "Kinematic body. The body behaves like a [KinematicBody2D], and can only move by user code."
        },
        {
          "name": "MODE_RIGID",
          "value": "0",
          "description": "Rigid body. This is the \"natural\" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code."
        },
        {
          "name": "MODE_CHARACTER",
          "value": "2",
          "description": "Character body. This behaves like a rigid body, but can not rotate."
        },
        {
          "name": "CCD_MODE_DISABLED",
          "value": "0",
          "description": "Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects."
        },
        {
          "name": "CCD_MODE_CAST_RAY",
          "value": "1",
          "description": "Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise."
        },
        {
          "name": "CCD_MODE_CAST_SHAPE",
          "value": "2",
          "description": "Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise."
        }
      ],
      "properties": [
        {
          "name": "angular_damp",
          "type": "float",
          "setter": "set_angular_damp",
          "getter": "get_angular_damp",
          "description": "Damps RigidBody2D's rotational forces."
        },
        {
          "name": "angular_velocity",
          "type": "float",
          "setter": "set_angular_velocity",
          "getter": "get_angular_velocity",
          "description": "RigidBody2D's rotational velocity."
        },
        {
          "name": "bounce",
          "type": "float",
          "setter": "set_bounce",
          "getter": "get_bounce",
          "description": "RigidBody2D's bounciness."
        },
        {
          "name": "can_sleep",
          "type": "bool",
          "setter": "set_can_sleep",
          "getter": "is_able_to_sleep",
          "description": "If [code]true[/code] RigidBody2D will not calculate forces and will act as a static body while there is no movement. It will wake up when other forces are applied through other collisions or when the [code]apply_impulse[/code] method is used. Default value: [code]true[/code]"
        },
        {
          "name": "contact_monitor",
          "type": "bool",
          "setter": "set_contact_monitor",
          "getter": "is_contact_monitor_enabled",
          "description": "If [code]true[/code] RigidBody2D will emit signals when it collides with another RigidBody2D."
        },
        {
          "name": "contacts_reported",
          "type": "int",
          "setter": "set_max_contacts_reported",
          "getter": "get_max_contacts_reported",
          "description": "The maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0."
        },
        {
          "name": "continuous_cd",
          "type": "int",
          "setter": "set_continuous_collision_detection_mode",
          "getter": "get_continuous_collision_detection_mode",
          "enum": "RigidBody2D.CCDMode",
          "description": "If [code]true[/code] continuous collision detection is used. Default value: [code]false[/code]\n\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses less impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects."
        },
        {
          "name": "custom_integrator",
          "type": "bool",
          "setter": "set_use_custom_integrator",
          "getter": "is_using_custom_integrator",
          "description": "If [code]true[/code] internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined."
        },
        {
          "name": "friction",
          "type": "float",
          "setter": "set_friction",
          "getter": "get_friction",
          "description": "The body friction, from 0 (frictionless) to 1 (max friction)."
        },
        {
          "name": "gravity_scale",
          "type": "float",
          "setter": "set_gravity_scale",
          "getter": "get_gravity_scale",
          "description": "This is multiplied by the global 2D gravity setting found in \"Project > Project Settings > Physics > 2d\" to produce RigidBody2D's gravity. E.g. a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object."
        },
        {
          "name": "linear_damp",
          "type": "float",
          "setter": "set_linear_damp",
          "getter": "get_linear_damp",
          "description": "RigidBody2D's linear damp. Default of -1, cannot be less than -1. If this value is different from -1, any linear damp derived from the world or areas will be overridden."
        },
        {
          "name": "linear_velocity",
          "type": "Vector2",
          "setter": "set_linear_velocity",
          "getter": "get_linear_velocity",
          "description": "RigidBody2D's linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may run in another thread and runs at a different granularity. Use [method _integrate_forces] as your process loop for precise control of the body state."
        },
        {
          "name": "mass",
          "type": "float",
          "setter": "set_mass",
          "getter": "get_mass",
          "description": "RigidBody2D's mass."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "RigidBody2D.Mode",
          "description": "The body mode from the MODE_* enum. Modes include: MODE_STATIC, MODE_KINEMATIC, MODE_RIGID, and MODE_CHARACTER."
        },
        {
          "name": "sleeping",
          "type": "bool",
          "setter": "set_sleeping",
          "getter": "is_sleeping",
          "description": "If [code]true[/code] RigidBody2D is sleeping and will not calculate forces until woken up by a collision or the [code]apply_impulse[/code] method."
        },
        {
          "name": "weight",
          "type": "float",
          "setter": "set_weight",
          "getter": "get_weight",
          "description": "RigidBody2D's weight based on its mass and the global 2D gravity. Global values are set in \"Project > Project Settings > Physics > 2d\"."
        }
      ],
      "theme_properties": []
    },
    "RayCast2D": {
      "name": "RayCast2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Query the closest object intersecting a ray.",
      "description": "A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 2D space in order to find the closest object along the path of the ray.\n\t\tRayCast2D can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.\n\t\tOnly enabled raycasts will be able to query the space and report collisions.\n\t\tRayCast2D calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.",
      "methods": [
        {
          "name": "add_exception",
          "description": "Adds a collision exception so the ray does not report collisions with the specified node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_exception_rid",
          "description": "Adds a collision exception so the ray does not report collisions with the specified [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_exceptions",
          "description": "Removes all collision exceptions for this ray.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_raycast_update",
          "description": "Updates the collision information for the ray.  Use this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state. Note: [code]enabled == true[/code] is not required for this to work.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cast_to",
          "qualifiers": "const",
          "description": "Return the destination point of this ray object.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "Returns the closest object the ray is pointing to. Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tif RayCast2D.is_colliding():\n\t\t\t\t\tvar collider = RayCast2D.get_collider()\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "Returns the collision shape of the closest object the ray is pointing to.  Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tif RayCast2D.is_colliding():\n\t\t\t\t\tvar shape = RayCast2D.get_collider_shape()\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "Returns the collision layer for this ray.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "Returns the normal of the intersecting object's shape at the collision point.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collision_point",
          "qualifiers": "const",
          "description": "Returns the collision point at which the ray intersects the closest object. Note: this point is in the [b]global[/b] coordinate system.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_exclude_parent_body",
          "qualifiers": "const",
          "description": "Returns whether this ray should hit your parent node, if it's a body.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_type_mask",
          "qualifiers": "const",
          "description": "Returns the type mask (types of objects to detect) for this ray. The value is a sum (bitwise OR'd) of constants available for [Physics2DDirectSpaceState].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_colliding",
          "qualifiers": "const",
          "description": "Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "Returns whether this raycast is enabled or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove_exception",
          "description": "Removes a collision exception so the ray does report collisions with the specified node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_exception_rid",
          "description": "Removes a collision exception so the ray does report collisions with the specified [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cast_to",
          "description": "Sets the ray destination point, so that the ray will test from the ray's origin to [code]local_point[/code]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "local_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer",
          "description": "Set the mask to filter objects. Only objects with at least the same mask element set will be detected.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled",
          "description": "Enables the RayCast2D. Only enabled raycasts will be able to query the space and report collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_exclude_parent_body",
          "description": "Toggle whether this ray should hit your parent node, if it's a body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_type_mask",
          "description": "Set the types of objects to detect. For [code]mask[/code] use a logic sum (OR operation) of constants defined in [Physics2DDirectSpaceState], eg. [code]Physics2DDirectSpaceState.TYPE_MASK_STATIC_BODY | Physics2DDirectSpaceState.TYPE_MASK_KINEMATIC_BODY[/code] to detect only those two types.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "cast_to",
          "type": "Vector2",
          "setter": "set_cast_to",
          "getter": "get_cast_to",
          "description": "The ray's destination point, relative to the RayCast's [code]position[/code]."
        },
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The RayCast2D's collision layer(s). Only bodies in the same collision layer(s) will be detected."
        },
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": "If [code]true[/code], collisions will be reported. Default value: [code]false[/code]."
        },
        {
          "name": "exclude_parent",
          "type": "bool",
          "setter": "set_exclude_parent_body",
          "getter": "get_exclude_parent_body",
          "description": "If [code]true[/code], the parent node will be excluded from collision detection. Default value: [code]true[/code]."
        },
        {
          "name": "type_mask",
          "type": "int",
          "setter": "set_type_mask",
          "getter": "get_type_mask",
          "description": "Object types to detect using a logical sum (OR operation) of type constants defined in [Physics2DDirectSpaceState].\n\t\t\tExample:\n\t\t\t[codeblock]\n\t\t\tRayCast.type_mask = Physics2DDirectSpaceState.TYPE_MASK_STATIC_BODY | Physics2DDirectSpaceState.TYPE_MASK_KINEMATIC_BODY\n\t\t\t[/codeblock]"
        }
      ],
      "theme_properties": []
    },
    "Sky": {
      "name": "Sky",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_radiance_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_radiance_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "enum": "Sky.RadianceSize",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "RADIANCE_SIZE_32",
          "value": "0",
          "description": ""
        },
        {
          "name": "RADIANCE_SIZE_64",
          "value": "1",
          "description": ""
        },
        {
          "name": "RADIANCE_SIZE_128",
          "value": "2",
          "description": ""
        },
        {
          "name": "RADIANCE_SIZE_256",
          "value": "3",
          "description": ""
        },
        {
          "name": "RADIANCE_SIZE_512",
          "value": "4",
          "description": ""
        },
        {
          "name": "RADIANCE_SIZE_1024",
          "value": "5",
          "description": ""
        },
        {
          "name": "RADIANCE_SIZE_2048",
          "value": "6",
          "description": ""
        },
        {
          "name": "RADIANCE_SIZE_MAX",
          "value": "7",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "radiance_size",
          "type": "int",
          "setter": "set_radiance_size",
          "getter": "get_radiance_size",
          "enum": "Sky.RadianceSize",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Color": {
      "name": "Color",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Color in RGBA format with some support for ARGB format.",
      "description": "A color is represented as red, green and blue (r,g,b) components. Additionally, \"a\" represents the alpha component, often used for transparency. Values are in floating point and usually range from 0 to 1.  Some methods (such as set_modulate(color)) may accept values > 1.",
      "methods": [
        {
          "name": "Color",
          "description": "Constructs a color from an RGBA profile using values between 0 and 1 (float).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 1.0, .7, .8) # a color of an RGBA(51, 255, 178, 204)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "g",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "a",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Color",
          "description": "Constructs a color from an RGB profile using values between 0 and 1 (float). Alpha will always be 1.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 1.0, .7) # a color of an RGBA(51, 255, 178, 255)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "g",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Color",
          "description": "Constructs a color from a 32-bit integer (each byte represents a component of the RGBA profile).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(274) # a color of an RGBA(0, 0, 1, 18)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Color",
          "description": "Constructs a color from an HTML hexadecimal color string in ARGB or RGB format.\n\t\t\t\tThe following string formats are supported:\n\t\t\t\t\t[code]\"#ff00ff00\"[/code] - ARGB format with '#'\n\t\t\t\t\t[code]\"ff00ff00\"[/code] - ARGB format\n\t\t\t\t\t[code]\"#ff00ff\"[/code] - RGB format with '#'\n\t\t\t\t\t[code]\"ff00ff\"[/code] - RGB format\n\t\t\t\t[codeblock]\n\t\t\t\t# The following code creates the same color of an RGBA(178, 217, 10, 255)\n\t\t\t\tvar c1 = Color(\"#ffb2d90a\") # ARGB format with '#'\n\t\t\t\tvar c2 = Color(\"ffb2d90a\")  # ARGB format\n\t\t\t\tvar c3 = Color(\"#b2d90a\")   # RGB format with '#'\n\t\t\t\tvar c4 = Color(\"b2d90a\")    # RGB format\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend",
          "description": "Returns a new color resulting from blending this color over another color. If the color is opaque, the result would also be opaque. The other color could then take a range of values with different alpha values.\n\t\t\t\t[codeblock]\n\t\t\t\tvar bg = Color(0.0, 1.0, 0.0, 0.5) # Green with alpha of 50%\n\t\t\t\tvar fg = Color(1.0, 0.0, 0.0, .5) # Red with alpha of 50%\n\t\t\t\tvar blendedColor = bg.blend(fg) # Brown with alpha of 75%\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "over",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "contrasted",
          "description": "Returns the most contrasting color.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(.3, .4, .9)\n\t\t\t\tvar contrastedColor = c.contrasted() # a color of an RGBA(204, 229, 102, 255)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "gray",
          "description": "Returns the color's grayscale.\n\t\t\t\tThe gray is calculated by (r + g + b) / 3.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 0.45, 0.82)\n\t\t\t\tvar gray = c.gray() # a value of 0.466667\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverted",
          "description": "Returns the inverted color (1-r, 1-g, 1-b, 1-a).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(.3, .4, .9)\n\t\t\t\tvar invertedColor = c.inverted() # a color of an RGBA(178, 153, 26, 255)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "linear_interpolate",
          "description": "Returns the color of the linear interpolation with another color. The value t is between 0 and 1 (float).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c1 = Color(1.0, 0.0, 0.0)\n\t\t\t\tvar c2 = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar li_c = c1.linear_interpolate(c2, 0.5) # a color of an RGBA(128, 128, 0, 255)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_argb32",
          "description": "Returns the color's 32-bit integer in ARGB format (each byte represents a component of the ARGB profile). More compatible with DirectX.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(str(c.to_32())) # prints 4294934323\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_html",
          "description": "Returns the color's HTML hexadecimal color string in ARGB format (ex: [code]ff34f822[/code]).\n\t\t\t\tOptionally flag 'false' to not include alpha in hexadecimal string.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, 1, 1, .5)\n\t\t\t\tvar s1 = c.to_html() # Results \"7fffffff\"\n\t\t\t\tvar s2 = c.to_html(false) # Results 'ffffff'\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with_alpha",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "to_rgba32",
          "description": "Returns the color's 32-bit integer in ARGB format (each byte represents a component of the ARGB profile).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(str(c.to_32())) # prints 4294934323\n\t\t\t\t[/codeblock]\n\n\t\t\t\t[i]This is same as [method to_ARGB32] but may be changed later to support RGBA format instead[/i].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "a",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Alpha (0 to 1)"
        },
        {
          "name": "a8",
          "type": "int",
          "setter": "",
          "getter": "",
          "description": "Alpha (0 to 255)"
        },
        {
          "name": "b",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Blue (0 to 1)"
        },
        {
          "name": "b8",
          "type": "int",
          "setter": "",
          "getter": "",
          "description": "Blue (0 to 255)"
        },
        {
          "name": "g",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Green (0 to 1)"
        },
        {
          "name": "g8",
          "type": "int",
          "setter": "",
          "getter": "",
          "description": "Green (0 to 255)"
        },
        {
          "name": "h",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Hue (0 to 1)"
        },
        {
          "name": "r",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Red (0 to 1)"
        },
        {
          "name": "r8",
          "type": "int",
          "setter": "",
          "getter": "",
          "description": "Red (0 to 255)"
        },
        {
          "name": "s",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Saturation (0 to 1)"
        },
        {
          "name": "v",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Value (0 to 1)"
        }
      ],
      "theme_properties": []
    },
    "CollisionObject": {
      "name": "CollisionObject",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base node for collision objects.",
      "description": "CollisionObject is the base class for physics objects. It can hold any number of collision [Shape]\\ s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.",
      "methods": [
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "click_position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "click_normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_shape_owner",
          "description": "Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_capture_input_on_drag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "Returns the object's [RID].",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_shape_owners",
          "description": "Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_ray_pickable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shape_owner_disabled",
          "qualifiers": "const",
          "description": "If [code]true[/code] the shape owner and its shapes are disabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_shape_owner",
          "description": "Removes the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_capture_input_on_drag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ray_pickable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ray_pickable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_find_owner",
          "qualifiers": "const",
          "description": "Returns the [code]owner_id[/code] of the given shape.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_add_shape",
          "description": "Adds a [Shape] to the shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_clear_shapes",
          "description": "Removes all shapes from the shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_owner",
          "qualifiers": "const",
          "description": "Returns the parent object of the given shape owner.",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape",
          "qualifiers": "const",
          "description": "Returns the [Shape] with the given id from the given shape owner.",
          "return_type": "Shape",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape_count",
          "qualifiers": "const",
          "description": "Returns the number of shapes the given shape owner contains.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_transform",
          "qualifiers": "const",
          "description": "Returns the shape owner's [Transform].",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_remove_shape",
          "description": "Removes a shape from the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_disabled",
          "description": "If [code]true[/code] disables the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_transform",
          "description": "Sets the [Transform] of the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "input_event",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "click_position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "click_normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mouse_entered",
          "description": "Emitted when the mouse pointer enters any of this object's shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_exited",
          "description": "Emitted when the mouse pointer exits all this object's shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "input_capture_on_drag",
          "type": "bool",
          "setter": "set_capture_input_on_drag",
          "getter": "get_capture_input_on_drag",
          "description": ""
        },
        {
          "name": "input_ray_pickable",
          "type": "bool",
          "setter": "set_ray_pickable",
          "getter": "is_ray_pickable",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ParallaxBackground": {
      "name": "ParallaxBackground",
      "inherits": "CanvasLayer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A node used to create a parallax scrolling background.",
      "description": "A ParallaxBackground will use one or more [ParallaxLayer] nodes to create a parallax scrolling background. Each [ParallaxLayer] can be set to move at different speeds relative to the camera movement, this can be used to create an illusion of depth in a 2D game.",
      "methods": [
        {
          "name": "get_limit_begin",
          "qualifiers": "const",
          "description": "Return the beginning limit.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_limit_end",
          "qualifiers": "const",
          "description": "Return the ending limit.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_scroll_base_offset",
          "qualifiers": "const",
          "description": "Return the base offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_scroll_base_scale",
          "qualifiers": "const",
          "description": "Return the base motion scale.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_scroll_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "is_ignore_camera_zoom",
          "description": "Return ignoring camera zoom.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_ignore_camera_zoom",
          "description": "Set to true for all child [ParallaxLayer] nodes to not be affected by the zoom level of the camera.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ignore",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_limit_begin",
          "description": "Set the left and top limits in pixels for scrolling to begin. If the camera is outside of this limit the background will not continue to scroll. If an axis is greater than or equal to the corresponding axis of limit_end, then it will not limit scrolling for that axis.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_limit_end",
          "description": "Set the right and bottom limits in pixels for scrolling to end. If the camera is outside of this limit the background will not continue to scroll. If an axis is less than or equal to the corresponding axis of limit_begin, then it will not limit scrolling for that axis.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_base_offset",
          "description": "Set the base offset in pixels of all children [ParallaxLayer] nodes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_base_scale",
          "description": "Set the base motion scale of all children [ParallaxLayer] nodes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "scroll_base_offset",
          "type": "Vector2",
          "setter": "set_scroll_base_offset",
          "getter": "get_scroll_base_offset",
          "description": ""
        },
        {
          "name": "scroll_base_scale",
          "type": "Vector2",
          "setter": "set_scroll_base_scale",
          "getter": "get_scroll_base_scale",
          "description": ""
        },
        {
          "name": "scroll_ignore_camera_zoom",
          "type": "bool",
          "setter": "set_ignore_camera_zoom",
          "getter": "is_ignore_camera_zoom",
          "description": ""
        },
        {
          "name": "scroll_limit_begin",
          "type": "Vector2",
          "setter": "set_limit_begin",
          "getter": "get_limit_begin",
          "description": ""
        },
        {
          "name": "scroll_limit_end",
          "type": "Vector2",
          "setter": "set_limit_end",
          "getter": "get_limit_end",
          "description": ""
        },
        {
          "name": "scroll_offset",
          "type": "Vector2",
          "setter": "set_scroll_offset",
          "getter": "get_scroll_offset",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "InputEventMouseMotion": {
      "name": "InputEventMouseMotion",
      "inherits": "InputEventMouse",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Input event type for mouse motion events.",
      "description": "",
      "methods": [
        {
          "name": "get_relative",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_speed",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_relative",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "relative",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "relative",
          "type": "Vector2",
          "setter": "set_relative",
          "getter": "get_relative",
          "description": "Position of the mouse pointer relative to the previous mouse position."
        },
        {
          "name": "speed",
          "type": "Vector2",
          "setter": "set_speed",
          "getter": "get_speed",
          "description": "Speed of the mouse pointer."
        }
      ],
      "theme_properties": []
    },
    "ColorPicker": {
      "name": "ColorPicker",
      "inherits": "BoxContainer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Color picker control.",
      "description": "This is a simple color picker [Control]. It's useful for selecting a color from an RGB/RGBA colorspace.",
      "methods": [
        {
          "name": "add_preset",
          "description": "Adds the current selected to color to a list of colors (presets), the presets will be displayed in the color picker and the user will be able to select them, notice that the presets list is only for this color picker.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pick_color",
          "qualifiers": "const",
          "description": "Gets the current color.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "is_editing_alpha",
          "qualifiers": "const",
          "description": "Returns whether the color has transparency or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_raw_mode",
          "qualifiers": "const",
          "description": "Returns whether this color picker is in raw mode or not, raw mode will allow the color R, G, B component values to go beyond 1, you have to consider that the max value for color components is 1, going beyond that value will not have effect in the color, but can be used for special operations that require it (like tinting without darkening or rendering sprites in HDR).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_edit_alpha",
          "description": "Set true if you want the color to have an alpha channel (transparency), or false if you want a solid color.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pick_color",
          "description": "Select the current color.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_raw_mode",
          "description": "Set whether this color picker is using raw mode or not, see [method is_raw_mode].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "color_changed",
          "description": "Emitted when the color is changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "add_preset",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "color_hue",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "color_sample",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "h_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "label_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "preset_bg",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "screen_picker",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "sv_height",
          "type": "int",
          "description": ""
        },
        {
          "name": "sv_width",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Marshalls": {
      "name": "Marshalls",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Data transformation (marshalling) and encoding helpers.",
      "description": "Provides data transformation and encoding utility functions.",
      "methods": [
        {
          "name": "base64_to_raw",
          "description": "Return [PoolByteArray] of a given base64 encoded String.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base64_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "base64_to_utf8",
          "description": "Return utf8 String of a given base64 encoded String.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base64_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "base64_to_variant",
          "description": "Return [Variant] of a given base64 encoded String.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base64_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "raw_to_base64",
          "description": "Return base64 encoded String of a given [PoolByteArray].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "utf8_to_base64",
          "description": "Return base64 encoded String of a given utf8 String.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "utf8_str",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "variant_to_base64",
          "description": "Return base64 encoded String of a given [Variant].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "variant",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VideoStream": {
      "name": "VideoStream",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventJoypadMotion": {
      "name": "InputEventJoypadMotion",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Input event type for joypad motion/axis events.",
      "description": "",
      "methods": [
        {
          "name": "get_axis",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_axis_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_axis",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_axis_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis_value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "axis",
          "type": "int",
          "setter": "set_axis",
          "getter": "get_axis",
          "description": "Joypad axis identifier, one of the JOY_AXIS_* constants in [@Global Scope]."
        },
        {
          "name": "axis_value",
          "type": "float",
          "setter": "set_axis_value",
          "getter": "get_axis_value",
          "description": "Position of the axis, ranging from -1.0 to 1.0. A value of 0 means that the axis is in its neutral position."
        }
      ],
      "theme_properties": []
    },
    "PhysicsServerSW": {
      "name": "PhysicsServerSW",
      "inherits": "PhysicsServer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectNotchFilter": {
      "name": "AudioEffectNotchFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GIProbeData": {
      "name": "GIProbeData",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_bias",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_bounds",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect3",
          "arguments": []
        },
        {
          "name": "get_cell_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_dynamic_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": []
        },
        {
          "name": "get_dynamic_range",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_normal_bias",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_propagation",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_to_cell_xform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "is_compressed",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_interior",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_bias",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bias",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bounds",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounds",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cell_size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_compress",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "compress",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dynamic_data",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dynamic_data",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dynamic_range",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dynamic_range",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_energy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_interior",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "interior",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal_bias",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bias",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_propagation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "propagation",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_to_cell_xform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_cell_xform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bias",
          "type": "float",
          "setter": "set_bias",
          "getter": "get_bias",
          "description": ""
        },
        {
          "name": "bounds",
          "type": "Rect3",
          "setter": "set_bounds",
          "getter": "get_bounds",
          "description": ""
        },
        {
          "name": "cell_size",
          "type": "float",
          "setter": "set_cell_size",
          "getter": "get_cell_size",
          "description": ""
        },
        {
          "name": "compress",
          "type": "bool",
          "setter": "set_compress",
          "getter": "is_compressed",
          "description": ""
        },
        {
          "name": "dynamic_data",
          "type": "PoolIntArray",
          "setter": "set_dynamic_data",
          "getter": "get_dynamic_data",
          "description": ""
        },
        {
          "name": "dynamic_range",
          "type": "int",
          "setter": "set_dynamic_range",
          "getter": "get_dynamic_range",
          "description": ""
        },
        {
          "name": "energy",
          "type": "float",
          "setter": "set_energy",
          "getter": "get_energy",
          "description": ""
        },
        {
          "name": "interior",
          "type": "bool",
          "setter": "set_interior",
          "getter": "is_interior",
          "description": ""
        },
        {
          "name": "normal_bias",
          "type": "float",
          "setter": "set_normal_bias",
          "getter": "get_normal_bias",
          "description": ""
        },
        {
          "name": "propagation",
          "type": "float",
          "setter": "set_propagation",
          "getter": "get_propagation",
          "description": ""
        },
        {
          "name": "to_cell_xform",
          "type": "Transform",
          "setter": "set_to_cell_xform",
          "getter": "get_to_cell_xform",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Navigation": {
      "name": "Navigation",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_closest_point",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_normal",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_owner",
          "description": "",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_closest_point_to_segment",
          "description": "",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "use_collision",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_simple_path",
          "description": "",
          "return_type": "PoolVector3Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "start",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "optimize",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_up_vector",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "navmesh_create",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "NavigationMesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "owner",
              "type": "Object",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "navmesh_remove",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "navmesh_set_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_up_vector",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "up",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "up_vector",
          "type": "Vector3",
          "setter": "set_up_vector",
          "getter": "get_up_vector",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "GraphNode": {
      "name": "GraphNode",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A GraphNode is a container with several input and output slots allowing connections between GraphNodes. Slots can have different, incompatible types.",
      "description": "A GraphNode is a container defined by a title. It can have 1 or more input and output slots, which can be enabled (shown) or disabled (not shown) and have different (incompatible) types. Colors can also be assigned to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input and output connections are left and right slots, but only enabled slots are counted as connections.",
      "methods": [
        {
          "name": "clear_all_slots",
          "description": "Disable all input and output slots of the GraphNode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_slot",
          "description": "Disable input and output slot whose index is 'idx'.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_input_color",
          "description": "Return the color of the input connection 'idx'.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_input_count",
          "description": "Return the number of enabled input slots (connections) to the GraphNode.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connection_input_position",
          "description": "Return the position of the input connection 'idx'.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_input_type",
          "description": "Return the type of the input connection 'idx'.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_output_color",
          "description": "Return the color of the output connection 'idx'.",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_output_count",
          "description": "Return the number of enabled output slots (connections) of the GraphNode.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connection_output_position",
          "description": "Return the position of the output connection 'idx'.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_output_type",
          "description": "Return the type of the output connection 'idx'.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the offset of the GraphNode.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_overlay",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_slot_color_left",
          "qualifiers": "const",
          "description": "Return the color set to 'idx' left (input) slot.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_color_right",
          "qualifiers": "const",
          "description": "Return the color set to 'idx' right (output) slot.",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_type_left",
          "qualifiers": "const",
          "description": "Return the (integer) type of left (input) 'idx' slot.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slot_type_right",
          "qualifiers": "const",
          "description": "Return the (integer) type of right (output) 'idx' slot.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_title",
          "qualifiers": "const",
          "description": "Return the title of the GraphNode.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_close_button_visible",
          "qualifiers": "const",
          "description": "Returns true if the close button is shown. False otherwise.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_comment",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_resizable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_selected",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_slot_enabled_left",
          "qualifiers": "const",
          "description": "Return true if left (input) slot 'idx' is enabled. False otherwise.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_slot_enabled_right",
          "qualifiers": "const",
          "description": "Return true if right (output) slot 'idx' is enabled. False otherwise.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_comment",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "comment",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the offset of the GraphNode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_overlay",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "overlay",
              "type": "int",
              "enum": "GraphNode.Overlay",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_resizable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resizable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_selected",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "selected",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_show_close_button",
          "description": "Show the close button on the GraphNode if 'show' is true (disabled by default). If enabled, a connection on the signal close_request is needed for the close button to work.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_slot",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable_left",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "type_left",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "color_left",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "enable_right",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "type_right",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "color_right",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "custom_left",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "8",
              "name": "custom_right",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "set_title",
          "description": "Set the title of the GraphNode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "close_request",
          "description": "Signal sent on closing the GraphNode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "dragged",
          "description": "Signal sent when the GraphNode is dragged.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "offset_changed",
          "description": "Signal sent when the GraphNode is moved.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "raise_request",
          "description": "Signal sent when the GraphNode is requested to be displayed over other ones. Happens on focusing (clicking into) the GraphNode.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resize_request",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "new_minsize",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "OVERLAY_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "OVERLAY_BREAKPOINT",
          "value": "1",
          "description": ""
        },
        {
          "name": "OVERLAY_POSITION",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "resizable",
          "type": "bool",
          "setter": "set_resizable",
          "getter": "is_resizable",
          "description": ""
        },
        {
          "name": "show_close",
          "type": "bool",
          "setter": "set_show_close_button",
          "getter": "is_close_button_visible",
          "description": ""
        },
        {
          "name": "title",
          "type": "String",
          "setter": "set_title",
          "getter": "get_title",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "breakpoint",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "close",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "close_offset",
          "type": "int",
          "description": ""
        },
        {
          "name": "comment",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "commentfocus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "defaultfocus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "defaultframe",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "frame",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "port",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "port_offset",
          "type": "int",
          "description": ""
        },
        {
          "name": "position",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "resizer",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "selectedframe",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "title_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "title_offset",
          "type": "int",
          "description": ""
        }
      ]
    },
    "CollisionPolygon2D": {
      "name": "CollisionPolygon2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Defines a 2D collision polygon.",
      "description": "Provides a 2D collision polygon to a [CollisionObject2D] parent. Polygon can be drawn in the editor or specified by a list of vertices.",
      "methods": [
        {
          "name": "get_build_mode",
          "qualifiers": "const",
          "description": "Return whether the polygon is a [ConvexPolygonShape2D] ([code]build_mode==0[/code]), or a [ConcavePolygonShape2D] ([code]build_mode==1[/code]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "qualifiers": "const",
          "description": "Return the list of points that define the polygon.",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "is_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_one_way_collision_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_build_mode",
          "description": "Set whether the polygon is to be a [ConvexPolygonShape2D] ([code]build_mode==0[/code]), or a [ConcavePolygonShape2D] ([code]build_mode==1[/code]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "build_mode",
              "type": "int",
              "enum": "CollisionPolygon2D.BuildMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_one_way_collision",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_polygon",
          "description": "Set the array of points forming the polygon.\n\t\t\t\tWhen editing the point list via the editor, depending on [method get_build_mode], it has to be a list of points (for [code]build_mode==0[/code]), or a list of lines (for [code]build_mode==1[/code]). In the second case, the even elements of the array define the start point of the line, and the odd elements the end point.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "BUILD_SOLIDS",
          "value": "0",
          "description": "Collisions will include the polygon and its contained area."
        },
        {
          "name": "BUILD_SEGMENTS",
          "value": "1",
          "description": "Collisions will only include the polygon edges."
        }
      ],
      "properties": [
        {
          "name": "build_mode",
          "type": "int",
          "setter": "set_build_mode",
          "getter": "get_build_mode",
          "enum": "CollisionPolygon2D.BuildMode",
          "description": "Collision build mode. Use one of the [code]BUILD_*[/code] constants. Default value: [code]BUILD_SOLIDS[/code]."
        },
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": "If [code]true[/code] no collisions will be detected."
        },
        {
          "name": "one_way_collision",
          "type": "bool",
          "setter": "set_one_way_collision",
          "getter": "is_one_way_collision_enabled",
          "description": "If [code]true[/code] only edges that face up, relative to CollisionPolygon2D's rotation, will collide with other objects."
        },
        {
          "name": "polygon",
          "type": "PoolVector2Array",
          "setter": "set_polygon",
          "getter": "get_polygon",
          "description": "The polygon's list of vertices. The final point will be connected to the first."
        }
      ],
      "theme_properties": []
    },
    "CurveTexture": {
      "name": "CurveTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_curve",
          "qualifiers": "const",
          "description": "",
          "return_type": "Curve",
          "arguments": []
        },
        {
          "name": "set_curve",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "Curve",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_width",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "curve",
          "type": "Curve",
          "setter": "set_curve",
          "getter": "get_curve",
          "description": ""
        },
        {
          "name": "width",
          "type": "int",
          "setter": "set_width",
          "getter": "get_width",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "StyleBoxFlat": {
      "name": "StyleBoxFlat",
      "inherits": "StyleBox",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Customizable Stylebox with a given set of parameters. (no texture required)",
      "description": "This stylebox can be used to achieve all kinds of looks without the need of a texture. Those properties are customizable:\n\t\t - Color\n\t\t - Border width (individual width for each border)\n\t\t - Rounded corners (individual radius for each corner)\n\t\t - Shadow\n\t\t About corner radius:\n\t\t \tSetting corner radius to high values is allowed. As soon as corners would overlap the stylebox will switch to a relative system. Example:\n\t\t\t[codeblock]\n\t\t\theight = 30\n\t\t\tcorner_radius_top_left = 50\n\t\t\tcorner_radius_bottom_left = 100\n\t\t\t[/codeblock]\n\t\t\tThe relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will [b]never[/b] be more than the height. Result:\n\t\t\t[codeblock]\n\t\t\tcorner_radius_top_left: 10\n\t\t\tcorner_radius_bottom_left: 20\n\t\t\t[/codeblock]",
      "methods": [
        {
          "name": "get_aa_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bg_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_border_blend",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_border_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_border_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_border_width_min",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_corner_detail",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_corner_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "corner",
              "type": "int",
              "enum": "Corner",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_expand_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_shadow_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_shadow_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_anti_aliased",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_draw_center_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_aa_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_anti_aliased",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anti_aliased",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bg_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_border_blend",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "blend",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_border_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_border_width",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_border_width_all",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_corner_detail",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "detail",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_corner_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "corner",
              "type": "int",
              "enum": "Corner",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radius",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_corner_radius_all",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_corner_radius_individual",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius_top_left",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radius_top_right",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "radius_botton_right",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "radius_bottom_left",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_center",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "draw_center",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_all",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand_margin_individual",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size_left",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size_top",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "size_right",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "size_bottom",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "anti_aliasing",
          "type": "bool",
          "setter": "set_anti_aliased",
          "getter": "is_anti_aliased",
          "description": "Anti Aliasing draws a small ring around edges. This ring fades to transparent. As a result edges look much smoother. This is only noticeable when using rounded corners."
        },
        {
          "name": "anti_aliasing_size",
          "type": "int",
          "setter": "set_aa_size",
          "getter": "get_aa_size",
          "description": "This changes the size of the faded ring. Higher values can be used to achieve a \"blurry\" effect."
        },
        {
          "name": "bg_color",
          "type": "Color",
          "setter": "set_bg_color",
          "getter": "get_bg_color",
          "description": "The background color of the stylebox."
        },
        {
          "name": "border_blend",
          "type": "bool",
          "setter": "set_border_blend",
          "getter": "get_border_blend",
          "description": "When set to true, the border will fade into the background color."
        },
        {
          "name": "border_color",
          "type": "Color",
          "setter": "set_border_color",
          "getter": "get_border_color",
          "description": "Sets the color of the border."
        },
        {
          "name": "border_width_bottom",
          "type": "int",
          "setter": "set_border_width",
          "getter": "get_border_width",
          "description": "Border width for the bottom border."
        },
        {
          "name": "border_width_left",
          "type": "int",
          "setter": "set_border_width",
          "getter": "get_border_width",
          "description": "Border width for the left border."
        },
        {
          "name": "border_width_right",
          "type": "int",
          "setter": "set_border_width",
          "getter": "get_border_width",
          "description": "Border width for the right border."
        },
        {
          "name": "border_width_top",
          "type": "int",
          "setter": "set_border_width",
          "getter": "get_border_width",
          "description": "Border width for the top border."
        },
        {
          "name": "corner_detail",
          "type": "int",
          "setter": "set_corner_detail",
          "getter": "get_corner_detail",
          "description": "This sets the amount of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value you should take the corner radius ([method set_corner_radius]) into account.\n\t\t\tFor corner radius smaller than 10: 4-5 should be enough\n\t\t\tFor corner radius smaller than 30: 8-12 should be enough ..."
        },
        {
          "name": "corner_radius_bottom_left",
          "type": "int",
          "setter": "set_corner_radius",
          "getter": "get_corner_radius",
          "description": "The corner radius of the bottom left corner. When set to 0 the corner is not rounded."
        },
        {
          "name": "corner_radius_bottom_right",
          "type": "int",
          "setter": "set_corner_radius",
          "getter": "get_corner_radius",
          "description": "The corner radius of the bottom right corner. When set to 0 the corner is not rounded."
        },
        {
          "name": "corner_radius_top_left",
          "type": "int",
          "setter": "set_corner_radius",
          "getter": "get_corner_radius",
          "description": "The corner radius of the top left corner. When set to 0 the corner is not rounded."
        },
        {
          "name": "corner_radius_top_right",
          "type": "int",
          "setter": "set_corner_radius",
          "getter": "get_corner_radius",
          "description": "The corner radius of the top right corner. When set to 0 the corner is not rounded."
        },
        {
          "name": "draw_center",
          "type": "bool",
          "setter": "set_draw_center",
          "getter": "is_draw_center_enabled",
          "description": "Toggels drawing of the inner part of the stylebox."
        },
        {
          "name": "expand_margin_bottom",
          "type": "float",
          "setter": "set_expand_margin",
          "getter": "get_expand_margin",
          "description": "Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with border_width_bottom. To draw a border outside the control rect."
        },
        {
          "name": "expand_margin_left",
          "type": "float",
          "setter": "set_expand_margin",
          "getter": "get_expand_margin",
          "description": "Expands the stylebox outside of the control rect on the left edge. Useful in combination with border_width_left. To draw a border outside the control rect."
        },
        {
          "name": "expand_margin_right",
          "type": "float",
          "setter": "set_expand_margin",
          "getter": "get_expand_margin",
          "description": "Expands the stylebox outside of the control rect on the right edge. Useful in combination with border_width_right. To draw a border outside the control rect."
        },
        {
          "name": "expand_margin_top",
          "type": "float",
          "setter": "set_expand_margin",
          "getter": "get_expand_margin",
          "description": "Expands the stylebox outside of the control rect on the top edge. Useful in combination with border_width_top. To draw a border outside the control rect."
        },
        {
          "name": "shadow_color",
          "type": "Color",
          "setter": "set_shadow_color",
          "getter": "get_shadow_color",
          "description": "The color of the shadow. (This has no effect when shadow_size < 1)"
        },
        {
          "name": "shadow_size",
          "type": "int",
          "setter": "set_shadow_size",
          "getter": "get_shadow_size",
          "description": "The shadow size in pixels."
        }
      ],
      "theme_properties": []
    },
    "PhysicsServer": {
      "name": "PhysicsServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "area_add_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )"
            }
          ]
        },
        {
          "name": "area_attach_object_instance_id",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_clear_shapes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "area_get_object_instance_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.AreaParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space_override_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_is_ray_pickable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_remove_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_layer",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_monitor_callback",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.AreaParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_ray_pickable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space_override_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "PhysicsServer.AreaSpaceOverrideMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_collision_exception",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )"
            }
          ]
        },
        {
          "name": "body_apply_impulse",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "impulse",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_apply_torque_impulse",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "impulse",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_attach_object_instance_id",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_clear_shapes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "PhysicsServer.BodyMode",
              "default_value": "2"
            },
            {
              "index": "1",
              "name": "init_sleeping",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "body_get_axis_lock",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_collision_layer",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_collision_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_direct_state",
          "description": "",
          "return_type": "PhysicsDirectBodyState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_max_contacts_reported",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_object_instance_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.BodyParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_space",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_state",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "enum": "PhysicsServer.BodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_continuous_collision_detection_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_omitting_force_integration",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_ray_pickable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_collision_exception",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_axis_lock",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "PhysicsServer.BodyAxisLock",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_axis_velocity",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis_velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_layer",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_enable_continuous_collision_detection",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_force_integration_callback",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "body_set_max_contacts_reported",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "PhysicsServer.BodyMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_omit_force_integration",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.BodyParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_ray_pickable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_space",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_state",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "enum": "PhysicsServer.BodyState",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cone_twist_joint_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.ConeTwistJointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cone_twist_joint_set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.ConeTwistJointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "free_rid",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_get_flag",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flag",
              "type": "int",
              "enum": "PhysicsServer.G6DOFJointAxisFlag",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_get_param",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.G6DOFJointAxisParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_set_flag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flag",
              "type": "int",
              "enum": "PhysicsServer.G6DOFJointAxisFlag",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generic_6dof_joint_set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.G6DOFJointAxisParam",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_process_info",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "process_info",
              "type": "int",
              "enum": "PhysicsServer.ProcessInfo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_get_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flag",
              "type": "int",
              "enum": "PhysicsServer.HingeJointFlag",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.HingeJointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_set_flag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flag",
              "type": "int",
              "enum": "PhysicsServer.HingeJointFlag",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hinge_joint_set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.HingeJointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_cone_twist",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ref_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_ref_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_generic_6dof",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ref_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_ref_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_hinge",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "hinge_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "hinge_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_pin",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_A",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_B",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_create_slider",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_A",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_ref_A",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_B",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "local_ref_B",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_solver_priority",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_set_solver_priority",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "priority",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_get_local_a",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_get_local_b",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.PinJointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_set_local_a",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_A",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_set_local_b",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "local_B",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.PinJointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_active",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "PhysicsServer.ShapeType",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_set_data",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slider_joint_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.SliderJointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slider_joint_set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.SliderJointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "space_get_direct_state",
          "description": "",
          "return_type": "PhysicsDirectSpaceState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.SpaceParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_is_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_active",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "PhysicsServer.SpaceParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "JOINT_PIN",
          "value": "0",
          "description": ""
        },
        {
          "name": "JOINT_HINGE",
          "value": "1",
          "description": ""
        },
        {
          "name": "JOINT_SLIDER",
          "value": "2",
          "description": ""
        },
        {
          "name": "JOINT_CONE_TWIST",
          "value": "3",
          "description": ""
        },
        {
          "name": "JOINT_6DOF",
          "value": "4",
          "description": ""
        },
        {
          "name": "PIN_JOINT_BIAS",
          "value": "0",
          "description": ""
        },
        {
          "name": "PIN_JOINT_DAMPING",
          "value": "1",
          "description": ""
        },
        {
          "name": "PIN_JOINT_IMPULSE_CLAMP",
          "value": "2",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_BIAS",
          "value": "0",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_UPPER",
          "value": "1",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_LOWER",
          "value": "2",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_BIAS",
          "value": "3",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_SOFTNESS",
          "value": "4",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_LIMIT_RELAXATION",
          "value": "5",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_MOTOR_TARGET_VELOCITY",
          "value": "6",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_MOTOR_MAX_IMPULSE",
          "value": "7",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_FLAG_USE_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "HINGE_JOINT_FLAG_ENABLE_MOTOR",
          "value": "1",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_UPPER",
          "value": "0",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_LOWER",
          "value": "1",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION",
          "value": "3",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_LIMIT_DAMPING",
          "value": "4",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_MOTION_SOFTNESS",
          "value": "5",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_MOTION_RESTITUTION",
          "value": "6",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_MOTION_DAMPING",
          "value": "7",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS",
          "value": "8",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION",
          "value": "9",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING",
          "value": "10",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_UPPER",
          "value": "11",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_LOWER",
          "value": "12",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS",
          "value": "13",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION",
          "value": "14",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_LIMIT_DAMPING",
          "value": "15",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS",
          "value": "16",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION",
          "value": "17",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_MOTION_DAMPING",
          "value": "18",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS",
          "value": "19",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION",
          "value": "20",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING",
          "value": "21",
          "description": ""
        },
        {
          "name": "SLIDER_JOINT_MAX",
          "value": "22",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_SWING_SPAN",
          "value": "0",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_TWIST_SPAN",
          "value": "1",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_BIAS",
          "value": "2",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_SOFTNESS",
          "value": "3",
          "description": ""
        },
        {
          "name": "CONE_TWIST_JOINT_RELAXATION",
          "value": "4",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_LOWER_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_UPPER_LIMIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_RESTITUTION",
          "value": "3",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_LINEAR_DAMPING",
          "value": "4",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_LOWER_LIMIT",
          "value": "5",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_UPPER_LIMIT",
          "value": "6",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS",
          "value": "7",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_DAMPING",
          "value": "8",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_RESTITUTION",
          "value": "9",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_FORCE_LIMIT",
          "value": "10",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_ERP",
          "value": "11",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY",
          "value": "12",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT",
          "value": "13",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "G6DOF_JOINT_FLAG_ENABLE_MOTOR",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHAPE_PLANE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHAPE_RAY",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHAPE_SPHERE",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHAPE_BOX",
          "value": "3",
          "description": ""
        },
        {
          "name": "SHAPE_CAPSULE",
          "value": "4",
          "description": ""
        },
        {
          "name": "SHAPE_CONVEX_POLYGON",
          "value": "5",
          "description": ""
        },
        {
          "name": "SHAPE_CONCAVE_POLYGON",
          "value": "6",
          "description": ""
        },
        {
          "name": "SHAPE_HEIGHTMAP",
          "value": "7",
          "description": ""
        },
        {
          "name": "SHAPE_CUSTOM",
          "value": "8",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY",
          "value": "0",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY_VECTOR",
          "value": "1",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY_IS_POINT",
          "value": "2",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE",
          "value": "3",
          "description": ""
        },
        {
          "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION",
          "value": "4",
          "description": ""
        },
        {
          "name": "AREA_PARAM_LINEAR_DAMP",
          "value": "5",
          "description": ""
        },
        {
          "name": "AREA_PARAM_ANGULAR_DAMP",
          "value": "6",
          "description": ""
        },
        {
          "name": "AREA_PARAM_PRIORITY",
          "value": "7",
          "description": ""
        },
        {
          "name": "AREA_SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "description": "This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "description": "This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "description": "This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one."
        },
        {
          "name": "BODY_MODE_STATIC",
          "value": "0",
          "description": ""
        },
        {
          "name": "BODY_MODE_KINEMATIC",
          "value": "1",
          "description": ""
        },
        {
          "name": "BODY_MODE_RIGID",
          "value": "2",
          "description": ""
        },
        {
          "name": "BODY_MODE_CHARACTER",
          "value": "3",
          "description": ""
        },
        {
          "name": "BODY_PARAM_BOUNCE",
          "value": "0",
          "description": ""
        },
        {
          "name": "BODY_PARAM_FRICTION",
          "value": "1",
          "description": ""
        },
        {
          "name": "BODY_PARAM_MASS",
          "value": "2",
          "description": ""
        },
        {
          "name": "BODY_PARAM_GRAVITY_SCALE",
          "value": "3",
          "description": ""
        },
        {
          "name": "BODY_PARAM_ANGULAR_DAMP",
          "value": "5",
          "description": ""
        },
        {
          "name": "BODY_PARAM_LINEAR_DAMP",
          "value": "4",
          "description": ""
        },
        {
          "name": "BODY_PARAM_MAX",
          "value": "6",
          "description": ""
        },
        {
          "name": "BODY_STATE_TRANSFORM",
          "value": "0",
          "description": ""
        },
        {
          "name": "BODY_STATE_LINEAR_VELOCITY",
          "value": "1",
          "description": ""
        },
        {
          "name": "BODY_STATE_ANGULAR_VELOCITY",
          "value": "2",
          "description": ""
        },
        {
          "name": "BODY_STATE_SLEEPING",
          "value": "3",
          "description": ""
        },
        {
          "name": "BODY_STATE_CAN_SLEEP",
          "value": "4",
          "description": ""
        },
        {
          "name": "AREA_BODY_ADDED",
          "value": "0",
          "description": ""
        },
        {
          "name": "AREA_BODY_REMOVED",
          "value": "1",
          "description": ""
        },
        {
          "name": "INFO_ACTIVE_OBJECTS",
          "value": "0",
          "description": ""
        },
        {
          "name": "INFO_COLLISION_PAIRS",
          "value": "1",
          "description": ""
        },
        {
          "name": "INFO_ISLAND_COUNT",
          "value": "2",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_CONTACT_RECYCLE_RADIUS",
          "value": "0",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_CONTACT_MAX_SEPARATION",
          "value": "1",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION",
          "value": "2",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD",
          "value": "3",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD",
          "value": "4",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_BODY_TIME_TO_SLEEP",
          "value": "5",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO",
          "value": "6",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS",
          "value": "7",
          "description": ""
        },
        {
          "name": "BODY_AXIS_LOCK_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "BODY_AXIS_LOCK_X",
          "value": "1",
          "description": ""
        },
        {
          "name": "BODY_AXIS_LOCK_Y",
          "value": "2",
          "description": ""
        },
        {
          "name": "BODY_AXIS_LOCK_Z",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DDirectSpaceState": {
      "name": "Physics2DDirectSpaceState",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Direct access object to a space in the [Physics2DServer].",
      "description": "Direct access object to a space in the [Physics2DServer]. It's used mainly to do queries against objects and areas residing in a given space.",
      "methods": [
        {
          "name": "cast_motion",
          "description": "Check whether the shape can travel to a point. If it can, the method will return an array with two floats: The first is the distance the shape can move in that direction without colliding, and the second is the distance at which it will collide.\n\tIf the shape can not move, the array will be empty.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_shape",
          "description": "Check the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        },
        {
          "name": "get_rest_info",
          "description": "Check the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. If it collides with more than a shape, the nearest one is selected. The returned object is a dictionary containing the following fields:\n\t\t\t\tpointo: Place where the shapes intersect.\n\t\t\t\tnormal: Normal of the object at the point where the shapes intersect.\n\t\t\t\tshape: Shape index within the object against which the shape intersected.\n\t\t\t\tmetadata: Metadata of the shape against which the shape intersected. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\tcollider_id: Id of the object against which the shape intersected.\n\t\t\t\tcollider: Object against which the shape intersected.\n\t\t\t\trid: [RID] of the object against which the shape intersected.\n\t\t\t\tlinear_velocity: The movement vector of the object the shape intersected, if it was a body. If it was an area, it is (0,0).\n\t\t\t\tIf the shape did not intersect anything, then an empty dictionary (dir.empty()==true) is returned instead.",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersect_point",
          "description": "Check whether a point is inside any shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:\n\t\t\t\tshape: Shape index within the object the point is in.\n\t\t\t\tmetadata: Metadata of the shape the point is in. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\tcollider_id: Id of the object the point is in.\n\t\t\t\tcollider: Object the point is inside of.\n\t\t\t\trid: [RID] of the object the point is in.\n\t\t\t\tAdditionally, the method can take an array of objects or [RID]\\ s that are to be excluded from collisions, a bitmask representing the physics layers to check in, and another bitmask for the types of objects to check (see TYPE_MASK_* constants).",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            },
            {
              "index": "2",
              "name": "exclude",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "3",
              "name": "collision_layer",
              "type": "int",
              "default_value": "2147483647"
            },
            {
              "index": "4",
              "name": "type_mask",
              "type": "int",
              "default_value": "15"
            }
          ]
        },
        {
          "name": "intersect_ray",
          "description": "Intersect a ray in a given space. The returned object is a dictionary with the following fields:\n\t\t\t\tposition: Place where ray is stopped.\n\t\t\t\tnormal: Normal of the object at the point where the ray was stopped.\n\t\t\t\tshape: Shape index within the object against which the ray was stopped.\n\t\t\t\tmetadata: Metadata of the shape against which the ray was stopped. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\tcollider_id: Id of the object against which the ray was stopped.\n\t\t\t\tcollider: Object against which the ray was stopped.\n\t\t\t\trid: [RID] of the object against which the ray was stopped.\n\t\t\t\tIf the ray did not intersect anything, then an empty dictionary (dir.empty()==true) is returned instead.\n\t\t\t\tAdditionally, the method can take an array of objects or [RID]\\ s that are to be excluded from collisions, a bitmask representing the physics layers to check in, and another bitmask for the types of objects to check (see TYPE_MASK_* constants).",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "exclude",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "3",
              "name": "collision_layer",
              "type": "int",
              "default_value": "2147483647"
            },
            {
              "index": "4",
              "name": "type_mask",
              "type": "int",
              "default_value": "15"
            }
          ]
        },
        {
          "name": "intersect_shape",
          "description": "Check the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:\n\t\t\t\tshape: Shape index within the object the shape intersected.\n\t\t\t\tmetadata: Metadata of the shape intersected by the shape given through the [Physics2DShapeQueryParameters]. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\tcollider_id: Id of the object the shape intersected.\n\t\t\t\tcollider: Object the shape intersected.\n\t\t\t\trid: [RID] of the object the shape intersected.\n\t\t\t\tThe number of intersections can be limited with the second parameter, to reduce the processing time.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TYPE_MASK_STATIC_BODY",
          "value": "1",
          "description": "Check for collisions with static bodies."
        },
        {
          "name": "TYPE_MASK_KINEMATIC_BODY",
          "value": "2",
          "description": "Check for collisions with kinematic bodies."
        },
        {
          "name": "TYPE_MASK_RIGID_BODY",
          "value": "4",
          "description": "Check for collisions with rigid bodies."
        },
        {
          "name": "TYPE_MASK_CHARACTER_BODY",
          "value": "8",
          "description": "Check for collisions with rigid bodies in character mode."
        },
        {
          "name": "TYPE_MASK_AREA",
          "value": "16",
          "description": "Check for collisions with areas."
        },
        {
          "name": "TYPE_MASK_COLLISION",
          "value": "15",
          "description": "Check for collisions with any kind of bodies (but not areas)."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "StaticBody": {
      "name": "StaticBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Static body for 3D Physics.",
      "description": "Static body for 3D Physics. A static body is a simple body that is not intended to move. They don't consume any CPU resources in contrast to a [RigidBody3D] so they are great for scenario collision.\n\t\tA static body can also be animated by using simulated motion mode. This is useful for implementing functionalities such as moving platforms. When this mode is active the body can be animated and automatically computes linear and angular velocity to apply in that frame and to influence other bodies.\n\t\tAlternatively, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).",
      "methods": [
        {
          "name": "get_bounce",
          "qualifiers": "const",
          "description": "Return the body bounciness.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_constant_angular_velocity",
          "qualifiers": "const",
          "description": "Return the constant angular velocity for the body.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_constant_linear_velocity",
          "qualifiers": "const",
          "description": "Return the constant linear velocity for the body.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "Return the body friction.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_bounce",
          "description": "Set the body bounciness, from 0 (not bouncy) to 1 (bouncy).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounce",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant_angular_velocity",
          "description": "Set a constant angular velocity for the body. This does not rotate the body, but affects other bodies touching it, as if it was rotating.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vel",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant_linear_velocity",
          "description": "Set a constant linear velocity for the body. This does not move the body, but affects other bodies touching it, as if it was moving.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vel",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "Set the body friction, from 0 (frictionless) to 1 (full friction).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bounce",
          "type": "float",
          "setter": "set_bounce",
          "getter": "get_bounce",
          "description": "The body bounciness."
        },
        {
          "name": "constant_angular_velocity",
          "type": "Vector3",
          "setter": "set_constant_angular_velocity",
          "getter": "get_constant_angular_velocity",
          "description": "The constant angular velocity for the body. This does not rotate the body, but affects other bodies that touch it, as if it was in a state of rotation."
        },
        {
          "name": "constant_linear_velocity",
          "type": "Vector3",
          "setter": "set_constant_linear_velocity",
          "getter": "get_constant_linear_velocity",
          "description": "The constant linear velocity for the body. This does not move the body, but affects other bodies that touch it, as if it was in a state of movement."
        },
        {
          "name": "friction",
          "type": "float",
          "setter": "set_friction",
          "getter": "get_friction",
          "description": "The body friction, from 0 (frictionless) to 1 (full friction)."
        }
      ],
      "theme_properties": []
    },
    "StreamPeerSSL": {
      "name": "StreamPeerSSL",
      "inherits": "StreamPeer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "SSL Stream peer.",
      "description": "SSL Stream peer. This object can be used to connect to SSL servers.",
      "methods": [
        {
          "name": "accept_stream",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "StreamPeer",
              "default_value": ""
            }
          ]
        },
        {
          "name": "connect_to_stream",
          "description": "Connect to a peer using an underlying [StreamPeer] \"stream\", when \"validate_certs\" is true, [StreamPeerSSL] will validate that the certificate presented by the peer matches the \"for_hostname\".",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "StreamPeer",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "validate_certs",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "for_hostname",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "disconnect_from_stream",
          "description": "Disconnect from host.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_status",
          "qualifiers": "const",
          "description": "Return the status of the connection, one of STATUS_* enum.",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STATUS_DISCONNECTED",
          "value": "0",
          "description": "A status representing a [StreamPeerSSL] that is disconnected."
        },
        {
          "name": "STATUS_CONNECTED",
          "value": "1",
          "description": "A status representing a [StreamPeerSSL] that is connected to a host."
        },
        {
          "name": "STATUS_ERROR_NO_CERTIFICATE",
          "value": "2",
          "description": "An errot status that shows the peer did not present a SSL certificate and validation was requested."
        },
        {
          "name": "STATUS_ERROR_HOSTNAME_MISMATCH",
          "value": "3",
          "description": "An error status that shows a mismatch in the SSL certificate domain presented by the host and the domain requested for validation."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ResourceInteractiveLoader": {
      "name": "ResourceInteractiveLoader",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Interactive Resource Loader.",
      "description": "Interactive Resource Loader. This object is returned by ResourceLoader when performing an interactive load. It allows to load with high granularity, so this is mainly useful for displaying load bars/percentages.",
      "methods": [
        {
          "name": "get_resource",
          "description": "Return the loaded resource (only if loaded). Otherwise, returns null.",
          "return_type": "Resource",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_stage",
          "qualifiers": "const",
          "description": "Return the load stage. The total amount of stages can be queried with [method get_stage_count]",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_stage_count",
          "qualifiers": "const",
          "description": "Return the total amount of stages (calls to [method poll]) needed to completely load this resource.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "poll",
          "description": "Poll the load. If OK is returned, this means poll will have to be called again. If ERR_FILE_EOF is returned, them the load has finished and the resource can be obtained by calling [method get_resource].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "wait",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MeshLibrary": {
      "name": "MeshLibrary",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Library of meshes.",
      "description": "Library of meshes. Contains a list of [Mesh] resources, each with name and ID. Useful for GridMap or painting Terrain.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear the library.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_item",
          "description": "Create a new item in the library, supplied an id.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_item_by_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_list",
          "qualifiers": "const",
          "description": "Return the list of items.",
          "return_type": "PoolIntArray",
          "arguments": []
        },
        {
          "name": "get_item_mesh",
          "qualifiers": "const",
          "description": "Return the mesh of the item.",
          "return_type": "Mesh",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_name",
          "qualifiers": "const",
          "description": "Return the name of the item.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_navmesh",
          "qualifiers": "const",
          "description": "",
          "return_type": "NavigationMesh",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_preview",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_shapes",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_last_unused_item_id",
          "qualifiers": "const",
          "description": "Get an unused id for a new item.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "remove_item",
          "description": "Remove the item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_mesh",
          "description": "Set the mesh of the item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_name",
          "description": "Set the name of the item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_navmesh",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "navmesh",
              "type": "NavigationMesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_preview",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_shapes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shapes",
              "type": "Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MeshDataTool": {
      "name": "MeshDataTool",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit_to_surface",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "ArrayMesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_from_surface",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "ArrayMesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edge_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_edge_faces",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edge_meta",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edge_vertex",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vertex",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_face_edge",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "edge",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_meta",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_face_vertex",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vertex",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_material",
          "qualifiers": "const",
          "description": "",
          "return_type": "Material",
          "arguments": []
        },
        {
          "name": "get_vertex",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_bones",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertex_edges",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_faces",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_meta",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_tangent",
          "qualifiers": "const",
          "description": "",
          "return_type": "Plane",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_uv",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_uv2",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_vertex_weights",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolRealArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edge_meta",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_face_meta",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_material",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "vertex",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_bones",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bones",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_meta",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "meta",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_normal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_tangent",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tangent",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_uv",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_uv2",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "uv2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_weights",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "weights",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VehicleWheel": {
      "name": "VehicleWheel",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_damping_compression",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_damping_relaxation",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_friction_slip",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_roll_influence",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_skidinfo",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_suspension_max_force",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_suspension_rest_length",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_suspension_stiffness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_suspension_travel",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_in_contact",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_used_as_steering",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_used_as_traction",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_damping_compression",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_damping_relaxation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction_slip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_roll_influence",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "roll_influence",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suspension_max_force",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suspension_rest_length",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suspension_stiffness",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_suspension_travel",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_as_steering",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_as_traction",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "damping_compression",
          "type": "float",
          "setter": "set_damping_compression",
          "getter": "get_damping_compression",
          "description": ""
        },
        {
          "name": "damping_relaxation",
          "type": "float",
          "setter": "set_damping_relaxation",
          "getter": "get_damping_relaxation",
          "description": ""
        },
        {
          "name": "suspension_max_force",
          "type": "float",
          "setter": "set_suspension_max_force",
          "getter": "get_suspension_max_force",
          "description": ""
        },
        {
          "name": "suspension_stiffness",
          "type": "float",
          "setter": "set_suspension_stiffness",
          "getter": "get_suspension_stiffness",
          "description": ""
        },
        {
          "name": "suspension_travel",
          "type": "float",
          "setter": "set_suspension_travel",
          "getter": "get_suspension_travel",
          "description": ""
        },
        {
          "name": "use_as_steering",
          "type": "bool",
          "setter": "set_use_as_steering",
          "getter": "is_used_as_steering",
          "description": ""
        },
        {
          "name": "use_as_traction",
          "type": "bool",
          "setter": "set_use_as_traction",
          "getter": "is_used_as_traction",
          "description": ""
        },
        {
          "name": "wheel_friction_slip",
          "type": "float",
          "setter": "set_friction_slip",
          "getter": "get_friction_slip",
          "description": ""
        },
        {
          "name": "wheel_radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": ""
        },
        {
          "name": "wheel_rest_length",
          "type": "float",
          "setter": "set_suspension_rest_length",
          "getter": "get_suspension_rest_length",
          "description": ""
        },
        {
          "name": "wheel_roll_influence",
          "type": "float",
          "setter": "set_roll_influence",
          "getter": "get_roll_influence",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Image": {
      "name": "Image",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Image datatype.",
      "description": "Native image datatype. Contains image data, which can be converted to a texture, and several functions to interact with it.",
      "methods": [
        {
          "name": "blend_rect",
          "description": "Alpha-blends a \"src_rect\" [Rect2] from \"src\" [Image] to this [Image] on coordinates \"dest\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blend_rect_mask",
          "description": "Alpha-blends a \"src_rect\" [Rect2] from \"src\" [Image] to this [Image] using a \"mask\" [Image] on coordinates \"dest\". Alpha channels are required for both \"src\" and \"mask\", dest pixels and src pixels will blend if the corresponding mask pixel's alpha value is not 0. \"src\" [Image] and \"mask\" [Image] *must* have the same size (width and height) but they can have different formats",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "dst",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blit_rect",
          "description": "Copy a \"src_rect\" [Rect2] from \"src\" [Image] to this [Image] on coordinates \"dest\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "dst",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "blit_rect_mask",
          "description": "Blits a \"src_rect\" [Rect2] from \"src\" [Image] to this [Image] using a \"mask\" [Image] on coordinates \"dest\". Alpha channel is required for \"mask\", will copy src pixel onto dest if the corresponding mask pixel's alpha value is not 0. \"src\" [Image] and \"mask\" [Image] *must* have the same size (width and height) but they can have different formats",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "dst",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_mipmaps",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "compress",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Image.CompressMode",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "source",
              "type": "int",
              "enum": "Image.CompressSource",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "lossy_quality",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "convert",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "default_value": ""
            }
          ]
        },
        {
          "name": "copy_from",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create",
          "description": "Create an empty image of a specific size and format.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "use_mipmaps",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_from_data",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "use_mipmaps",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "crop",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "decompress",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "detect_alpha",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "expand_x2_hq2x",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "fill",
          "description": "Fills an [Image] with a specified [Color]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fix_alpha_edges",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "flip_x",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "flip_y",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "generate_mipmaps",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_data",
          "qualifiers": "const",
          "description": "Return the raw data of the [Image].",
          "return_type": "PoolByteArray",
          "arguments": []
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "Return the format of the [Image], one of [Image].FORMAT_*.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the height of the [Image].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mipmap_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "mipmap",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pixel",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Return a new [Image] that is a copy of \"area\" in this [Image].",
          "return_type": "Image",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_used_rect",
          "qualifiers": "const",
          "description": "Return the area of this [Image] that is used/visibly colored/opaque.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_width",
          "qualifiers": "const",
          "description": "Return the width of the [Image].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_mipmaps",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_compressed",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_empty",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_invisible",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "load",
          "description": "Load an [Image].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "lock",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "normalmap_to_xy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "premultiply_alpha",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resize",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "height",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "interpolation",
              "type": "int",
              "enum": "Image.Interpolation",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "resize_to_po2",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "square",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "save_png",
          "qualifiers": "const",
          "description": "Save this [Image] as a png.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pixel",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shrink_x2",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "srgb_to_linear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unlock",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FORMAT_L8",
          "value": "0",
          "description": ""
        },
        {
          "name": "FORMAT_LA8",
          "value": "1",
          "description": ""
        },
        {
          "name": "FORMAT_R8",
          "value": "2",
          "description": ""
        },
        {
          "name": "FORMAT_RG8",
          "value": "3",
          "description": ""
        },
        {
          "name": "FORMAT_RGB8",
          "value": "4",
          "description": ""
        },
        {
          "name": "FORMAT_RGBA8",
          "value": "5",
          "description": ""
        },
        {
          "name": "FORMAT_RGBA4444",
          "value": "6",
          "description": ""
        },
        {
          "name": "FORMAT_RGBA5551",
          "value": "7",
          "description": ""
        },
        {
          "name": "FORMAT_RF",
          "value": "8",
          "description": ""
        },
        {
          "name": "FORMAT_RGF",
          "value": "9",
          "description": ""
        },
        {
          "name": "FORMAT_RGBF",
          "value": "10",
          "description": ""
        },
        {
          "name": "FORMAT_RGBAF",
          "value": "11",
          "description": ""
        },
        {
          "name": "FORMAT_RH",
          "value": "12",
          "description": ""
        },
        {
          "name": "FORMAT_RGH",
          "value": "13",
          "description": ""
        },
        {
          "name": "FORMAT_RGBH",
          "value": "14",
          "description": ""
        },
        {
          "name": "FORMAT_RGBAH",
          "value": "15",
          "description": ""
        },
        {
          "name": "FORMAT_RGBE9995",
          "value": "16",
          "description": ""
        },
        {
          "name": "FORMAT_DXT1",
          "value": "17",
          "description": ""
        },
        {
          "name": "FORMAT_DXT3",
          "value": "18",
          "description": ""
        },
        {
          "name": "FORMAT_DXT5",
          "value": "19",
          "description": ""
        },
        {
          "name": "FORMAT_RGTC_R",
          "value": "20",
          "description": ""
        },
        {
          "name": "FORMAT_RGTC_RG",
          "value": "21",
          "description": ""
        },
        {
          "name": "FORMAT_BPTC_RGBA",
          "value": "22",
          "description": ""
        },
        {
          "name": "FORMAT_BPTC_RGBF",
          "value": "23",
          "description": ""
        },
        {
          "name": "FORMAT_BPTC_RGBFU",
          "value": "24",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC2",
          "value": "25",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC2A",
          "value": "26",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC4",
          "value": "27",
          "description": ""
        },
        {
          "name": "FORMAT_PVRTC4A",
          "value": "28",
          "description": ""
        },
        {
          "name": "FORMAT_ETC",
          "value": "29",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_R11",
          "value": "30",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_R11S",
          "value": "31",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RG11",
          "value": "32",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RG11S",
          "value": "33",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RGB8",
          "value": "34",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RGBA8",
          "value": "35",
          "description": ""
        },
        {
          "name": "FORMAT_ETC2_RGB8A1",
          "value": "36",
          "description": ""
        },
        {
          "name": "FORMAT_MAX",
          "value": "37",
          "description": ""
        },
        {
          "name": "INTERPOLATE_NEAREST",
          "value": "0",
          "description": ""
        },
        {
          "name": "INTERPOLATE_BILINEAR",
          "value": "1",
          "description": ""
        },
        {
          "name": "INTERPOLATE_CUBIC",
          "value": "2",
          "description": ""
        },
        {
          "name": "ALPHA_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "ALPHA_BIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "ALPHA_BLEND",
          "value": "2",
          "description": ""
        },
        {
          "name": "COMPRESS_S3TC",
          "value": "0",
          "description": ""
        },
        {
          "name": "COMPRESS_PVRTC2",
          "value": "1",
          "description": ""
        },
        {
          "name": "COMPRESS_PVRTC4",
          "value": "2",
          "description": ""
        },
        {
          "name": "COMPRESS_ETC",
          "value": "3",
          "description": ""
        },
        {
          "name": "COMPRESS_ETC2",
          "value": "4",
          "description": ""
        },
        {
          "name": "COMPRESS_SOURCE_GENERIC",
          "value": "0",
          "description": ""
        },
        {
          "name": "COMPRESS_SOURCE_SRGB",
          "value": "1",
          "description": ""
        },
        {
          "name": "COMPRESS_SOURCE_NORMAL",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "data",
          "type": "Dictionary",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Physics2DShapeQueryParameters": {
      "name": "Physics2DShapeQueryParameters",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Parameters to be sent to a 2D shape physics query.",
      "description": "This class contains the shape and other parameters for intersection/collision queries.",
      "methods": [
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "Return the physics layer the shape belongs to.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_exclude",
          "qualifiers": "const",
          "description": "Return the list of objects, or object [RID]\\ s, that will be excluded from collisions.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "Return the collision margin for the shape.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_motion",
          "qualifiers": "const",
          "description": "Return the current movement speed of the shape.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_object_type_mask",
          "qualifiers": "const",
          "description": "Return the type of object the shape belongs to.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shape_rid",
          "qualifiers": "const",
          "description": "Return the [RID] of the shape queried.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix of the shape queried.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "set_collision_layer",
          "description": "Set the physics layer the shape belongs to.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collision_layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_exclude",
          "description": "Set the list of objects, or object [RID]\\ s, that will be excluded from collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exclude",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin",
          "description": "Set the collision margin for the shape. A collision margin is an amount (in pixels) that the shape will grow when computing collisions, to account for numerical imprecision.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_motion",
          "description": "Set the current movement speed of the shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "motion",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_object_type_mask",
          "description": "Set the type of object the shape belongs to (see Physics2DDirectSpaceState.TYPE_MASK_*).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object_type_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "Set the [Shape2D] that will be used for collision/intersection queries.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_rid",
          "description": "Set the [RID] of the shape to be used in queries.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Set the transformation matrix of the shape. This is necessary to set its position/rotation/scale.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptResourcePath": {
      "name": "VisualScriptResourcePath",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_resource_path",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_resource_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "path",
          "type": "String",
          "setter": "set_resource_path",
          "getter": "get_resource_path",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TextEdit": {
      "name": "TextEdit",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Multiline text editing control.",
      "description": "TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.",
      "methods": [
        {
          "name": "add_color_region",
          "description": "Add color region (given the delimiters) and its colors.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "begin_key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end_key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "line_only",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_keyword_color",
          "description": "Add a keyword and its color.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keyword",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_colors",
          "description": "Clear all the syntax coloring information.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_undo_history",
          "description": "Clear the undo history.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "copy",
          "description": "Copy the current selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "cursor_get_blink_enabled",
          "qualifiers": "const",
          "description": "Gets whether the text editor caret is blinking.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "cursor_get_blink_speed",
          "qualifiers": "const",
          "description": "Gets the text editor caret blink speed.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "cursor_get_column",
          "qualifiers": "const",
          "description": "Return the column the editing cursor is at.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "cursor_get_line",
          "qualifiers": "const",
          "description": "Return the line the editing cursor is at.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "cursor_is_block_mode",
          "qualifiers": "const",
          "description": "Gets whether the text editor caret is in block mode.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "cursor_set_blink_enabled",
          "description": "Set the text editor caret to blink.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_blink_speed",
          "description": "Set the text editor caret blink speed. Cannot be less then or equal to 0.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "blink_speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_block_mode",
          "description": "Set the text editor caret to block mode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_set_column",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "adjust_viewport",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "cursor_set_line",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "adjust_viewport",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "cut",
          "description": "Cut the current selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_line",
          "qualifiers": "const",
          "description": "Return the text of a specific line.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_line_count",
          "qualifiers": "const",
          "description": "Return the amount of total lines in the text.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_menu",
          "qualifiers": "const",
          "description": "",
          "return_type": "PopupMenu",
          "arguments": []
        },
        {
          "name": "get_selection_from_column",
          "qualifiers": "const",
          "description": "Return the selection begin column.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selection_from_line",
          "qualifiers": "const",
          "description": "Return the selection begin line.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selection_text",
          "qualifiers": "const",
          "description": "Return the text inside the selection.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_selection_to_column",
          "qualifiers": "const",
          "description": "Return the selection end column.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selection_to_line",
          "qualifiers": "const",
          "description": "Return the selection end line.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_text",
          "description": "Return the whole text.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_v_scroll_speed",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_word_under_cursor",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "insert_text_at_cursor",
          "description": "Insert a given text at the cursor position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_highlight_all_occurrences_enabled",
          "qualifiers": "const",
          "description": "Returns true if highlight all occurrences is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_selection_active",
          "qualifiers": "const",
          "description": "Return true if the selection is active.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_show_line_numbers_enabled",
          "qualifiers": "const",
          "description": "Returns true if line numbers are enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_smooth_scroll_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_syntax_coloring_enabled",
          "qualifiers": "const",
          "description": "Return true if the syntax coloring is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "menu_option",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "option",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "paste",
          "description": "Paste the current selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "redo",
          "description": "Perform redo operation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "search",
          "qualifiers": "const",
          "description": "Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.",
          "return_type": "PoolIntArray",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "from_column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Perform selection, from line/column to line/column.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to_line",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select_all",
          "description": "Select all the text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_highlight_all_occurrences",
          "description": "Set to enable highlighting all occurrences of the current selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_chars",
          "description": "Set the maximum amount of characters editable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_readonly",
          "description": "Set the text editor as read-only. Text can be displayed but not edited.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_show_line_numbers",
          "description": "Set to enable showing line numbers.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_smooth_scroll_enable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_syntax_coloring",
          "description": "Set to enable the syntax coloring.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "Set the entire text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_scroll_speed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_wrap",
          "description": "Enable text wrapping when it goes beyond he edge of what is visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "undo",
          "description": "Perform undo operation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "breakpoint_toggled",
          "description": "Emitted when a breakpoint is placed via the breakpoint gutter.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "row",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cursor_changed",
          "description": "Emitted when the cursor changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "request_completion",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "symbol_lookup",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "symbol",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "row",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "text_changed",
          "description": "Emitted when the text changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "SEARCH_MATCH_CASE",
          "value": "1",
          "description": "Match case when searching."
        },
        {
          "name": "SEARCH_WHOLE_WORDS",
          "value": "2",
          "description": "Match whole words when searching."
        },
        {
          "name": "SEARCH_BACKWARDS",
          "value": "4",
          "description": "Search from end to beginning."
        },
        {
          "name": "MENU_CUT",
          "value": "0",
          "description": ""
        },
        {
          "name": "MENU_COPY",
          "value": "1",
          "description": ""
        },
        {
          "name": "MENU_PASTE",
          "value": "2",
          "description": ""
        },
        {
          "name": "MENU_CLEAR",
          "value": "3",
          "description": ""
        },
        {
          "name": "MENU_SELECT_ALL",
          "value": "4",
          "description": ""
        },
        {
          "name": "MENU_UNDO",
          "value": "5",
          "description": ""
        },
        {
          "name": "MENU_MAX",
          "value": "6",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "caret_blink",
          "type": "bool",
          "setter": "cursor_set_blink_enabled",
          "getter": "cursor_get_blink_enabled",
          "description": ""
        },
        {
          "name": "caret_blink_speed",
          "type": "float",
          "setter": "cursor_set_blink_speed",
          "getter": "cursor_get_blink_speed",
          "description": ""
        },
        {
          "name": "caret_block_mode",
          "type": "bool",
          "setter": "cursor_set_block_mode",
          "getter": "cursor_is_block_mode",
          "description": ""
        },
        {
          "name": "highlight_all_occurrences",
          "type": "bool",
          "setter": "set_highlight_all_occurrences",
          "getter": "is_highlight_all_occurrences_enabled",
          "description": ""
        },
        {
          "name": "show_line_numbers",
          "type": "bool",
          "setter": "set_show_line_numbers",
          "getter": "is_show_line_numbers_enabled",
          "description": ""
        },
        {
          "name": "smooth_scrolling",
          "type": "bool",
          "setter": "set_smooth_scroll_enable",
          "getter": "is_smooth_scroll_enabled",
          "description": ""
        },
        {
          "name": "syntax_highlighting",
          "type": "bool",
          "setter": "set_syntax_coloring",
          "getter": "is_syntax_coloring_enabled",
          "description": ""
        },
        {
          "name": "v_scroll_speed",
          "type": "float",
          "setter": "set_v_scroll_speed",
          "getter": "get_v_scroll_speed",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "background_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "brace_mismatch_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "breakpoint_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "caret_background_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "caret_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "completion_background_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_existing_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_lines",
          "type": "int",
          "description": ""
        },
        {
          "name": "completion_max_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "completion_scroll_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "completion_scroll_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "completion_selected_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "current_line_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "function_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "line_number_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "line_spacing",
          "type": "int",
          "description": ""
        },
        {
          "name": "mark_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "member_variable_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "number_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "symbol_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "tab",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "word_highlighted_color",
          "type": "Color",
          "description": ""
        }
      ]
    },
    "EditorFileSystem": {
      "name": "EditorFileSystem",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Resource filesystem, as the editor sees it.",
      "description": "This object holds information of all resources in the filesystem, their types, etc.",
      "methods": [
        {
          "name": "get_file_type",
          "qualifiers": "const",
          "description": "Get the type of the file, given the full path.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_filesystem",
          "description": "Get the root directory object.",
          "return_type": "EditorFileSystemDirectory",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_filesystem_path",
          "description": "",
          "return_type": "EditorFileSystemDirectory",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_scanning_progress",
          "qualifiers": "const",
          "description": "Return the scan progress for 0 to 1 if the FS is being scanned.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_scanning",
          "qualifiers": "const",
          "description": "Return true of the filesystem is being scanned.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "scan",
          "description": "Scan the filesystem for changes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "scan_sources",
          "description": "Check if the source of any imported resource changed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "update_file",
          "description": "Update a file information. Call this if an external program (not Godot) modified the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "filesystem_changed",
          "description": "Emitted if the filesystem changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resources_reimported",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resources",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sources_changed",
          "description": "Emitted if the source of any imported file changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exist",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ResourceImporterOGGVorbis": {
      "name": "ResourceImporterOGGVorbis",
      "inherits": "ResourceImporter",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PCKPacker": {
      "name": "PCKPacker",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_file",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pck_path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "source_path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "flush",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "verbose",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pck_start",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pck_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "alignment",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Curve3D": {
      "name": "Curve3D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Describes a Bezier curve in 3D space.",
      "description": "This class describes a Bezier curve in 3D space. It is mainly used to give a shape to a [Path], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed further calculations up.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds a point to a curve, at \"position\", with control points \"in\" and \"out\".\n\t\t\t\tIf \"at_position\" is given, the point is inserted before the point number \"at_position\", moving that point (and every point after) after the inserted point. If \"at_position\" is not given, or is an illegal value (at_position <0 or at_position >= [method get_point_count]), the point will be appended at the end of the point list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "in",
              "type": "Vector3",
              "default_value": "Vector3( 0, 0, 0 )"
            },
            {
              "index": "2",
              "name": "out",
              "type": "Vector3",
              "default_value": "Vector3( 0, 0, 0 )"
            },
            {
              "index": "3",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear_points",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_bake_interval",
          "qualifiers": "const",
          "description": "Returns the distance between two adjacent cached points.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_length",
          "qualifiers": "const",
          "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_points",
          "qualifiers": "const",
          "description": "Returns the cache of points as a [PoolVector3Array].",
          "return_type": "PoolVector3Array",
          "arguments": []
        },
        {
          "name": "get_baked_tilts",
          "qualifiers": "const",
          "description": "Returns the cache of tilts as a [RealArray].",
          "return_type": "PoolRealArray",
          "arguments": []
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the number of points describing the curve.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_in",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_out",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "Returns the position of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_tilt",
          "qualifiers": "const",
          "description": "Returns the tilt angle in radians for the point \"idx\". If the index is out of bounds, the function sends an error to the console, and returns 0.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate",
          "qualifiers": "const",
          "description": "Returns the position between the vertex \"idx\" and the vertex \"idx\"+1, where \"t\" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of \"t\" outside the range (0.0 >= t  <=1) give strange, but predictable results.\n\t\t\t\tIf \"idx\" is out of bounds it is truncated to the first or last vertex, and \"t\" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0, 0).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate_baked",
          "qualifiers": "const",
          "description": "Returns a point within the curve at position \"offset\", where \"offset\" is measured as a distance in 3D units along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the \"offset\" lies between, then interpolates the values. This interpolation is cubic if \"cubic\" is set to true, or linear if set to false.\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cubic",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "interpolatef",
          "qualifiers": "const",
          "description": "Returns the position at the vertex \"fofs\". It calls [method interpolate] using the integer part of fofs as \"idx\", and its fractional part as \"t\".",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "fofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Deletes the point \"idx\" from the curve. Sends an error to the console if \"idx\" is out of bounds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bake_interval",
          "description": "Sets the distance in 3D units between two adjacent cached points. Changing it forces the cache to be recomputed the next time a xxx_baked_xxx function is called. The less distance, the more points the cache will have, and the more memory it will consume, so use with care.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_in",
          "description": "Sets the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_out",
          "description": "Sets the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_position",
          "description": "Sets the position for the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_tilt",
          "description": "Sets the tilt angle in radians for the point \"idx\". If the index is out of bounds, the function sends an error to the console.\n\t\t\t\tThe tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a [PathFollow], this tilt is an offset over the natural tilt the PathFollow calculates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tilt",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tessellate",
          "qualifiers": "const",
          "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t\"max_stages\" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t\"tolerance_degrees\" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.",
          "return_type": "PoolVector3Array",
          "arguments": [
            {
              "index": "0",
              "name": "max_stages",
              "type": "int",
              "default_value": "5"
            },
            {
              "index": "1",
              "name": "tolerance_degrees",
              "type": "float",
              "default_value": "4"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "_data",
          "type": "Dictionary",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": ""
        },
        {
          "name": "bake_interval",
          "type": "float",
          "setter": "set_bake_interval",
          "getter": "get_bake_interval",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PathFollow": {
      "name": "PathFollow",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Point sampler for a [Path].",
      "description": "This node takes its parent [Path], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.",
      "methods": [
        {
          "name": "get_cubic_interpolation",
          "qualifiers": "const",
          "description": "This method returns whether the position between two cached points (see [method set_cubic_interpolation]) is interpolated linearly, or cubicly.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_h_offset",
          "qualifiers": "const",
          "description": "Returns the X displacement this node has from its parent [Path].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Returns the distance along the path in 3D units.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rotation_mode",
          "qualifiers": "const",
          "description": "Returns the rotation mode. The constants below list which axes are allowed to rotate for each mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_unit_offset",
          "qualifiers": "const",
          "description": "Returns the distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_v_offset",
          "qualifiers": "const",
          "description": "Returns the Y displacement this node has from its parent [Path].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "Returns whether this node wraps its offsets around, or truncates them to the path ends.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_cubic_interpolation",
          "description": "The points along the [Curve3D] of the [Path] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\t\tThere are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.\n\t\t\t\tThis method controls whether the position between two cached points is interpolated linearly, or cubicly.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_offset",
          "description": "Moves this node in the X axis. As this node's position will be set every time its offset is set, this allows many PathFollow to share the same curve (and thus the same movement pattern), yet not return the same position for a given path offset.\n\t\t\t\tA similar effect may be achieved moving the this node's descendants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "h_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "If set, any offset outside the path's length (whether set by [method set_offset] or [method set_unit_offset] will wrap around, instead of stopping at the ends. Set it for cyclic paths.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "loop",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Sets the distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation_mode",
          "description": "Allows or forbids rotation on one or more axes, per the constants below.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rotation_mode",
              "type": "int",
              "enum": "PathFollow.RotationMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_unit_offset",
          "description": "Sets the distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "unit_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_offset",
          "description": "Moves this node in the Y axis, for the same reasons of [method set_h_offset].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ROTATION_NONE",
          "value": "0",
          "description": "Forbids the PathFollow to rotate."
        },
        {
          "name": "ROTATION_Y",
          "value": "1",
          "description": "Allows the PathFollow to rotate in the Y axis only."
        },
        {
          "name": "ROTATION_XY",
          "value": "2",
          "description": "Allows the PathFollow to rotate in both the X, and Y axes."
        },
        {
          "name": "ROTATION_XYZ",
          "value": "3",
          "description": "Allows the PathFollow to rotate in any axis."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "NavigationPolygonInstance": {
      "name": "NavigationPolygonInstance",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_navigation_polygon",
          "qualifiers": "const",
          "description": "",
          "return_type": "NavigationPolygon",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_navigation_polygon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "navpoly",
              "type": "NavigationPolygon",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": ""
        },
        {
          "name": "navpoly",
          "type": "NavigationPolygon",
          "setter": "set_navigation_polygon",
          "getter": "get_navigation_polygon",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Curve": {
      "name": "Curve",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_point",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "left_tangent",
              "type": "float",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "right_tangent",
              "type": "float",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "left_mode",
              "type": "int",
              "enum": "Curve.TangentMode",
              "default_value": "0"
            },
            {
              "index": "4",
              "name": "right_mode",
              "type": "int",
              "enum": "Curve.TangentMode",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "bake",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clean_dupes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_points",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_bake_resolution",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_max_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_min_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_point_left_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_left_tangent",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_right_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_right_tangent",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate_baked",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bake_resolution",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resolution",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_min_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "min",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_left_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Curve.TangentMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_left_tangent",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tangent",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_offset",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_right_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Curve.TangentMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_right_tangent",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tangent",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "range_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "TANGENT_FREE",
          "value": "0",
          "description": ""
        },
        {
          "name": "TANGENT_LINEAR",
          "value": "1",
          "description": ""
        },
        {
          "name": "TANGENT_MODE_COUNT",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "_data",
          "type": "Array",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": ""
        },
        {
          "name": "bake_resolution",
          "type": "int",
          "setter": "set_bake_resolution",
          "getter": "get_bake_resolution",
          "description": ""
        },
        {
          "name": "max_value",
          "type": "float",
          "setter": "set_max_value",
          "getter": "get_max_value",
          "description": ""
        },
        {
          "name": "min_value",
          "type": "float",
          "setter": "set_min_value",
          "getter": "get_min_value",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "SurfaceTool": {
      "name": "SurfaceTool",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Helper tool to create geometry.",
      "description": "The [SurfaceTool] is used to construct a [Mesh] by specifying vertex attributes individually. It can be used to construct a [Mesh] from script. All properties except index need to be added before a call to [method add_vertex]. For example adding vertex colors and UVs looks like\n\t\t[codeblock]\n\t\tvar st = SurfaceTool.new()\n\t\tst.begin(Mesh.PRIMITIVE_TRIANGLES)\n\t\tst.add_color(Color(1, 0, 0))\n\t\tst.add_uv(Vector2(0, 0))\n\t\tst.add_vertex(Vector3(0, 0, 0))\n\t\t[/codeblock]\n\t\tThe [SurfaceTool] now contains one vertex of a triangle which has a UV coordinate and a specified [Color]. If another vertex were added without calls to [method add_uv] or [method add_color] then the last values would be used.\n\t\tIt is very important that vertex attributes are passed [b]before[/b] the call to [method add_vertex], failure to do this will result in an error when committing the vertex information to a mesh.",
      "methods": [
        {
          "name": "add_bones",
          "description": "Add an array of bones for the next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bones",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_color",
          "description": "Specify a [Color] for the next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_index",
          "description": "Adds an index to index array if you are using indexed Vertices. Does not need to be called before adding Vertex.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_normal",
          "description": "Specify a normal for the next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_smooth_group",
          "description": "Specify whether current Vertex (if using only Vertex arrays) or current index (if also using index arrays) should utilize smooth normals for normal calculation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "smooth",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_tangent",
          "description": "Specify a Tangent for the next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tangent",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_to_format",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_triangle_fan",
          "description": "Insert a triangle fan made of array data into [Mesh] being constructed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertexes",
              "type": "PoolVector3Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "2",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": "PoolColorArray(  )"
            },
            {
              "index": "3",
              "name": "uv2s",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "4",
              "name": "normals",
              "type": "PoolVector3Array",
              "default_value": "PoolVector3Array(  )"
            },
            {
              "index": "5",
              "name": "tangents",
              "type": "Array",
              "default_value": "[  ]"
            }
          ]
        },
        {
          "name": "add_uv",
          "description": "Specify UV Coordinate for next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_uv2",
          "description": "Specify an optional second set of UV coordinates for next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv2",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_vertex",
          "description": "Specify position of current Vertex. Should be called after specifying other vertex properties (e.g. Color, UV).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertex",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_weights",
          "description": "Specify weight value for next Vertex to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "weights",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_from",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing",
              "type": "Mesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "begin",
          "description": "Called before adding any Vertices. Takes the primitive type as an argument (e.g. Mesh.PRIMITIVE_TRIANGLES).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "primitive",
              "type": "int",
              "enum": "Mesh.PrimitiveType",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear all information passed into the surface tool so far.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "commit",
          "description": "Returns a constructed [ArrayMesh] from current information passed in. If an existing [ArrayMesh] is passed in as an argument, will add an extra surface to the existing [ArrayMesh].",
          "return_type": "ArrayMesh",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing",
              "type": "ArrayMesh",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "create_from",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "existing",
              "type": "Mesh",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "surface",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "deindex",
          "description": "Removes index array by expanding Vertex array.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "generate_normals",
          "description": "Generates normals from Vertices so you do not have to do it manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "generate_tangents",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "index",
          "description": "Shrinks Vertex array by creating an index array. Avoids reusing Vertices.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_material",
          "description": "Sets [Material] to be used by the [Mesh] you are constructing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptIndexGet": {
      "name": "VisualScriptIndexGet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Performance": {
      "name": "Performance",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Exposes performance related data.",
      "description": "This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the [i]Monitor[/i] tab in the editor's [i]Debugger[/i] panel. By using the [method get_monitor] method of this class, you can access this data from your code. Note that a few of these monitors are only available in debug mode and will always return 0 when used in a release build.\n\t\tMany of these monitors are not updated in real-time, so there may be a short delay between changes.",
      "methods": [
        {
          "name": "get_monitor",
          "qualifiers": "const",
          "description": "Returns the value of one of the available monitors. You should provide one of this class's constants as the argument, like this:\n\t\t\t\t[codeblock]\n\t\t\t\tprint(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "monitor",
              "type": "int",
              "enum": "Performance.Monitor",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TIME_FPS",
          "value": "0",
          "description": "Frames per second."
        },
        {
          "name": "TIME_PROCESS",
          "value": "1",
          "description": "Time it took to complete one frame."
        },
        {
          "name": "TIME_PHYSICS_PROCESS",
          "value": "2",
          "description": "Time it took to complete one physics frame."
        },
        {
          "name": "MEMORY_STATIC",
          "value": "3",
          "description": "Static memory currently used, in bytes. Not available in release builds."
        },
        {
          "name": "MEMORY_DYNAMIC",
          "value": "4",
          "description": "Dynamic memory currently used, in bytes. Not available in release builds."
        },
        {
          "name": "MEMORY_STATIC_MAX",
          "value": "5",
          "description": "Available static memory. Not available in release builds."
        },
        {
          "name": "MEMORY_DYNAMIC_MAX",
          "value": "6",
          "description": "Available dynamic memory. Not available in release builds."
        },
        {
          "name": "MEMORY_MESSAGE_BUFFER_MAX",
          "value": "7",
          "description": "Largest amount of memory the message queue buffer has used, in bytes. The message queue is used for deferred functions calls and notifications."
        },
        {
          "name": "OBJECT_COUNT",
          "value": "8",
          "description": "Number of objects currently instanced (including nodes)."
        },
        {
          "name": "OBJECT_RESOURCE_COUNT",
          "value": "9",
          "description": "Number of resources currently used."
        },
        {
          "name": "OBJECT_NODE_COUNT",
          "value": "10",
          "description": "Number of nodes currently instanced. This also includes the root node, as well as any nodes not in the scene tree."
        },
        {
          "name": "RENDER_OBJECTS_IN_FRAME",
          "value": "11",
          "description": "3D objects drawn per frame."
        },
        {
          "name": "RENDER_VERTICES_IN_FRAME",
          "value": "12",
          "description": "Vertices drawn per frame. 3D only."
        },
        {
          "name": "RENDER_MATERIAL_CHANGES_IN_FRAME",
          "value": "13",
          "description": "Material changes per frame. 3D only"
        },
        {
          "name": "RENDER_SHADER_CHANGES_IN_FRAME",
          "value": "14",
          "description": "Shader changes per frame. 3D only."
        },
        {
          "name": "RENDER_SURFACE_CHANGES_IN_FRAME",
          "value": "15",
          "description": "Render surface changes per frame. 3D only."
        },
        {
          "name": "RENDER_DRAW_CALLS_IN_FRAME",
          "value": "16",
          "description": "Draw calls per frame. 3D only."
        },
        {
          "name": "RENDER_USAGE_VIDEO_MEM_TOTAL",
          "value": "20",
          "description": ""
        },
        {
          "name": "RENDER_VIDEO_MEM_USED",
          "value": "17",
          "description": "Video memory used. Includes both texture and vertex memory."
        },
        {
          "name": "RENDER_TEXTURE_MEM_USED",
          "value": "18",
          "description": "Texture memory used."
        },
        {
          "name": "RENDER_VERTEX_MEM_USED",
          "value": "19",
          "description": "Vertex memory used."
        },
        {
          "name": "PHYSICS_2D_ACTIVE_OBJECTS",
          "value": "21",
          "description": "Number of active [RigidBody2D] nodes in the game."
        },
        {
          "name": "PHYSICS_2D_COLLISION_PAIRS",
          "value": "22",
          "description": "Number of collision pairs in the 2D physics engine."
        },
        {
          "name": "PHYSICS_2D_ISLAND_COUNT",
          "value": "23",
          "description": "Number of islands in the 2D physics engine."
        },
        {
          "name": "PHYSICS_3D_ACTIVE_OBJECTS",
          "value": "24",
          "description": "Number of active [RigidBody] and [VehicleBody] nodes in the game."
        },
        {
          "name": "PHYSICS_3D_COLLISION_PAIRS",
          "value": "25",
          "description": "Number of collision pairs in the 3D physics engine."
        },
        {
          "name": "PHYSICS_3D_ISLAND_COUNT",
          "value": "26",
          "description": "Number of islands in the 3D physics engine."
        },
        {
          "name": "MONITOR_MAX",
          "value": "27",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ConcavePolygonShape": {
      "name": "ConcavePolygonShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Concave polygon shape.",
      "description": "Concave polygon shape resource, which can be set into a [PhysicsBody] or area. This shape is created by feeding a list of triangles.",
      "methods": [
        {
          "name": "get_faces",
          "qualifiers": "const",
          "description": "Return the faces (an array of triangles).",
          "return_type": "PoolVector3Array",
          "arguments": []
        },
        {
          "name": "set_faces",
          "description": "Set the faces (an array of triangles).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "faces",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Line2D": {
      "name": "Line2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A 2D line.",
      "description": "A line through several points in 2D space.",
      "methods": [
        {
          "name": "add_point",
          "description": "Add a point at the [code]position[/code]. Appends the point at the end of the line.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_begin_cap_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_default_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_end_cap_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_gradient",
          "qualifiers": "const",
          "description": "",
          "return_type": "Gradient",
          "arguments": []
        },
        {
          "name": "get_joint_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the Line2D's amount of points.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "Returns point [code]i[code]'s position.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "i",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_points",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "get_round_precision",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_sharp_limit",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_texture_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "remove_point",
          "description": "Remove the point at index [code]i[/code] from the line.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "i",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_begin_cap_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Line2D.LineCapMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_end_cap_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Line2D.LineCapMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gradient",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Gradient",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_joint_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Line2D.LineJointMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_position",
          "description": "Overwites the position in point [code]i[/code] with the supplied [code]position[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "i",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_points",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_round_precision",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "precision",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sharp_limit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "limit",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Line2D.LineTextureMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_width",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "LINE_JOINT_SHARP",
          "value": "0",
          "description": "The line's joints will be pointy. If [code]sharp_limit[/code] is greater than the rotation of a joint, it becomes a bevel joint instead."
        },
        {
          "name": "LINE_JOINT_BEVEL",
          "value": "1",
          "description": "The line's joints will be bevelled/chamfered."
        },
        {
          "name": "LINE_JOINT_ROUND",
          "value": "2",
          "description": "The line's joints will be rounded."
        },
        {
          "name": "LINE_CAP_NONE",
          "value": "0",
          "description": "Don't have a line cap."
        },
        {
          "name": "LINE_CAP_BOX",
          "value": "1",
          "description": "Draws the line cap as a box."
        },
        {
          "name": "LINE_CAP_ROUND",
          "value": "2",
          "description": "Draws the line cap as a circle."
        },
        {
          "name": "LINE_TEXTURE_NONE",
          "value": "0",
          "description": "Takes the left pixels of the texture and renders it over the whole line."
        },
        {
          "name": "LINE_TEXTURE_TILE",
          "value": "1",
          "description": "Tiles the texture over the line. The texture need to be imported with Repeat Enabled for it to work properly."
        }
      ],
      "properties": [
        {
          "name": "begin_cap_mode",
          "type": "int",
          "setter": "set_begin_cap_mode",
          "getter": "get_begin_cap_mode",
          "enum": "Line2D.LineCapMode",
          "description": "Controls the style of the line's first point. Use [code]LINE_CAP_*[/code] constants. Default value: [code]LINE_CAP_NONE[/code]."
        },
        {
          "name": "default_color",
          "type": "Color",
          "setter": "set_default_color",
          "getter": "get_default_color",
          "description": "The line's color. Will not be used if a gradient is set."
        },
        {
          "name": "end_cap_mode",
          "type": "int",
          "setter": "set_end_cap_mode",
          "getter": "get_end_cap_mode",
          "enum": "Line2D.LineCapMode",
          "description": "Controls the style of the line's last point. Use [code]LINE_CAP_*[/code] constants. Default value: [code]LINE_CAP_NONE[/code]."
        },
        {
          "name": "gradient",
          "type": "Gradient",
          "setter": "set_gradient",
          "getter": "get_gradient",
          "description": "The gradient is drawn through the whole line from start to finish. The default color will not be used if a gradient is set."
        },
        {
          "name": "joint_mode",
          "type": "int",
          "setter": "set_joint_mode",
          "getter": "get_joint_mode",
          "enum": "Line2D.LineJointMode",
          "description": "The style for the points inbetween the start and the end."
        },
        {
          "name": "points",
          "type": "PoolVector2Array",
          "setter": "set_points",
          "getter": "get_points",
          "description": "The points that form the lines. The line is drawn between every point set in this array."
        },
        {
          "name": "round_precision",
          "type": "int",
          "setter": "set_round_precision",
          "getter": "get_round_precision",
          "description": "The smoothness of the rounded joints and caps. This is only used if a cap or joint is set as round."
        },
        {
          "name": "sharp_limit",
          "type": "float",
          "setter": "set_sharp_limit",
          "getter": "get_sharp_limit",
          "description": "The direction difference in radians between vector points. This value is only used if [code]joint mode[/code] is set to [code]LINE_JOINT_SHARP[/code]."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The texture used for the line's texture. Uses [code]texture_mode[/code] for drawing style."
        },
        {
          "name": "texture_mode",
          "type": "int",
          "setter": "set_texture_mode",
          "getter": "get_texture_mode",
          "enum": "Line2D.LineTextureMode",
          "description": "The style to render the [code]texture[/code] on the line. Use [code]LINE_TEXTURE_*[/code] constants. Default value: [code]LINE_TEXTURE_NONE[/code]."
        },
        {
          "name": "width",
          "type": "float",
          "setter": "set_width",
          "getter": "get_width",
          "description": "The line's width."
        }
      ],
      "theme_properties": []
    },
    "LightOccluder2D": {
      "name": "LightOccluder2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Occludes light cast by a Light2D, casting shadows.",
      "description": "Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an [OccluderPolygon2D] in order for the shadow to be computed.",
      "methods": [
        {
          "name": "get_occluder_light_mask",
          "qualifiers": "const",
          "description": "Return the light mask of the LightOccluder2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_occluder_polygon",
          "qualifiers": "const",
          "description": "Return the OccluderPolygon2D that defines the LightOccluder2D.",
          "return_type": "OccluderPolygon2D",
          "arguments": []
        },
        {
          "name": "set_occluder_light_mask",
          "description": "Set the LightOccluder2D light mask. The LightOccluder2D will cast shadows only from Light2Ds that belong to the same light mask(s).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_occluder_polygon",
          "description": "Set the OccluderPolygon2D that defines the LightOccluder2D.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "OccluderPolygon2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "light_mask",
          "type": "int",
          "setter": "set_occluder_light_mask",
          "getter": "get_occluder_light_mask",
          "description": "The LightOccluder2D's light mask. The LightOccluder2D will cast shadows only from Light2D(s) that have the same light mask(s)."
        },
        {
          "name": "occluder",
          "type": "OccluderPolygon2D",
          "setter": "set_occluder_polygon",
          "getter": "get_occluder_polygon",
          "description": "The [OccluderPolygon2D] used to compute the shadow."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectPanner": {
      "name": "AudioEffectPanner",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a Panner audio effect to an Audio bus. Pans sound left or right.",
      "description": "Determines how much of an audio signal is sent to the left and right buses.",
      "methods": [
        {
          "name": "get_pan",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_pan",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cpanume",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "pan",
          "type": "float",
          "setter": "set_pan",
          "getter": "get_pan",
          "description": "Pan position. Value can range from -1 (fully left) to 1 (fully right)."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectEQ10": {
      "name": "AudioEffectEQ10",
      "inherits": "AudioEffectEQ",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a 10-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 31 Hz to 16000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.",
      "description": "Frequency bands :\n\t\tBand 1 : 31 Hz\n\t\tBand 2 : 62 Hz\n\t\tBand 3 : 125 Hz\n\t\tBand 4 : 250 Hz\n\t\tBand 5 : 500 Hz\n\t\tBand 6 : 1000 Hz\n\t\tBand 7 : 2000 Hz\n\t\tBand 8 : 4000 Hz\n\t\tBand 9 : 8000 Hz\n\t\tBand 10 : 16000 Hz\n\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ21].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CheckBox": {
      "name": "CheckBox",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Binary choice user interface widget",
      "description": "A checkbox allows the user to make a binary choice (choosing only one of two possible options), for example Answer 'yes' or 'no'.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "check_vadjust",
          "type": "int",
          "description": ""
        },
        {
          "name": "checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "radio_checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "radio_unchecked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "unchecked",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "@C#": {
      "name": "@C#",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ImmediateGeometry": {
      "name": "ImmediateGeometry",
      "inherits": "GeometryInstance",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Draws simple geometry from code.",
      "description": "Draws simple geometry from code. Uses a drawing mode similar to OpenGL 1.x.",
      "methods": [
        {
          "name": "add_sphere",
          "description": "Simple helper to draw a uvsphere, with given latitudes, longitude and radius.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lats",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "lons",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "add_uv",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "add_vertex",
          "description": "Adds a vertex with the currently set color/uv/etc.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "begin",
          "description": "Begin drawing (And optionally pass a texture override). When done call end(). For more information on how this works, search for glBegin() glEnd() references.\n\t\t\tFor the type of primitive, use the [Mesh].PRIMITIVE_* enumerations.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "primitive",
              "type": "int",
              "enum": "Mesh.PrimitiveType",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clears everything that was drawn using begin/end.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "end",
          "description": "Ends a drawing context and displays the results.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "The current drawing color.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal",
          "description": "The next vertex's normal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tangent",
          "description": "The next vertex's tangent (and binormal facing).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tangent",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv",
          "description": "The next vertex's UV.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv2",
          "description": "The next vertex's second layer UV.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "WorldEnvironment": {
      "name": "WorldEnvironment",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Sets environment properties for the entire scene",
      "description": "The [WorldEnvironment] node can be added to a scene in order to set default [Environment] variables for the scene. The [WorldEnvironment] can be overridden by an [Environment] node set on the current [Camera]. Additionally, only one [WorldEnvironment] may be instanced in a given scene at a time. The [WorldEnvironment] allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox).",
      "methods": [
        {
          "name": "get_environment",
          "qualifiers": "const",
          "description": "Return the [Environment] currently bound.",
          "return_type": "Environment",
          "arguments": []
        },
        {
          "name": "set_environment",
          "description": "Set the currently bound [Environment] to the one specified.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "env",
              "type": "Environment",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "environment",
          "type": "Environment",
          "setter": "set_environment",
          "getter": "get_environment",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "QuadMesh": {
      "name": "QuadMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class representing a square mesh.",
      "description": "Class representing a square mesh with size (2,2,0). Consider using a [PlaneMesh] if you require a differently sized plane.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Curve2D": {
      "name": "Curve2D",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Describes a Bezier curve in 2D space.",
      "description": "This class describes a Bezier curve in 2D space. It is mainly used to give a shape to a [Path2D], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed further calculations up.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds a point to a curve, at \"position\", with control points \"in\" and \"out\".\n\t\t\t\tIf \"at_position\" is given, the point is inserted before the point number \"at_position\", moving that point (and every point after) after the inserted point. If \"at_position\" is not given, or is an illegal value (at_position <0 or at_position >= [method get_point_count]), the point will be appended at the end of the point list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "in",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            },
            {
              "index": "2",
              "name": "out",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            },
            {
              "index": "3",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear_points",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_bake_interval",
          "qualifiers": "const",
          "description": "Returns the distance between two adjacent cached points.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_length",
          "qualifiers": "const",
          "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_baked_points",
          "qualifiers": "const",
          "description": "Returns the cache of points as a [PoolVector2Array].",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the number of points describing the curve.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_in",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_out",
          "qualifiers": "const",
          "description": "Returns the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_point_position",
          "qualifiers": "const",
          "description": "Returns the position of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate",
          "qualifiers": "const",
          "description": "Returns the position between the vertex \"idx\" and the vertex \"idx\"+1, where \"t\" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of \"t\" outside the range (0.0 >= t  <=1) give strange, but predictable results.\n\t\t\t\tIf \"idx\" is out of bounds it is truncated to the first or last vertex, and \"t\" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interpolate_baked",
          "qualifiers": "const",
          "description": "Returns a point within the curve at position \"offset\", where \"offset\" is measured as a pixel distance along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the \"offset\" lies between, then interpolates the values. This interpolation is cubic if \"cubic\" is set to true, or linear if set to false.\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "cubic",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "interpolatef",
          "qualifiers": "const",
          "description": "Returns the position at the vertex \"fofs\". It calls [method interpolate] using the integer part of fofs as \"idx\", and its fractional part as \"t\".",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "fofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Deletes the point \"idx\" from the curve. Sends an error to the console if \"idx\" is out of bounds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bake_interval",
          "description": "Sets the distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time a xxx_baked_xxx function is called. The less distance, the more points the cache will have, and the more memory it will consume, so use with care.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_in",
          "description": "Sets the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_out",
          "description": "Sets the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_position",
          "description": "Sets the position for the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tessellate",
          "qualifiers": "const",
          "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t\"max_stages\" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t\"tolerance_degrees\" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.",
          "return_type": "PoolVector2Array",
          "arguments": [
            {
              "index": "0",
              "name": "max_stages",
              "type": "int",
              "default_value": "5"
            },
            {
              "index": "1",
              "name": "tolerance_degrees",
              "type": "float",
              "default_value": "4"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "_data",
          "type": "Dictionary",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": ""
        },
        {
          "name": "bake_interval",
          "type": "float",
          "setter": "set_bake_interval",
          "getter": "get_bake_interval",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "FileDialog": {
      "name": "FileDialog",
      "inherits": "ConfirmationDialog",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Dialog for selecting files or directories in the filesystem.",
      "description": "FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.",
      "methods": [
        {
          "name": "add_filter",
          "description": "Add a custom filter. Filter format is: \"mask ; description\", example (C++): dialog->add_filter(\"*.png ; PNG Images\");",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_filters",
          "description": "Clear all the added filters in the dialog.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_access",
          "qualifiers": "const",
          "description": "Return the file access permission of the dialog.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_current_dir",
          "qualifiers": "const",
          "description": "Get the current working directory of the file dialog.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_file",
          "qualifiers": "const",
          "description": "Get the current selected file of the file dialog (empty if none).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_path",
          "qualifiers": "const",
          "description": "Get the current selected path (directory and file) of the file dialog (empty if none).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_filters",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Get the file dialog mode from the MODE_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vbox",
          "description": "Return the vertical box container of the dialog, custom controls can be added to it.",
          "return_type": "VBoxContainer",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "invalidate",
          "description": "Invalidate and update the current dialog content list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_showing_hidden_files",
          "qualifiers": "const",
          "description": "Return true if the dialog allows show hidden files.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_access",
          "description": "Set the file access permission of the dialog(Must be one of [ACCESS_RESOURCES], [ACCESS_USERDATA] or [ACCESS_FILESYSTEM]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "access",
              "type": "int",
              "enum": "FileDialog.Access",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_dir",
          "description": "Set the current working directory of the file dialog.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_file",
          "description": "Set the current selected file name of the file dialog.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_path",
          "description": "Set the current selected file path of the file dialog.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_filters",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filters",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the file dialog mode from the MODE_* enum.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "FileDialog.Mode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_show_hidden_files",
          "description": "Set the dialog should show hidden files.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "show",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "dir_selected",
          "description": "Event emitted when the user selects a directory.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "file_selected",
          "description": "Event emitted when the user selects a file (double clicks it or presses the OK button).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "files_selected",
          "description": "Event emitted when the user selects multiple files.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "paths",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "MODE_OPEN_FILE",
          "value": "0",
          "description": "The dialog allows the selection of one, and only one file."
        },
        {
          "name": "MODE_OPEN_FILES",
          "value": "1",
          "description": "The dialog allows the selection of multiple files."
        },
        {
          "name": "MODE_OPEN_DIR",
          "value": "2",
          "description": "The dialog functions as a folder selector, disallowing the selection of any file."
        },
        {
          "name": "MODE_OPEN_ANY",
          "value": "3",
          "description": "The dialog allows the selection of a file or a directory."
        },
        {
          "name": "MODE_SAVE_FILE",
          "value": "4",
          "description": "The dialog will warn when a file exists."
        },
        {
          "name": "ACCESS_RESOURCES",
          "value": "0",
          "description": "The dialog allows the selection of file and directory."
        },
        {
          "name": "ACCESS_USERDATA",
          "value": "1",
          "description": "The dialog allows access files under [Resource] path(res://) ."
        },
        {
          "name": "ACCESS_FILESYSTEM",
          "value": "2",
          "description": "The dialog allows access files in whole file system."
        }
      ],
      "properties": [
        {
          "name": "access",
          "type": "int",
          "setter": "set_access",
          "getter": "get_access",
          "enum": "FileDialog.Access",
          "description": ""
        },
        {
          "name": "filters",
          "type": "PoolStringArray",
          "setter": "set_filters",
          "getter": "get_filters",
          "description": ""
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "FileDialog.Mode",
          "description": ""
        },
        {
          "name": "show_hidden_files",
          "type": "bool",
          "setter": "set_show_hidden_files",
          "getter": "is_showing_hidden_files",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "files_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "folder",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "reload",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "Joint2D": {
      "name": "Joint2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base node for all joint constraints in 2D physics.",
      "description": "Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint.",
      "methods": [
        {
          "name": "get_bias",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_exclude_nodes_from_collision",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_node_a",
          "qualifiers": "const",
          "description": "Return the path to the A node for the joint.",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_node_b",
          "qualifiers": "const",
          "description": "Return the path to the B node for the joint.",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "set_bias",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bias",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_exclude_nodes_from_collision",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_a",
          "description": "Set the path to the A node for the joint. Must be of type [PhysicsBody2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_b",
          "description": "Set the path to the B node for the joint. Must be of type [PhysicsBody2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bias",
          "type": "float",
          "setter": "set_bias",
          "getter": "get_bias",
          "description": ""
        },
        {
          "name": "disable_collision",
          "type": "bool",
          "setter": "set_exclude_nodes_from_collision",
          "getter": "get_exclude_nodes_from_collision",
          "description": ""
        },
        {
          "name": "node_a",
          "type": "NodePath",
          "setter": "set_node_a",
          "getter": "get_node_a",
          "description": ""
        },
        {
          "name": "node_b",
          "type": "NodePath",
          "setter": "set_node_b",
          "getter": "get_node_b",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Tween": {
      "name": "Tween",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Node useful for animations with unknown start and end points.",
      "description": "Node useful for animations with unknown start and end points, procedural animations, making one node follow another, and other simple behavior.\n\t\tBecause it is easy to get it wrong, here is a quick usage example:\n\t\t[codeblock]\n\t\tvar tween = get_node(\"Tween\")\n\t\ttween.interpolate_property(get_node(\"Node2D_to_move\"), \"transform/origin\", Vector2(0,0), Vector2(100,100), 1, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)\n\t\ttween.start()\n\t\t[/codeblock]\n\t\tSome of the methods of this class require a property name. You can get the property name by hovering over the property in the inspector of the editor.\n\t\tMany of the methods accept [code]trans_type[/code] and [code]ease_type[/code]. The first accepts an TRANS_* constant, and refers to the way the timing of the animation is handled (you might want to see [code]http://easings.net/[/code] for some examples). The second accepts an EASE_* constant, and controls the where [code]trans_type[/code] is applied to the interpolation (in the beginning, the end, or both). If you don't know which transition and easing to pick, you can try different TRANS_* constants with EASE_IN_OUT, and use the one that looks best.",
      "methods": [
        {
          "name": "follow_method",
          "description": "Follow [code]method[/code] of [code]object[/code] and apply the returned value on [code]target_method[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] later. Methods are animated by calling them with consequitive values.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "target_method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "follow_property",
          "description": "Follow [code]property[/code] of [code]object[/code] and apply it on [code]target_property[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Note that [code]target:target_property[/code] would equal [code]object:property[/code] at the end of the tween.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "target_property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_runtime",
          "qualifiers": "const",
          "description": "Returns the time needed for all tweens to end in seconds, measured from the start. Thus, if you have two tweens, one ending 10 seconds after the start and the other - 20 seconds, it would return 20 seconds, as by that time all tweens would have finished.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_speed_scale",
          "qualifiers": "const",
          "description": "Returns the speed that has been set from editor GUI or [method set_repeat].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tween_process_mode",
          "qualifiers": "const",
          "description": "Returns the process mode that has been set from editor GUI or [method set_tween_process_mode]",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "interpolate_callback",
          "description": "Call [code]callback[/code] of [code]object[/code] after [code]duration[/code]. [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "callback",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg1",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "arg2",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "5",
              "name": "arg3",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "6",
              "name": "arg4",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "7",
              "name": "arg5",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "interpolate_deferred_callback",
          "description": "Call [code]callback[/code] of [code]object[/code] after [code]duration[/code] on the main thread (similar to [method Object.call_deferred]). [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "callback",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "arg1",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "arg2",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "5",
              "name": "arg3",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "6",
              "name": "arg4",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "7",
              "name": "arg5",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "interpolate_method",
          "description": "Animate [code]method[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecutive values.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "interpolate_property",
          "description": "Animate [code]property[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Returns true if any tweens are currently running, and false otherwise. Note that this method doesn't consider tweens that have ended.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_repeat",
          "qualifiers": "const",
          "description": "Returns true if repeat has been set from editor GUI or [method set_repeat].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "remove",
          "description": "Stop animating and completely remove a tween, given its object and property/method pair. Passing empty String as key will remove all tweens for given object.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "remove_all",
          "description": "Stop animating and completely remove all tweens.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reset",
          "description": "Resets a tween to the initial value (the one given, not the one before the tween), given its object and property/method pair. Passing empty String as key will reset all tweens for given object.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "reset_all",
          "description": "Resets all tweens to their initial values (the ones given, not those before the tween).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resume",
          "description": "Continue animating a stopped tween, given its object and property/method pair. Passing empty String as key will resume all tweens for given object.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "resume_all",
          "description": "Continue animating all stopped tweens.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "seek",
          "description": "Seek the animation to the given [code]time[/code] in seconds.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_active",
          "description": "Activate/deactivate the tween. You can use this for pausing animations, though [method stop_all] and [method resume_all] might be more fit for this.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_repeat",
          "description": "Make the tween repeat after all tweens have finished.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "repeat",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed_scale",
          "description": "Set the speed multiplier of the tween. Set it to 1 for normal speed, 2 for two times nromal speed, and 0.5 for half of the normal speed. Setting it to 0 would pause the animation, but you might consider using [method set_active] or [method stop_all] and [method resume_all] for this.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tween_process_mode",
          "description": "Set whether the Tween uses [code]_process[/code] or [code]_physics_process[/code] (accepts TWEEN_PROCESS_IDLE and TWEEN_PROCESS_PHYSICS constants, respectively).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Tween.TweenProcessMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "start",
          "description": "Start the tween node. You can define tweens both before and after this.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "stop",
          "description": "Stop animating a tween, given its object and property/method pair. Passing empty String as key will stop all tweens for given object.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "stop_all",
          "description": "Stop animating all tweens.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "targeting_method",
          "description": "Animate [code]method[/code] of [code]object[/code] from the value returned by [code]initial.initial_method[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecutive values.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "initial_method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "targeting_property",
          "description": "Animate [code]property[/code] of [code]object[/code] from the current value of the [code]initial_val[/code] property of [code]initial[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.\n\t\t\t\t[code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "initial",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "initial_val",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "final_val",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "5",
              "name": "duration",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "6",
              "name": "trans_type",
              "type": "int",
              "enum": "Tween.TransitionType",
              "default_value": ""
            },
            {
              "index": "7",
              "name": "ease_type",
              "type": "int",
              "enum": "Tween.EaseType",
              "default_value": ""
            },
            {
              "index": "8",
              "name": "delay",
              "type": "float",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "tell",
          "qualifiers": "const",
          "description": "Returns the current time of the tween.",
          "return_type": "float",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "tween_completed",
          "description": "This signal is emitted when a tween ends.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tween_started",
          "description": "This signal is emitted when a tween starts.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tween_step",
          "description": "This signal is emitted each step of the tweening.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "elapsed",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "TWEEN_PROCESS_PHYSICS",
          "value": "0",
          "description": "The [Tween] should use [code]_physics_process[/code] for timekeeping when this is enabled."
        },
        {
          "name": "TWEEN_PROCESS_IDLE",
          "value": "1",
          "description": "The [Tween] should use [code]_process[/code] for timekeeping when this is enabled (default)."
        },
        {
          "name": "TRANS_LINEAR",
          "value": "0",
          "description": "Means that the animation is interpolated linearly."
        },
        {
          "name": "TRANS_SINE",
          "value": "1",
          "description": "Means that the animation is interpolated using a sine wave."
        },
        {
          "name": "TRANS_QUINT",
          "value": "2",
          "description": "Means that the animation is interpolated with a quinary (to the power of 5) function."
        },
        {
          "name": "TRANS_QUART",
          "value": "3",
          "description": "Means that the animation is interpolated with a quartic (to the power of 4) function."
        },
        {
          "name": "TRANS_QUAD",
          "value": "4",
          "description": "Means that the animation is interpolated with a quadratic (to the power of 2) function."
        },
        {
          "name": "TRANS_EXPO",
          "value": "5",
          "description": "Means that the animation is interpolated with an exponential (some number to the power of x) function."
        },
        {
          "name": "TRANS_ELASTIC",
          "value": "6",
          "description": "Means that the animation is interpolated with elasticity, wiggling around the edges."
        },
        {
          "name": "TRANS_CUBIC",
          "value": "7",
          "description": "Means that the animation is interpolated with a cubic (to the power of 3) function."
        },
        {
          "name": "TRANS_CIRC",
          "value": "8",
          "description": "Means that the animation is interpolated with a function using square roots."
        },
        {
          "name": "TRANS_BOUNCE",
          "value": "9",
          "description": "Means that the animation is interpolated by bouncing at, but never surpassing, the end."
        },
        {
          "name": "TRANS_BACK",
          "value": "10",
          "description": "Means that the animation is interpolated backing out at edges."
        },
        {
          "name": "EASE_IN",
          "value": "0",
          "description": "Signifies that the interpolation should be focused in the beginning."
        },
        {
          "name": "EASE_OUT",
          "value": "1",
          "description": "Signifies that the interpolation should be focused in the end."
        },
        {
          "name": "EASE_IN_OUT",
          "value": "2",
          "description": "Signifies that the interpolation should be focused in both ends."
        },
        {
          "name": "EASE_OUT_IN",
          "value": "3",
          "description": "Signifies that the interpolation should be focused in both ends, but they should be switched (a bit hard to explain, try it for yourself to be sure)."
        }
      ],
      "properties": [
        {
          "name": "playback_process_mode",
          "type": "int",
          "setter": "set_tween_process_mode",
          "getter": "get_tween_process_mode",
          "enum": "Tween.TweenProcessMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Sprite3D": {
      "name": "Sprite3D",
      "inherits": "SpriteBase3D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "2D Sprite node in 3D world.",
      "description": "A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.",
      "methods": [
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_hframes",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_region_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_vframes",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_frame",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frame",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hframes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hframes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_rect",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vframes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vframes",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "frame_changed",
          "description": "Emitted when the [member frame] changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "frame",
          "type": "int",
          "setter": "set_frame",
          "getter": "get_frame",
          "description": "Current frame to display from sprite sheet. [member vframes] or [member hframes] must be greater than 1."
        },
        {
          "name": "hframes",
          "type": "int",
          "setter": "set_hframes",
          "getter": "get_hframes",
          "description": "The number of columns in the sprite sheet."
        },
        {
          "name": "region_enabled",
          "type": "bool",
          "setter": "set_region",
          "getter": "is_region",
          "description": "If [code]true[/code] texture will be cut from a larger atlas texture. See [member region_rect]. Default value: [code]false[/code]."
        },
        {
          "name": "region_rect",
          "type": "Rect2",
          "setter": "set_region_rect",
          "getter": "get_region_rect",
          "description": "The region of the atlas texture to display. [member region_enabled] must be [code]true[/code]."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "[Texture] object to draw."
        },
        {
          "name": "vframes",
          "type": "int",
          "setter": "set_vframes",
          "getter": "get_vframes",
          "description": "The number of rows in the sprite sheet."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptSwitch": {
      "name": "VisualScriptSwitch",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamPlayer3D": {
      "name": "AudioStreamPlayer3D",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Plays 3D sound in 3D space",
      "description": "Plays a sound effect with directed sound effects, dampens with distance if needed, generates effect of hearable position in space.",
      "methods": [
        {
          "name": "get_area_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_attenuation_filter_cutoff_hz",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_attenuation_filter_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_attenuation_model",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_bus",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_doppler_tracking",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_emission_angle",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_emission_angle_filter_attenuation_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_max_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_max_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_out_of_range_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_playback_position",
          "description": "Returns the position in the [AudioStream].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_stream",
          "qualifiers": "const",
          "description": "",
          "return_type": "AudioStream",
          "arguments": []
        },
        {
          "name": "get_unit_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_unit_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_autoplay_enabled",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_emission_angle_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Plays the audio from the given position 'from_position', in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from_position",
              "type": "float",
              "default_value": "0.0"
            }
          ]
        },
        {
          "name": "seek",
          "description": "Sets the position from which audio will be played, in seconds.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_area_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_attenuation_filter_cutoff_hz",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_attenuation_filter_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_attenuation_model",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "model",
              "type": "int",
              "enum": "AudioStreamPlayer3D.AttenuationModel",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bus",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bus",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_doppler_tracking",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "AudioStreamPlayer3D.DopplerTracking",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_angle",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_angle_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_angle_filter_attenuation_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max_db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "metres",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_out_of_range_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "AudioStreamPlayer3D.OutOfRangeMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stream",
              "type": "AudioStream",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_unit_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "unit_db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_unit_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "unit_size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stops the audio.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "finished",
          "description": "Fires when the audio stops playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "ATTENUATION_INVERSE_DISTANCE",
          "value": "0",
          "description": "Linear dampening of loudness according to distance."
        },
        {
          "name": "ATTENUATION_INVERSE_SQUARE_DISTANCE",
          "value": "1",
          "description": "Squared dampening of loudness according to distance."
        },
        {
          "name": "ATTENUATION_LOGARITHMIC",
          "value": "2",
          "description": "Logarithmic dampening of loudness according to distance."
        },
        {
          "name": "OUT_OF_RANGE_MIX",
          "value": "0",
          "description": "Mix this audio in, even when it's out of range."
        },
        {
          "name": "OUT_OF_RANGE_PAUSE",
          "value": "1",
          "description": "Pause this audio when it gets out of range."
        },
        {
          "name": "DOPPLER_TRACKING_DISABLED",
          "value": "0",
          "description": "Disables doppler tracking."
        },
        {
          "name": "DOPPLER_TRACKING_IDLE_STEP",
          "value": "1",
          "description": "Executes doppler tracking in idle step."
        },
        {
          "name": "DOPPLER_TRACKING_PHYSICS_STEP",
          "value": "2",
          "description": "Executes doppler tracking in physics step."
        }
      ],
      "properties": [
        {
          "name": "area_mask",
          "type": "int",
          "setter": "set_area_mask",
          "getter": "get_area_mask",
          "description": "Areas in which this sound plays."
        },
        {
          "name": "attenuation_filter_cutoff_hz",
          "type": "float",
          "setter": "set_attenuation_filter_cutoff_hz",
          "getter": "get_attenuation_filter_cutoff_hz",
          "description": "Dampens audio above this frequency, in Hz."
        },
        {
          "name": "attenuation_filter_db",
          "type": "float",
          "setter": "set_attenuation_filter_db",
          "getter": "get_attenuation_filter_db",
          "description": "Amount how much the filter affects the loudness, in dB."
        },
        {
          "name": "attenuation_model",
          "type": "int",
          "setter": "set_attenuation_model",
          "getter": "get_attenuation_model",
          "enum": "AudioStreamPlayer3D.AttenuationModel",
          "description": "Decides if audio should get quieter with distance linearly, quadratically or logarithmically."
        },
        {
          "name": "autoplay",
          "type": "bool",
          "setter": "set_autoplay",
          "getter": "is_autoplay_enabled",
          "description": "If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code]."
        },
        {
          "name": "bus",
          "type": "String",
          "setter": "set_bus",
          "getter": "get_bus",
          "description": "Bus on which this audio is playing."
        },
        {
          "name": "doppler_tracking",
          "type": "int",
          "setter": "set_doppler_tracking",
          "getter": "get_doppler_tracking",
          "enum": "AudioStreamPlayer3D.DopplerTracking",
          "description": "Decides in which step the Doppler effect should be calculated."
        },
        {
          "name": "emission_angle_degrees",
          "type": "float",
          "setter": "set_emission_angle",
          "getter": "get_emission_angle",
          "description": "The angle in which the audio reaches cameras undampened."
        },
        {
          "name": "emission_angle_enabled",
          "type": "bool",
          "setter": "set_emission_angle_enabled",
          "getter": "is_emission_angle_enabled",
          "description": "If [code]true[/code] the audio should be dampened according to the direction of the sound."
        },
        {
          "name": "emission_angle_filter_attenuation_db",
          "type": "float",
          "setter": "set_emission_angle_filter_attenuation_db",
          "getter": "get_emission_angle_filter_attenuation_db",
          "description": "dampens audio if camera is outside of 'emission_angle_degrees' and 'emission_angle_enabled' is set by this factor, in dB."
        },
        {
          "name": "max_db",
          "type": "float",
          "setter": "set_max_db",
          "getter": "get_max_db",
          "description": "Sets the absolute maximum of the soundlevel, in dB."
        },
        {
          "name": "max_distance",
          "type": "float",
          "setter": "set_max_distance",
          "getter": "get_max_distance",
          "description": "Sets the distance from which the 'out_of_range_mode' takes effect. Has no effect if set to 0."
        },
        {
          "name": "out_of_range_mode",
          "type": "int",
          "setter": "set_out_of_range_mode",
          "getter": "get_out_of_range_mode",
          "enum": "AudioStreamPlayer3D.OutOfRangeMode",
          "description": "Decides if audio should pause when source is outside of 'max_distance' range."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "is_playing",
          "description": "If [code]true[/code], audio is playing."
        },
        {
          "name": "stream",
          "type": "AudioStream",
          "setter": "set_stream",
          "getter": "get_stream",
          "description": "The [AudioStream] object to be played."
        },
        {
          "name": "unit_db",
          "type": "float",
          "setter": "set_unit_db",
          "getter": "get_unit_db",
          "description": "Base sound level unaffected by dampening, in dB."
        },
        {
          "name": "unit_size",
          "type": "float",
          "setter": "set_unit_size",
          "getter": "get_unit_size",
          "description": "Factor for the attenuation effect."
        }
      ],
      "theme_properties": []
    },
    "Gradient": {
      "name": "Gradient",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Color interpolator node.",
      "description": "Given a set of colors, this node will interpolate them in order, meaning, that if you have color 1, color 2 and color3, the ramp will interpolate (generate the colors between two colors) from color 1 to color 2 and from color 2 to color 3. Initially the ramp will have 2 colors (black and white), one (black) at ramp lower offset offset 0 and the other (white) at the ramp higher offset 1.",
      "methods": [
        {
          "name": "add_point",
          "description": "Adds the specified color to the end of the ramp, with the specified offset",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Returns the color of the ramp color at index [i]point[/i]",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_colors",
          "qualifiers": "const",
          "description": "Returns the colors in the ramp",
          "return_type": "PoolColorArray",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Returns the offset of the ramp color at index [i]point[/i]",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_offsets",
          "qualifiers": "const",
          "description": "Returns the offsets for the colors in this ramp",
          "return_type": "PoolRealArray",
          "arguments": []
        },
        {
          "name": "get_point_count",
          "qualifiers": "const",
          "description": "Returns the number of colors in the ramp",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "interpolate",
          "description": "Returns the interpolated color specified by [i]offset[/i]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_point",
          "description": "Removes the color at the index [i]offset[/i]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color",
          "description": "Sets the color of the ramp color at index [i]point[/i]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_colors",
          "description": "Sets the colors for the specified amount of elements. Calling this function with a different number of elements than previously defined causes the ramp to resize its colors and offsets array to accommodate the new elements.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Sets the offset for the ramp color at index [i]point[/i]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offsets",
          "description": "Sets the offset for the specified amount of elements. Calling this function with a different number of elements than previously defined causes the ramp to resize its colors and offsets array to accommodate the new elements, all new colors will be black by default.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offsets",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "colors",
          "type": "PoolColorArray",
          "setter": "set_colors",
          "getter": "get_colors",
          "description": "Gradient's colors returned as a [PoolColorArray]."
        },
        {
          "name": "offsets",
          "type": "PoolRealArray",
          "setter": "set_offsets",
          "getter": "get_offsets",
          "description": "Gradient's offsets returned as a [PoolRealArray]."
        }
      ],
      "theme_properties": []
    },
    "PhysicsDirectBodyState": {
      "name": "PhysicsDirectBodyState",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_force",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "force",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_impulse",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "j",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "apply_torqe_impulse",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "j",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_angular_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_center_of_mass",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_contact_collider",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_object",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_collider_velocity_at_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_contact_local_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_contact_local_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "contact_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_inverse_inertia",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_inverse_mass",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_linear_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_principal_inertia_axes",
          "qualifiers": "const",
          "description": "",
          "return_type": "Basis",
          "arguments": []
        },
        {
          "name": "get_space_state",
          "description": "",
          "return_type": "PhysicsDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_step",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_total_angular_damp",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_total_gravity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_total_linear_damp",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "integrate_forces",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_sleeping",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_angular_velocity",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_velocity",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "velocity",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sleep_state",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HSplitContainer": {
      "name": "HSplitContainer",
      "inherits": "SplitContainer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Horizontal split container.",
      "description": "Horizontal split container. See [SplitContainer]. This goes from left to right.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "autohide",
          "type": "int",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "SceneState": {
      "name": "SceneState",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_connection_binds",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_connection_flags",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_method",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_signal",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_source",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_target",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node_groups",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_instance",
          "qualifiers": "const",
          "description": "",
          "return_type": "PackedScene",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_instance_placeholder",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_owner_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "for_parent",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_node_property_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_property_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "prop_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_property_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "prop_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_node_instance_placeholder",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "GEN_EDIT_STATE_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "GEN_EDIT_STATE_INSTANCE",
          "value": "1",
          "description": ""
        },
        {
          "name": "GEN_EDIT_STATE_MAIN",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ARVROrigin": {
      "name": "ARVROrigin",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Our origin point in AR/VR.",
      "description": "This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world.\n\t\tThere should be only one of these nodes in your scene and you must have one. All the ARVRCamera, ARVRController and ARVRAnchor nodes should be direct children of this node for spatial tracking to work correctly.\n\t\tIt is the position of this node that you update when you're character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point.\n\t\tSo say that your character is driving a car, the ARVROrigin node should be a child node of this car. If you implement a teleport system to move your character, you change the position of this node. Etc.",
      "methods": [
        {
          "name": "get_world_scale",
          "qualifiers": "const",
          "description": "Get the world scale applied to our positioning.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_world_scale",
          "description": "Changes the world scaling factor.\n\t\t\t\tMost AR/VR platforms will assume a unit size of 1 unit in your game world = 1 meter in the real world. This scale allows you to adjust this to the unit system you use in your game. \n\t\t\t\tNote that this method is a passthrough to the ARVRServer itself.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "world_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "world_scale",
          "type": "float",
          "setter": "set_world_scale",
          "getter": "get_world_scale",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "JSONParseResult": {
      "name": "JSONParseResult",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Data class wrapper for decoded JSON.",
      "description": "Returned by [method JSON.parse], [JSONParseResult] contains decoded JSON or error information if JSON source not successfully parsed. You can check if JSON source was successfully parsed with [code]if json_result.error == 0[/code].",
      "methods": [
        {
          "name": "get_error",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_error_line",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_error_string",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_result",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "set_error",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "error",
              "type": "int",
              "enum": "Error",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_error_line",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "error_line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_error_string",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "error_string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_result",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "result",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "error",
          "type": "int",
          "setter": "set_error",
          "getter": "get_error",
          "enum": "Error",
          "description": "The error type if JSON source was not successfully parsed. See [@Global Scope]ERR_* constants."
        },
        {
          "name": "error_line",
          "type": "int",
          "setter": "set_error_line",
          "getter": "get_error_line",
          "description": "The line number where the error occurred if JSON source was not successfully parsed."
        },
        {
          "name": "error_string",
          "type": "String",
          "setter": "set_error_string",
          "getter": "get_error_string",
          "description": "The error message if JSON source was not successfully parsed. See [@Global Scope]ERR_* constants."
        },
        {
          "name": "result",
          "type": "Variant",
          "setter": "set_result",
          "getter": "get_result",
          "description": "A [Variant] containing the parsed JSON. Use typeof() to check if it is what you expect. For example, if JSON source starts with braces [code]{}[/code] a [Dictionary] will be returned, if JSON source starts with array braces [code][][/code] an [Array] will be returned.\n\t\t\t[i]Be aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to float types.[/i]\n\t\t\t[codeblock]\n\t\t\tp = JSON.parse('[\"hello\", \"world\", \"!\"]')\n\t\t\tif typeof(p) == TYPE_ARRAY:\n\t\t\t\tprint(p[0]) # prints 'hello'\n\t\t\telse:\n\t\t\t\tprint(\"unexpected results\")\n\t\t\t[/codeblock]"
        }
      ],
      "theme_properties": []
    },
    "SegmentShape2D": {
      "name": "SegmentShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Segment shape for 2D collisions.",
      "description": "Segment shape for 2D collisions. Consists of two points, [code]a[/code] and [code]b[/code].",
      "methods": [
        {
          "name": "get_a",
          "qualifiers": "const",
          "description": "Return the first point's position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_b",
          "qualifiers": "const",
          "description": "Return the second point's position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_a",
          "description": "Set the first point's position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_b",
          "description": "Set the second point's position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "a",
          "type": "Vector2",
          "setter": "set_a",
          "getter": "get_a",
          "description": "The segment's first point position."
        },
        {
          "name": "b",
          "type": "Vector2",
          "setter": "set_b",
          "getter": "get_b",
          "description": "The segment's second point position."
        }
      ],
      "theme_properties": []
    },
    "PhysicsBody": {
      "name": "PhysicsBody",
      "inherits": "CollisionObject",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for all objects affected by physics in 3D space.",
      "description": "PhysicsBody is an abstract base class for implementing a physics body. All *Body types inherit from it.",
      "methods": [
        {
          "name": "add_collision_exception_with",
          "description": "Adds a body to the list of bodies that this body can't collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_collision_exception_with",
          "description": "Removes a body from the list of bodies that this body can't collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The physics layers this area is in.\n\t\t\tCollidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.\n\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The physics layers this area can scan for collisions."
        }
      ],
      "theme_properties": []
    },
    "Camera": {
      "name": "Camera",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Camera node, displays from a point of view.",
      "description": "Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the Camera will register in the global viewport. In other words, a Camera just provides [i]3D[/i] display capabilities to a [Viewport], and, without one, a scene registered in that [Viewport] (or higher viewports) can't be displayed.",
      "methods": [
        {
          "name": "clear_current",
          "description": "If this is the current Camera, remove it from being current. If it is inside the node tree, request to make the next Camera current, if any.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_camera_transform",
          "qualifiers": "const",
          "description": "Get the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the [Node] transform.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "get_cull_mask",
          "qualifiers": "const",
          "description": "Returns the culling mask, describing which 3D render layers are rendered by this Camera.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_doppler_tracking",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_environment",
          "qualifiers": "const",
          "description": "Returns the [Environment] used by this Camera.",
          "return_type": "Environment",
          "arguments": []
        },
        {
          "name": "get_fov",
          "qualifiers": "const",
          "description": "Returns the [i]FOV[/i] Y angle in degrees (FOV means Field of View).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_h_offset",
          "qualifiers": "const",
          "description": "Returns the horizontal (X) offset of the Camera viewport.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_keep_aspect_mode",
          "qualifiers": "const",
          "description": "Returns the current mode for keeping the aspect ratio. See [code]KEEP_*[/code] constants.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_projection",
          "qualifiers": "const",
          "description": "Returns the Camera's projection. See PROJECTION_* constants.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_v_offset",
          "qualifiers": "const",
          "description": "Returns the vertical (Y) offset of the Camera viewport.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_zfar",
          "qualifiers": "const",
          "description": "Returns the far clip plane in world space units.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_znear",
          "qualifiers": "const",
          "description": "Returns the near clip plane in world space units.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_current",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the Camera is the current one in the [Viewport], or plans to become current (if outside the scene tree).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_position_behind",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the given position is behind the Camera.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "world_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_current",
          "description": "Make this camera the current Camera for the [Viewport] (see class description). If the Camera Node is outside the scene tree, it will attempt to become current once it's added.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "project_local_ray_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "project_position",
          "qualifiers": "const",
          "description": "Returns how a 2D coordinate in the Viewport rectangle maps to a 3D point in worldspace.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "project_ray_normal",
          "qualifiers": "const",
          "description": "Returns a normal vector in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "project_ray_origin",
          "qualifiers": "const",
          "description": "Returns a 3D position in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.",
          "return_type": "Vector3",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cull_mask",
          "description": "Sets the cull mask, describing which 3D render layers are rendered by this Camera.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_doppler_tracking",
          "description": "Changes Doppler effect tracking. See [code]DOPPLER_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Camera.DopplerTracking",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_environment",
          "description": "Sets the [Environment] to use for this Camera.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "env",
              "type": "Environment",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_offset",
          "description": "Sets the horizontal (X) offset of the Camera viewport.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_keep_aspect_mode",
          "description": "Sets the mode for keeping the aspect ratio. See [code]KEEP_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Camera.KeepAspect",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_orthogonal",
          "description": "Set the camera projection to orthogonal mode, by specifying a width and the [i]near[/i] and [i]far[/i] clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels)",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "z_near",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_far",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_perspective",
          "description": "Set the camera projection to perspective mode, by specifying a [i]FOV[/i] Y angle in degrees (FOV means Field of View), and the [i]near[/i] and [i]far[/i] clip planes in worldspace units.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fov",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "z_near",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_far",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_offset",
          "description": "Sets the vertical (Y) offset of the Camera viewport.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unproject_position",
          "qualifiers": "const",
          "description": "Returns how a 3D point in worldspace maps to a 2D coordinate in the [Viewport] rectangle.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "world_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PROJECTION_PERSPECTIVE",
          "value": "0",
          "description": "Perspective Projection (object's size on the screen becomes smaller when far away)."
        },
        {
          "name": "PROJECTION_ORTHOGONAL",
          "value": "1",
          "description": "Orthogonal Projection (objects remain the same size on the screen no matter how far away they are)."
        },
        {
          "name": "KEEP_WIDTH",
          "value": "0",
          "description": "Try to keep the aspect ratio when scaling the Camera's viewport to the screen. If not possible, preserve the viewport's width by changing the height. Height is [code]sizey[/code] for orthographic projection, [code]fovy[/code] for perspective projection."
        },
        {
          "name": "KEEP_HEIGHT",
          "value": "1",
          "description": "Try to keep the aspect ratio when scaling the Camera's viewport to the screen. If not possible, preserve the viewport's height by changing the width. Width is [code]sizex[/code] for orthographic projection, [code]fovx[/code] for perspective projection."
        },
        {
          "name": "DOPPLER_TRACKING_DISABLED",
          "value": "0",
          "description": "Disable Doppler effect simulation (default)."
        },
        {
          "name": "DOPPLER_TRACKING_IDLE_STEP",
          "value": "1",
          "description": "Simulate Doppler effect by tracking positions of objects that are changed in [code]_process[/code]. Changes in the relative velocity of this Camera compared to those objects affect how Audio is perceived (changing the Audio's [code]pitch shift[/code])."
        },
        {
          "name": "DOPPLER_TRACKING_PHYSICS_STEP",
          "value": "2",
          "description": "Simulate Doppler effect by tracking positions of objects that are changed in [code]_physics_process[/code]. Changes in the relative velocity of this Camera compared to those objects affect how Audio is perceived (changing the Audio's [code]pitch shift[/code])."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptVariableSet": {
      "name": "VisualScriptVariableSet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_variable",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_variable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "var_name",
          "type": "String",
          "setter": "set_variable",
          "getter": "get_variable",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TextureButton": {
      "name": "TextureButton",
      "inherits": "BaseButton",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Texture-based button. Supports Pressed, Hover, Disabled and Focused states.",
      "description": "[code]TextureButton[/code] has the same functionality as [Button], except it uses sprites instead of Godot's [Theme] resource. It is faster to create, but it doesn't support localization like more complex Controls.\n\t\tThe Normal state's texture is required. Others are optional.",
      "methods": [
        {
          "name": "get_click_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "BitMap",
          "arguments": []
        },
        {
          "name": "get_disabled_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_expand",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_focused_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_hover_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_normal_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_pressed_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_stretch_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_click_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "BitMap",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_disabled_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_expand",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_expand",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_focused_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hover_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressed_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stretch_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_mode",
              "type": "int",
              "enum": "TextureButton.StretchMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STRETCH_SCALE",
          "value": "0",
          "description": "Scale to fit the node's bounding rectangle."
        },
        {
          "name": "STRETCH_TILE",
          "value": "1",
          "description": "Tile inside the node's bounding rectangle."
        },
        {
          "name": "STRETCH_KEEP",
          "value": "2",
          "description": "The texture keeps its original size and stays in the bounding rectangle's top-left corner."
        },
        {
          "name": "STRETCH_KEEP_CENTERED",
          "value": "3",
          "description": "The texture keeps its original size and stays centered in the node's bounding rectangle."
        },
        {
          "name": "STRETCH_KEEP_ASPECT",
          "value": "4",
          "description": "Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio."
        },
        {
          "name": "STRETCH_KEEP_ASPECT_CENTERED",
          "value": "5",
          "description": "Scale the texture to fit the node's bounding rectangle, center it, and maintain its aspect ratio."
        },
        {
          "name": "STRETCH_KEEP_ASPECT_COVERED",
          "value": "6",
          "description": "Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits."
        }
      ],
      "properties": [
        {
          "name": "expand",
          "type": "bool",
          "setter": "set_expand",
          "getter": "get_expand",
          "description": "If [code]true[/code] the texture stretches to the edges of the node's bounding rectangle using the [member stretch_mode]. If [code]false[/code] the texture will not scale with the node. Default value: [code]false[/code]."
        },
        {
          "name": "stretch_mode",
          "type": "int",
          "setter": "set_stretch_mode",
          "getter": "get_stretch_mode",
          "enum": "TextureButton.StretchMode",
          "description": "Controls the texture's behavior when you resize the node's bounding rectangle, [b]only if[/b] [member expand] is [code]true[/code]. Set it to one of the [code]STRETCH_*[/code] constants. See the constants to learn more."
        },
        {
          "name": "texture_click_mask",
          "type": "BitMap",
          "setter": "set_click_mask",
          "getter": "get_click_mask",
          "description": "Pure black and white [Bitmap] image to use for click detection. On the mask, white pixels represent the button's clickable area. Use it to create buttons with curved shapes."
        },
        {
          "name": "texture_disabled",
          "type": "Texture",
          "setter": "set_disabled_texture",
          "getter": "get_disabled_texture",
          "description": "Texture to display when the node is disabled. See [member BaseButton.disabled]."
        },
        {
          "name": "texture_focused",
          "type": "Texture",
          "setter": "set_focused_texture",
          "getter": "get_focused_texture",
          "description": "Texture to display when the node has mouse or keyboard focus."
        },
        {
          "name": "texture_hover",
          "type": "Texture",
          "setter": "set_hover_texture",
          "getter": "get_hover_texture",
          "description": "Texture to display when the mouse hovers the node."
        },
        {
          "name": "texture_normal",
          "type": "Texture",
          "setter": "set_normal_texture",
          "getter": "get_normal_texture",
          "description": "Texture to display by default, when the node is [b]not[/b] in the disabled, focused, hover or pressed state."
        },
        {
          "name": "texture_pressed",
          "type": "Texture",
          "setter": "set_pressed_texture",
          "getter": "get_pressed_texture",
          "description": "Texture to display on mouse down over the node, if the node has keyboard focus and the player presses the enter key or if the player presses the [member BaseButton.shortcut] key."
        }
      ],
      "theme_properties": []
    },
    "PoolColorArray": {
      "name": "PoolColorArray",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Array of Colors",
      "description": "Array of Color, Contains colors. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolColorArray",
          "description": "Create from a generic array.",
          "return_type": "PoolColorArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append a [PoolColorArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append a value to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the [Color] at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ParticlesMaterial": {
      "name": "ParticlesMaterial",
      "inherits": "Material",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Particle properties for [Particles] and [Particles2D] nodes.",
      "description": "ParticlesMaterial defines particle properties and behavior. It is used in the [code]process_material[/code] of [Particles] and [Particles2D] emitter nodes.\n\t\tSome of this material's properties are applied to each particle when emitted, while others can have a [CurveTexture] applied to vary values over the lifetime of the particle.",
      "methods": [
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_color_ramp",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_emission_box_extents",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_emission_color_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_emission_normal_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_emission_point_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_emission_point_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_emission_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_emission_sphere_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "ParticlesMaterial.Flags",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_flatness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_param",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "ParticlesMaterial.Parameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param_randomness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "ParticlesMaterial.Parameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "ParticlesMaterial.Parameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_spread",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_trail_color_modifier",
          "qualifiers": "const",
          "description": "",
          "return_type": "GradientTexture",
          "arguments": []
        },
        {
          "name": "get_trail_divisor",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_trail_size_modifier",
          "qualifiers": "const",
          "description": "",
          "return_type": "CurveTexture",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color_ramp",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ramp",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_box_extents",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "extents",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_color_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_normal_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_point_count",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point_count",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_point_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "int",
              "enum": "ParticlesMaterial.EmissionShape",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_sphere_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "ParticlesMaterial.Flags",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flatness",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "accel_vec",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "ParticlesMaterial.Parameter",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param_randomness",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "ParticlesMaterial.Parameter",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "randomness",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "ParticlesMaterial.Parameter",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_spread",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_trail_color_modifier",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "GradientTexture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_trail_divisor",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "divisor",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_trail_size_modifier",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "CurveTexture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_INITIAL_LINEAR_VELOCITY",
          "value": "0",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set initial velocity properties."
        },
        {
          "name": "PARAM_ANGULAR_VELOCITY",
          "value": "1",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set angular velocity properties."
        },
        {
          "name": "PARAM_ORBIT_VELOCITY",
          "value": "2",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set orbital_velocity properties."
        },
        {
          "name": "PARAM_LINEAR_ACCEL",
          "value": "3",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set linear acceleration properties."
        },
        {
          "name": "PARAM_RADIAL_ACCEL",
          "value": "4",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set radial acceleration properties."
        },
        {
          "name": "PARAM_TANGENTIAL_ACCEL",
          "value": "5",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set tangential acceleration properties."
        },
        {
          "name": "PARAM_DAMPING",
          "value": "6",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set damping properties."
        },
        {
          "name": "PARAM_ANGLE",
          "value": "7",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set angle properties."
        },
        {
          "name": "PARAM_SCALE",
          "value": "8",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set scale properties."
        },
        {
          "name": "PARAM_HUE_VARIATION",
          "value": "9",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set hue_variation properties."
        },
        {
          "name": "PARAM_ANIM_SPEED",
          "value": "10",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set animation speed properties."
        },
        {
          "name": "PARAM_ANIM_OFFSET",
          "value": "11",
          "description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set animation offset properties."
        },
        {
          "name": "PARAM_MAX",
          "value": "12",
          "description": ""
        },
        {
          "name": "FLAG_ALIGN_Y_TO_VELOCITY",
          "value": "0",
          "description": "Use with [method set_flag] to set [member flag_align_y]."
        },
        {
          "name": "FLAG_ROTATE_Y",
          "value": "1",
          "description": "Use with [method set_flag] to set [member flag_rotate_y]"
        },
        {
          "name": "FLAG_MAX",
          "value": "4",
          "description": ""
        },
        {
          "name": "EMISSION_SHAPE_POINT",
          "value": "0",
          "description": "All particles will be emitted from a single point."
        },
        {
          "name": "EMISSION_SHAPE_SPHERE",
          "value": "1",
          "description": "Particles will be emitted in the volume of a sphere."
        },
        {
          "name": "EMISSION_SHAPE_BOX",
          "value": "2",
          "description": "Particles will be emitted in the volume of a box."
        },
        {
          "name": "EMISSION_SHAPE_POINTS",
          "value": "3",
          "description": ""
        },
        {
          "name": "EMISSION_SHAPE_DIRECTED_POINTS",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "angle",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial rotation applied to each particle."
        },
        {
          "name": "angle_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's rotation will be animated along this [CurveTexture]."
        },
        {
          "name": "angle_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Rotation randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "angular_velocity",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial angular velocity applied to each particle."
        },
        {
          "name": "angular_velocity_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's angular velocity will vary along this [CurveTexture]."
        },
        {
          "name": "angular_velocity_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Angular velocity randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "anim_loop",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": "If [code]true[/code] animation will loop. Default value: [code]false[/code]."
        },
        {
          "name": "anim_offset",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Particle animation offset."
        },
        {
          "name": "anim_offset_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's animation offset will vary along this [CurveTexture]."
        },
        {
          "name": "anim_offset_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Animation offset randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "anim_speed",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Particle animation speed."
        },
        {
          "name": "anim_speed_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's animation speed will vary along this [CurveTexture]."
        },
        {
          "name": "anim_speed_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Animation speed randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": "Each particle's initial color. If the [Particle2D]'s [code]texture[/code] is defined, it will be multiplied by this color."
        },
        {
          "name": "color_ramp",
          "type": "Texture",
          "setter": "set_color_ramp",
          "getter": "get_color_ramp",
          "description": "Each particle's color will vary along this [GradientTexture]."
        },
        {
          "name": "damping",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "The rate at which particles lose velocity."
        },
        {
          "name": "damping_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Damping will vary along this [CurveTexture]."
        },
        {
          "name": "damping_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Damping randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "emission_box_extents",
          "type": "Vector3",
          "setter": "set_emission_box_extents",
          "getter": "get_emission_box_extents",
          "description": "The box's extents if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_BOX[/code]."
        },
        {
          "name": "emission_color_texture",
          "type": "Texture",
          "setter": "set_emission_color_texture",
          "getter": "get_emission_color_texture",
          "description": ""
        },
        {
          "name": "emission_normal_texture",
          "type": "Texture",
          "setter": "set_emission_normal_texture",
          "getter": "get_emission_normal_texture",
          "description": ""
        },
        {
          "name": "emission_point_count",
          "type": "int",
          "setter": "set_emission_point_count",
          "getter": "get_emission_point_count",
          "description": "The number of emission points if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_POINTS[/code] or [code]EMISSION_SHAPE_DIRECTED_POINTS[/code]."
        },
        {
          "name": "emission_point_texture",
          "type": "Texture",
          "setter": "set_emission_point_texture",
          "getter": "get_emission_point_texture",
          "description": ""
        },
        {
          "name": "emission_shape",
          "type": "int",
          "setter": "set_emission_shape",
          "getter": "get_emission_shape",
          "enum": "ParticlesMaterial.EmissionShape",
          "description": "Particles will be emitted inside this region. Use [code]EMISSION_SHAPE_*[/code] constants for values. Default value: [code]EMISSION_SHAPE_POINT[/code]."
        },
        {
          "name": "emission_sphere_radius",
          "type": "float",
          "setter": "set_emission_sphere_radius",
          "getter": "get_emission_sphere_radius",
          "description": "The sphere's radius if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_SPHERE[/code]."
        },
        {
          "name": "flag_align_y",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flag_disable_z",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": "If [code]true[/code] particles will not move on the z axis. Default value: [code]true[/code] for [Particles2D], [code]false[/code] for [Particles]."
        },
        {
          "name": "flag_rotate_y",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flatness",
          "type": "float",
          "setter": "set_flatness",
          "getter": "get_flatness",
          "description": ""
        },
        {
          "name": "gravity",
          "type": "Vector3",
          "setter": "set_gravity",
          "getter": "get_gravity",
          "description": "Gravity applied to every particle. Default value: [code](0, 98, 0)[/code]."
        },
        {
          "name": "hue_variation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial hue variation applied to each particle."
        },
        {
          "name": "hue_variation_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's hue will vary along this [CurveTexture]."
        },
        {
          "name": "hue_variation_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Hue variation randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "initial_velocity",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial velocity for each particle."
        },
        {
          "name": "initial_velocity_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Initial velocity randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "linear_accel",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Linear acceleration applied to each particle."
        },
        {
          "name": "linear_accel_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's linear acceleration will vary along this [CurveTexture]."
        },
        {
          "name": "linear_accel_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Linear acceleration randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "orbit_velocity",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Orbital velocity applied to each particle."
        },
        {
          "name": "orbit_velocity_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's orbital velocity will vary along this [CurveTexture]."
        },
        {
          "name": "orbit_velocity_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Orbital velocity randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "radial_accel",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Linear acceleration applied to each particle."
        },
        {
          "name": "radial_accel_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's radial acceleration will vary along this [CurveTexture]."
        },
        {
          "name": "radial_accel_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Radial acceleration randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "scale",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Initial scale applied to each particle."
        },
        {
          "name": "scale_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's scale will vary along this [CurveTexture]."
        },
        {
          "name": "scale_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Scale randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "spread",
          "type": "float",
          "setter": "set_spread",
          "getter": "get_spread",
          "description": "Each particle's initial direction range from [code]+spread[/code] to [code]-spread[/code] degrees. Default value: [code]45[/code]."
        },
        {
          "name": "tangential_accel",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": "Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity."
        },
        {
          "name": "tangential_accel_curve",
          "type": "Texture",
          "setter": "set_param_texture",
          "getter": "get_param_texture",
          "description": "Each particle's tangential acceleration will vary along this [CurveTexture]."
        },
        {
          "name": "tangential_accel_random",
          "type": "float",
          "setter": "set_param_randomness",
          "getter": "get_param_randomness",
          "description": "Tangential acceleration randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "trail_color_modifier",
          "type": "GradientTexture",
          "setter": "set_trail_color_modifier",
          "getter": "get_trail_color_modifier",
          "description": "Trail particles' color will vary along this [GradientTexture]."
        },
        {
          "name": "trail_divisor",
          "type": "int",
          "setter": "set_trail_divisor",
          "getter": "get_trail_divisor",
          "description": "Emitter will emit [code]amount[/code] divided by [code]trail_divisor[/code] particles. The remaining particles will be used as trail(s)."
        },
        {
          "name": "trail_size_modifier",
          "type": "CurveTexture",
          "setter": "set_trail_size_modifier",
          "getter": "get_trail_size_modifier",
          "description": "Trail particles' size will vary along this [CurveTexture]."
        }
      ],
      "theme_properties": []
    },
    "ARVRCamera": {
      "name": "ARVRCamera",
      "inherits": "Camera",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A camera node with a few overrules for AR/VR applied such as location tracking.",
      "description": "This is a helper spatial node for our camera, note that if stereoscopic rendering is applicable (VR-HMD) most of the camera properties are ignored as the HMD information overrides them. The only properties that can be trusted are the near and far planes.\n\t\tThe position and orientation of this node is automatically updated by the ARVR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that in contrast to the ARVR Controller the render thread has access to the most up to date tracking data of the HMD and the location of the ARVRCamera can lag a few milliseconds behind what is used for rendering as a result.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HSeparator": {
      "name": "HSeparator",
      "inherits": "Separator",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Horizontal separator.",
      "description": "Horizontal separator. See [Separator]. It is used to separate objects vertically, though (but it looks horizontal!).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "separator",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ScrollContainer": {
      "name": "ScrollContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A helper node for displaying scrollable elements (e.g. lists).",
      "description": "A ScrollContainer node with a [Control] child and scrollbar child ([HScrollbar], [VScrollBar], or both) will only draw the Control within the ScrollContainer area.  Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer.  Scrollbars will also automatically resize the grabber based on the minimum_size of the Control relative to the ScrollContainer.  Works great with a [Panel] control.  You can set EXPAND on children size flags, so they will upscale to ScrollContainer size if ScrollContainer size is bigger (scroll is invisible for chosen dimension).",
      "methods": [
        {
          "name": "get_h_scroll",
          "qualifiers": "const",
          "description": "Return current horizontal scroll value.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_v_scroll",
          "qualifiers": "const",
          "description": "Return current vertical scroll value.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_h_scroll_enabled",
          "qualifiers": "const",
          "description": "Return true if horizontal scroll is allowed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_v_scroll_enabled",
          "qualifiers": "const",
          "description": "Return true if vertical scroll is allowed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_enable_h_scroll",
          "description": "Set allows horizontal scroll.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enable_v_scroll",
          "description": "Set allows vertical scroll.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_scroll",
          "description": "Set horizontal scroll value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_scroll",
          "description": "Set vertical scroll value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "scroll_horizontal",
          "type": "bool",
          "setter": "set_enable_h_scroll",
          "getter": "is_h_scroll_enabled",
          "description": ""
        },
        {
          "name": "scroll_vertical",
          "type": "bool",
          "setter": "set_enable_v_scroll",
          "getter": "is_v_scroll_enabled",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PackedScene": {
      "name": "PackedScene",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "TODO: explain ownership, and that node does not need to own itself",
      "methods": [
        {
          "name": "can_instance",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_state",
          "description": "",
          "return_type": "SceneState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "instance",
          "qualifiers": "const",
          "description": "",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "edit_state",
              "type": "int",
              "enum": "PackedScene.GenEditState",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "pack",
          "description": "Pack will ignore any sub-nodes not owned by given node. See [method Node.set_owner].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "GEN_EDIT_STATE_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "GEN_EDIT_STATE_INSTANCE",
          "value": "1",
          "description": ""
        },
        {
          "name": "GEN_EDIT_STATE_MAIN",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "_bundled",
          "type": "Dictionary",
          "setter": "_set_bundled_scene",
          "getter": "_get_bundled_scene",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ScrollBar": {
      "name": "ScrollBar",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for scroll bars.",
      "description": "Scrollbars are a [Range] based [Control], that display a draggable area (the size of the page). Horizontal ([HScrollBar]) and Vertical ([VScrollBar]) versions are available.",
      "methods": [
        {
          "name": "get_custom_step",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_custom_step",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "scrolling",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "custom_step",
          "type": "float",
          "setter": "set_custom_step",
          "getter": "get_custom_step",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Mesh": {
      "name": "Mesh",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A [Resource] that contains vertex-array based geometry.",
      "description": "Mesh is a type of [Resource] that contains vertex-array based geometry, divided in [i]surfaces[/i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.",
      "methods": [
        {
          "name": "create_convex_shape",
          "qualifiers": "const",
          "description": "Calculate a [ConvexPolygonShape] from the mesh.",
          "return_type": "Shape",
          "arguments": []
        },
        {
          "name": "create_outline",
          "qualifiers": "const",
          "description": "Calculate an outline mesh at a defined offset (margin) from the original mesh. Note: Typically returns the vertices in reverse order (e.g. clockwise to anti-clockwise).",
          "return_type": "Mesh",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_trimesh_shape",
          "qualifiers": "const",
          "description": "Calculate a [ConcavePolygonShape] from the mesh.",
          "return_type": "Shape",
          "arguments": []
        },
        {
          "name": "generate_triangle_mesh",
          "qualifiers": "const",
          "description": "Generate a [TriangleMesh] from the mesh.",
          "return_type": "TriangleMesh",
          "arguments": []
        },
        {
          "name": "get_faces",
          "qualifiers": "const",
          "description": "Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle.",
          "return_type": "PoolVector3Array",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PRIMITIVE_POINTS",
          "value": "0",
          "description": "Render array as points (one vertex equals one point)."
        },
        {
          "name": "PRIMITIVE_LINES",
          "value": "1",
          "description": "Render array as lines (every two vertices a line is created)."
        },
        {
          "name": "PRIMITIVE_LINE_STRIP",
          "value": "2",
          "description": "Render array as line strip."
        },
        {
          "name": "PRIMITIVE_LINE_LOOP",
          "value": "3",
          "description": "Render array as line loop (like line strip, but closed)."
        },
        {
          "name": "PRIMITIVE_TRIANGLES",
          "value": "4",
          "description": "Render array as triangles (every three vertices a triangle is created)."
        },
        {
          "name": "PRIMITIVE_TRIANGLE_STRIP",
          "value": "5",
          "description": "Render array as triangle strips."
        },
        {
          "name": "PRIMITIVE_TRIANGLE_FAN",
          "value": "6",
          "description": "Render array as triangle fans."
        },
        {
          "name": "BLEND_SHAPE_MODE_NORMALIZED",
          "value": "0",
          "description": ""
        },
        {
          "name": "BLEND_SHAPE_MODE_RELATIVE",
          "value": "1",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_VERTEX",
          "value": "1",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_NORMAL",
          "value": "2",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_TANGENT",
          "value": "4",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_COLOR",
          "value": "8",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV",
          "value": "16",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV2",
          "value": "32",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_BONES",
          "value": "64",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_WEIGHTS",
          "value": "128",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_INDEX",
          "value": "256",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_BASE",
          "value": "9",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_VERTEX",
          "value": "512",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_NORMAL",
          "value": "1024",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_TANGENT",
          "value": "2048",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_COLOR",
          "value": "4096",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_TEX_UV",
          "value": "8192",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_TEX_UV2",
          "value": "16384",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_BONES",
          "value": "32768",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_WEIGHTS",
          "value": "65536",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_INDEX",
          "value": "131072",
          "description": ""
        },
        {
          "name": "ARRAY_FLAG_USE_2D_VERTICES",
          "value": "262144",
          "description": ""
        },
        {
          "name": "ARRAY_FLAG_USE_16_BIT_BONES",
          "value": "524288",
          "description": ""
        },
        {
          "name": "ARRAY_COMPRESS_DEFAULT",
          "value": "97792",
          "description": ""
        },
        {
          "name": "ARRAY_VERTEX",
          "value": "0",
          "description": ""
        },
        {
          "name": "ARRAY_NORMAL",
          "value": "1",
          "description": ""
        },
        {
          "name": "ARRAY_TANGENT",
          "value": "2",
          "description": ""
        },
        {
          "name": "ARRAY_COLOR",
          "value": "3",
          "description": ""
        },
        {
          "name": "ARRAY_TEX_UV",
          "value": "4",
          "description": ""
        },
        {
          "name": "ARRAY_TEX_UV2",
          "value": "5",
          "description": ""
        },
        {
          "name": "ARRAY_BONES",
          "value": "6",
          "description": ""
        },
        {
          "name": "ARRAY_WEIGHTS",
          "value": "7",
          "description": ""
        },
        {
          "name": "ARRAY_INDEX",
          "value": "8",
          "description": ""
        },
        {
          "name": "ARRAY_MAX",
          "value": "9",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptClassConstant": {
      "name": "VisualScriptClassConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node representing a constant from a class.",
      "description": "A Visual Script node representing a constant from the classes, such as [@GlobalScope.TYPE_INT].",
      "methods": [
        {
          "name": "get_base_type",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_class_constant",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_base_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_class_constant",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": "The type to get the constant from."
        },
        {
          "name": "constant",
          "type": "String",
          "setter": "set_class_constant",
          "getter": "get_class_constant",
          "description": "The name of the constant to return."
        }
      ],
      "theme_properties": []
    },
    "GDNativeClass": {
      "name": "GDNativeClass",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "new",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Translation": {
      "name": "Translation",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Language Translation.",
      "description": "Translations are resources that can be loaded/unloaded on demand. They map a string to another string.",
      "methods": [
        {
          "name": "add_message",
          "description": "Add a message for translation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src_message",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "xlated_message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase_message",
          "description": "Erase a message.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "src_message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_locale",
          "qualifiers": "const",
          "description": "Return the locale of the translation.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_message",
          "qualifiers": "const",
          "description": "Return a message for translation.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "src_message",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_message_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_message_list",
          "qualifiers": "const",
          "description": "Return all the messages (keys).",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "set_locale",
          "description": "Set the locale of the translation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "locale",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "locale",
          "type": "String",
          "setter": "set_locale",
          "getter": "get_locale",
          "description": ""
        },
        {
          "name": "messages",
          "type": "PoolStringArray",
          "setter": "_set_messages",
          "getter": "_get_messages",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "LinkButton": {
      "name": "LinkButton",
      "inherits": "BaseButton",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Simple button used to represent a link to some resource",
      "description": "This kind of buttons are primarily used when the interaction with the button causes a context change (like linking to a web page).",
      "methods": [
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Returns the text of the button.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_underline_mode",
          "qualifiers": "const",
          "description": "Returns the underline mode for this button.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_text",
          "description": "Sets the text of the button.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_underline_mode",
          "description": "Sets the underline mode for this button, the argument must be one of the [LinkButton] constants (see constants section).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "underline_mode",
              "type": "int",
              "enum": "LinkButton.UnderlineMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "UNDERLINE_MODE_ALWAYS",
          "value": "0",
          "description": "The LinkButton will always show an underline at the bottom of its text"
        },
        {
          "name": "UNDERLINE_MODE_ON_HOVER",
          "value": "1",
          "description": "The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it."
        },
        {
          "name": "UNDERLINE_MODE_NEVER",
          "value": "2",
          "description": "The LinkButton will never show an underline at the bottom of its text."
        }
      ],
      "properties": [
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": ""
        },
        {
          "name": "underline",
          "type": "int",
          "setter": "set_underline_mode",
          "getter": "get_underline_mode",
          "enum": "LinkButton.UnderlineMode",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "underline_spacing",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Range": {
      "name": "Range",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Abstract base class for range-based controls.",
      "description": "Range is a base class for [Control] nodes that change a floating point [i]value[/i] between a [i]minimum[/i] and a [i]maximum[/i], using [i]step[/i] and [i]page[/i], for example a [ScrollBar].",
      "methods": [
        {
          "name": "get_as_ratio",
          "qualifiers": "const",
          "description": "Return value mapped to 0 to 1 range.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_max",
          "qualifiers": "const",
          "description": "Return the maximum value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_min",
          "qualifiers": "const",
          "description": "Return the minimum value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_page",
          "qualifiers": "const",
          "description": "Return the page size, if page is 0, paging is disabled.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_step",
          "qualifiers": "const",
          "description": "Return the stepping, if step is 0, stepping is disabled.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_value",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_ratio_exp",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_rounded_values",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_as_ratio",
          "description": "Set value mapped to 0 to 1 (unit) range, it will then be converted to the actual value within min and max.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_exp_ratio",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "maximum",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_min",
          "description": "Set minimum value, clamped range value to it if it's less.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "minimum",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_page",
          "description": "Set page size. Page is mainly used for scrollbars or anything that controls text scrolling.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pagesize",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_step",
          "description": "Set step value. If step is 0, stepping will be disabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_rounded_values",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "share",
          "description": "Binds two Ranges together along with any Ranges previously grouped with either of them. When any of Range's member variables change, it will share the new value with all other Ranges in its group.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "unshare",
          "description": "Stop Range from sharing its member variables with any other Range.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "changed",
          "description": "This signal is emitted when min, max, range or step change.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "value_changed",
          "description": "This signal is emitted when value changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "exp_edit",
          "type": "bool",
          "setter": "set_exp_ratio",
          "getter": "is_ratio_exp",
          "description": "If [code]true[/code] and [code]min_value[/code] is greater than 0, [code]value[/code] will be represented exponentially rather than linearly."
        },
        {
          "name": "max_value",
          "type": "float",
          "setter": "set_max",
          "getter": "get_max",
          "description": "Maximum value. Range is clamped if [code]value[/code] is greater than [code]max_value[/code]. Default value: 100."
        },
        {
          "name": "min_value",
          "type": "float",
          "setter": "set_min",
          "getter": "get_min",
          "description": "Minimum value. Range is clamped if [code]value[/code] is less than [code]min_value[/code]. Default value: 0."
        },
        {
          "name": "page",
          "type": "float",
          "setter": "set_page",
          "getter": "get_page",
          "description": "Page size. Used mainly for [ScrollBar]. ScrollBar's length is its size multiplied by [code]page[/code] over the difference between [code]min_value[/code] and [code]max_value[/code]."
        },
        {
          "name": "rounded",
          "type": "bool",
          "setter": "set_use_rounded_values",
          "getter": "is_using_rounded_values",
          "description": "If [code]true[/code], [code]value[/code] will always be rounded to the nearest integer."
        },
        {
          "name": "step",
          "type": "float",
          "setter": "set_step",
          "getter": "get_step",
          "description": "If greater than 0, [code]value[/code] will always be rounded to a multiple of [code]step[/code]. If [code]rounded[/code] is also [code]true[/code], [code]value[/code] will first be rounded to a multiple of [code]step[/code] then rounded to the nearest integer."
        },
        {
          "name": "value",
          "type": "float",
          "setter": "set_value",
          "getter": "get_value",
          "description": "Range's current value."
        }
      ],
      "theme_properties": []
    },
    "EditorFileSystemDirectory": {
      "name": "EditorFileSystemDirectory",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A diretory for the resource filesystem.",
      "description": "",
      "methods": [
        {
          "name": "find_dir_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_file_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_file",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_file_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_file_import_is_valid",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_file_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_file_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_name",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_parent",
          "description": "",
          "return_type": "EditorFileSystemDirectory",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_subdir",
          "description": "",
          "return_type": "EditorFileSystemDirectory",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_subdir_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ViewportTexture": {
      "name": "ViewportTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_viewport_path_in_scene",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "set_viewport_path_in_scene",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "viewport_path",
          "type": "NodePath",
          "setter": "set_viewport_path_in_scene",
          "getter": "get_viewport_path_in_scene",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "OptionButton": {
      "name": "OptionButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Button control that provides selectable options when pressed.",
      "description": "OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the \"current\" item and is displayed as the button text.",
      "methods": [
        {
          "name": "add_icon_item",
          "description": "Add an item, with a \"texture\" icon, text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_item",
          "description": "Add an item, with text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_separator",
          "description": "Add a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear",
          "description": "Clear all the items in the [OptionButton].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_item_count",
          "qualifiers": "const",
          "description": "Return the amount of items in the OptionButton.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_icon",
          "qualifiers": "const",
          "description": "Return the icon of the item at index \"idx\".",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_id",
          "qualifiers": "const",
          "description": "Return the ID of the item at index \"idx\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_text",
          "qualifiers": "const",
          "description": "Return the text of the item at index \"idx\".",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_selected",
          "qualifiers": "const",
          "description": "Return the current item index",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selected_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selected_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "is_item_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_item",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Select an item by index and make it the current item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon",
          "description": "Set the icon of an item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_id",
          "description": "Set the ID of an item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_metadata",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_text",
          "description": "Set the text of an item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "item_selected",
          "description": "This signal is emitted when the current item was changed by the user. ID of the item selected is passed as argument (if no IDs were added, ID will be just the item index).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ID",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "items",
          "type": "Array",
          "setter": "_set_items",
          "getter": "_get_items",
          "description": ""
        },
        {
          "name": "selected",
          "type": "int",
          "setter": "_select_int",
          "getter": "get_selected",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "arrow",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "arrow_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ConvexPolygonShape": {
      "name": "ConvexPolygonShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Convex polygon shape for 3D physics.",
      "description": "Convex polygon shape resource, which can be added to a [PhysicsBody] or area.",
      "methods": [
        {
          "name": "get_points",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector3Array",
          "arguments": []
        },
        {
          "name": "set_points",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "points",
          "type": "PoolVector3Array",
          "setter": "set_points",
          "getter": "get_points",
          "description": "The list of 3D points forming the convex polygon shape."
        }
      ],
      "theme_properties": []
    },
    "Polygon2D": {
      "name": "Polygon2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A 2D polygon.",
      "description": "A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.",
      "methods": [
        {
          "name": "get_antialiased",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Return the polygon fill color.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_invert",
          "qualifiers": "const",
          "description": "Return whether this polygon is inverted or not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_invert_border",
          "qualifiers": "const",
          "description": "Return the added padding around the bounding box.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the offset for the polygon vertices.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "qualifiers": "const",
          "description": "Return the set of vertices that defines this polygon.",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Return the polygon texture",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_texture_offset",
          "qualifiers": "const",
          "description": "Return the polygon texture offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_texture_rotation",
          "qualifiers": "const",
          "description": "Return the rotation in radians of the texture polygon.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_texture_scale",
          "qualifiers": "const",
          "description": "Return the uv coordinate multiplier.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_uv",
          "qualifiers": "const",
          "description": "Return the texture coordinates associated with every vertex of the polygon.",
          "return_type": "PoolVector2Array",
          "arguments": []
        },
        {
          "name": "get_vertex_colors",
          "qualifiers": "const",
          "description": "Return the list of vertex colors.",
          "return_type": "PoolColorArray",
          "arguments": []
        },
        {
          "name": "set_antialiased",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "antialiased",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_color",
          "description": "Set the polygon fill color. If the polygon has a texture defined, the defined texture will be multiplied by the polygon fill color. This, also, is the default color for those vertices that are not defined by [method get_vertex_colors].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_invert",
          "description": "Set the polygon as the defined polygon bounding box minus the defined polygon (the defined polygon will appear as a hole on the square that contains the defined polygon).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "invert",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_invert_border",
          "description": "Add extra padding around the bounding box, making it bigger. Too small a value can make the polygon triangulate strangely, due to numerical imprecision.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "invert_border",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the an offset that will be added to the vertices' position. E.g. if the offset is set to (10,10) then all the polygon points will move 10 units to the right and 10 units to the bottom.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_polygon",
          "description": "Define the set of vertices that will represent the polygon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_offset",
          "description": "Set the offset of the polygon texture. Initially the texture will appear anchored to the polygon position, the offset is used to move the texture location away from that point (notice that the texture origin is set to its top left corner, so when offset is 0,0 the top left corner of the texture is at the polygon position), for example setting the offset to 10, 10 will move the texture 10 units to the left and 10 units to the top.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_rotation",
          "description": "Set the amount of rotation of the polygon texture, [code]texture_rotation[/code] is specified in radians and clockwise rotation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_rotation",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_scale",
          "description": "Set the value that will multiply the uv coordinates ([method get_uv]) when applying the texture. Larger values make the texture smaller, and vice versa.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv",
          "description": "Set the texture coordinates for every vertex of the polygon. There should be one uv vertex for every vertex in the polygon. If there are less, the undefined ones will be assumed to be (0,0). Extra uv vertices are ignored.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "uv",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertex_colors",
          "description": "Set the color for each vertex of the polygon. There should be one color for every vertex in the polygon. If there are less, the undefined ones will be assumed to be [method get_color]. Extra color entries are ignored.\n\tColors are interpolated between vertices, resulting in smooth gradients when they differ.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertex_colors",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "antialiased",
          "type": "bool",
          "setter": "set_antialiased",
          "getter": "get_antialiased",
          "description": "If [code]true[/code] polygon edges will be anti-aliased. Default value: [code]false[/code]."
        },
        {
          "name": "color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": "The polygon's fill color. If [code]texture[/code] is defined, it will be multiplied by this color. It will also be the default color for vertices not set in [code]vertex_colors[/code]."
        },
        {
          "name": "invert_border",
          "type": "float",
          "setter": "set_invert_border",
          "getter": "get_invert_border",
          "description": "Added padding applied to the bounding box when using [code]invert[/code]. Setting this value too small may result in a \"Bad Polygon\" error. Default value: [code]100[/code]."
        },
        {
          "name": "invert_enable",
          "type": "bool",
          "setter": "set_invert",
          "getter": "get_invert",
          "description": "If [code]true[/code] polygon will be inverted, containing the area outside the defined points and extending to the [code]invert_border[/code]. Default value: [code]false[/code]."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The offset applied to each vertex."
        },
        {
          "name": "polygon",
          "type": "PoolVector2Array",
          "setter": "set_polygon",
          "getter": "get_polygon",
          "description": "The polygon's list of vertices. The final point will be connected to the first."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The polygon's fill texture. Use [code]uv[/code] to set texture coordinates."
        },
        {
          "name": "texture_offset",
          "type": "Vector2",
          "setter": "set_texture_offset",
          "getter": "get_texture_offset",
          "description": "Amount to offset the polygon's [code]texture[/code]. If [code](0, 0)[/code] the texture's origin (its top-left corner) will be placed at the polygon's [code]position[/code]."
        },
        {
          "name": "texture_rotation",
          "type": "float",
          "setter": "_set_texture_rotationd",
          "getter": "_get_texture_rotationd",
          "description": "The texture's rotation in degrees."
        },
        {
          "name": "texture_scale",
          "type": "Vector2",
          "setter": "set_texture_scale",
          "getter": "get_texture_scale",
          "description": "Amount to multiply the [code]uv[/code] coordinates when using a [code]texture[/code]. Larger values make the texture smaller, and vice versa."
        },
        {
          "name": "uv",
          "type": "PoolVector2Array",
          "setter": "set_uv",
          "getter": "get_uv",
          "description": "Texture coordinates for each vertex of the polygon. There should be one [code]uv[/code] per polygon vertex. If there are fewer, undefined vertices will use [code](0, 0)[/code]."
        },
        {
          "name": "vertex_colors",
          "type": "PoolColorArray",
          "setter": "set_vertex_colors",
          "getter": "get_vertex_colors",
          "description": "Color for each vertex. Colors are interpolated between vertices, resulting in smooth gradients. There should be one per polygon vertex. If there are fewer, undefined vertices will use [code]color[/code]."
        }
      ],
      "theme_properties": []
    },
    "SpatialVelocityTracker": {
      "name": "SpatialVelocityTracker",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_tracked_linear_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "is_tracking_physics_step",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "reset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_track_physics_step",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "update_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Semaphore": {
      "name": "Semaphore",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A synchronization Semaphore.",
      "description": "A synchronization Semaphore. Element used in multi-threadding. Initialized to zero on creation.",
      "methods": [
        {
          "name": "post",
          "description": "Lowers the [Semaphore], allowing one more thread in.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "wait",
          "description": "Tries to wait for the [Semaphore], if its value is zero, blocks until non-zero.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionShape2D": {
      "name": "CollisionShape2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Node that represents collision shape data in 2D space.",
      "description": "Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area2D] to give it a detection shape, or add it to a [PhysicsBody2D] to give create solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.",
      "methods": [
        {
          "name": "get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shape2D",
          "arguments": []
        },
        {
          "name": "is_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_one_way_collision_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_one_way_collision",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "disabled",
          "type": "bool",
          "setter": "set_disabled",
          "getter": "is_disabled",
          "description": "A disabled collision shape has no effect in the world."
        },
        {
          "name": "one_way_collision",
          "type": "bool",
          "setter": "set_one_way_collision",
          "getter": "is_one_way_collision_enabled",
          "description": "Sets whether this collision shape should only detect collision on one side (top or bottom)."
        },
        {
          "name": "shape",
          "type": "Shape2D",
          "setter": "set_shape",
          "getter": "get_shape",
          "description": "The actual shape owned by this collision shape."
        }
      ],
      "theme_properties": []
    },
    "float": {
      "name": "float",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Float built-in type",
      "description": "Float built-in type.",
      "methods": [
        {
          "name": "float",
          "description": "Cast a [bool] value to a floating point value, [code]float(true)[/code] will be equals to 1.0 and [code]float(false)[/code] will be equals to 0.0.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "float",
          "description": "Cast an [int] value to a floating point value, [code]float(1)[/code] will be equals to 1.0.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "float",
          "description": "Cast a [String] value to a floating point value. This method accepts float value strings like [code] '1.23' [/code] and exponential notation strings for its parameter so calling [code] float('1e3') [/code] will return 1000.0 and calling [code] float('1e-3') [/code] will return -0.001.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Physics2DServer": {
      "name": "Physics2DServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Physics 2D Server.",
      "description": "Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.",
      "methods": [
        {
          "name": "area_add_shape",
          "description": "Add a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform2D",
              "default_value": "Transform2D( 1, 0, 0, 1, 0, 0 )"
            }
          ]
        },
        {
          "name": "area_attach_object_instance_id",
          "description": "Assign the area to a descendant of [Object], so it can exist in the node tree.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_clear_shapes",
          "description": "Remove all shapes from an area. It does not delete the shapes, so they can be reassigned later.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_create",
          "description": "Create an [Area2D].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "area_get_object_instance_id",
          "qualifiers": "const",
          "description": "Get the instance ID of the object the area is assigned to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_param",
          "qualifiers": "const",
          "description": "Return an area parameter value.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.AreaParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape",
          "qualifiers": "const",
          "description": "Return the [RID] of the nth shape of an area.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_count",
          "qualifiers": "const",
          "description": "Return the number of shapes assigned to an area.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_shape_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix of a shape within an area.",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space",
          "qualifiers": "const",
          "description": "Return the space assigned to the area.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_space_override_mode",
          "qualifiers": "const",
          "description": "Return the space override mode for the area.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_get_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix for an area.",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_remove_shape",
          "description": "Remove a shape from an area. It does not delete the shape, so it can be reassigned later.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_layer",
          "description": "Assign the area to one or many physics layers.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_collision_mask",
          "description": "Set which physics layers the area will monitor.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_monitor_callback",
          "description": "Set the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:\n\t\t\t\t1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.\n\t\t\t\t2: [RID] of the object that entered/exited the area.\n\t\t\t\t3: Instance ID of the object that entered/exited the area.\n\t\t\t\t4: The shape index of the object that entered/exited the area.\n\t\t\t\t5: The shape index of the area where the object entered/exited.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_param",
          "description": "Set the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.AreaParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape",
          "description": "Substitute a given area shape by another. The old shape is selected by its index, the new one by its [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_shape_transform",
          "description": "Set the transform matrix for an area shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space",
          "description": "Assign a space to the area.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_space_override_mode",
          "description": "Set the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Physics2DServer.AreaSpaceOverrideMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_set_transform",
          "description": "Set the transform matrix for an area.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_collision_exception",
          "description": "Add a body to the list of bodies exempt from collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_force",
          "description": "Add a positioned force to the applied force and torque. As with [method body_apply_impulse], both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "force",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_add_shape",
          "description": "Add a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform2D",
              "default_value": "Transform2D( 1, 0, 0, 1, 0, 0 )"
            }
          ]
        },
        {
          "name": "body_apply_impulse",
          "description": "Add a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "impulse",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_attach_object_instance_id",
          "description": "Assign the area to a descendant of [Object], so it can exist in the node tree.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_clear_shapes",
          "description": "Remove all shapes from a body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_create",
          "description": "Create a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Physics2DServer.BodyMode",
              "default_value": "2"
            },
            {
              "index": "1",
              "name": "init_sleeping",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "body_get_collision_layer",
          "qualifiers": "const",
          "description": "Return the physics layer or layers a body belongs to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_collision_mask",
          "qualifiers": "const",
          "description": "Return the physics layer or layers a body can collide with.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_continuous_collision_detection_mode",
          "qualifiers": "const",
          "description": "Return the continuous collision detection mode.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_direct_state",
          "description": "",
          "return_type": "Physics2DDirectBodyState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_max_contacts_reported",
          "qualifiers": "const",
          "description": "Return the maximum contacts that can be reported. See [method body_set_max_contacts_reported].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_mode",
          "qualifiers": "const",
          "description": "Return the body mode.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_object_instance_id",
          "qualifiers": "const",
          "description": "Get the instance ID of the object the area is assigned to.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_param",
          "qualifiers": "const",
          "description": "Return the value of a body parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.BodyParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape",
          "qualifiers": "const",
          "description": "Return the [RID] of the nth shape of a body.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_count",
          "qualifiers": "const",
          "description": "Return the number of shapes assigned to a body.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_metadata",
          "qualifiers": "const",
          "description": "Return the metadata of a shape of a body.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_shape_transform",
          "qualifiers": "const",
          "description": "Return the transform matrix of a body shape.",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_space",
          "qualifiers": "const",
          "description": "Return the [RID] of the space assigned to a body.",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_get_state",
          "qualifiers": "const",
          "description": "Return a body state.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "enum": "Physics2DServer.BodyState",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_is_omitting_force_integration",
          "qualifiers": "const",
          "description": "Return whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_collision_exception",
          "description": "Remove a body from the list of bodies exempt from collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "excepted_body",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_remove_shape",
          "description": "Remove a shape from a body. The shape is not deleted, so it can be reused afterwards.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_axis_velocity",
          "description": "Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "axis_velocity",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_layer",
          "description": "Set the physics layer or layers a body belongs to.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_collision_mask",
          "description": "Set the physics layer or layers a body can collide with.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_continuous_collision_detection_mode",
          "description": "Set the continuous collision detection mode from any of the CCD_MODE_* constants.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Physics2DServer.CCDMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_force_integration_callback",
          "description": "Set the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force integration]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "body_set_max_contacts_reported",
          "description": "Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_mode",
          "description": "Set the body mode, from one of the constants BODY_MODE*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Physics2DServer.BodyMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_omit_force_integration",
          "description": "Set whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_param",
          "description": "Set a body parameter (see BODY_PARAM* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.BodyParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape",
          "description": "Substitute a given body shape by another. The old shape is selected by its index, the new one by its [RID].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_as_one_way_collision",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "disable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_metadata",
          "description": "Set metadata of a shape within a body. This metadata is different from [method Object.set_meta], and can be retrieved on shape queries.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_shape_transform",
          "description": "Set the transform matrix for a body shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_space",
          "description": "Assign a space to the body (see [method create_space]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_set_state",
          "description": "Set a body state (see BODY_STATE* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "state",
              "type": "int",
              "enum": "Physics2DServer.BodyState",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_test_motion",
          "description": "Return whether a body can move from a given point in a given direction. Apart from the boolean return value, a [Physics2DTestMotionResult] can be passed to return additional information in.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "motion",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "margin",
              "type": "float",
              "default_value": "0.08"
            },
            {
              "index": "4",
              "name": "result",
              "type": "Physics2DTestMotionResult",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "damped_spring_joint_create",
          "description": "Create a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anchor_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anchor_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_a",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body_b",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "damped_string_joint_get_param",
          "qualifiers": "const",
          "description": "Return the value of a damped spring joint parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.DampedStringParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "damped_string_joint_set_param",
          "description": "Set a damped spring joint parameter. Parameters are explained in the DAMPED_STRING* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.DampedStringParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "free_rid",
          "description": "Destroy any of the objects created by Physics2DServer. If the [RID] passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rid",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_process_info",
          "description": "Return information about the current state of the 2D physics engine. The states are listed under the INFO_* constants.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "process_info",
              "type": "int",
              "enum": "Physics2DServer.ProcessInfo",
              "default_value": ""
            }
          ]
        },
        {
          "name": "groove_joint_create",
          "description": "Create a groove joint between two bodies. If not specified, the bodyies are assumed to be the joint itself.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "groove1_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "groove2_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "anchor_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body_a",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "body_b",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_param",
          "qualifiers": "const",
          "description": "Return the value of a joint parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.JointParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_get_type",
          "qualifiers": "const",
          "description": "Return the type of a joint (see JOINT_* constants).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "joint_set_param",
          "description": "Set a joint parameter. Parameters are explained in the JOINT_PARAM* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "joint",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.JointParam",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pin_joint_create",
          "description": "Create a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anchor",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body_a",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_b",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_active",
          "description": "Activate or deactivate the 2D physics engine.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_create",
          "description": "Create a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Physics2DServer.ShapeType",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_data",
          "qualifiers": "const",
          "description": "Return the shape data.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_get_type",
          "qualifiers": "const",
          "description": "Return the type of shape (see SHAPE_* constants).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_set_data",
          "description": "Set the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_create",
          "description": "Create a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "space_get_direct_state",
          "description": "Return the state of a space, a [Physics2DDirectSpaceState]. This object can be used to make collision/intersection queries.",
          "return_type": "Physics2DDirectSpaceState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_get_param",
          "qualifiers": "const",
          "description": "Return the value of a space parameter.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.SpaceParameter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_is_active",
          "qualifiers": "const",
          "description": "Return whether the space is active.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_active",
          "description": "Mark a space as active. It will not have an effect, unless it is assigned to an area or body.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "space_set_param",
          "description": "Set the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "param",
              "type": "int",
              "enum": "Physics2DServer.SpaceParameter",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SPACE_PARAM_CONTACT_RECYCLE_RADIUS",
          "value": "0",
          "description": "Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated."
        },
        {
          "name": "SPACE_PARAM_CONTACT_MAX_SEPARATION",
          "value": "1",
          "description": "Constant to set/get the maximum distance a shape can be from another before they are considered separated."
        },
        {
          "name": "SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION",
          "value": "2",
          "description": "Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision."
        },
        {
          "name": "SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD",
          "value": "3",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD",
          "value": "4",
          "description": ""
        },
        {
          "name": "SPACE_PARAM_BODY_TIME_TO_SLEEP",
          "value": "5",
          "description": "Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time."
        },
        {
          "name": "SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS",
          "value": "6",
          "description": "Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects \"rebound\", after violating a constraint, to avoid leaving them in that state because of numerical imprecision."
        },
        {
          "name": "SHAPE_LINE",
          "value": "0",
          "description": "This is the constant for creating line shapes. A line shape is an infinite line with an origin point, and a normal. Thus, it can be used for front/behind checks."
        },
        {
          "name": "SHAPE_SEGMENT",
          "value": "2",
          "description": "This is the constant for creating segment shapes. A segment shape is a line from a point A to a point B. It can be checked for intersections."
        },
        {
          "name": "SHAPE_CIRCLE",
          "value": "3",
          "description": "This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks."
        },
        {
          "name": "SHAPE_RECTANGLE",
          "value": "4",
          "description": "This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks."
        },
        {
          "name": "SHAPE_CAPSULE",
          "value": "5",
          "description": "This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks."
        },
        {
          "name": "SHAPE_CONVEX_POLYGON",
          "value": "6",
          "description": "This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks. Unlike the method [method CollisionPolygon2D.set_polygon], polygons modified with [method shape_set_data] do not verify that the points supplied form, in fact, a convex polygon."
        },
        {
          "name": "SHAPE_CONCAVE_POLYGON",
          "value": "7",
          "description": "This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks."
        },
        {
          "name": "SHAPE_CUSTOM",
          "value": "8",
          "description": "This constant is used internally by the engine. Any attempt to create this kind of shape results in an error."
        },
        {
          "name": "AREA_PARAM_GRAVITY",
          "value": "0",
          "description": "Constant to set/get gravity strength in an area."
        },
        {
          "name": "AREA_PARAM_GRAVITY_VECTOR",
          "value": "1",
          "description": "Constant to set/get gravity vector/center in an area."
        },
        {
          "name": "AREA_PARAM_GRAVITY_IS_POINT",
          "value": "2",
          "description": "Constant to set/get whether the gravity vector of an area is a direction, or a center point."
        },
        {
          "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE",
          "value": "3",
          "description": "Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance."
        },
        {
          "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION",
          "value": "4",
          "description": "This constant was used to set/get the falloff factor for point gravity. It has been superseded by AREA_PARAM_GRAVITY_DISTANCE_SCALE."
        },
        {
          "name": "AREA_PARAM_LINEAR_DAMP",
          "value": "5",
          "description": "Constant to set/get the linear dampening factor of an area."
        },
        {
          "name": "AREA_PARAM_ANGULAR_DAMP",
          "value": "6",
          "description": "Constant to set/get the angular dampening factor of an area."
        },
        {
          "name": "AREA_PARAM_PRIORITY",
          "value": "7",
          "description": "Constant to set/get the priority (order of processing) of an area."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "description": "This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "description": "This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "description": "This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas."
        },
        {
          "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "description": "This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one."
        },
        {
          "name": "BODY_MODE_STATIC",
          "value": "0",
          "description": "Constant for static bodies."
        },
        {
          "name": "BODY_MODE_KINEMATIC",
          "value": "1",
          "description": "Constant for kinematic bodies."
        },
        {
          "name": "BODY_MODE_RIGID",
          "value": "2",
          "description": "Constant for rigid bodies."
        },
        {
          "name": "BODY_MODE_CHARACTER",
          "value": "3",
          "description": "Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics."
        },
        {
          "name": "BODY_PARAM_BOUNCE",
          "value": "0",
          "description": "Constant to set/get a body's bounce factor."
        },
        {
          "name": "BODY_PARAM_FRICTION",
          "value": "1",
          "description": "Constant to set/get a body's friction."
        },
        {
          "name": "BODY_PARAM_MASS",
          "value": "2",
          "description": "Constant to set/get a body's mass."
        },
        {
          "name": "BODY_PARAM_INERTIA",
          "value": "3",
          "description": "Constant to set/get a body's inertia."
        },
        {
          "name": "BODY_PARAM_GRAVITY_SCALE",
          "value": "4",
          "description": "Constant to set/get a body's gravity multiplier."
        },
        {
          "name": "BODY_PARAM_LINEAR_DAMP",
          "value": "5",
          "description": "Constant to set/get a body's linear dampening factor."
        },
        {
          "name": "BODY_PARAM_ANGULAR_DAMP",
          "value": "6",
          "description": "Constant to set/get a body's angular dampening factor."
        },
        {
          "name": "BODY_PARAM_MAX",
          "value": "7",
          "description": "This is the last ID for body parameters. Any attempt to set this property is ignored. Any attempt to get it returns 0."
        },
        {
          "name": "BODY_STATE_TRANSFORM",
          "value": "0",
          "description": "Constant to set/get the current transform matrix of the body."
        },
        {
          "name": "BODY_STATE_LINEAR_VELOCITY",
          "value": "1",
          "description": "Constant to set/get the current linear velocity of the body."
        },
        {
          "name": "BODY_STATE_ANGULAR_VELOCITY",
          "value": "2",
          "description": "Constant to set/get the current angular velocity of the body."
        },
        {
          "name": "BODY_STATE_SLEEPING",
          "value": "3",
          "description": "Constant to sleep/wake up a body, or to get whether it is sleeping."
        },
        {
          "name": "BODY_STATE_CAN_SLEEP",
          "value": "4",
          "description": "Constant to set/get whether the body can sleep."
        },
        {
          "name": "JOINT_PIN",
          "value": "0",
          "description": "Constant to create pin joints."
        },
        {
          "name": "JOINT_GROOVE",
          "value": "1",
          "description": "Constant to create groove joints."
        },
        {
          "name": "JOINT_DAMPED_SPRING",
          "value": "2",
          "description": "Constant to create damped spring joints."
        },
        {
          "name": "DAMPED_STRING_REST_LENGTH",
          "value": "0",
          "description": "Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart."
        },
        {
          "name": "DAMPED_STRING_STIFFNESS",
          "value": "1",
          "description": "Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length."
        },
        {
          "name": "DAMPED_STRING_DAMPING",
          "value": "2",
          "description": "Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping)."
        },
        {
          "name": "CCD_MODE_DISABLED",
          "value": "0",
          "description": "Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects."
        },
        {
          "name": "CCD_MODE_CAST_RAY",
          "value": "1",
          "description": "Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise."
        },
        {
          "name": "CCD_MODE_CAST_SHAPE",
          "value": "2",
          "description": "Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise."
        },
        {
          "name": "AREA_BODY_ADDED",
          "value": "0",
          "description": "The value of the first parameter and area callback function receives, when an object enters one of its shapes."
        },
        {
          "name": "AREA_BODY_REMOVED",
          "value": "1",
          "description": "The value of the first parameter and area callback function receives, when an object exits one of its shapes."
        },
        {
          "name": "INFO_ACTIVE_OBJECTS",
          "value": "0",
          "description": "Constant to get the number of objects that are not sleeping."
        },
        {
          "name": "INFO_COLLISION_PAIRS",
          "value": "1",
          "description": "Constant to get the number of possible collisions."
        },
        {
          "name": "INFO_ISLAND_COUNT",
          "value": "2",
          "description": "Constant to get the number of space regions where a collision could occur."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptCondition": {
      "name": "VisualScriptCondition",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node which branches the flow.",
      "description": "A Visual Script node that checks a [bool] input port. If [code]true[/code] it will exit via the “true” sequence port. If [code]false[/code] it will exit via the \"false\" sequence port. After exiting either, it exits via the “done” port. Sequence ports may be left disconnected.\n\t\t[b]Input Ports:[/b]\n\t\t- Sequence: [code]if (cond) is[/code]\n\t\t- Data (boolean): [code]cond[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence: [code]true[/code]\n\t\t- Sequence: [code]false[/code]\n\t\t- Sequence: [code]done[/code]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorInterface": {
      "name": "EditorInterface",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "edit_resource",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_base_control",
          "description": "",
          "return_type": "Control",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_edited_scene_root",
          "description": "",
          "return_type": "Node",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_editor_settings",
          "description": "",
          "return_type": "EditorSettings",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_editor_viewport",
          "description": "",
          "return_type": "Control",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_open_scenes",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_resource_filesystem",
          "description": "",
          "return_type": "EditorFileSystem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_resource_previewer",
          "description": "",
          "return_type": "EditorResourcePreview",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_script_editor",
          "description": "",
          "return_type": "ScriptEditor",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_selection",
          "description": "",
          "return_type": "EditorSelection",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inspect_object",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "for_property",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "make_mesh_previews",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "meshes",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "preview_size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_scene_from_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene_filepath",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reload_scene_from_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene_filepath",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save_scene",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "save_scene_as",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "with_preview",
              "type": "bool",
              "default_value": "true"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PopupPanel": {
      "name": "PopupPanel",
      "inherits": "Popup",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class for displaying popups with a panel background.",
      "description": "Class for displaying popups with a panel background. In some cases it might be simpler to use than [Popup], since it provides a configurable background. If you are making windows, better check [WindowDialog].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ProgressBar": {
      "name": "ProgressBar",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "General purpose progress bar.",
      "description": "General purpose progress bar. Shows fill percentage from right to left.",
      "methods": [
        {
          "name": "is_percent_visible",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_percent_visible",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "percent_visible",
          "type": "bool",
          "setter": "set_percent_visible",
          "getter": "is_percent_visible",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "fg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_shadow",
          "type": "Color",
          "description": ""
        }
      ]
    },
    "EditorResourceConversionPlugin": {
      "name": "EditorResourceConversionPlugin",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "_convert",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Resource",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_converts_to",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectHighPassFilter": {
      "name": "AudioEffectHighPassFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptVariableGet": {
      "name": "VisualScriptVariableGet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_variable",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_variable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "var_name",
          "type": "String",
          "setter": "set_variable",
          "getter": "get_variable",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptOperator": {
      "name": "VisualScriptOperator",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "[b]Input Ports:[/b]\n\t\t- Data (variant): [code]A[/code]\n\t\t- Data (variant): [code]B[/code]\n\t\t[b]Output Ports:[/b]\n\t\t- Sequence: [code]true[/code]\n\t\t- Sequence: [code]false[/code]\n\t\t- Sequence: [code]done[/code]",
      "methods": [
        {
          "name": "get_operator",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_typed",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_operator",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "op",
              "type": "int",
              "enum": "Variant.Operator",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_typed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "operator",
          "type": "int",
          "setter": "set_operator",
          "getter": "get_operator",
          "enum": "Variant.Operator",
          "description": ""
        },
        {
          "name": "type",
          "type": "int",
          "setter": "set_typed",
          "getter": "get_typed",
          "enum": "Variant.Type",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "@Global Scope": {
      "name": "@Global Scope",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Global scope constants and variables.",
      "description": "Global scope constants and variables. This is all that resides in the globals, constants regarding error codes, scancodes, property hints, etc. It's not much.\n\t\tSingletons are also documented here, since they can be accessed from anywhere.",
      "methods": [],
      "signals": [],
      "constants": [
        {
          "name": "MARGIN_LEFT",
          "value": "0",
          "description": "Left margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "MARGIN_TOP",
          "value": "1",
          "description": "Top margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "MARGIN_RIGHT",
          "value": "2",
          "description": "Right margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "MARGIN_BOTTOM",
          "value": "3",
          "description": "Bottom margin, used usually for [Control] or [StyleBox] derived classes."
        },
        {
          "name": "VERTICAL",
          "value": "1",
          "description": "General vertical alignment, used usually for [Separator], [ScrollBar], [Slider], etc."
        },
        {
          "name": "HORIZONTAL",
          "value": "0",
          "description": "General horizontal alignment, used usually for [Separator], [ScrollBar], [Slider], etc."
        },
        {
          "name": "HALIGN_LEFT",
          "value": "0",
          "description": "Horizontal left alignment, usually for text-derived classes."
        },
        {
          "name": "HALIGN_CENTER",
          "value": "1",
          "description": "Horizontal center alignment, usually for text-derived classes."
        },
        {
          "name": "HALIGN_RIGHT",
          "value": "2",
          "description": "Horizontal right alignment, usually for text-derived classes."
        },
        {
          "name": "VALIGN_TOP",
          "value": "0",
          "description": "Vertical top alignment, usually for text-derived classes."
        },
        {
          "name": "VALIGN_CENTER",
          "value": "1",
          "description": "Vertical center alignment, usually for text-derived classes."
        },
        {
          "name": "VALIGN_BOTTOM",
          "value": "2",
          "description": "Vertical bottom alignment, usually for text-derived classes."
        },
        {
          "name": "SPKEY",
          "value": "16777216",
          "enum": "",
          "description": "Scancodes with this bit applied are non printable."
        },
        {
          "name": "KEY_ESCAPE",
          "value": "16777217",
          "description": "Escape Key"
        },
        {
          "name": "KEY_TAB",
          "value": "16777218",
          "description": "Tab Key"
        },
        {
          "name": "KEY_BACKTAB",
          "value": "16777219",
          "description": "Shift-Tab Key"
        },
        {
          "name": "KEY_BACKSPACE",
          "value": "16777220",
          "description": "Backspace Key"
        },
        {
          "name": "KEY_ENTER",
          "value": "16777221",
          "description": "Return Key (On Main Keyboard)"
        },
        {
          "name": "KEY_KP_ENTER",
          "value": "16777222",
          "description": "Enter Key (On Numpad)"
        },
        {
          "name": "KEY_INSERT",
          "value": "16777223",
          "description": "Insert Key"
        },
        {
          "name": "KEY_DELETE",
          "value": "16777224",
          "description": "Delete Key"
        },
        {
          "name": "KEY_PAUSE",
          "value": "16777225",
          "description": "Pause Key"
        },
        {
          "name": "KEY_PRINT",
          "value": "16777226",
          "description": "Printscreen Key"
        },
        {
          "name": "KEY_SYSREQ",
          "value": "16777227",
          "description": ""
        },
        {
          "name": "KEY_CLEAR",
          "value": "16777228",
          "description": ""
        },
        {
          "name": "KEY_HOME",
          "value": "16777229",
          "description": "Home Key"
        },
        {
          "name": "KEY_END",
          "value": "16777230",
          "description": "End Key"
        },
        {
          "name": "KEY_LEFT",
          "value": "16777231",
          "description": "Left Arrow Key"
        },
        {
          "name": "KEY_UP",
          "value": "16777232",
          "description": "Up Arrow Key"
        },
        {
          "name": "KEY_RIGHT",
          "value": "16777233",
          "description": "Right Arrow Key"
        },
        {
          "name": "KEY_DOWN",
          "value": "16777234",
          "description": "Down Arrow Key"
        },
        {
          "name": "KEY_PAGEUP",
          "value": "16777235",
          "description": "Pageup Key"
        },
        {
          "name": "KEY_PAGEDOWN",
          "value": "16777236",
          "description": "Pagedown Key"
        },
        {
          "name": "KEY_SHIFT",
          "value": "16777237",
          "description": "Shift Key"
        },
        {
          "name": "KEY_CONTROL",
          "value": "16777238",
          "description": "Control Key"
        },
        {
          "name": "KEY_META",
          "value": "16777239",
          "description": ""
        },
        {
          "name": "KEY_ALT",
          "value": "16777240",
          "description": "Alt Key"
        },
        {
          "name": "KEY_CAPSLOCK",
          "value": "16777241",
          "description": "Capslock Key"
        },
        {
          "name": "KEY_NUMLOCK",
          "value": "16777242",
          "description": "Numlock Key"
        },
        {
          "name": "KEY_SCROLLLOCK",
          "value": "16777243",
          "description": "Scrolllock Key"
        },
        {
          "name": "KEY_F1",
          "value": "16777244",
          "description": "F1 Key"
        },
        {
          "name": "KEY_F2",
          "value": "16777245",
          "description": "F2 Key"
        },
        {
          "name": "KEY_F3",
          "value": "16777246",
          "description": "F3 Key"
        },
        {
          "name": "KEY_F4",
          "value": "16777247",
          "description": "F4 Key"
        },
        {
          "name": "KEY_F5",
          "value": "16777248",
          "description": "F5 Key"
        },
        {
          "name": "KEY_F6",
          "value": "16777249",
          "description": "F6 Key"
        },
        {
          "name": "KEY_F7",
          "value": "16777250",
          "description": "F7 Key"
        },
        {
          "name": "KEY_F8",
          "value": "16777251",
          "description": "F8 Key"
        },
        {
          "name": "KEY_F9",
          "value": "16777252",
          "description": "F9 Key"
        },
        {
          "name": "KEY_F10",
          "value": "16777253",
          "description": "F10 Key"
        },
        {
          "name": "KEY_F11",
          "value": "16777254",
          "description": "F11 Key"
        },
        {
          "name": "KEY_F12",
          "value": "16777255",
          "description": "F12 Key"
        },
        {
          "name": "KEY_F13",
          "value": "16777256",
          "description": "F13 Key"
        },
        {
          "name": "KEY_F14",
          "value": "16777257",
          "description": "F14 Key"
        },
        {
          "name": "KEY_F15",
          "value": "16777258",
          "description": "F15 Key"
        },
        {
          "name": "KEY_F16",
          "value": "16777259",
          "description": "F16 Key"
        },
        {
          "name": "KEY_KP_MULTIPLY",
          "value": "16777345",
          "description": "Multiply Key on Numpad"
        },
        {
          "name": "KEY_KP_DIVIDE",
          "value": "16777346",
          "description": "Divide Key on Numpad"
        },
        {
          "name": "KEY_KP_SUBTRACT",
          "value": "16777347",
          "description": "Subtract Key on Numpad"
        },
        {
          "name": "KEY_KP_PERIOD",
          "value": "16777348",
          "description": "Period Key on Numpad"
        },
        {
          "name": "KEY_KP_ADD",
          "value": "16777349",
          "description": "Add Key on Numpad"
        },
        {
          "name": "KEY_KP_0",
          "value": "16777350",
          "description": "Number 0 on Numpad"
        },
        {
          "name": "KEY_KP_1",
          "value": "16777351",
          "description": "Number 1 on Numpad"
        },
        {
          "name": "KEY_KP_2",
          "value": "16777352",
          "description": "Number 2 on Numpad"
        },
        {
          "name": "KEY_KP_3",
          "value": "16777353",
          "description": "Number 3 on Numpad"
        },
        {
          "name": "KEY_KP_4",
          "value": "16777354",
          "description": "Number 4 on Numpad"
        },
        {
          "name": "KEY_KP_5",
          "value": "16777355",
          "description": "Number 5 on Numpad"
        },
        {
          "name": "KEY_KP_6",
          "value": "16777356",
          "description": "Number 6 on Numpad"
        },
        {
          "name": "KEY_KP_7",
          "value": "16777357",
          "description": "Number 7 on Numpad"
        },
        {
          "name": "KEY_KP_8",
          "value": "16777358",
          "description": "Number 8 on Numpad"
        },
        {
          "name": "KEY_KP_9",
          "value": "16777359",
          "description": "Number 9 on Numpad"
        },
        {
          "name": "KEY_SUPER_L",
          "value": "16777260",
          "description": "Super Left key (windows key)"
        },
        {
          "name": "KEY_SUPER_R",
          "value": "16777261",
          "description": "Super Left key (windows key)"
        },
        {
          "name": "KEY_MENU",
          "value": "16777262",
          "description": "Context menu key"
        },
        {
          "name": "KEY_HYPER_L",
          "value": "16777263",
          "description": ""
        },
        {
          "name": "KEY_HYPER_R",
          "value": "16777264",
          "description": ""
        },
        {
          "name": "KEY_HELP",
          "value": "16777265",
          "description": "Help key"
        },
        {
          "name": "KEY_DIRECTION_L",
          "value": "16777266",
          "description": ""
        },
        {
          "name": "KEY_DIRECTION_R",
          "value": "16777267",
          "description": ""
        },
        {
          "name": "KEY_BACK",
          "value": "16777280",
          "description": "Back key"
        },
        {
          "name": "KEY_FORWARD",
          "value": "16777281",
          "description": "Forward key"
        },
        {
          "name": "KEY_STOP",
          "value": "16777282",
          "description": "Stop key"
        },
        {
          "name": "KEY_REFRESH",
          "value": "16777283",
          "description": "Refresh key"
        },
        {
          "name": "KEY_VOLUMEDOWN",
          "value": "16777284",
          "description": "Volume down key"
        },
        {
          "name": "KEY_VOLUMEMUTE",
          "value": "16777285",
          "description": "Mute volume key"
        },
        {
          "name": "KEY_VOLUMEUP",
          "value": "16777286",
          "description": "Volume up key"
        },
        {
          "name": "KEY_BASSBOOST",
          "value": "16777287",
          "description": ""
        },
        {
          "name": "KEY_BASSUP",
          "value": "16777288",
          "description": ""
        },
        {
          "name": "KEY_BASSDOWN",
          "value": "16777289",
          "description": ""
        },
        {
          "name": "KEY_TREBLEUP",
          "value": "16777290",
          "description": ""
        },
        {
          "name": "KEY_TREBLEDOWN",
          "value": "16777291",
          "description": ""
        },
        {
          "name": "KEY_MEDIAPLAY",
          "value": "16777292",
          "description": "Media play key"
        },
        {
          "name": "KEY_MEDIASTOP",
          "value": "16777293",
          "description": "Media stop key"
        },
        {
          "name": "KEY_MEDIAPREVIOUS",
          "value": "16777294",
          "description": "Previous song key"
        },
        {
          "name": "KEY_MEDIANEXT",
          "value": "16777295",
          "description": "Next song key"
        },
        {
          "name": "KEY_MEDIARECORD",
          "value": "16777296",
          "description": "Media record key"
        },
        {
          "name": "KEY_HOMEPAGE",
          "value": "16777297",
          "description": "Home page key"
        },
        {
          "name": "KEY_FAVORITES",
          "value": "16777298",
          "description": "Favorites key"
        },
        {
          "name": "KEY_SEARCH",
          "value": "16777299",
          "description": "Search key"
        },
        {
          "name": "KEY_STANDBY",
          "value": "16777300",
          "description": ""
        },
        {
          "name": "KEY_OPENURL",
          "value": "16777301",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHMAIL",
          "value": "16777302",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHMEDIA",
          "value": "16777303",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH0",
          "value": "16777304",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH1",
          "value": "16777305",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH2",
          "value": "16777306",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH3",
          "value": "16777307",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH4",
          "value": "16777308",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH5",
          "value": "16777309",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH6",
          "value": "16777310",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH7",
          "value": "16777311",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH8",
          "value": "16777312",
          "description": ""
        },
        {
          "name": "KEY_LAUNCH9",
          "value": "16777313",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHA",
          "value": "16777314",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHB",
          "value": "16777315",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHC",
          "value": "16777316",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHD",
          "value": "16777317",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHE",
          "value": "16777318",
          "description": ""
        },
        {
          "name": "KEY_LAUNCHF",
          "value": "16777319",
          "description": ""
        },
        {
          "name": "KEY_UNKNOWN",
          "value": "33554431",
          "description": ""
        },
        {
          "name": "KEY_SPACE",
          "value": "32",
          "description": "Space Key"
        },
        {
          "name": "KEY_EXCLAM",
          "value": "33",
          "description": "! key"
        },
        {
          "name": "KEY_QUOTEDBL",
          "value": "34",
          "description": "\" key"
        },
        {
          "name": "KEY_NUMBERSIGN",
          "value": "35",
          "description": "# key"
        },
        {
          "name": "KEY_DOLLAR",
          "value": "36",
          "description": "$ key"
        },
        {
          "name": "KEY_PERCENT",
          "value": "37",
          "description": "% key"
        },
        {
          "name": "KEY_AMPERSAND",
          "value": "38",
          "description": "& key"
        },
        {
          "name": "KEY_APOSTROPHE",
          "value": "39",
          "description": "' key"
        },
        {
          "name": "KEY_PARENLEFT",
          "value": "40",
          "description": "( key"
        },
        {
          "name": "KEY_PARENRIGHT",
          "value": "41",
          "description": ") key"
        },
        {
          "name": "KEY_ASTERISK",
          "value": "42",
          "description": "* key"
        },
        {
          "name": "KEY_PLUS",
          "value": "43",
          "description": "+ key"
        },
        {
          "name": "KEY_COMMA",
          "value": "44",
          "description": ", key"
        },
        {
          "name": "KEY_MINUS",
          "value": "45",
          "description": "- key"
        },
        {
          "name": "KEY_PERIOD",
          "value": "46",
          "description": ". key"
        },
        {
          "name": "KEY_SLASH",
          "value": "47",
          "description": "/ key"
        },
        {
          "name": "KEY_0",
          "value": "48",
          "description": "Number 0"
        },
        {
          "name": "KEY_1",
          "value": "49",
          "description": "Number 1"
        },
        {
          "name": "KEY_2",
          "value": "50",
          "description": "Number 2"
        },
        {
          "name": "KEY_3",
          "value": "51",
          "description": "Number 3"
        },
        {
          "name": "KEY_4",
          "value": "52",
          "description": "Number 4"
        },
        {
          "name": "KEY_5",
          "value": "53",
          "description": "Number 5"
        },
        {
          "name": "KEY_6",
          "value": "54",
          "description": "Number 6"
        },
        {
          "name": "KEY_7",
          "value": "55",
          "description": "Number 7"
        },
        {
          "name": "KEY_8",
          "value": "56",
          "description": "Number 8"
        },
        {
          "name": "KEY_9",
          "value": "57",
          "description": "Number 9"
        },
        {
          "name": "KEY_COLON",
          "value": "58",
          "description": ": key"
        },
        {
          "name": "KEY_SEMICOLON",
          "value": "59",
          "description": "; key"
        },
        {
          "name": "KEY_LESS",
          "value": "60",
          "description": "Lower than key"
        },
        {
          "name": "KEY_EQUAL",
          "value": "61",
          "description": "= key"
        },
        {
          "name": "KEY_GREATER",
          "value": "62",
          "description": "Greater than key"
        },
        {
          "name": "KEY_QUESTION",
          "value": "63",
          "description": "? key"
        },
        {
          "name": "KEY_AT",
          "value": "64",
          "description": "@ key"
        },
        {
          "name": "KEY_A",
          "value": "65",
          "description": "A Key"
        },
        {
          "name": "KEY_B",
          "value": "66",
          "description": "B Key"
        },
        {
          "name": "KEY_C",
          "value": "67",
          "description": "C Key"
        },
        {
          "name": "KEY_D",
          "value": "68",
          "description": "D Key"
        },
        {
          "name": "KEY_E",
          "value": "69",
          "description": "E Key"
        },
        {
          "name": "KEY_F",
          "value": "70",
          "description": "F Key"
        },
        {
          "name": "KEY_G",
          "value": "71",
          "description": "G Key"
        },
        {
          "name": "KEY_H",
          "value": "72",
          "description": "H Key"
        },
        {
          "name": "KEY_I",
          "value": "73",
          "description": "I Key"
        },
        {
          "name": "KEY_J",
          "value": "74",
          "description": "J Key"
        },
        {
          "name": "KEY_K",
          "value": "75",
          "description": "K Key"
        },
        {
          "name": "KEY_L",
          "value": "76",
          "description": "L Key"
        },
        {
          "name": "KEY_M",
          "value": "77",
          "description": "M Key"
        },
        {
          "name": "KEY_N",
          "value": "78",
          "description": "N Key"
        },
        {
          "name": "KEY_O",
          "value": "79",
          "description": "O Key"
        },
        {
          "name": "KEY_P",
          "value": "80",
          "description": "P Key"
        },
        {
          "name": "KEY_Q",
          "value": "81",
          "description": "Q Key"
        },
        {
          "name": "KEY_R",
          "value": "82",
          "description": "R Key"
        },
        {
          "name": "KEY_S",
          "value": "83",
          "description": "S Key"
        },
        {
          "name": "KEY_T",
          "value": "84",
          "description": "T Key"
        },
        {
          "name": "KEY_U",
          "value": "85",
          "description": "U Key"
        },
        {
          "name": "KEY_V",
          "value": "86",
          "description": "V Key"
        },
        {
          "name": "KEY_W",
          "value": "87",
          "description": "W Key"
        },
        {
          "name": "KEY_X",
          "value": "88",
          "description": "X Key"
        },
        {
          "name": "KEY_Y",
          "value": "89",
          "description": "Y Key"
        },
        {
          "name": "KEY_Z",
          "value": "90",
          "description": "Z Key"
        },
        {
          "name": "KEY_BRACKETLEFT",
          "value": "91",
          "description": "[ key"
        },
        {
          "name": "KEY_BACKSLASH",
          "value": "92",
          "description": "\\ key"
        },
        {
          "name": "KEY_BRACKETRIGHT",
          "value": "93",
          "description": "] key"
        },
        {
          "name": "KEY_ASCIICIRCUM",
          "value": "94",
          "description": "^ key"
        },
        {
          "name": "KEY_UNDERSCORE",
          "value": "95",
          "description": "_ key"
        },
        {
          "name": "KEY_QUOTELEFT",
          "value": "96",
          "description": ""
        },
        {
          "name": "KEY_BRACELEFT",
          "value": "123",
          "description": "{ key"
        },
        {
          "name": "KEY_BAR",
          "value": "124",
          "description": "| key"
        },
        {
          "name": "KEY_BRACERIGHT",
          "value": "125",
          "description": "} key"
        },
        {
          "name": "KEY_ASCIITILDE",
          "value": "126",
          "description": "~ key"
        },
        {
          "name": "KEY_NOBREAKSPACE",
          "value": "160",
          "description": ""
        },
        {
          "name": "KEY_EXCLAMDOWN",
          "value": "161",
          "description": ""
        },
        {
          "name": "KEY_CENT",
          "value": "162",
          "description": "¢ key"
        },
        {
          "name": "KEY_STERLING",
          "value": "163",
          "description": ""
        },
        {
          "name": "KEY_CURRENCY",
          "value": "164",
          "description": ""
        },
        {
          "name": "KEY_YEN",
          "value": "165",
          "description": ""
        },
        {
          "name": "KEY_BROKENBAR",
          "value": "166",
          "description": "¦ key"
        },
        {
          "name": "KEY_SECTION",
          "value": "167",
          "description": "§ key"
        },
        {
          "name": "KEY_DIAERESIS",
          "value": "168",
          "description": "¨ key"
        },
        {
          "name": "KEY_COPYRIGHT",
          "value": "169",
          "description": "© key"
        },
        {
          "name": "KEY_ORDFEMININE",
          "value": "170",
          "description": ""
        },
        {
          "name": "KEY_GUILLEMOTLEFT",
          "value": "171",
          "description": "« key"
        },
        {
          "name": "KEY_NOTSIGN",
          "value": "172",
          "description": "» key"
        },
        {
          "name": "KEY_HYPHEN",
          "value": "173",
          "description": "‐ key"
        },
        {
          "name": "KEY_REGISTERED",
          "value": "174",
          "description": "® key"
        },
        {
          "name": "KEY_MACRON",
          "value": "175",
          "description": ""
        },
        {
          "name": "KEY_DEGREE",
          "value": "176",
          "description": "° key"
        },
        {
          "name": "KEY_PLUSMINUS",
          "value": "177",
          "description": "± key"
        },
        {
          "name": "KEY_TWOSUPERIOR",
          "value": "178",
          "description": "² key"
        },
        {
          "name": "KEY_THREESUPERIOR",
          "value": "179",
          "description": "³ key"
        },
        {
          "name": "KEY_ACUTE",
          "value": "180",
          "description": "´ key"
        },
        {
          "name": "KEY_MU",
          "value": "181",
          "description": "µ key"
        },
        {
          "name": "KEY_PARAGRAPH",
          "value": "182",
          "description": ""
        },
        {
          "name": "KEY_PERIODCENTERED",
          "value": "183",
          "description": "· key"
        },
        {
          "name": "KEY_CEDILLA",
          "value": "184",
          "description": "¬ key"
        },
        {
          "name": "KEY_ONESUPERIOR",
          "value": "185",
          "description": ""
        },
        {
          "name": "KEY_MASCULINE",
          "value": "186",
          "description": ""
        },
        {
          "name": "KEY_GUILLEMOTRIGHT",
          "value": "187",
          "description": ""
        },
        {
          "name": "KEY_ONEQUARTER",
          "value": "188",
          "description": ""
        },
        {
          "name": "KEY_ONEHALF",
          "value": "189",
          "description": "½ key"
        },
        {
          "name": "KEY_THREEQUARTERS",
          "value": "190",
          "description": ""
        },
        {
          "name": "KEY_QUESTIONDOWN",
          "value": "191",
          "description": ""
        },
        {
          "name": "KEY_AGRAVE",
          "value": "192",
          "description": ""
        },
        {
          "name": "KEY_AACUTE",
          "value": "193",
          "description": ""
        },
        {
          "name": "KEY_ACIRCUMFLEX",
          "value": "194",
          "description": ""
        },
        {
          "name": "KEY_ATILDE",
          "value": "195",
          "description": ""
        },
        {
          "name": "KEY_ADIAERESIS",
          "value": "196",
          "description": ""
        },
        {
          "name": "KEY_ARING",
          "value": "197",
          "description": ""
        },
        {
          "name": "KEY_AE",
          "value": "198",
          "description": ""
        },
        {
          "name": "KEY_CCEDILLA",
          "value": "199",
          "description": ""
        },
        {
          "name": "KEY_EGRAVE",
          "value": "200",
          "description": ""
        },
        {
          "name": "KEY_EACUTE",
          "value": "201",
          "description": ""
        },
        {
          "name": "KEY_ECIRCUMFLEX",
          "value": "202",
          "description": ""
        },
        {
          "name": "KEY_EDIAERESIS",
          "value": "203",
          "description": ""
        },
        {
          "name": "KEY_IGRAVE",
          "value": "204",
          "description": ""
        },
        {
          "name": "KEY_IACUTE",
          "value": "205",
          "description": ""
        },
        {
          "name": "KEY_ICIRCUMFLEX",
          "value": "206",
          "description": ""
        },
        {
          "name": "KEY_IDIAERESIS",
          "value": "207",
          "description": ""
        },
        {
          "name": "KEY_ETH",
          "value": "208",
          "description": ""
        },
        {
          "name": "KEY_NTILDE",
          "value": "209",
          "description": ""
        },
        {
          "name": "KEY_OGRAVE",
          "value": "210",
          "description": ""
        },
        {
          "name": "KEY_OACUTE",
          "value": "211",
          "description": ""
        },
        {
          "name": "KEY_OCIRCUMFLEX",
          "value": "212",
          "description": ""
        },
        {
          "name": "KEY_OTILDE",
          "value": "213",
          "description": ""
        },
        {
          "name": "KEY_ODIAERESIS",
          "value": "214",
          "description": ""
        },
        {
          "name": "KEY_MULTIPLY",
          "value": "215",
          "description": ""
        },
        {
          "name": "KEY_OOBLIQUE",
          "value": "216",
          "description": ""
        },
        {
          "name": "KEY_UGRAVE",
          "value": "217",
          "description": ""
        },
        {
          "name": "KEY_UACUTE",
          "value": "218",
          "description": ""
        },
        {
          "name": "KEY_UCIRCUMFLEX",
          "value": "219",
          "description": ""
        },
        {
          "name": "KEY_UDIAERESIS",
          "value": "220",
          "description": ""
        },
        {
          "name": "KEY_YACUTE",
          "value": "221",
          "description": ""
        },
        {
          "name": "KEY_THORN",
          "value": "222",
          "description": ""
        },
        {
          "name": "KEY_SSHARP",
          "value": "223",
          "description": ""
        },
        {
          "name": "KEY_DIVISION",
          "value": "247",
          "description": ""
        },
        {
          "name": "KEY_YDIAERESIS",
          "value": "255",
          "description": ""
        },
        {
          "name": "KEY_CODE_MASK",
          "value": "33554431",
          "description": ""
        },
        {
          "name": "KEY_MODIFIER_MASK",
          "value": "-16777216",
          "description": ""
        },
        {
          "name": "KEY_MASK_SHIFT",
          "value": "33554432",
          "description": ""
        },
        {
          "name": "KEY_MASK_ALT",
          "value": "67108864",
          "description": ""
        },
        {
          "name": "KEY_MASK_META",
          "value": "134217728",
          "description": ""
        },
        {
          "name": "KEY_MASK_CTRL",
          "value": "268435456",
          "description": ""
        },
        {
          "name": "KEY_MASK_CMD",
          "value": "268435456",
          "description": ""
        },
        {
          "name": "KEY_MASK_KPAD",
          "value": "536870912",
          "description": ""
        },
        {
          "name": "KEY_MASK_GROUP_SWITCH",
          "value": "1073741824",
          "description": ""
        },
        {
          "name": "BUTTON_LEFT",
          "value": "1",
          "enum": "",
          "description": "Left Mouse Button"
        },
        {
          "name": "BUTTON_RIGHT",
          "value": "2",
          "enum": "",
          "description": "Right Mouse Button"
        },
        {
          "name": "BUTTON_MIDDLE",
          "value": "3",
          "enum": "",
          "description": "Middle Mouse Button"
        },
        {
          "name": "BUTTON_WHEEL_UP",
          "value": "4",
          "enum": "",
          "description": "Mouse wheel up"
        },
        {
          "name": "BUTTON_WHEEL_DOWN",
          "value": "5",
          "enum": "",
          "description": "Mouse wheel down"
        },
        {
          "name": "BUTTON_WHEEL_LEFT",
          "value": "6",
          "enum": "",
          "description": "Mouse wheel left button"
        },
        {
          "name": "BUTTON_WHEEL_RIGHT",
          "value": "7",
          "enum": "",
          "description": "Mouse wheel right button"
        },
        {
          "name": "BUTTON_MASK_LEFT",
          "value": "1",
          "enum": "",
          "description": ""
        },
        {
          "name": "BUTTON_MASK_RIGHT",
          "value": "2",
          "enum": "",
          "description": ""
        },
        {
          "name": "BUTTON_MASK_MIDDLE",
          "value": "4",
          "enum": "",
          "description": ""
        },
        {
          "name": "JOY_BUTTON_0",
          "value": "0",
          "enum": "",
          "description": "Joypad Button 0"
        },
        {
          "name": "JOY_BUTTON_1",
          "value": "1",
          "enum": "",
          "description": "Joypad Button 1"
        },
        {
          "name": "JOY_BUTTON_2",
          "value": "2",
          "enum": "",
          "description": "Joypad Button 2"
        },
        {
          "name": "JOY_BUTTON_3",
          "value": "3",
          "enum": "",
          "description": "Joypad Button 3"
        },
        {
          "name": "JOY_BUTTON_4",
          "value": "4",
          "enum": "",
          "description": "Joypad Button 4"
        },
        {
          "name": "JOY_BUTTON_5",
          "value": "5",
          "enum": "",
          "description": "Joypad Button 5"
        },
        {
          "name": "JOY_BUTTON_6",
          "value": "6",
          "enum": "",
          "description": "Joypad Button 6"
        },
        {
          "name": "JOY_BUTTON_7",
          "value": "7",
          "enum": "",
          "description": "Joypad Button 7"
        },
        {
          "name": "JOY_BUTTON_8",
          "value": "8",
          "enum": "",
          "description": "Joypad Button 8"
        },
        {
          "name": "JOY_BUTTON_9",
          "value": "9",
          "enum": "",
          "description": "Joypad Button 9"
        },
        {
          "name": "JOY_BUTTON_10",
          "value": "10",
          "enum": "",
          "description": "Joypad Button 10"
        },
        {
          "name": "JOY_BUTTON_11",
          "value": "11",
          "enum": "",
          "description": "Joypad Button 11"
        },
        {
          "name": "JOY_BUTTON_12",
          "value": "12",
          "enum": "",
          "description": "Joypad Button 12"
        },
        {
          "name": "JOY_BUTTON_13",
          "value": "13",
          "enum": "",
          "description": "Joypad Button 13"
        },
        {
          "name": "JOY_BUTTON_14",
          "value": "14",
          "enum": "",
          "description": "Joypad Button 14"
        },
        {
          "name": "JOY_BUTTON_15",
          "value": "15",
          "enum": "",
          "description": "Joypad Button 15"
        },
        {
          "name": "JOY_BUTTON_MAX",
          "value": "16",
          "enum": "",
          "description": "Joypad Button 16"
        },
        {
          "name": "JOY_SONY_CIRCLE",
          "value": "1",
          "enum": "",
          "description": "DUALSHOCK circle button"
        },
        {
          "name": "JOY_SONY_X",
          "value": "0",
          "enum": "",
          "description": "DUALSHOCK X button"
        },
        {
          "name": "JOY_SONY_SQUARE",
          "value": "2",
          "enum": "",
          "description": "DUALSHOCK square button"
        },
        {
          "name": "JOY_SONY_TRIANGLE",
          "value": "3",
          "enum": "",
          "description": "DUALSHOCK triangle button"
        },
        {
          "name": "JOY_XBOX_B",
          "value": "1",
          "enum": "",
          "description": "XBOX controller B button"
        },
        {
          "name": "JOY_XBOX_A",
          "value": "0",
          "enum": "",
          "description": "XBOX controller A button"
        },
        {
          "name": "JOY_XBOX_X",
          "value": "2",
          "enum": "",
          "description": "XBOX controller X button"
        },
        {
          "name": "JOY_XBOX_Y",
          "value": "3",
          "enum": "",
          "description": "XBOX controller Y button"
        },
        {
          "name": "JOY_DS_A",
          "value": "1",
          "enum": "",
          "description": ""
        },
        {
          "name": "JOY_DS_B",
          "value": "0",
          "enum": "",
          "description": ""
        },
        {
          "name": "JOY_DS_X",
          "value": "3",
          "enum": "",
          "description": ""
        },
        {
          "name": "JOY_DS_Y",
          "value": "2",
          "enum": "",
          "description": ""
        },
        {
          "name": "JOY_SELECT",
          "value": "10",
          "enum": "",
          "description": "Joypad Button Select"
        },
        {
          "name": "JOY_START",
          "value": "11",
          "enum": "",
          "description": "Joypad Button Start"
        },
        {
          "name": "JOY_DPAD_UP",
          "value": "12",
          "enum": "",
          "description": "Joypad DPad Up"
        },
        {
          "name": "JOY_DPAD_DOWN",
          "value": "13",
          "enum": "",
          "description": "Joypad DPad Down"
        },
        {
          "name": "JOY_DPAD_LEFT",
          "value": "14",
          "enum": "",
          "description": "Joypad DPad Left"
        },
        {
          "name": "JOY_DPAD_RIGHT",
          "value": "15",
          "enum": "",
          "description": "Joypad DPad Right"
        },
        {
          "name": "JOY_L",
          "value": "4",
          "enum": "",
          "description": "Joypad Left Shoulder Button"
        },
        {
          "name": "JOY_L2",
          "value": "6",
          "enum": "",
          "description": "Joypad Left Trigger"
        },
        {
          "name": "JOY_L3",
          "value": "8",
          "enum": "",
          "description": "Joypad Left Stick Click"
        },
        {
          "name": "JOY_R",
          "value": "5",
          "enum": "",
          "description": "Joypad Right Shoulder Button"
        },
        {
          "name": "JOY_R2",
          "value": "7",
          "enum": "",
          "description": "Joypad Right Trigger"
        },
        {
          "name": "JOY_R3",
          "value": "9",
          "enum": "",
          "description": "Joypad Right Stick Click"
        },
        {
          "name": "JOY_AXIS_0",
          "value": "0",
          "enum": "",
          "description": "Joypad Left Stick Horizontal Axis"
        },
        {
          "name": "JOY_AXIS_1",
          "value": "1",
          "enum": "",
          "description": "Joypad Left Stick Vertical Axis"
        },
        {
          "name": "JOY_AXIS_2",
          "value": "2",
          "enum": "",
          "description": "Joypad Right Stick Horizontal Axis"
        },
        {
          "name": "JOY_AXIS_3",
          "value": "3",
          "enum": "",
          "description": "Joypad Right Stick Vertical Axis"
        },
        {
          "name": "JOY_AXIS_4",
          "value": "4",
          "enum": "",
          "description": ""
        },
        {
          "name": "JOY_AXIS_5",
          "value": "5",
          "enum": "",
          "description": ""
        },
        {
          "name": "JOY_AXIS_6",
          "value": "6",
          "enum": "",
          "description": "Joypad Left Trigger Analog Axis"
        },
        {
          "name": "JOY_AXIS_7",
          "value": "7",
          "enum": "",
          "description": "Joypad Right Trigger Analog Axis"
        },
        {
          "name": "JOY_AXIS_MAX",
          "value": "8",
          "enum": "",
          "description": ""
        },
        {
          "name": "JOY_ANALOG_LX",
          "value": "0",
          "enum": "",
          "description": "Joypad Left Stick Horizontal Axis"
        },
        {
          "name": "JOY_ANALOG_LY",
          "value": "1",
          "enum": "",
          "description": "Joypad Left Stick Vertical Axis"
        },
        {
          "name": "JOY_ANALOG_RX",
          "value": "2",
          "enum": "",
          "description": "Joypad Right Stick Horizontal Axis"
        },
        {
          "name": "JOY_ANALOG_RY",
          "value": "3",
          "enum": "",
          "description": "Joypad Right Stick Vertical Axis"
        },
        {
          "name": "JOY_ANALOG_L2",
          "value": "6",
          "enum": "",
          "description": ""
        },
        {
          "name": "JOY_ANALOG_R2",
          "value": "7",
          "enum": "",
          "description": ""
        },
        {
          "name": "OK",
          "value": "0",
          "description": "Functions that return Error return OK when everything went ok. Most functions don't return error anyway and/or just print errors to stdout."
        },
        {
          "name": "FAILED",
          "value": "1",
          "description": "Generic fail return error."
        },
        {
          "name": "ERR_UNAVAILABLE",
          "value": "2",
          "description": ""
        },
        {
          "name": "ERR_UNCONFIGURED",
          "value": "3",
          "description": ""
        },
        {
          "name": "ERR_UNAUTHORIZED",
          "value": "4",
          "description": ""
        },
        {
          "name": "ERR_PARAMETER_RANGE_ERROR",
          "value": "5",
          "description": ""
        },
        {
          "name": "ERR_OUT_OF_MEMORY",
          "value": "6",
          "description": ""
        },
        {
          "name": "ERR_FILE_NOT_FOUND",
          "value": "7",
          "description": ""
        },
        {
          "name": "ERR_FILE_BAD_DRIVE",
          "value": "8",
          "description": ""
        },
        {
          "name": "ERR_FILE_BAD_PATH",
          "value": "9",
          "description": ""
        },
        {
          "name": "ERR_FILE_NO_PERMISSION",
          "value": "10",
          "description": ""
        },
        {
          "name": "ERR_FILE_ALREADY_IN_USE",
          "value": "11",
          "description": ""
        },
        {
          "name": "ERR_FILE_CANT_OPEN",
          "value": "12",
          "description": ""
        },
        {
          "name": "ERR_FILE_CANT_WRITE",
          "value": "13",
          "description": ""
        },
        {
          "name": "ERR_FILE_CANT_READ",
          "value": "14",
          "description": ""
        },
        {
          "name": "ERR_FILE_UNRECOGNIZED",
          "value": "15",
          "description": ""
        },
        {
          "name": "ERR_FILE_CORRUPT",
          "value": "16",
          "description": ""
        },
        {
          "name": "ERR_FILE_MISSING_DEPENDENCIES",
          "value": "17",
          "description": ""
        },
        {
          "name": "ERR_FILE_EOF",
          "value": "18",
          "description": ""
        },
        {
          "name": "ERR_CANT_OPEN",
          "value": "19",
          "description": ""
        },
        {
          "name": "ERR_CANT_CREATE",
          "value": "20",
          "description": ""
        },
        {
          "name": "ERR_PARSE_ERROR",
          "value": "43",
          "description": ""
        },
        {
          "name": "ERR_QUERY_FAILED",
          "value": "21",
          "description": ""
        },
        {
          "name": "ERR_ALREADY_IN_USE",
          "value": "22",
          "description": ""
        },
        {
          "name": "ERR_LOCKED",
          "value": "23",
          "description": ""
        },
        {
          "name": "ERR_TIMEOUT",
          "value": "24",
          "description": ""
        },
        {
          "name": "ERR_CANT_ACQUIRE_RESOURCE",
          "value": "28",
          "description": ""
        },
        {
          "name": "ERR_INVALID_DATA",
          "value": "30",
          "description": ""
        },
        {
          "name": "ERR_INVALID_PARAMETER",
          "value": "31",
          "description": ""
        },
        {
          "name": "ERR_ALREADY_EXISTS",
          "value": "32",
          "description": ""
        },
        {
          "name": "ERR_DOES_NOT_EXIST",
          "value": "33",
          "description": ""
        },
        {
          "name": "ERR_DATABASE_CANT_READ",
          "value": "34",
          "description": ""
        },
        {
          "name": "ERR_DATABASE_CANT_WRITE",
          "value": "35",
          "description": ""
        },
        {
          "name": "ERR_COMPILATION_FAILED",
          "value": "36",
          "description": ""
        },
        {
          "name": "ERR_METHOD_NOT_FOUND",
          "value": "37",
          "description": ""
        },
        {
          "name": "ERR_LINK_FAILED",
          "value": "38",
          "description": ""
        },
        {
          "name": "ERR_SCRIPT_FAILED",
          "value": "39",
          "description": ""
        },
        {
          "name": "ERR_CYCLIC_LINK",
          "value": "40",
          "description": ""
        },
        {
          "name": "ERR_BUSY",
          "value": "44",
          "description": ""
        },
        {
          "name": "ERR_HELP",
          "value": "46",
          "description": ""
        },
        {
          "name": "ERR_BUG",
          "value": "47",
          "description": ""
        },
        {
          "name": "ERR_WTF",
          "value": "49",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_NONE",
          "value": "0",
          "description": "No hint for edited property."
        },
        {
          "name": "PROPERTY_HINT_RANGE",
          "value": "1",
          "description": "Hints that the string is a range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats."
        },
        {
          "name": "PROPERTY_HINT_EXP_RANGE",
          "value": "2",
          "description": "Hints that the string is an exponential range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats."
        },
        {
          "name": "PROPERTY_HINT_ENUM",
          "value": "3",
          "description": "Property hint for an enumerated value, like \"Hello,Something,Else\". This is valid for integer, float and string properties."
        },
        {
          "name": "PROPERTY_HINT_EXP_EASING",
          "value": "4",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_LENGTH",
          "value": "5",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_KEY_ACCEL",
          "value": "7",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_FLAGS",
          "value": "8",
          "description": "Property hint for a bitmask description, for bits 0,1,2,3 and 5 the hint would be like \"Bit0,Bit1,Bit2,Bit3,,Bit5\". Valid only for integers."
        },
        {
          "name": "PROPERTY_HINT_LAYERS_2D_RENDER",
          "value": "9",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_LAYERS_2D_PHYSICS",
          "value": "10",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_LAYERS_3D_RENDER",
          "value": "11",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_LAYERS_3D_PHYSICS",
          "value": "12",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_FILE",
          "value": "13",
          "description": "String property is a file (so pop up a file dialog when edited). Hint string can be a set of wildcards like \"*.doc\"."
        },
        {
          "name": "PROPERTY_HINT_DIR",
          "value": "14",
          "description": "String property is a directory (so pop up a file dialog when edited)."
        },
        {
          "name": "PROPERTY_HINT_GLOBAL_FILE",
          "value": "15",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_GLOBAL_DIR",
          "value": "16",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_RESOURCE_TYPE",
          "value": "17",
          "description": "String property is a resource, so open the resource popup menu when edited."
        },
        {
          "name": "PROPERTY_HINT_MULTILINE_TEXT",
          "value": "18",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_COLOR_NO_ALPHA",
          "value": "19",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSY",
          "value": "20",
          "description": ""
        },
        {
          "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS",
          "value": "21",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_STORAGE",
          "value": "1",
          "description": "Property will be used as storage (default)."
        },
        {
          "name": "PROPERTY_USAGE_EDITOR",
          "value": "2",
          "description": "Property will be visible in editor (default)."
        },
        {
          "name": "PROPERTY_USAGE_NETWORK",
          "value": "4",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_EDITOR_HELPER",
          "value": "8",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_CHECKABLE",
          "value": "16",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_CHECKED",
          "value": "32",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_INTERNATIONALIZED",
          "value": "64",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_GROUP",
          "value": "128",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_CATEGORY",
          "value": "256",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_STORE_IF_NONZERO",
          "value": "512",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_STORE_IF_NONONE",
          "value": "1024",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_NO_INSTANCE_STATE",
          "value": "2048",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_RESTART_IF_CHANGED",
          "value": "4096",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_SCRIPT_VARIABLE",
          "value": "8192",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_DEFAULT",
          "value": "7",
          "description": "Default usage (storage and editor)."
        },
        {
          "name": "PROPERTY_USAGE_DEFAULT_INTL",
          "value": "71",
          "description": ""
        },
        {
          "name": "PROPERTY_USAGE_NOEDITOR",
          "value": "5",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_NORMAL",
          "value": "1",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_EDITOR",
          "value": "2",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_NOSCRIPT",
          "value": "4",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_CONST",
          "value": "8",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_REVERSE",
          "value": "16",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_VIRTUAL",
          "value": "32",
          "description": ""
        },
        {
          "name": "METHOD_FLAG_FROM_SCRIPT",
          "value": "64",
          "description": ""
        },
        {
          "name": "METHOD_FLAGS_DEFAULT",
          "value": "1",
          "description": ""
        },
        {
          "name": "TYPE_NIL",
          "value": "0",
          "description": "Variable is of type nil (only applied for null)."
        },
        {
          "name": "TYPE_BOOL",
          "value": "1",
          "description": "Variable is of type [bool]."
        },
        {
          "name": "TYPE_INT",
          "value": "2",
          "description": "Variable is of type [int]."
        },
        {
          "name": "TYPE_REAL",
          "value": "3",
          "description": "Variable is of type [float]/real."
        },
        {
          "name": "TYPE_STRING",
          "value": "4",
          "description": "Variable is of type [String]."
        },
        {
          "name": "TYPE_VECTOR2",
          "value": "5",
          "description": "Variable is of type [Vector2]."
        },
        {
          "name": "TYPE_RECT2",
          "value": "6",
          "description": "Variable is of type [Rect2]."
        },
        {
          "name": "TYPE_VECTOR3",
          "value": "7",
          "description": "Variable is of type [Vector3]."
        },
        {
          "name": "TYPE_TRANSFORM2D",
          "value": "8",
          "description": "Variable is of type [Transform2D]."
        },
        {
          "name": "TYPE_PLANE",
          "value": "9",
          "description": "Variable is of type [Plane]."
        },
        {
          "name": "TYPE_QUAT",
          "value": "10",
          "description": "Variable is of type [Quat]."
        },
        {
          "name": "TYPE_RECT3",
          "value": "11",
          "description": "Variable is of type [Rect3]."
        },
        {
          "name": "TYPE_BASIS",
          "value": "12",
          "description": "Variable is of type [Basis]."
        },
        {
          "name": "TYPE_TRANSFORM",
          "value": "13",
          "description": "Variable is of type [Transform]."
        },
        {
          "name": "TYPE_COLOR",
          "value": "14",
          "description": "Variable is of type [Color]."
        },
        {
          "name": "TYPE_NODE_PATH",
          "value": "15",
          "description": "Variable is of type [NodePath]."
        },
        {
          "name": "TYPE_RID",
          "value": "16",
          "description": "Variable is of type [RID]."
        },
        {
          "name": "TYPE_OBJECT",
          "value": "17",
          "description": "Variable is of type [Object]."
        },
        {
          "name": "TYPE_DICTIONARY",
          "value": "18",
          "description": "Variable is of type [Dictionary]."
        },
        {
          "name": "TYPE_ARRAY",
          "value": "19",
          "description": "Variable is of type [Array]."
        },
        {
          "name": "TYPE_RAW_ARRAY",
          "value": "20",
          "description": "Variable is of type [PoolByteArray]."
        },
        {
          "name": "TYPE_INT_ARRAY",
          "value": "21",
          "description": "Variable is of type [PoolIntArray]."
        },
        {
          "name": "TYPE_REAL_ARRAY",
          "value": "22",
          "description": "Variable is of type [PoolRealArray]."
        },
        {
          "name": "TYPE_STRING_ARRAY",
          "value": "23",
          "description": "Variable is of type [PoolStringArray]."
        },
        {
          "name": "TYPE_VECTOR2_ARRAY",
          "value": "24",
          "description": "Variable is of type [PoolVector2Array]."
        },
        {
          "name": "TYPE_VECTOR3_ARRAY",
          "value": "25",
          "description": "Variable is of type [PoolVector3Array]."
        },
        {
          "name": "TYPE_COLOR_ARRAY",
          "value": "26",
          "description": "Variable is of type [PoolColorArray]."
        },
        {
          "name": "TYPE_MAX",
          "value": "27",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "ARVRServer",
          "type": "ARVRServer",
          "setter": "",
          "getter": "",
          "description": "[ARVRServer] singleton"
        },
        {
          "name": "AudioServer",
          "type": "AudioServer",
          "setter": "",
          "getter": "",
          "description": "[AudioServer] singleton"
        },
        {
          "name": "ClassDB",
          "type": "ClassDB",
          "setter": "",
          "getter": "",
          "description": "[ClassDB] singleton"
        },
        {
          "name": "Engine",
          "type": "Engine",
          "setter": "",
          "getter": "",
          "description": "[Engine] singleton"
        },
        {
          "name": "Geometry",
          "type": "Geometry",
          "setter": "",
          "getter": "",
          "description": "[Geometry] singleton"
        },
        {
          "name": "IP",
          "type": "IP",
          "setter": "",
          "getter": "",
          "description": "[IP] singleton"
        },
        {
          "name": "Input",
          "type": "Input",
          "setter": "",
          "getter": "",
          "description": "[Input] singleton"
        },
        {
          "name": "InputMap",
          "type": "InputMap",
          "setter": "",
          "getter": "",
          "description": "[InputMap] singleton"
        },
        {
          "name": "JSON",
          "type": "JSON",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "Marshalls",
          "type": "Reference",
          "setter": "",
          "getter": "",
          "description": "[Marshalls] singleton"
        },
        {
          "name": "OS",
          "type": "OS",
          "setter": "",
          "getter": "",
          "description": "[OS] singleton"
        },
        {
          "name": "Performance",
          "type": "Performance",
          "setter": "",
          "getter": "",
          "description": "[Performance] singleton"
        },
        {
          "name": "Physics2DServer",
          "type": "Physics2DServer",
          "setter": "",
          "getter": "",
          "description": "[Physics2DServer] singleton"
        },
        {
          "name": "PhysicsServer",
          "type": "PhysicsServer",
          "setter": "",
          "getter": "",
          "description": "[PhysicsServer] singleton"
        },
        {
          "name": "ProjectSettings",
          "type": "ProjectSettings",
          "setter": "",
          "getter": "",
          "description": "[ProjectSettings] singleton"
        },
        {
          "name": "ResourceLoader",
          "type": "ResourceLoader",
          "setter": "",
          "getter": "",
          "description": "[ResourceLoader] singleton"
        },
        {
          "name": "ResourceSaver",
          "type": "ResourceSaver",
          "setter": "",
          "getter": "",
          "description": "[ResourceSaver] singleton"
        },
        {
          "name": "TranslationServer",
          "type": "TranslationServer",
          "setter": "",
          "getter": "",
          "description": "[TranslationServer] singleton"
        },
        {
          "name": "VisualServer",
          "type": "VisualServer",
          "setter": "",
          "getter": "",
          "description": "[VisualServer] singleton"
        }
      ],
      "theme_properties": []
    },
    "SpatialMaterial": {
      "name": "SpatialMaterial",
      "inherits": "Material",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_albedo",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_alpha_scissor_threshold",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_anisotropy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ao_light_affect",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_ao_texture_channel",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_billboard_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_blend_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_clearcoat",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_clearcoat_gloss",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_cull_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_depth_deep_parallax_max_layers",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_depth_deep_parallax_min_layers",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_depth_draw_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_depth_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_detail_blend_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_detail_uv",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_diffuse_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_distance_fade_max_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_distance_fade_min_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_emission",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_emission_energy",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_feature",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "feature",
              "type": "int",
              "enum": "SpatialMaterial.Feature",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "SpatialMaterial.Flags",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_grow",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_line_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_metallic",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_metallic_texture_channel",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_normal_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_particles_anim_h_frames",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_particles_anim_loop",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_particles_anim_v_frames",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_point_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_proximity_fade_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_refraction",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_refraction_texture_channel",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_rim",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rim_tint",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_roughness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_roughness_texture_channel",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_specular",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_specular_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_subsurface_scattering_strength",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "SpatialMaterial.TextureParam",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_transmission",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_uv1_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_uv1_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_uv1_triplanar_blend_sharpness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_uv2_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_uv2_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_uv2_triplanar_blend_sharpness",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_depth_deep_parallax_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_distance_fade_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_grow_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_proximity_fade_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_albedo",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "albedo",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_alpha_scissor_threshold",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "threshold",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_anisotropy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anisotropy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ao_light_affect",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ao_texture_channel",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "channel",
              "type": "int",
              "enum": "SpatialMaterial.TextureChannel",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_billboard_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "SpatialMaterial.BillboardMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_blend_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "blend_mode",
              "type": "int",
              "enum": "SpatialMaterial.BlendMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clearcoat",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "clearcoat",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clearcoat_gloss",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "clearcoat_gloss",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cull_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cull_mode",
              "type": "int",
              "enum": "SpatialMaterial.CullMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_depth_deep_parallax",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_depth_deep_parallax_max_layers",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_depth_deep_parallax_min_layers",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_depth_draw_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "depth_draw_mode",
              "type": "int",
              "enum": "SpatialMaterial.DepthDrawMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_depth_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "depth_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_detail_blend_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "detail_blend_mode",
              "type": "int",
              "enum": "SpatialMaterial.BlendMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_detail_uv",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "detail_uv",
              "type": "int",
              "enum": "SpatialMaterial.DetailUV",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_diffuse_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "diffuse_mode",
              "type": "int",
              "enum": "SpatialMaterial.DiffuseMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_distance_fade",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_distance_fade_max_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_distance_fade_min_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "emission",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emission_energy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "emission_energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_feature",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "feature",
              "type": "int",
              "enum": "SpatialMaterial.Feature",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "SpatialMaterial.Flags",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_grow",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_grow_enabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_line_width",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line_width",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_metallic",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "metallic",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_metallic_texture_channel",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "channel",
              "type": "int",
              "enum": "SpatialMaterial.TextureChannel",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_particles_anim_h_frames",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frames",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_particles_anim_loop",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frames",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_particles_anim_v_frames",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frames",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_point_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point_size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_proximity_fade",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_proximity_fade_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_refraction",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "refraction",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_refraction_texture_channel",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "channel",
              "type": "int",
              "enum": "SpatialMaterial.TextureChannel",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rim",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rim",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rim_tint",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rim_tint",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_roughness",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "roughness",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_roughness_texture_channel",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "channel",
              "type": "int",
              "enum": "SpatialMaterial.TextureChannel",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_specular",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "specular",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_specular_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "specular_mode",
              "type": "int",
              "enum": "SpatialMaterial.SpecularMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_subsurface_scattering_strength",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "strength",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "SpatialMaterial.TextureParam",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transmission",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transmission",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv1_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv1_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv1_triplanar_blend_sharpness",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sharpness",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv2_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv2_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uv2_triplanar_blend_sharpness",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sharpness",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TEXTURE_ALBEDO",
          "value": "0",
          "description": ""
        },
        {
          "name": "TEXTURE_METALLIC",
          "value": "1",
          "description": ""
        },
        {
          "name": "TEXTURE_ROUGHNESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "TEXTURE_EMISSION",
          "value": "3",
          "description": ""
        },
        {
          "name": "TEXTURE_NORMAL",
          "value": "4",
          "description": ""
        },
        {
          "name": "TEXTURE_RIM",
          "value": "5",
          "description": ""
        },
        {
          "name": "TEXTURE_CLEARCOAT",
          "value": "6",
          "description": ""
        },
        {
          "name": "TEXTURE_FLOWMAP",
          "value": "7",
          "description": ""
        },
        {
          "name": "TEXTURE_AMBIENT_OCCLUSION",
          "value": "8",
          "description": ""
        },
        {
          "name": "TEXTURE_DEPTH",
          "value": "9",
          "description": ""
        },
        {
          "name": "TEXTURE_SUBSURFACE_SCATTERING",
          "value": "10",
          "description": ""
        },
        {
          "name": "TEXTURE_TRANSMISSION",
          "value": "11",
          "description": ""
        },
        {
          "name": "TEXTURE_REFRACTION",
          "value": "12",
          "description": ""
        },
        {
          "name": "TEXTURE_DETAIL_MASK",
          "value": "13",
          "description": ""
        },
        {
          "name": "TEXTURE_DETAIL_ALBEDO",
          "value": "14",
          "description": ""
        },
        {
          "name": "TEXTURE_DETAIL_NORMAL",
          "value": "15",
          "description": ""
        },
        {
          "name": "TEXTURE_MAX",
          "value": "16",
          "description": ""
        },
        {
          "name": "DETAIL_UV_1",
          "value": "0",
          "description": ""
        },
        {
          "name": "DETAIL_UV_2",
          "value": "1",
          "description": ""
        },
        {
          "name": "FEATURE_TRANSPARENT",
          "value": "0",
          "description": ""
        },
        {
          "name": "FEATURE_EMISSION",
          "value": "1",
          "description": ""
        },
        {
          "name": "FEATURE_NORMAL_MAPPING",
          "value": "2",
          "description": ""
        },
        {
          "name": "FEATURE_RIM",
          "value": "3",
          "description": ""
        },
        {
          "name": "FEATURE_CLEARCOAT",
          "value": "4",
          "description": ""
        },
        {
          "name": "FEATURE_ANISOTROPY",
          "value": "5",
          "description": ""
        },
        {
          "name": "FEATURE_AMBIENT_OCCLUSION",
          "value": "6",
          "description": ""
        },
        {
          "name": "FEATURE_DEPTH_MAPPING",
          "value": "7",
          "description": ""
        },
        {
          "name": "FEATURE_SUBSURACE_SCATTERING",
          "value": "8",
          "description": ""
        },
        {
          "name": "FEATURE_TRANSMISSION",
          "value": "9",
          "description": ""
        },
        {
          "name": "FEATURE_REFRACTION",
          "value": "10",
          "description": ""
        },
        {
          "name": "FEATURE_DETAIL",
          "value": "11",
          "description": ""
        },
        {
          "name": "FEATURE_MAX",
          "value": "12",
          "description": ""
        },
        {
          "name": "BLEND_MODE_MIX",
          "value": "0",
          "description": ""
        },
        {
          "name": "BLEND_MODE_ADD",
          "value": "1",
          "description": ""
        },
        {
          "name": "BLEND_MODE_SUB",
          "value": "2",
          "description": ""
        },
        {
          "name": "BLEND_MODE_MUL",
          "value": "3",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_OPAQUE_ONLY",
          "value": "0",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_ALWAYS",
          "value": "1",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_DISABLED",
          "value": "2",
          "description": ""
        },
        {
          "name": "DEPTH_DRAW_ALPHA_OPAQUE_PREPASS",
          "value": "3",
          "description": ""
        },
        {
          "name": "CULL_BACK",
          "value": "0",
          "description": ""
        },
        {
          "name": "CULL_FRONT",
          "value": "1",
          "description": ""
        },
        {
          "name": "CULL_DISABLED",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_UNSHADED",
          "value": "0",
          "description": ""
        },
        {
          "name": "FLAG_USE_VERTEX_LIGHTING",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_DISABLE_DEPTH_TEST",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_ALBEDO_FROM_VERTEX_COLOR",
          "value": "3",
          "description": ""
        },
        {
          "name": "FLAG_SRGB_VERTEX_COLOR",
          "value": "4",
          "description": ""
        },
        {
          "name": "FLAG_USE_POINT_SIZE",
          "value": "5",
          "description": ""
        },
        {
          "name": "FLAG_FIXED_SIZE",
          "value": "6",
          "description": ""
        },
        {
          "name": "FLAG_UV1_USE_TRIPLANAR",
          "value": "7",
          "description": ""
        },
        {
          "name": "FLAG_UV2_USE_TRIPLANAR",
          "value": "8",
          "description": ""
        },
        {
          "name": "FLAG_AO_ON_UV2",
          "value": "10",
          "description": ""
        },
        {
          "name": "FLAG_USE_ALPHA_SCISSOR",
          "value": "11",
          "description": ""
        },
        {
          "name": "FLAG_TRIPLANAR_USE_WORLD",
          "value": "9",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "12",
          "description": ""
        },
        {
          "name": "DIFFUSE_BURLEY",
          "value": "0",
          "description": ""
        },
        {
          "name": "DIFFUSE_LAMBERT",
          "value": "1",
          "description": ""
        },
        {
          "name": "DIFFUSE_LAMBERT_WRAP",
          "value": "2",
          "description": ""
        },
        {
          "name": "DIFFUSE_OREN_NAYAR",
          "value": "3",
          "description": ""
        },
        {
          "name": "DIFFUSE_TOON",
          "value": "4",
          "description": ""
        },
        {
          "name": "SPECULAR_SCHLICK_GGX",
          "value": "0",
          "description": ""
        },
        {
          "name": "SPECULAR_BLINN",
          "value": "1",
          "description": ""
        },
        {
          "name": "SPECULAR_PHONG",
          "value": "2",
          "description": ""
        },
        {
          "name": "SPECULAR_TOON",
          "value": "3",
          "description": ""
        },
        {
          "name": "SPECULAR_DISABLED",
          "value": "4",
          "description": ""
        },
        {
          "name": "BILLBOARD_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "BILLBOARD_ENABLED",
          "value": "1",
          "description": ""
        },
        {
          "name": "BILLBOARD_FIXED_Y",
          "value": "2",
          "description": ""
        },
        {
          "name": "BILLBOARD_PARTICLES",
          "value": "3",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_RED",
          "value": "0",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_GREEN",
          "value": "1",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_BLUE",
          "value": "2",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_ALPHA",
          "value": "3",
          "description": ""
        },
        {
          "name": "TEXTURE_CHANNEL_GRAYSCALE",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "albedo_color",
          "type": "Color",
          "setter": "set_albedo",
          "getter": "get_albedo",
          "description": ""
        },
        {
          "name": "albedo_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "anisotropy",
          "type": "float",
          "setter": "set_anisotropy",
          "getter": "get_anisotropy",
          "description": ""
        },
        {
          "name": "anisotropy_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "anisotropy_flowmap",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "ao_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "ao_light_affect",
          "type": "float",
          "setter": "set_ao_light_affect",
          "getter": "get_ao_light_affect",
          "description": ""
        },
        {
          "name": "ao_on_uv2",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "ao_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "ao_texture_channel",
          "type": "int",
          "setter": "set_ao_texture_channel",
          "getter": "get_ao_texture_channel",
          "enum": "SpatialMaterial.TextureChannel",
          "description": ""
        },
        {
          "name": "clearcoat",
          "type": "float",
          "setter": "set_clearcoat",
          "getter": "get_clearcoat",
          "description": ""
        },
        {
          "name": "clearcoat_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "clearcoat_gloss",
          "type": "float",
          "setter": "set_clearcoat_gloss",
          "getter": "get_clearcoat_gloss",
          "description": ""
        },
        {
          "name": "clearcoat_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "depth_deep_parallax",
          "type": "bool",
          "setter": "set_depth_deep_parallax",
          "getter": "is_depth_deep_parallax_enabled",
          "description": ""
        },
        {
          "name": "depth_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "depth_max_layers",
          "type": "int",
          "setter": "set_depth_deep_parallax_max_layers",
          "getter": "get_depth_deep_parallax_max_layers",
          "description": ""
        },
        {
          "name": "depth_min_layers",
          "type": "int",
          "setter": "set_depth_deep_parallax_min_layers",
          "getter": "get_depth_deep_parallax_min_layers",
          "description": ""
        },
        {
          "name": "depth_scale",
          "type": "float",
          "setter": "set_depth_scale",
          "getter": "get_depth_scale",
          "description": ""
        },
        {
          "name": "depth_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "detail_albedo",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "detail_blend_mode",
          "type": "int",
          "setter": "set_detail_blend_mode",
          "getter": "get_detail_blend_mode",
          "enum": "SpatialMaterial.BlendMode",
          "description": ""
        },
        {
          "name": "detail_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "detail_mask",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "detail_normal",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "detail_uv_layer",
          "type": "int",
          "setter": "set_detail_uv",
          "getter": "get_detail_uv",
          "enum": "SpatialMaterial.DetailUV",
          "description": ""
        },
        {
          "name": "distance_fade_enable",
          "type": "bool",
          "setter": "set_distance_fade",
          "getter": "is_distance_fade_enabled",
          "description": ""
        },
        {
          "name": "distance_fade_max_distance",
          "type": "float",
          "setter": "set_distance_fade_max_distance",
          "getter": "get_distance_fade_max_distance",
          "description": ""
        },
        {
          "name": "distance_fade_min_distance",
          "type": "float",
          "setter": "set_distance_fade_min_distance",
          "getter": "get_distance_fade_min_distance",
          "description": ""
        },
        {
          "name": "emission",
          "type": "Color",
          "setter": "set_emission",
          "getter": "get_emission",
          "description": ""
        },
        {
          "name": "emission_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "emission_energy",
          "type": "float",
          "setter": "set_emission_energy",
          "getter": "get_emission_energy",
          "description": ""
        },
        {
          "name": "emission_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "flags_fixed_size",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_no_depth_test",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_transparent",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "flags_unshaded",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_use_point_size",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_vertex_lighting",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "flags_world_triplanar",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "metallic",
          "type": "float",
          "setter": "set_metallic",
          "getter": "get_metallic",
          "description": ""
        },
        {
          "name": "metallic_specular",
          "type": "float",
          "setter": "set_specular",
          "getter": "get_specular",
          "description": ""
        },
        {
          "name": "metallic_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "metallic_texture_channel",
          "type": "int",
          "setter": "set_metallic_texture_channel",
          "getter": "get_metallic_texture_channel",
          "enum": "SpatialMaterial.TextureChannel",
          "description": ""
        },
        {
          "name": "normal_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "normal_scale",
          "type": "float",
          "setter": "set_normal_scale",
          "getter": "get_normal_scale",
          "description": ""
        },
        {
          "name": "normal_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "params_alpha_scissor_threshold",
          "type": "float",
          "setter": "set_alpha_scissor_threshold",
          "getter": "get_alpha_scissor_threshold",
          "description": ""
        },
        {
          "name": "params_billboard_mode",
          "type": "int",
          "setter": "set_billboard_mode",
          "getter": "get_billboard_mode",
          "enum": "SpatialMaterial.BillboardMode",
          "description": ""
        },
        {
          "name": "params_blend_mode",
          "type": "int",
          "setter": "set_blend_mode",
          "getter": "get_blend_mode",
          "enum": "SpatialMaterial.BlendMode",
          "description": ""
        },
        {
          "name": "params_cull_mode",
          "type": "int",
          "setter": "set_cull_mode",
          "getter": "get_cull_mode",
          "enum": "SpatialMaterial.CullMode",
          "description": ""
        },
        {
          "name": "params_depth_draw_mode",
          "type": "int",
          "setter": "set_depth_draw_mode",
          "getter": "get_depth_draw_mode",
          "enum": "SpatialMaterial.DepthDrawMode",
          "description": ""
        },
        {
          "name": "params_diffuse_mode",
          "type": "int",
          "setter": "set_diffuse_mode",
          "getter": "get_diffuse_mode",
          "enum": "SpatialMaterial.DiffuseMode",
          "description": ""
        },
        {
          "name": "params_grow",
          "type": "bool",
          "setter": "set_grow_enabled",
          "getter": "is_grow_enabled",
          "description": ""
        },
        {
          "name": "params_grow_amount",
          "type": "float",
          "setter": "set_grow",
          "getter": "get_grow",
          "description": ""
        },
        {
          "name": "params_line_width",
          "type": "float",
          "setter": "set_line_width",
          "getter": "get_line_width",
          "description": ""
        },
        {
          "name": "params_point_size",
          "type": "float",
          "setter": "set_point_size",
          "getter": "get_point_size",
          "description": ""
        },
        {
          "name": "params_specular_mode",
          "type": "int",
          "setter": "set_specular_mode",
          "getter": "get_specular_mode",
          "enum": "SpatialMaterial.SpecularMode",
          "description": ""
        },
        {
          "name": "params_use_alpha_scissor",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "particles_anim_h_frames",
          "type": "int",
          "setter": "set_particles_anim_h_frames",
          "getter": "get_particles_anim_h_frames",
          "description": ""
        },
        {
          "name": "particles_anim_loop",
          "type": "int",
          "setter": "set_particles_anim_loop",
          "getter": "get_particles_anim_loop",
          "description": ""
        },
        {
          "name": "particles_anim_v_frames",
          "type": "int",
          "setter": "set_particles_anim_v_frames",
          "getter": "get_particles_anim_v_frames",
          "description": ""
        },
        {
          "name": "proximity_fade_distance",
          "type": "float",
          "setter": "set_proximity_fade_distance",
          "getter": "get_proximity_fade_distance",
          "description": ""
        },
        {
          "name": "proximity_fade_enable",
          "type": "bool",
          "setter": "set_proximity_fade",
          "getter": "is_proximity_fade_enabled",
          "description": ""
        },
        {
          "name": "refraction_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "refraction_scale",
          "type": "float",
          "setter": "set_refraction",
          "getter": "get_refraction",
          "description": ""
        },
        {
          "name": "refraction_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "refraction_texture_channel",
          "type": "int",
          "setter": "set_refraction_texture_channel",
          "getter": "get_refraction_texture_channel",
          "enum": "SpatialMaterial.TextureChannel",
          "description": ""
        },
        {
          "name": "rim",
          "type": "float",
          "setter": "set_rim",
          "getter": "get_rim",
          "description": ""
        },
        {
          "name": "rim_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "rim_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "rim_tint",
          "type": "float",
          "setter": "set_rim_tint",
          "getter": "get_rim_tint",
          "description": ""
        },
        {
          "name": "roughness",
          "type": "float",
          "setter": "set_roughness",
          "getter": "get_roughness",
          "description": ""
        },
        {
          "name": "roughness_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "roughness_texture_channel",
          "type": "int",
          "setter": "set_roughness_texture_channel",
          "getter": "get_roughness_texture_channel",
          "enum": "SpatialMaterial.TextureChannel",
          "description": ""
        },
        {
          "name": "subsurf_scatter_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "subsurf_scatter_strength",
          "type": "float",
          "setter": "set_subsurface_scattering_strength",
          "getter": "get_subsurface_scattering_strength",
          "description": ""
        },
        {
          "name": "subsurf_scatter_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "transmission",
          "type": "Color",
          "setter": "set_transmission",
          "getter": "get_transmission",
          "description": ""
        },
        {
          "name": "transmission_enabled",
          "type": "bool",
          "setter": "set_feature",
          "getter": "get_feature",
          "description": ""
        },
        {
          "name": "transmission_texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": ""
        },
        {
          "name": "uv1_offset",
          "type": "Vector3",
          "setter": "set_uv1_offset",
          "getter": "get_uv1_offset",
          "description": ""
        },
        {
          "name": "uv1_scale",
          "type": "Vector3",
          "setter": "set_uv1_scale",
          "getter": "get_uv1_scale",
          "description": ""
        },
        {
          "name": "uv1_triplanar",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "uv1_triplanar_sharpness",
          "type": "float",
          "setter": "set_uv1_triplanar_blend_sharpness",
          "getter": "get_uv1_triplanar_blend_sharpness",
          "description": ""
        },
        {
          "name": "uv2_offset",
          "type": "Vector3",
          "setter": "set_uv2_offset",
          "getter": "get_uv2_offset",
          "description": ""
        },
        {
          "name": "uv2_scale",
          "type": "Vector3",
          "setter": "set_uv2_scale",
          "getter": "get_uv2_scale",
          "description": ""
        },
        {
          "name": "uv2_triplanar",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "uv2_triplanar_sharpness",
          "type": "float",
          "setter": "set_uv2_triplanar_blend_sharpness",
          "getter": "get_uv2_triplanar_blend_sharpness",
          "description": ""
        },
        {
          "name": "vertex_color_is_srgb",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        },
        {
          "name": "vertex_color_use_as_albedo",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Texture": {
      "name": "Texture",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Texture for 2D and 3D.",
      "description": "A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D [Sprite] or GUI [Control].",
      "methods": [
        {
          "name": "draw",
          "qualifiers": "const",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "3",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "4",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tile",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_rect_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "6",
              "name": "clip_uv",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "Image",
          "arguments": []
        },
        {
          "name": "get_flags",
          "qualifiers": "const",
          "description": "Return the current texture flags.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the texture height.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Return the texture size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_width",
          "qualifiers": "const",
          "description": "Return the texture width.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_alpha",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_flags",
          "description": "Change the texture flags.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_MIPMAPS",
          "value": "1",
          "description": "Generate mipmaps, to enable smooth zooming out of the texture."
        },
        {
          "name": "FLAG_REPEAT",
          "value": "2",
          "description": "Repeat (instead of clamp to edge)."
        },
        {
          "name": "FLAG_FILTER",
          "value": "4",
          "description": "Turn on magnifying filter, to enable smooth zooming in of the texture."
        },
        {
          "name": "FLAG_VIDEO_SURFACE",
          "value": "4096",
          "description": "Texture is a video surface."
        },
        {
          "name": "FLAGS_DEFAULT",
          "value": "7",
          "description": "Default flags. Generate mipmaps, repeat, and filter are enabled."
        },
        {
          "name": "FLAG_ANISOTROPIC_FILTER",
          "value": "8",
          "description": ""
        },
        {
          "name": "FLAG_CONVERT_TO_LINEAR",
          "value": "16",
          "description": ""
        },
        {
          "name": "FLAG_MIRRORED_REPEAT",
          "value": "32",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Container": {
      "name": "Container",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base node for containers.",
      "description": "Base node for containers. A [Container] contains other controls and automatically arranges them in a certain way.\n\t\tA Control can inherit this to create custom container classes.",
      "methods": [
        {
          "name": "fit_child_in_rect",
          "description": "Fit a child control in a given rect. This is mainly a helper for creating custom container classes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child",
              "type": "Control",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_sort",
          "description": "Queue resort of the contained children. This is called automatically anyway, but can be called upon request.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "sort_children",
          "description": "Emitted when sorting the children is needed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_SORT_CHILDREN",
          "value": "50",
          "enum": "",
          "description": "Notification for when sorting the children, it must be obeyed immediately."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptSceneTree": {
      "name": "VisualScriptSceneTree",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptLocalVar": {
      "name": "VisualScriptLocalVar",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_var_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_var_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_var_name",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_var_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "type",
          "type": "int",
          "setter": "set_var_type",
          "getter": "get_var_type",
          "enum": "Variant.Type",
          "description": ""
        },
        {
          "name": "var_name",
          "type": "String",
          "setter": "set_var_name",
          "getter": "get_var_name",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualServer": {
      "name": "VisualServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Server for anything visible.",
      "description": "Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.\n\t\tThe visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.",
      "methods": [
        {
          "name": "force_draw",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "force_sync",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "request_frame_drawn_callback",
          "description": "Schedules a callback to the corresponding named 'method' on 'where' after a frame has been drawn.\n\t\t\t\tThe callback method must use only 1 argument which will be called with 'userdata'.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "where",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "userdata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_create",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "texture_create_from_image",
          "description": "",
          "return_type": "RID",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": "7"
            }
          ]
        },
        {
          "name": "texture_get_flags",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_get_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_get_width",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_set_flags",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "texture_set_shrink_all_x2_on_set_data",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shrink",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Tabs": {
      "name": "Tabs",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Tabs Control.",
      "description": "Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interact with children.",
      "methods": [
        {
          "name": "add_tab",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "ensure_tab_visible",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_tab",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_align",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_close_display_policy",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_disabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_rect",
          "qualifiers": "const",
          "description": "Returns tab [Rect2] with local position and size.",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_title",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_tab",
          "description": "Rearrange tab.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_tab",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_tab",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_align",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "enum": "Tabs.TabAlign",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_close_display_policy",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "policy",
              "type": "int",
              "enum": "Tabs.CloseButtonDisplayPolicy",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_disabled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_icon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_title",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "reposition_active_tab_request",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx_to",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "right_button_pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_clicked",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_close",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_hover",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": ""
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": ""
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": ""
        },
        {
          "name": "ALIGN_MAX",
          "value": "3",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_SHOW_ACTIVE_ONLY",
          "value": "1",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_SHOW_ALWAYS",
          "value": "2",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_SHOW_NEVER",
          "value": "0",
          "description": ""
        },
        {
          "name": "CLOSE_BUTTON_MAX",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "current_tab",
          "type": "int",
          "setter": "set_current_tab",
          "getter": "get_current_tab",
          "description": ""
        },
        {
          "name": "tab_close_display_policy",
          "type": "int",
          "setter": "set_tab_close_display_policy",
          "getter": "get_tab_close_display_policy",
          "enum": "Tabs.CloseButtonDisplayPolicy",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "button",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "close",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color_bg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_fg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "label_valign_bg",
          "type": "int",
          "description": ""
        },
        {
          "name": "label_valign_fg",
          "type": "int",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tab_bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tab_fg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "top_margin",
          "type": "int",
          "description": ""
        }
      ]
    },
    "RayShape2D": {
      "name": "RayShape2D",
      "inherits": "Shape2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Ray shape for 2D collisions.",
      "description": "Ray shape for 2D collisions. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.",
      "methods": [
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the length of the ray.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_length",
          "description": "Set the length of the ray.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "length",
          "type": "float",
          "setter": "set_length",
          "getter": "get_length",
          "description": "The ray's length."
        }
      ],
      "theme_properties": []
    },
    "StaticBody2D": {
      "name": "StaticBody2D",
      "inherits": "PhysicsBody2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Static body for 2D Physics.",
      "description": "Static body for 2D Physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms.\n\t\tAdditionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt).",
      "methods": [
        {
          "name": "get_bounce",
          "qualifiers": "const",
          "description": "Return the body bounciness.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_constant_angular_velocity",
          "qualifiers": "const",
          "description": "Return the constant angular velocity for the body.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_constant_linear_velocity",
          "qualifiers": "const",
          "description": "Return the constant linear velocity for the body.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_friction",
          "qualifiers": "const",
          "description": "Return the body friction.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_bounce",
          "description": "Set the body bounciness, from 0 (not bouncy) to 1 (bouncy).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bounce",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant_angular_velocity",
          "description": "Set a constant angular velocity for the body. This does not rotate the body, but affects other bodies touching it, as if it was rotating.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vel",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_constant_linear_velocity",
          "description": "Set a constant linear velocity for the body. This does not move the body, but affects other bodies touching it, as if it was moving.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vel",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_friction",
          "description": "Set the body friction, from 0 (frictionless) to 1 (full friction).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "friction",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "bounce",
          "type": "float",
          "setter": "set_bounce",
          "getter": "get_bounce",
          "description": "The body's bounciness. Values range from [code]0[/code] (no bounce) to [code]1[/code] (full bounciness)."
        },
        {
          "name": "constant_angular_velocity",
          "type": "float",
          "setter": "set_constant_angular_velocity",
          "getter": "get_constant_angular_velocity",
          "description": "Constant angular velocity for the body. This does not rotate the body, but affects colliding bodies, as if it were rotating."
        },
        {
          "name": "constant_linear_velocity",
          "type": "Vector2",
          "setter": "set_constant_linear_velocity",
          "getter": "get_constant_linear_velocity",
          "description": "Constant linear velocity for the body. This does not move the body, but affects colliding bodies, as if it were moving."
        },
        {
          "name": "friction",
          "type": "float",
          "setter": "set_friction",
          "getter": "get_friction",
          "description": "The body's friction. Values range from [code]0[/code] (no friction) to [code]1[/code] (full friction)."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptSelect": {
      "name": "VisualScriptSelect",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_typed",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_typed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "type",
          "type": "int",
          "setter": "set_typed",
          "getter": "get_typed",
          "enum": "Variant.Type",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "EditorResourcePreview": {
      "name": "EditorResourcePreview",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Helper to generate previews of resources or files.",
      "description": "This object is used to generate previews for resources of files.",
      "methods": [
        {
          "name": "add_preview_generator",
          "description": "Create an own, custom preview generator.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "generator",
              "type": "EditorResourcePreviewGenerator",
              "default_value": ""
            }
          ]
        },
        {
          "name": "check_for_invalidation",
          "description": "Check if the resource changed, if so it will be invalidated and the corresponding signal emitted.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_edited_resource_preview",
          "description": "Queue a resource being edited for preview (using an instance). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "receiver_func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_resource_preview",
          "description": "Queue a resource file for preview (using a path). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "receiver",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "receiver_func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "userdata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_preview_generator",
          "description": "Remove a custom preview generator.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "generator",
              "type": "EditorResourcePreviewGenerator",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "preview_invalidated",
          "description": "If a preview was invalidated (changed) this signal will emit (using the path of the preview)",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioStreamOGGVorbis": {
      "name": "AudioStreamOGGVorbis",
      "inherits": "AudioStream",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "OGG Vorbis audio stream driver.",
      "description": "OGG Vorbis audio stream driver.",
      "methods": [
        {
          "name": "get_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolByteArray",
          "arguments": []
        },
        {
          "name": "get_loop_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_data",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "seconds",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "data",
          "type": "PoolByteArray",
          "setter": "set_data",
          "getter": "get_data",
          "description": "Raw audio data."
        },
        {
          "name": "loop",
          "type": "bool",
          "setter": "set_loop",
          "getter": "has_loop",
          "description": "If [code]true[/code], audio will loop continuously. Default value: [code]false[/code]."
        },
        {
          "name": "loop_offset",
          "type": "float",
          "setter": "set_loop_offset",
          "getter": "get_loop_offset",
          "description": "If loop is [code]true[/code], loop starts from this position, in seconds."
        }
      ],
      "theme_properties": []
    },
    "IP_Unix": {
      "name": "IP_Unix",
      "inherits": "IP",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Control": {
      "name": "Control",
      "inherits": "CanvasItem",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "All User Interface nodes inherit from Control. Features anchors and margins to adapt its position and size to its parent.",
      "description": "Base class for all User Interface or [i]UI[/i] related nodes. [code]Control[/code] features a bounding rectangle that defines its extents, an anchor position relative to its parent and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.\n\t\tFor more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from [code]Control[/code] and [Container] nodes.\n\t\t[b]User Interface nodes and input[/b]\n\t\tGodot sends input events to the scene's root node first, by calling [method Node._input]. [method Node._input] forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls [method MainLoop._input_event]. Call [method accept_event] so no other node receives the event. Once you accepted an input, it becomes handled so [method Node._unhandled_input] will not process it.\n\t\tOnly one [code]Control[/code] node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the foucs, call [method set_focus_mode]. [code]Control[/code] nodes lose focus when another node grabs it, or if you hide the node in focus.\n\t\tCall [method set_ignore_mouse] to tell a [code]Control[/code] node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.\n\t\t[Theme] resources change the Control's appearance. If you change the [Theme] on a [code]Control[/code] node, it affects all of its children. To override some of the theme's parameters, call one of the [code]add_*_override[/code] methods, like [method add_font_override]. You can override the theme with the inspector.",
      "methods": [
        {
          "name": "_get_minimum_size",
          "qualifiers": "virtual",
          "description": "Returns the minimum size this Control can shrink to. The node can never be smaller than this minimum size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "_gui_input",
          "qualifiers": "virtual",
          "description": "The node's parent forwards input events to this method. Use it to process and accept inputs on UI elements. See [method accept_event].\n\t\t\t\tReplaces Godot 2's [code]_input_event[/code].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "accept_event",
          "description": "Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to [method Node._unhandled_input] or [method Node._unhandled_key_input].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "add_color_override",
          "description": "Overrides the color in the [theme] resource the node uses.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_constant_override",
          "description": "Overrides an integer constant in the [theme] resource the node uses. If the [code]constant[code] is invalid, Godot clears the override. See [member Theme.INVALID_CONSTANT] for more information.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "constant",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_font_override",
          "description": "Overrides the [code]name[/code] font in the [theme] resource the node uses. If [code]font[/code] is empty, Godot clears the override.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_icon_override",
          "description": "Overrides the [code]name[/code] icon in the [theme] resource the node uses. If [code]icon[/code] is empty, Godot clears the override.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_shader_override",
          "description": "Overrides the [code]name[/code] shader in the [theme] resource the node uses. If [code]shader[/code] is empty, Godot clears the override.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shader",
              "type": "Shader",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_style_override",
          "description": "Overrides the [code]name[/code] [Stylebox] in the [theme] resource the node uses. If [code]stylebox[/code] is empty, Godot clears the override.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "stylebox",
              "type": "StyleBox",
              "default_value": ""
            }
          ]
        },
        {
          "name": "can_drop_data",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "drop_data",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "force_drag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "preview",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_anchor",
          "qualifiers": "const",
          "description": "Return the anchor type (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_begin",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_combined_minimum_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_cursor_shape",
          "qualifiers": "const",
          "description": "Returns the mouse cursor shape the control displays on mouse hover, one of the [code]CURSOR_*[/code] constants.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "get_custom_minimum_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_default_cursor_shape",
          "qualifiers": "const",
          "description": "Returns the default cursor shape for this control. See enum [code]CURSOR_*[/code] for the list of shapes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_drag_data",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_end",
          "qualifiers": "const",
          "description": "Returns MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_focus_mode",
          "qualifiers": "const",
          "description": "Returns the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL) (see [method set_focus_mode]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_focus_neighbour",
          "qualifiers": "const",
          "description": "Return the forced neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function.",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_focus_owner",
          "qualifiers": "const",
          "description": "Return which control is owning the keyboard focus, or null if no one.",
          "return_type": "Control",
          "arguments": []
        },
        {
          "name": "get_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "Font",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_global_position",
          "qualifiers": "const",
          "description": "Returns the Control position, relative to the top-left corner of the parent Control and independent of the anchor mode.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_global_rect",
          "qualifiers": "const",
          "description": "Return position and size of the Control, relative to the top-left corner of the [i]window[/i] Control. This is a helper (see [method get_global_position], [method get_size]).",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_h_grow_direction",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_h_size_flags",
          "qualifiers": "const",
          "description": "Hint for containers, return horizontal positioning flags.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "Return a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being returned depends on the anchor mode.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_minimum_size",
          "qualifiers": "const",
          "description": "Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_mouse_filter",
          "qualifiers": "const",
          "description": "Return when the control is ignoring mouse events (even touchpad events send mouse events).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_parent_area_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_parent_control",
          "qualifiers": "const",
          "description": "",
          "return_type": "Control",
          "arguments": []
        },
        {
          "name": "get_pivot_offset",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "Returns the Control position, relative to the top-left corner of the parent Control and independent of the anchor mode.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Return position and size of the Control, relative to the top-left corner of the parent Control. This is a helper (see [method get_position], [method get_size]).",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "qualifiers": "const",
          "description": "Return the rotation (in radians)",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rotation_deg",
          "qualifiers": "const",
          "description": "Return the rotation (in degrees)",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Returns the size of the Control, computed from all margins, however the size returned will [b]never be smaller than the minimum size reported by[/b] [method get_minimum_size]. This means that even if end position of the Control rectangle is smaller than the begin position, the Control will still display and interact correctly. (see description, [method get_minimum_size], [method set_margin], [method set_anchor]).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_stretch_ratio",
          "qualifiers": "const",
          "description": "Hint for containers, return the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "StyleBox",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "get_theme",
          "qualifiers": "const",
          "description": "Return a [Theme] override, if one exists (see [method set_theme]).",
          "return_type": "Theme",
          "arguments": []
        },
        {
          "name": "get_tooltip",
          "qualifiers": "const",
          "description": "Return the tooltip, which will appear when the cursor is resting over this control.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "at_position",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "get_v_grow_direction",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_v_size_flags",
          "qualifiers": "const",
          "description": "Hint for containers, return vertical positioning flags.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "grab_click_focus",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "grab_focus",
          "description": "Steal the focus from another control and become the focused control (see [method set_focus_mode]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_color_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_constant_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_focus",
          "qualifiers": "const",
          "description": "Return whether the Control is the current focused control (see [method set_focus_mode]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "has_font",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_font_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_icon_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_point",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_stylebox",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "has_stylebox_override",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_clipping_contents",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "minimum_size_changed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "release_focus",
          "description": "Give up the focus, no other control will be able to receive keyboard input.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_anchor",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anchor",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "keep_margin",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "push_opposite_anchor",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "set_anchor_and_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anchor",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "offset",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "push_opposite_anchor",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_anchors_and_margins_preset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "enum": "Control.LayoutPreset",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resize_mode",
              "type": "int",
              "enum": "Control.LayoutPresetMode",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "margin",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_anchors_preset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "enum": "Control.LayoutPreset",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "keep_margin",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_begin",
          "description": "Sets MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clip_contents",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_minimum_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_cursor_shape",
          "description": "Sets the default cursor shape for this control. See [code]CURSOR_*[/code] for the list of available cursor shapes. Useful for Godot plugins and applications or games that use the system's mouse cursors.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "int",
              "enum": "Control.CursorShape",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drag_forwarding",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "target",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drag_preview",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "control",
              "type": "Control",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_end",
          "description": "Sets MARGIN_RIGHT and MARGIN_BOTTOM at the same time. This is a helper (see [method set_margin]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_focus_mode",
          "description": "Set the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL). Only one Control can be focused at the same time, and it will receive keyboard signals.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Control.FocusMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_focus_neighbour",
          "description": "Force a neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "neighbour",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_position",
          "description": "Move the Control to a new position, relative to the top-left corner of the [i]window[/i] Control, and without changing current anchor mode. (see [method set_margin]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_grow_direction",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "direction",
              "type": "int",
              "enum": "Control.GrowDirection",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_size_flags",
          "description": "Hint for containers, set horizontal positioning flags.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin",
          "description": "Set a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being set depends on the anchor mode.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margins_preset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "enum": "Control.LayoutPreset",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resize_mode",
              "type": "int",
              "enum": "Control.LayoutPresetMode",
              "default_value": "0"
            },
            {
              "index": "2",
              "name": "margin",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_mouse_filter",
          "description": "Set when the control is ignoring mouse events (even touchpad events send mouse events). (see the MOUSE_FILTER_* constants)",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter",
              "type": "int",
              "enum": "Control.MouseFilter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pivot_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pivot_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_position",
          "description": "Move the Control to a new position, relative to the top-left corner of the parent Control, changing all margins if needed and without changing current anchor mode. This is a helper (see [method set_margin]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation",
          "description": "Set the rotation (in radians).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation_deg",
          "description": "Set the rotation (in degrees).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "Changes MARGIN_RIGHT and MARGIN_BOTTOM to fit a given size. This is a helper (see [method set_margin]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stretch_ratio",
          "description": "Hint for containers, set the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_theme",
          "description": "Overrides the whole [Theme] for this node and all its [code]Control[/code] children.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "theme",
              "type": "Theme",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tooltip",
          "description": "Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_grow_direction",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "direction",
              "type": "int",
              "enum": "Control.GrowDirection",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_size_flags",
          "description": "Hint for containers, set vertical positioning flags.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show_modal",
          "description": "Display a Control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "exclusive",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "warp_mouse",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "focus_entered",
          "description": "Emitted when the node gains keyboard focus.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "focus_exited",
          "description": "Emitted when the node loses keyboard focus.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "gui_input",
          "description": "Emitted when the node receives an [InputEvent].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ev",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "minimum_size_changed",
          "description": "Emitted when the node's minimum size changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "modal_closed",
          "description": "Emitted when a modal [code]Control[/code] is closed. See [method show_modal].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_entered",
          "description": "Emitted when the mouse enters the control's [code]Rect[/code] area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_exited",
          "description": "Emitted when the mouse leaves the control's [code]Rect[/code] area.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "resized",
          "description": "Emitted when the control changes size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "size_flags_changed",
          "description": "Emitted when one of the size flags changes. See [member size_flags_horizontal] and [member size_flags_vertical].",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "FOCUS_NONE",
          "value": "0",
          "description": "The node cannot grab focus. Use with [member set_focus_mode]."
        },
        {
          "name": "FOCUS_CLICK",
          "value": "1",
          "description": "The node can only grab focus on mouse clicks. Use with [member set_focus_mode]."
        },
        {
          "name": "FOCUS_ALL",
          "value": "2",
          "description": "The node can grab focus on mouse click or using the arrows and the Tab keys on the keyboard. Use with [member set_focus_mode]."
        },
        {
          "name": "NOTIFICATION_RESIZED",
          "value": "40",
          "enum": "",
          "description": "Sent when the node changes size. Use [member rect_size] to get the new size."
        },
        {
          "name": "NOTIFICATION_MOUSE_ENTER",
          "value": "41",
          "enum": "",
          "description": "Sent when the mouse pointer enters the node's [code]Rect[/code] area."
        },
        {
          "name": "NOTIFICATION_MOUSE_EXIT",
          "value": "42",
          "enum": "",
          "description": "Sent when the mouse pointer exits the node's [code]Rect[/code] area."
        },
        {
          "name": "NOTIFICATION_FOCUS_ENTER",
          "value": "43",
          "enum": "",
          "description": "Sent when the node grabs focus."
        },
        {
          "name": "NOTIFICATION_FOCUS_EXIT",
          "value": "44",
          "enum": "",
          "description": "Sent when the node loses focus."
        },
        {
          "name": "NOTIFICATION_THEME_CHANGED",
          "value": "45",
          "enum": "",
          "description": "Sent when the node's [member theme] changes, right before Godot redraws the [code]Control[/code]. Happens when you call one of the [code]add_*_override[/code]"
        },
        {
          "name": "NOTIFICATION_MODAL_CLOSE",
          "value": "46",
          "enum": "",
          "description": "Sent when an open modal dialog closes. See [member show_modal]."
        },
        {
          "name": "CURSOR_ARROW",
          "value": "0",
          "description": "Show the system's arrow mouse cursor when the user hovers the node. Use with [method set_default_cursor_shape]."
        },
        {
          "name": "CURSOR_IBEAM",
          "value": "1",
          "description": "Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to \"I\". It tells the user they can highlight or insert text."
        },
        {
          "name": "CURSOR_POINTING_HAND",
          "value": "2",
          "description": "Show the system's pointing hand mouse cursor when the user hovers the node."
        },
        {
          "name": "CURSOR_CROSS",
          "value": "3",
          "description": "Show the system's cross mouse cursor when the user hovers the node."
        },
        {
          "name": "CURSOR_WAIT",
          "value": "4",
          "description": "Show the system's wait mouse cursor, often an hourglass, when the user hovers the node."
        },
        {
          "name": "CURSOR_BUSY",
          "value": "5",
          "description": "Show the system's busy mouse cursor when the user hovers the node. Often an hourglass."
        },
        {
          "name": "CURSOR_DRAG",
          "value": "6",
          "description": "Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock."
        },
        {
          "name": "CURSOR_CAN_DROP",
          "value": "7",
          "description": "Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock."
        },
        {
          "name": "CURSOR_FORBIDDEN",
          "value": "8",
          "description": "Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle."
        },
        {
          "name": "CURSOR_VSIZE",
          "value": "9",
          "description": "Show the system's vertical resize mouse cursor when the user hovers the node. A double headed vertical arrow. It tells the user they can resize the window or the panel vertically."
        },
        {
          "name": "CURSOR_HSIZE",
          "value": "10",
          "description": "Show the system's horizontal resize mouse cursor when the user hovers the node. A double headed horizontal arrow. It tells the user they can resize the window or the panel horizontally."
        },
        {
          "name": "CURSOR_BDIAGSIZE",
          "value": "11",
          "description": "Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically."
        },
        {
          "name": "CURSOR_FDIAGSIZE",
          "value": "12",
          "description": "Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the top left to the bottom right, the opposite of [code]CURSOR_BDIAGSIZE[/code]. It tells the user they can resize the window or the panel both horizontally and vertically."
        },
        {
          "name": "CURSOR_MOVE",
          "value": "13",
          "description": "Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely."
        },
        {
          "name": "CURSOR_VSPLIT",
          "value": "14",
          "description": "Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as [code]CURSOR_VSIZE[/code]."
        },
        {
          "name": "CURSOR_HSPLIT",
          "value": "15",
          "description": "Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as [code]CURSOR_HSIZE[/code]."
        },
        {
          "name": "CURSOR_HELP",
          "value": "16",
          "description": "Show the system's help mouse cursor when the user hovers the node, a question mark."
        },
        {
          "name": "PRESET_TOP_LEFT",
          "value": "0",
          "description": "Snap all 4 anchors to the top-left of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_TOP_RIGHT",
          "value": "1",
          "description": "Snap all 4 anchors to the top-right of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_BOTTOM_LEFT",
          "value": "2",
          "description": "Snap all 4 anchors to the bottom-left of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_BOTTOM_RIGHT",
          "value": "3",
          "description": "Snap all 4 anchors to the bottom-right of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER_LEFT",
          "value": "4",
          "description": "Snap all 4 anchors to the center of the left edge of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER_TOP",
          "value": "5",
          "description": "Snap all 4 anchors to the center of the top edge of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER_RIGHT",
          "value": "6",
          "description": "Snap all 4 anchors to the center of the right edge of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER_BOTTOM",
          "value": "7",
          "description": "Snap all 4 anchors to the center of the bottom edge of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_CENTER",
          "value": "8",
          "description": "Snap all 4 anchors to the center of the parent container's bounds. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_LEFT_WIDE",
          "value": "9",
          "description": "Snap all 4 anchors to the left edge of the parent container. The left margin becomes relative to the left edge and the top margin relative to the top left corner of the node's parent. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_TOP_WIDE",
          "value": "10",
          "description": "Snap all 4 anchors to the top edge of the parent container. The left margin becomes relative to the top left corner, the top margin relative to the top edge, and the right margin relative to the top right corner of the node's parent. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_RIGHT_WIDE",
          "value": "11",
          "description": "Snap all 4 anchors to the right edge of the parent container. The right margin becomes relative to the right edge and the top margin relative to the top right corner of the node's parent. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_BOTTOM_WIDE",
          "value": "12",
          "description": "Snap all 4 anchors to the bottom edge of the parent container. The left margin becomes relative to the bottom left corner, the bottom margin relative to the bottom edge, and the right margin relative to the bottom right corner of the node's parent. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_VCENTER_WIDE",
          "value": "13",
          "description": "Snap all 4 anchors to a vertical line that cuts the parent container in half. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_HCENTER_WIDE",
          "value": "14",
          "description": "Snap all 4 anchors to a horizontal line that cuts the parent container in half. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_WIDE",
          "value": "15",
          "description": "Snap all 4 anchors to the respective corners of the parent container. Set all 4 margins to 0 after you applied this preset and the [code]Control[/code] will fit its parent container. Use with [method set_anchors_preset]."
        },
        {
          "name": "PRESET_MODE_MINSIZE",
          "value": "0",
          "description": ""
        },
        {
          "name": "PRESET_MODE_KEEP_HEIGHT",
          "value": "2",
          "description": ""
        },
        {
          "name": "PRESET_MODE_KEEP_WIDTH",
          "value": "1",
          "description": ""
        },
        {
          "name": "PRESET_MODE_KEEP_SIZE",
          "value": "3",
          "description": ""
        },
        {
          "name": "SIZE_EXPAND",
          "value": "2",
          "description": "Tells the parent [Container] to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See [member size_flags_stretch_ratio]. Use with [member size_flags_horizontal] and [member size_flags_vertical]."
        },
        {
          "name": "SIZE_FILL",
          "value": "1",
          "description": "Tells the parent [Container] to expand the bounds of this node to fill all the available space without pushing any other node. Use with [member size_flags_horizontal] and [member size_flags_vertical]."
        },
        {
          "name": "SIZE_EXPAND_FILL",
          "value": "3",
          "description": "Sets the node's size flags to both fill and expand. See the 2 constants above for more information."
        },
        {
          "name": "SIZE_SHRINK_CENTER",
          "value": "4",
          "description": "Tells the parent [Container] to center the node in itself. It centers the [code]Control[/code] based on its bounding box, so it doesn't work with the fill or expand size flags. Use with [member size_flags_horizontal] and [member size_flags_vertical]."
        },
        {
          "name": "SIZE_SHRINK_END",
          "value": "8",
          "description": "Tells the parent [Container] to align the node with its end, either the bottom or the right edge. It doesn't work with the fill or expand size flags. Use with [member size_flags_horizontal] and [member size_flags_vertical]."
        },
        {
          "name": "MOUSE_FILTER_STOP",
          "value": "0",
          "description": ""
        },
        {
          "name": "MOUSE_FILTER_PASS",
          "value": "1",
          "description": ""
        },
        {
          "name": "MOUSE_FILTER_IGNORE",
          "value": "2",
          "description": ""
        },
        {
          "name": "GROW_DIRECTION_BEGIN",
          "value": "0",
          "description": ""
        },
        {
          "name": "GROW_DIRECTION_END",
          "value": "1",
          "description": ""
        },
        {
          "name": "ANCHOR_BEGIN",
          "value": "0",
          "description": "Snaps one of the 4 anchor's sides to the origin of the node's [code]Rect[/code], in the top left. Use it with one of the [code]anchor_*[/code] member variables, like [member anchor_left]. To change all 4 anchors at once, use [method set_anchors_preset]."
        },
        {
          "name": "ANCHOR_END",
          "value": "1",
          "description": "Snaps one of the 4 anchor's sides to the end of the node's [code]Rect[/code], in the bottom right. Use it with one of the [code]anchor_*[/code] member variables, like [member anchor_left]. To change all 4 anchors at once, use [method set_anchors_preset]."
        }
      ],
      "properties": [
        {
          "name": "anchor_bottom",
          "type": "float",
          "setter": "_set_anchor",
          "getter": "get_anchor",
          "description": "Anchors the bottom edge of the node to the origin, the center, or the end of its parent container. It changes how the bottom margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code]."
        },
        {
          "name": "anchor_left",
          "type": "float",
          "setter": "_set_anchor",
          "getter": "get_anchor",
          "description": "Anchors the left edge of the node to the origin, the center or the end of its parent container. It changes how the left margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code]."
        },
        {
          "name": "anchor_right",
          "type": "float",
          "setter": "_set_anchor",
          "getter": "get_anchor",
          "description": "Anchors the right edge of the node to the origin, the center or the end of its parent container. It changes how the right margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code]."
        },
        {
          "name": "anchor_top",
          "type": "float",
          "setter": "_set_anchor",
          "getter": "get_anchor",
          "description": "Anchors the top edge of the node to the origin, the center or the end of its parent container. It changes how the top margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code]."
        },
        {
          "name": "focus_neighbour_bottom",
          "type": "NodePath",
          "setter": "set_focus_neighbour",
          "getter": "get_focus_neighbour",
          "description": "Tells Godot which node it should give keyboard focus to if the user presses Tab, the down arrow on the keyboard, or down on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one.\n\t\t\tIf the user presses Tab, Godot will give focus to the closest node to the right first, then to the bottom. If the user presses Shift+Tab, Godot will look to the left of the node, then above it."
        },
        {
          "name": "focus_neighbour_left",
          "type": "NodePath",
          "setter": "set_focus_neighbour",
          "getter": "get_focus_neighbour",
          "description": "Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the left arrow on the keyboard or left on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the left of this one."
        },
        {
          "name": "focus_neighbour_right",
          "type": "NodePath",
          "setter": "set_focus_neighbour",
          "getter": "get_focus_neighbour",
          "description": "Tells Godot which node it should give keyboard focus to if the user presses Tab, the right arrow on the keyboard or right on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one."
        },
        {
          "name": "focus_neighbour_top",
          "type": "NodePath",
          "setter": "set_focus_neighbour",
          "getter": "get_focus_neighbour",
          "description": "Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the top arrow on the keyboard or top on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one."
        },
        {
          "name": "grow_horizontal",
          "type": "int",
          "setter": "set_h_grow_direction",
          "getter": "get_h_grow_direction",
          "enum": "Control.GrowDirection",
          "description": ""
        },
        {
          "name": "grow_vertical",
          "type": "int",
          "setter": "set_v_grow_direction",
          "getter": "get_v_grow_direction",
          "enum": "Control.GrowDirection",
          "description": ""
        },
        {
          "name": "hint_tooltip",
          "type": "String",
          "setter": "set_tooltip",
          "getter": "_get_tooltip",
          "description": "Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments."
        },
        {
          "name": "margin_bottom",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "Distance between the node's bottom edge and its parent container, based on [member anchor_bottom].\n\t\t\tMargins are often controlled by one or multiple parent [Container] nodes. Margins update automatically when you move or resize the node."
        },
        {
          "name": "margin_left",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "Distance between the node's left edge and its parent container, based on [member anchor_left]."
        },
        {
          "name": "margin_right",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "Distance between the node's right edge and its parent container, based on [member anchor_right]."
        },
        {
          "name": "margin_top",
          "type": "float",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "Distance between the node's top edge and its parent container, based on [member anchor_top]."
        },
        {
          "name": "mouse_filter",
          "type": "int",
          "setter": "set_mouse_filter",
          "getter": "get_mouse_filter",
          "enum": "Control.MouseFilter",
          "description": ""
        },
        {
          "name": "rect_clip_content",
          "type": "bool",
          "setter": "set_clip_contents",
          "getter": "is_clipping_contents",
          "description": ""
        },
        {
          "name": "rect_min_size",
          "type": "Vector2",
          "setter": "set_custom_minimum_size",
          "getter": "get_custom_minimum_size",
          "description": "The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes."
        },
        {
          "name": "rect_pivot_offset",
          "type": "Vector2",
          "setter": "set_pivot_offset",
          "getter": "get_pivot_offset",
          "description": "By default, the node's pivot is its top-left corner. When you change its [member rect_scale], it will scale around this pivot. Set this property to [member rect_size] / 2 to center the pivot in the node's rectangle."
        },
        {
          "name": "rect_position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by [member rect_pivot_offset]."
        },
        {
          "name": "rect_rotation",
          "type": "float",
          "setter": "set_rotation_deg",
          "getter": "get_rotation_deg",
          "description": "The node's rotation around its pivot, in degrees. See [member rect_pivot_offset] to change the pivot's position."
        },
        {
          "name": "rect_scale",
          "type": "Vector2",
          "setter": "set_scale",
          "getter": "get_scale",
          "description": "The node's scale, relative to its [member rect_size]. Change this property to scale the node around its [member rect_pivot_offset]."
        },
        {
          "name": "rect_size",
          "type": "Vector2",
          "setter": "set_size",
          "getter": "get_size",
          "description": "The size of the node's bounding rectangle, in pixels. [Container] nodes update this property automatically."
        },
        {
          "name": "size_flags_horizontal",
          "type": "int",
          "setter": "set_h_size_flags",
          "getter": "get_h_size_flags",
          "description": "Tells the parent [Container] nodes how they should resize and place the node on the X axis. Use one of the [code]SIZE_*[/code] constants to change the flags. See the constants to learn what each does."
        },
        {
          "name": "size_flags_stretch_ratio",
          "type": "float",
          "setter": "set_stretch_ratio",
          "getter": "get_stretch_ratio",
          "description": "If the node and at least one of its neighbours uses the [code]SIZE_EXPAND[/code] size flag, the parent [Container] will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbour a ratio of 1, this node will take two thirds of the available space."
        },
        {
          "name": "size_flags_vertical",
          "type": "int",
          "setter": "set_v_size_flags",
          "getter": "get_v_size_flags",
          "description": "Tells the parent [Container] nodes how they should resize and place the node on the Y axis. Use one of the [code]SIZE_*[/code] constants to change the flags. See the constants to learn what each does."
        },
        {
          "name": "theme",
          "type": "Theme",
          "setter": "set_theme",
          "getter": "get_theme",
          "description": "Changing this property replaces the current [Theme] resource this node and all its [code]Control[/code] children use."
        }
      ],
      "theme_properties": []
    },
    "InputEventJoypadButton": {
      "name": "InputEventJoypadButton",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Input event type for joypad button events.",
      "description": "",
      "methods": [
        {
          "name": "get_button_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_pressure",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_button_index",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressure",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressure",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "button_index",
          "type": "int",
          "setter": "set_button_index",
          "getter": "get_button_index",
          "description": "Joypad button identifier, one of the JOY_BUTTON_* constants in [@Global Scope]."
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "Pressed state of the joypad button."
        },
        {
          "name": "pressure",
          "type": "float",
          "setter": "set_pressure",
          "getter": "get_pressure",
          "description": "Intensity of the button pressure, ranges from 0 to 1.0."
        }
      ],
      "theme_properties": []
    },
    "Thread": {
      "name": "Thread",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A unit of execution in a process.",
      "description": "A unit of execution in a process. Can run methods on [Object]\\ s simultaneously. The use of synchronization via [Mutex], [Semaphore] is advised if working with shared objects.",
      "methods": [
        {
          "name": "get_id",
          "qualifiers": "const",
          "description": "Returns the current [Thread]\\ s id, uniquely identifying it among all threads.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Returns true if this [Thread] is currently active. An active [Thread] cannot start work on a new method but can be joined with [method wait_to_finish].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "start",
          "description": "Starts a new [Thread] that runs \"method\" on object \"instance\" with \"userdata\" passed as an argument. The \"priority\" of the [Thread] can be changed by passing a PRIORITY_* enum.\n\t\t\t\tReturns OK on success, or ERR_CANT_CREATE on failure.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "userdata",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "3",
              "name": "priority",
              "type": "int",
              "default_value": "1"
            }
          ]
        },
        {
          "name": "wait_to_finish",
          "description": "Joins the [Thread] and waits for it to finish. Returns what the method called returned.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PRIORITY_LOW",
          "value": "0",
          "description": ""
        },
        {
          "name": "PRIORITY_NORMAL",
          "value": "1",
          "description": ""
        },
        {
          "name": "PRIORITY_HIGH",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "OmniLight": {
      "name": "OmniLight",
      "inherits": "Light",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "OmniDirectional Light, such as a light bulb or a candle.",
      "description": "An OmniDirectional light is a type of [Light] node that emits lights in all directions. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light].",
      "methods": [
        {
          "name": "get_shadow_detail",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shadow_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_shadow_detail",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "detail",
              "type": "int",
              "enum": "OmniLight.ShadowDetail",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "OmniLight.ShadowMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SHADOW_DUAL_PARABOLOID",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADOW_CUBE",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHADOW_DETAIL_VERTICAL",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADOW_DETAIL_HORIZONTAL",
          "value": "1",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "omni_attenuation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "omni_range",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "omni_shadow_detail",
          "type": "int",
          "setter": "set_shadow_detail",
          "getter": "get_shadow_detail",
          "enum": "OmniLight.ShadowDetail",
          "description": ""
        },
        {
          "name": "omni_shadow_mode",
          "type": "int",
          "setter": "set_shadow_mode",
          "getter": "get_shadow_mode",
          "enum": "OmniLight.ShadowMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ARVRInterfaceGDNative": {
      "name": "ARVRInterfaceGDNative",
      "inherits": "ARVRInterface",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "GDNative wrapper for an ARVR interface",
      "description": "This is a wrapper class for GDNative implementations of the ARVR interface. To use a GDNative ARVR interface simply instantiate this object and set your GDNative library containing the ARVR interface implementation.",
      "methods": [
        {
          "name": "set_gdnative_library",
          "description": "Bind this GDNative library to our interface. The library must be a GDNative ARVR Interface for this to work.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "library",
              "type": "GDNativeLibrary",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ItemList": {
      "name": "ItemList",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Control that provides a list of selectable items (and/or icons) in a single column, or optionally in multiple columns.",
      "description": "This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons,\n\t\tor both text and icon.  Tooltips are supported and may be different for every item in the list.  Selectable items in the list\n\t\tmay be selected or deselected and multiple selection may be enabled.  Selection with right mouse button may also be enabled\n\t\tto allow use of popup context menus.  Items may also be 'activated' with a double click (or Enter key).",
      "methods": [
        {
          "name": "add_icon_item",
          "description": "Adds an item to the item list with no text, only an icon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selectable",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "add_item",
          "description": "Adds an item to the item list with specified text.  Specify an icon of null for a list item with no icon.\n\t\t\t\tIf selectable is true the list item will be selectable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "2",
              "name": "selectable",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Remove all items from the list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "ensure_current_is_visible",
          "description": "Ensure selection is visible, adjusting the scroll position as necessary.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_allow_rmb_select",
          "qualifiers": "const",
          "description": "Return whether or not items may be selected via right mouse clicking.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_fixed_column_width",
          "qualifiers": "const",
          "description": "If column size has been fixed to a value, return that value.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_fixed_icon_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_icon_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_icon_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_item_at_position",
          "qualifiers": "const",
          "description": "Given a position within the control return the item (if any) at that point.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "exact",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "get_item_count",
          "qualifiers": "const",
          "description": "Return count of items currently in the item list.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_custom_bg_color",
          "qualifiers": "const",
          "description": "",
          "return_type": "Color",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_icon",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_icon_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_text",
          "qualifiers": "const",
          "description": "Return the text for specified item index.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_tooltip",
          "qualifiers": "const",
          "description": "Return tooltip hint for specified item index.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_max_columns",
          "qualifiers": "const",
          "description": "Return total number of columns in use by the list.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_max_text_lines",
          "qualifiers": "const",
          "description": "Return total number of lines currently in use by the list.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_select_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_selected_items",
          "description": "Returns the list of selected indexes.",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_v_scroll",
          "description": "Returns the current vertical scroll bar for the List.",
          "return_type": "VScrollBar",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_auto_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_item_disabled",
          "qualifiers": "const",
          "description": "Returns whether or not the item at the specified index is disabled",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_selectable",
          "qualifiers": "const",
          "description": "Returns whether or not the item at the specified index is selectable.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_tooltip_enabled",
          "qualifiers": "const",
          "description": "Returns whether the tooltip is enabled for specified item index.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_same_column_width",
          "qualifiers": "const",
          "description": "Returns whether or not all columns of the list are of the same size.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_selected",
          "qualifiers": "const",
          "description": "Returns whether or not item at the specified index is currently selected.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_item",
          "description": "Remove item at specified index from the list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "select",
          "description": "Select the item at the specified index.\n\t\t\t\tNote:  This method does not trigger the item selection signal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "single",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "set_allow_rmb_select",
          "description": "Allow (or disallow) selection of (selectable) items in the list using right mouse button.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "allow",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_auto_height",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fixed_column_width",
          "description": "Set the size (width) all columns in the list are to use.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fixed_icon_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "ItemList.IconMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_icon_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_custom_bg_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "custom_bg_color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_disabled",
          "description": "Disable (or enable) item at specified index.\n\t\t\t\tDisabled items are not be selectable and do not fire activation (Enter or double-click) signals.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon",
          "description": "Set (or replace) icon of the item at the specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon_region",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_metadata",
          "description": "Sets a value (of any type) to be stored with the item at the specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_selectable",
          "description": "Allow or disallow selection of the item at the specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selectable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_text",
          "description": "Sets text of item at specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_tooltip",
          "description": "Sets tooltip hint for item at specified index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_tooltip_enabled",
          "description": "Sets whether the tooltip is enabled for specified item index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_columns",
          "description": "Set maximum number of columns to use for the list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_text_lines",
          "description": "Set maximum number of lines to use for the list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lines",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_same_column_width",
          "description": "Sets a fixed size (width) to use for all columns of the list.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_select_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "ItemList.SelectMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sort_items_by_text",
          "description": "Sorts items in the list by their text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "unselect",
          "description": "Ensure item at specified index is not selected.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "item_activated",
          "description": "Fired when specified list item is activated via double click or Enter.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_rmb_selected",
          "description": "Fired when specified list item has been selected via right mouse clicking.\n\t\t\t\tThe click position is also provided to allow appropriate popup of context menus\n\t\t\t\tat the correct location.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "at_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_selected",
          "description": "Fired when specified item has been selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "multi_selected",
          "description": "Fired when a multiple selection is altered on a list allowing multiple selection.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "selected",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ICON_MODE_TOP",
          "value": "0",
          "description": ""
        },
        {
          "name": "ICON_MODE_LEFT",
          "value": "1",
          "description": ""
        },
        {
          "name": "SELECT_SINGLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SELECT_MULTI",
          "value": "1",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "allow_rmb_select",
          "type": "bool",
          "setter": "set_allow_rmb_select",
          "getter": "get_allow_rmb_select",
          "description": ""
        },
        {
          "name": "auto_height",
          "type": "bool",
          "setter": "set_auto_height",
          "getter": "has_auto_height",
          "description": ""
        },
        {
          "name": "fixed_column_width",
          "type": "int",
          "setter": "set_fixed_column_width",
          "getter": "get_fixed_column_width",
          "description": ""
        },
        {
          "name": "icon_mode",
          "type": "int",
          "setter": "set_icon_mode",
          "getter": "get_icon_mode",
          "enum": "ItemList.IconMode",
          "description": ""
        },
        {
          "name": "icon_scale",
          "type": "float",
          "setter": "set_icon_scale",
          "getter": "get_icon_scale",
          "description": ""
        },
        {
          "name": "items",
          "type": "Array",
          "setter": "_set_items",
          "getter": "_get_items",
          "description": ""
        },
        {
          "name": "max_columns",
          "type": "int",
          "setter": "set_max_columns",
          "getter": "get_max_columns",
          "description": ""
        },
        {
          "name": "max_text_lines",
          "type": "int",
          "setter": "set_max_text_lines",
          "getter": "get_max_text_lines",
          "description": ""
        },
        {
          "name": "same_column_width",
          "type": "bool",
          "setter": "set_same_column_width",
          "getter": "is_same_column_width",
          "description": ""
        },
        {
          "name": "select_mode",
          "type": "int",
          "setter": "set_select_mode",
          "getter": "get_select_mode",
          "enum": "ItemList.SelectMode",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "bg_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "cursor",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "cursor_unfocused",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "guide_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "icon_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "line_separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "selected",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selected_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Font": {
      "name": "Font",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Internationalized font and text drawing support.",
      "description": "Font contains a unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. TODO check wikipedia for graph of ascent/baseline/descent/height/etc.",
      "methods": [
        {
          "name": "draw",
          "qualifiers": "const",
          "description": "Draw \"string\" into a canvas item using the font at a given position, with \"modulate\" color, and optionally clipping the width. \"position\" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "string",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "clip_w",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "draw_char",
          "qualifiers": "const",
          "description": "Draw character \"char\" into a canvas item using the font at a given position, with \"modulate\" color, and optionally kerning if \"next\" is passed. clipping the width. \"position\" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "char",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "next",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "4",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            }
          ]
        },
        {
          "name": "get_ascent",
          "qualifiers": "const",
          "description": "Return the font ascent (number of pixels above the baseline).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_descent",
          "qualifiers": "const",
          "description": "Return the font descent (number of pixels below the baseline).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the total font height (ascent plus descent) in pixels.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_string_size",
          "qualifiers": "const",
          "description": "Return the size of a string, taking kerning and advance into account.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_distance_field_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "update_changes",
          "description": "After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PlaneShape": {
      "name": "PlaneShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_plane",
          "qualifiers": "const",
          "description": "",
          "return_type": "Plane",
          "arguments": []
        },
        {
          "name": "set_plane",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plane",
              "type": "Plane",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "plane",
          "type": "Plane",
          "setter": "set_plane",
          "getter": "get_plane",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectFilter": {
      "name": "AudioEffectFilter",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_cutoff",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_gain",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_resonance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_cutoff",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "freq",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "enum": "AudioEffectFilter.FilterDB",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gain",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_resonance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FILTER_6DB",
          "value": "0",
          "description": ""
        },
        {
          "name": "FILTER_12DB",
          "value": "1",
          "description": ""
        },
        {
          "name": "FILTER_18DB",
          "value": "2",
          "description": ""
        },
        {
          "name": "FILTER_24DB",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "cutoff_hz",
          "type": "float",
          "setter": "set_cutoff",
          "getter": "get_cutoff",
          "description": ""
        },
        {
          "name": "dB",
          "type": "int",
          "setter": "set_db",
          "getter": "get_db",
          "enum": "AudioEffectFilter.FilterDB",
          "description": ""
        },
        {
          "name": "gain",
          "type": "float",
          "setter": "set_gain",
          "getter": "get_gain",
          "description": ""
        },
        {
          "name": "resonance",
          "type": "float",
          "setter": "set_resonance",
          "getter": "get_resonance",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "RayShape": {
      "name": "RayShape",
      "inherits": "Shape",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Ray shape for 3D collisions.",
      "description": "Ray shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.",
      "methods": [
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_length",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "length",
          "type": "float",
          "setter": "set_length",
          "getter": "get_length",
          "description": "The ray's length."
        }
      ],
      "theme_properties": []
    },
    "KinematicCollision": {
      "name": "KinematicCollision",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Collision data for KinematicBody2D collisions.",
      "description": "Contains collision data for KinematicBody collisions. When a [KinematicBody] is moved using [method KinematicBody.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision object is returned.\n\t\tThis object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.",
      "methods": [
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_metadata",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_shape_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_local_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_remainder",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_travel",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collider",
          "type": "Object",
          "setter": "",
          "getter": "get_collider",
          "description": "The colliding body."
        },
        {
          "name": "collider_id",
          "type": "int",
          "setter": "",
          "getter": "get_collider_id",
          "description": "The colliding body's unique [RID]."
        },
        {
          "name": "collider_metadata",
          "type": "Variant",
          "setter": "",
          "getter": "get_collider_metadata",
          "description": "The colliding body's metadata. See [Object]."
        },
        {
          "name": "collider_shape",
          "type": "Object",
          "setter": "",
          "getter": "get_collider_shape",
          "description": "The colliding body's shape."
        },
        {
          "name": "collider_shape_index",
          "type": "int",
          "setter": "",
          "getter": "get_collider_shape_index",
          "description": "The colliding shape's index. See [CollisionObject]."
        },
        {
          "name": "collider_velocity",
          "type": "Vector3",
          "setter": "",
          "getter": "get_collider_velocity",
          "description": "The colliding object's velocity."
        },
        {
          "name": "local_shape",
          "type": "Object",
          "setter": "",
          "getter": "get_local_shape",
          "description": "The moving object's colliding shape."
        },
        {
          "name": "normal",
          "type": "Vector3",
          "setter": "",
          "getter": "get_normal",
          "description": "The colliding body's shape's normal at the point of collision."
        },
        {
          "name": "position",
          "type": "Vector3",
          "setter": "",
          "getter": "get_position",
          "description": "The point of collision."
        },
        {
          "name": "remainder",
          "type": "Vector3",
          "setter": "",
          "getter": "get_remainder",
          "description": "The moving object's remaining movement vector."
        },
        {
          "name": "travel",
          "type": "Vector3",
          "setter": "",
          "getter": "get_travel",
          "description": "The distance the moving object traveled before collision."
        }
      ],
      "theme_properties": []
    },
    "EncodedObjectAsID": {
      "name": "EncodedObjectAsID",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_object_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_object_id",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptComment": {
      "name": "VisualScriptComment",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node used to annotate the script.",
      "description": "A Visual Script node used to display annotations in the script, so that code may be documented.\n\t\tComment nodes can be resized so they encompass a group of nodes.",
      "methods": [
        {
          "name": "get_description",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_title",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_description",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "description",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_title",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "description",
          "type": "String",
          "setter": "set_description",
          "getter": "get_description",
          "description": "The text inside the comment node."
        },
        {
          "name": "size",
          "type": "Vector2",
          "setter": "set_size",
          "getter": "get_size",
          "description": "The comment node's size (in pixels)."
        },
        {
          "name": "title",
          "type": "String",
          "setter": "set_title",
          "getter": "get_title",
          "description": "The comment node's title."
        }
      ],
      "theme_properties": []
    },
    "EditorResourcePreviewGenerator": {
      "name": "EditorResourcePreviewGenerator",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Custom generator of previews.",
      "description": "Custom code to generate previews. Please check \"file_dialog/thumbnail_size\" in EditorSettings to find out the right size to do previews at.",
      "methods": [
        {
          "name": "generate",
          "qualifiers": "virtual",
          "description": "Generate a preview from a given resource. This must be always implemented.\n\t\t\tReturning an empty texture is an OK way to fail and let another generator take care.\n\t\t\tCare must be taken because this function is always called from a thread (not the main thread).",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "generate_from_path",
          "qualifiers": "virtual",
          "description": "Generate a preview directly from a path, implementing this is optional, as default code will load and call generate()\n\t\t\tReturning an empty texture is an OK way to fail and let another generator take care.\n\t\t\tCare must be taken because this function is always called from a thread (not the main thread).",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "handles",
          "qualifiers": "virtual",
          "description": "Return if your generator supports this resource type.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ColorRect": {
      "name": "ColorRect",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Colored rect for canvas.",
      "description": "An object that is represented on the canvas as a rect with color. [Color] is used to set or get color info for the rect.",
      "methods": [
        {
          "name": "get_frame_color",
          "qualifiers": "const",
          "description": "Return the color in RGBA format.\n\t\t\t\t[codeblock]\n\t\t\t\tvar cr = get_node(\"colorrect_node\")\n\t\t\t\tvar c = cr.get_frame_color() # Default color is white\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "set_frame_color",
          "description": "Set new color to ColorRect.\n\t\t\t\t[codeblock]\n\t\t\t\tvar cr = get_node(\"colorrect_node\")\n\t\t\t\tcr.set_frame_color(Color(1, 0, 0, 1)) # Set color rect node to red\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_frame_color",
          "getter": "get_frame_color",
          "description": "The color to fill the [code]ColorRect[/code].\n\t\t\t[codeblock]\n\t\t\t$ColorRect.color = Color(1, 0, 0, 1) # Set ColorRect node's color to red\n\t\t\t[/codeblock]"
        }
      ],
      "theme_properties": []
    },
    "File": {
      "name": "File",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Type to handle file reading and writing operations.",
      "description": "File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.\n\t\tHere's a sample on how to write and read from a file:\n\t\t[codeblock]\n\t\tfunc save(content):\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", file.WRITE)\n\t\t    file.store_string(content)\n\t\t    file.close()\n\n\t\tfunc load():\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", file.READ)\n\t\t    var content = file.get_as_text()\n\t\t    file.close()\n\t\t    return content\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "close",
          "description": "Closes the currently opened file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "eof_reached",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the file cursor has reached the end of the file.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "file_exists",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the file exists in the given path.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_16",
          "qualifiers": "const",
          "description": "Returns the next 16 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_32",
          "qualifiers": "const",
          "description": "Returns the next 32 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_64",
          "qualifiers": "const",
          "description": "Returns the next 64 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_8",
          "qualifiers": "const",
          "description": "Returns the next 8 bits from the file as an integer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_as_text",
          "qualifiers": "const",
          "description": "Returns the whole file as a [String].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_buffer",
          "qualifiers": "const",
          "description": "Returns next [code]len[/code] bytes of the file as a [PoolByteArray].",
          "return_type": "PoolByteArray",
          "arguments": [
            {
              "index": "0",
              "name": "len",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_csv_line",
          "qualifiers": "const",
          "description": "Returns the next value of the file in CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default \",\" (comma).",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "delim",
              "type": "String",
              "default_value": "\",\""
            }
          ]
        },
        {
          "name": "get_double",
          "qualifiers": "const",
          "description": "Returns the next 64 bits from the file as a floating point number.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_endian_swap",
          "description": "Returns [code]true[/code] if endian swap is enabled for this file.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_error",
          "qualifiers": "const",
          "description": "Returns the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [@Global Scope].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_float",
          "qualifiers": "const",
          "description": "Returns the next 32 bits from the file as a floating point number.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_len",
          "qualifiers": "const",
          "description": "Returns the size of the file in bytes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_line",
          "qualifiers": "const",
          "description": "Returns the next line of the file as a [String].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_md5",
          "qualifiers": "const",
          "description": "Returns an MD5 String representing the file at the given path or an empty [String] on failure.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_modified_time",
          "qualifiers": "const",
          "description": "Returns the last time the [code]file[/code] was modified in unix timestamp format or returns a [String] \"ERROR IN [code]file[/code]\". This unix timestamp can be converted to datetime by using [method OS.get_datetime_from_unix_time].",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pascal_string",
          "description": "Returns a [String] saved in Pascal format from the file.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "Returns the file cursor's position.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_real",
          "qualifiers": "const",
          "description": "Returns the next bits from the file as a floating point number.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sha256",
          "qualifiers": "const",
          "description": "Returns a SHA-256 [String] representing the file at the given path or an empty [String] on failure.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_var",
          "qualifiers": "const",
          "description": "Returns the next [Variant] value from the file.",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "is_open",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the file is currently opened.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "open",
          "description": "Opens the file for writing or reading, depending on the flags.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_compressed",
          "description": "Opens a compressed file for reading or writing. Use COMPRESSION_* constants to set [code]compression_mode[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "compression_mode",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "open_encrypted",
          "description": "Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "key",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open_encrypted_with_pass",
          "description": "Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "pass",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek",
          "description": "Change the file reading/writing cursor to the specified position (in bytes from the beginning of the file).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek_end",
          "description": "Changes the file reading/writing cursor to the specified position (in bytes from the end of the file). Note that this is an offset, so you should use negative numbers or the cursor will be at the end of the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_endian_swap",
          "description": "If [code]true[/code] the file's endianness is swapped. Use this if you're dealing with files written in big endian machines.\n\t\t\t\tNote that this is about the file format, not CPU type. This is always reseted to [code]false[/code] whenever you open the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_16",
          "description": "Stores an integer as 16 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_32",
          "description": "Stores an integer as 32 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_64",
          "description": "Stores an integer as 64 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_8",
          "description": "Stores an integer as 8 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_buffer",
          "description": "Stores the given array of bytes in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_double",
          "description": "Stores a floating point number as 64 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_float",
          "description": "Stores a floating point number as 32 bits in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_line",
          "description": "Stores the given [String] as a line in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_pascal_string",
          "description": "Stores the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_real",
          "description": "Stores a floating point number in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_string",
          "description": "Stores the given [String] in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "store_var",
          "description": "Stores any Variant value in the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "READ",
          "value": "1",
          "description": "Opens the file for read operations."
        },
        {
          "name": "WRITE",
          "value": "2",
          "description": "Opens the file for write operations. Create it if the file does not exist and truncate if it exists."
        },
        {
          "name": "READ_WRITE",
          "value": "3",
          "description": "Opens the file for read and write operations. Does not truncate the file."
        },
        {
          "name": "WRITE_READ",
          "value": "7",
          "description": "Opens the file for read and write operations. Create it if the file does not exist and truncate if it exists."
        },
        {
          "name": "COMPRESSION_FASTLZ",
          "value": "0",
          "description": "Uses the FastLZ compression method."
        },
        {
          "name": "COMPRESSION_DEFLATE",
          "value": "1",
          "description": "Uses the Deflate compression method."
        },
        {
          "name": "COMPRESSION_ZSTD",
          "value": "2",
          "description": "Uses the Zstd compression method."
        },
        {
          "name": "COMPRESSION_GZIP",
          "value": "3",
          "description": "Uses the gzip compression method."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "NavigationMesh": {
      "name": "NavigationMesh",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_polygon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "polygon",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_polygons",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_from_mesh",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mesh",
              "type": "Mesh",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_agent_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_agent_max_climb",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_agent_max_slope",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_agent_radius",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cell_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_cell_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_detail_sample_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_detail_sample_max_error",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_edge_max_error",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_edge_max_length",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_filter_ledge_spans",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_filter_low_hanging_obstacles",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_filter_walkable_low_height_spans",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_polygon",
          "description": "",
          "return_type": "PoolIntArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_polygon_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_region_merge_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_region_min_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_sample_partition_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_vertices",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolVector3Array",
          "arguments": []
        },
        {
          "name": "get_verts_per_poly",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_agent_height",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "agent_height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_agent_max_climb",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "agent_max_climb",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_agent_max_slope",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "agent_max_slope",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_agent_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "agent_radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_height",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cell_height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "cell_size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_detail_sample_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "detail_sample_dist",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_detail_sample_max_error",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "detail_sample_max_error",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edge_max_error",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "edge_max_error",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edge_max_length",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "edge_max_length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_filter_ledge_spans",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter_ledge_spans",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_filter_low_hanging_obstacles",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter_low_hanging_obstacles",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_filter_walkable_low_height_spans",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter_walkable_low_height_spans",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_merge_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "region_merge_size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region_min_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "region_min_size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sample_partition_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sample_partition_type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_vertices",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vertices",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_verts_per_poly",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "verts_per_poly",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SAMPLE_PARTITION_WATERSHED",
          "value": "0",
          "enum": "",
          "description": ""
        },
        {
          "name": "SAMPLE_PARTITION_MONOTONE",
          "value": "1",
          "enum": "",
          "description": ""
        },
        {
          "name": "SAMPLE_PARTITION_LAYERS",
          "value": "2",
          "enum": "",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "agent/height",
          "type": "float",
          "setter": "set_agent_height",
          "getter": "get_agent_height",
          "description": ""
        },
        {
          "name": "agent/max_climb",
          "type": "float",
          "setter": "set_agent_max_climb",
          "getter": "get_agent_max_climb",
          "description": ""
        },
        {
          "name": "agent/max_slope",
          "type": "float",
          "setter": "set_agent_max_slope",
          "getter": "get_agent_max_slope",
          "description": ""
        },
        {
          "name": "agent/radius",
          "type": "float",
          "setter": "set_agent_radius",
          "getter": "get_agent_radius",
          "description": ""
        },
        {
          "name": "cell/height",
          "type": "float",
          "setter": "set_cell_height",
          "getter": "get_cell_height",
          "description": ""
        },
        {
          "name": "cell/size",
          "type": "float",
          "setter": "set_cell_size",
          "getter": "get_cell_size",
          "description": ""
        },
        {
          "name": "detail/sample_distance",
          "type": "float",
          "setter": "set_detail_sample_distance",
          "getter": "get_detail_sample_distance",
          "description": ""
        },
        {
          "name": "detail/sample_max_error",
          "type": "float",
          "setter": "set_detail_sample_max_error",
          "getter": "get_detail_sample_max_error",
          "description": ""
        },
        {
          "name": "edge/max_error",
          "type": "float",
          "setter": "set_edge_max_error",
          "getter": "get_edge_max_error",
          "description": ""
        },
        {
          "name": "edge/max_length",
          "type": "float",
          "setter": "set_edge_max_length",
          "getter": "get_edge_max_length",
          "description": ""
        },
        {
          "name": "filter/filter_walkable_low_height_spans",
          "type": "bool",
          "setter": "set_filter_walkable_low_height_spans",
          "getter": "get_filter_walkable_low_height_spans",
          "description": ""
        },
        {
          "name": "filter/ledge_spans",
          "type": "bool",
          "setter": "set_filter_ledge_spans",
          "getter": "get_filter_ledge_spans",
          "description": ""
        },
        {
          "name": "filter/low_hanging_obstacles",
          "type": "bool",
          "setter": "set_filter_low_hanging_obstacles",
          "getter": "get_filter_low_hanging_obstacles",
          "description": ""
        },
        {
          "name": "polygon/verts_per_poly",
          "type": "float",
          "setter": "set_verts_per_poly",
          "getter": "get_verts_per_poly",
          "description": ""
        },
        {
          "name": "polygons",
          "type": "Array",
          "setter": "_set_polygons",
          "getter": "_get_polygons",
          "description": ""
        },
        {
          "name": "region/merge_size",
          "type": "float",
          "setter": "set_region_merge_size",
          "getter": "get_region_merge_size",
          "description": ""
        },
        {
          "name": "region/min_size",
          "type": "float",
          "setter": "set_region_min_size",
          "getter": "get_region_min_size",
          "description": ""
        },
        {
          "name": "sample_partition_type/sample_partition_type",
          "type": "int",
          "setter": "set_sample_partition_type",
          "getter": "get_sample_partition_type",
          "description": ""
        },
        {
          "name": "vertices",
          "type": "PoolVector3Array",
          "setter": "set_vertices",
          "getter": "get_vertices",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "StreamPeer": {
      "name": "StreamPeer",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Abstraction and base class for stream-based protocols.",
      "description": "StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or Unix Sockets). It provides an API for sending and receiving data through streams as raw data or strings.",
      "methods": [
        {
          "name": "get_16",
          "description": "Get a signed 16 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_32",
          "description": "Get a signed 32 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_64",
          "description": "Get a signed 64 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_8",
          "description": "Get a signed byte from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_available_bytes",
          "qualifiers": "const",
          "description": "Return the amount of bytes this [StreamPeer] has available.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_data",
          "description": "Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an Error code and a data array.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_double",
          "description": "Get a double-precision float from the stream.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_float",
          "description": "Get a single-precision float from the stream.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_partial_data",
          "description": "Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an Error code, and a data array.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_string",
          "description": "Get a string with byte-length \"bytes\" from the stream.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_u16",
          "description": "Get an unsigned 16 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_u32",
          "description": "Get an unsigned 32 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_u64",
          "description": "Get an unsigned 16 bit value from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_u8",
          "description": "Get an unsigned byte from the stream.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_utf8_string",
          "description": "Get a utf8 string with byte-length \"bytes\" from the stream (this decodes the string sent as utf8).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_var",
          "description": "Get a Variant from the stream.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_big_endian_enabled",
          "qualifiers": "const",
          "description": "Return whether this [StreamPeer] is using big-endian format.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "put_16",
          "description": "Put a signed 16 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_32",
          "description": "Put a signed 32 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_64",
          "description": "Put a signed 64 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_8",
          "description": "Put a signed byte into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_data",
          "description": "Send a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an Error code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_double",
          "description": "Put a double-precision float into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_float",
          "description": "Put a single-precision float into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_partial_data",
          "description": "Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an Error code and an integer, describing how much data was actually sent.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u16",
          "description": "Put an unsigned 16 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u32",
          "description": "Put an unsigned 32 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u64",
          "description": "Put an unsigned 64 bit value into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_u8",
          "description": "Put an unsigned byte into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_utf8_string",
          "description": "Put a zero-terminated utf8 string into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_var",
          "description": "Put a Variant into the stream.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_big_endian",
          "description": "Set this [StreamPeer] to use big-endian format. Default is false.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ProximityGroup": {
      "name": "ProximityGroup",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "General purpose proximity-detection node.",
      "description": "General purpose proximity-detection node.",
      "methods": [
        {
          "name": "broadcast",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parameters",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_grid_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "set_dispatch_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_grid_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_group_name",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "broadcast",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "parameters",
              "type": "Array",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "grid_radius",
          "type": "Vector3",
          "setter": "set_grid_radius",
          "getter": "get_grid_radius",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Vector3": {
      "name": "Vector3",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Vector class, which performs basic 3D vector math operations.",
      "description": "Vector3 is one of the core classes of the engine, and includes several built-in helper functions to perform basic vector math operations.",
      "methods": [
        {
          "name": "Vector3",
          "description": "Returns a Vector3 with the given components.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "Returns a new vector with all components in absolute values (i.e. positive).",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "angle_to",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bounce",
          "description": "Bounce returns the vector \"bounced off\" from the given plane, specified by its normal vector.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ceil",
          "description": "Returns a new vector with all components rounded up.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "cross",
          "description": "Return the cross product with b.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubic_interpolate",
          "description": "Perform a cubic interpolation between vectors pre_a, a, b, post_b (a is current), by the given amount (t).",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pre_a",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "post_b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_squared_to",
          "description": "Return the squared distance (distance minus the last square root) to b. Prefer this function over distance_to if you need to sort vectors or need the squared distance for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_to",
          "description": "Return the distance to b.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dot",
          "description": "Return the dot product with b.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "floor",
          "description": "Returns a new vector with all components rounded down.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverse",
          "description": "Returns the inverse of the vector. This is the same as Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z )",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_normalized",
          "description": "Returns whether the vector is normalized or not.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length",
          "description": "Return the length of the vector.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length_squared",
          "description": "Return the length of the vector, squared. Prefer this function over \"length\" if you need to sort vectors or need the squared length for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "linear_interpolate",
          "description": "Linearly interpolates the vector to a given one (b), by the given amount (t).",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "max_axis",
          "description": "Returns AXIS_X, AXIS_Y or AXIS_Z depending on which axis is the largest.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "min_axis",
          "description": "Returns AXIS_X, AXIS_Y or AXIS_Z depending on which axis is the smallest.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "normalized",
          "description": "Return a copy of the normalized vector to unit length. This is the same as v / v.length().",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "outer",
          "description": "Return the outer product with b.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "reflect",
          "description": "Reflects the vector along the given plane, specified by its normal vector.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotated",
          "description": "Rotates the vector around some axis by phi radians. The axis must be a normalized vector.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slide",
          "description": "Slide returns the component of the vector along the given plane, specified by its normal vector.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "snapped",
          "description": "Return a copy of the vector, snapped to the lowest neared multiple.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_diagonal_matrix",
          "description": "Return a diagonal matrix with the vector as main diagonal.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "AXIS_X",
          "value": "0",
          "enum": "",
          "description": "Enumerated value for the X axis. Returned by functions like max_axis or min_axis."
        },
        {
          "name": "AXIS_Y",
          "value": "1",
          "enum": "",
          "description": "Enumerated value for the Y axis."
        },
        {
          "name": "AXIS_Z",
          "value": "2",
          "enum": "",
          "description": "Enumerated value for the Z axis."
        }
      ],
      "properties": [
        {
          "name": "x",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "X component of the vector."
        },
        {
          "name": "y",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Y component of the vector."
        },
        {
          "name": "z",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Z component of the vector."
        }
      ],
      "theme_properties": []
    },
    "PrimitiveMesh": {
      "name": "PrimitiveMesh",
      "inherits": "Mesh",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.",
      "description": "Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.",
      "methods": [
        {
          "name": "get_material",
          "qualifiers": "const",
          "description": "",
          "return_type": "Material",
          "arguments": []
        },
        {
          "name": "get_mesh_arrays",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "set_material",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "material",
          "type": "Material",
          "setter": "set_material",
          "getter": "get_material",
          "description": "The current [Material] of the primitive mesh."
        }
      ],
      "theme_properties": []
    },
    "Node2D": {
      "name": "Node2D",
      "inherits": "CanvasItem",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A 2D game object, parent of all 2D related nodes. Has a position, rotation, scale and Z-index.",
      "description": "A 2D game object, with a position, rotation and scale. All 2D physics nodes and sprites inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control on the node's render order.",
      "methods": [
        {
          "name": "apply_scale",
          "description": "Multiplies the current scale by the 'ratio' vector.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "edit_set_pivot",
          "description": "Set the pivot position of the 2D node to 'pivot' value. Only some Node2Ds implement this method.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pivot",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_angle_to",
          "qualifiers": "const",
          "description": "Returns the angle between the node and the 'point' in radians.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_global_position",
          "qualifiers": "const",
          "description": "Returns the node's global position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_global_rotation",
          "qualifiers": "const",
          "description": "Returns the node's global rotation in radians.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_global_rotation_in_degrees",
          "qualifiers": "const",
          "description": "Return the node's global rotation in degrees.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_global_scale",
          "qualifiers": "const",
          "description": "Returns the node's global scale.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "Returns the node's position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_relative_transform_to_parent",
          "qualifiers": "const",
          "description": "Returns the [Transform2D] relative to this node's parent.",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "parent",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_rotation",
          "qualifiers": "const",
          "description": "Returns the node's rotation in radians.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rotation_in_degrees",
          "qualifiers": "const",
          "description": "Returns the node's rotation in degrees.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_scale",
          "qualifiers": "const",
          "description": "Returns the node's scale.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_z",
          "qualifiers": "const",
          "description": "Returns the node's Z-index.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "global_translate",
          "description": "Adds the 'offset' vector to the node's global position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_z_relative",
          "qualifiers": "const",
          "description": "Returns true if this node's Z-index is relative to its parent's. Else, returns false.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "look_at",
          "description": "Rotates the node so it points towards the 'point'.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_local_x",
          "description": "Apply a local translation on the node's X axis based on the process's 'delta'. If 'scaled' is false, normalizes the movement.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scaled",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "move_local_y",
          "description": "Apply a local translation on the node's Y axis based on the process's 'delta'. If 'scaled' is false, normalizes the movement.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "scaled",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "rotate",
          "description": "Apply a rotation to the node, in radians, starting from its current rotation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_position",
          "description": "Set the node's global position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_rotation",
          "description": "Set the node's global rotation in radians.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_rotation_in_degrees",
          "description": "Set the node's global rotation in degrees.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_scale",
          "description": "Set the node's global scale.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_transform",
          "description": "Set the node's global [Transform2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_position",
          "description": "Set the node's position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation",
          "description": "Set the node's rotation in radians.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation_in_degrees",
          "description": "Set the node's rotation in degrees.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scale",
          "description": "Set the node's scale.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Set the node's local [Transform2D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_z",
          "description": "Set the node's Z-index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_z_as_relative",
          "description": "Make the node's Z-index relative to its parent's Z-index. If this node's Z-index is 2 and its parent's effective Z-index is 3, then this node's effective Z-index will be 2 + 3 = 5.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_global",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "local_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_local",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "global_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translate",
          "description": "Translate the node locally by the 'offset' vector, starting from its current local position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "global_position",
          "type": "Vector2",
          "setter": "set_global_position",
          "getter": "get_global_position",
          "description": "Global position."
        },
        {
          "name": "global_rotation",
          "type": "float",
          "setter": "set_global_rotation",
          "getter": "get_global_rotation",
          "description": "Global rotation in radians."
        },
        {
          "name": "global_rotation_deg",
          "type": "float",
          "setter": "set_global_rotation_in_degrees",
          "getter": "get_global_rotation_in_degrees",
          "description": "Global rotation in degrees."
        },
        {
          "name": "global_scale",
          "type": "Vector2",
          "setter": "set_global_scale",
          "getter": "get_global_scale",
          "description": "Global scale."
        },
        {
          "name": "global_transform",
          "type": "Transform2D",
          "setter": "set_global_transform",
          "getter": "get_global_transform",
          "description": "Global [Transform2D]."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "Position, relative to the node's parent."
        },
        {
          "name": "rotation",
          "type": "float",
          "setter": "set_rotation",
          "getter": "get_rotation",
          "description": "Rotation in radians."
        },
        {
          "name": "rotation_deg",
          "type": "float",
          "setter": "set_rotation_in_degrees",
          "getter": "get_rotation_in_degrees",
          "description": "Rotation in degrees."
        },
        {
          "name": "scale",
          "type": "Vector2",
          "setter": "set_scale",
          "getter": "get_scale",
          "description": "Rotation in degrees."
        },
        {
          "name": "transform",
          "type": "Transform2D",
          "setter": "set_transform",
          "getter": "get_transform",
          "description": "Local [Transform2D]."
        },
        {
          "name": "z",
          "type": "int",
          "setter": "set_z",
          "getter": "get_z",
          "description": "Z-index. Controls the order in which the nodes render. A node with a higher Z-index will display in front of others."
        },
        {
          "name": "z_as_relative",
          "type": "bool",
          "setter": "set_z_as_relative",
          "getter": "is_z_relative",
          "description": "Make the node's Z-index relative to its parent's Z-index. If this node's Z-index is 2 and its parent's effective Z-index is 3, then this node's effective Z-index will be 2 + 3 = 5."
        }
      ],
      "theme_properties": []
    },
    "StyleBoxEmpty": {
      "name": "StyleBoxEmpty",
      "inherits": "StyleBox",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Empty stylebox (does not display anything).",
      "description": "Empty stylebox (really does not display anything).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Vector2": {
      "name": "Vector2",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Vector used for 2D Math.",
      "description": "2-element structure that can be used to represent positions in 2d-space, or any other pair of numeric values.",
      "methods": [
        {
          "name": "Vector2",
          "description": "Constructs a new Vector2 from the given x and y.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "Returns a new vector with all components in absolute values (i.e. positive).",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "angle",
          "description": "Returns the result of atan2 when called with the Vector's x and y as parameters (Math::atan2(x,y)).\n\t\t\t\tBe aware that it therefore returns an angle oriented clockwise with regard to the (0, 1) unit vector, and not an angle oriented counter-clockwise with regard to the (1, 0) unit vector (which would be the typical trigonometric representation of the angle when calling Math::atan2(y,x)).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "angle_to",
          "description": "Returns the angle in radians between the two vectors.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "angle_to_point",
          "description": "Returns the angle in radians between the line connecting the two points and the x coordinate.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "aspect",
          "description": "Returns the ratio of X to Y.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "bounce",
          "description": "Bounce returns the vector \"bounced off\" from the given plane, specified by its normal vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clamped",
          "description": "Returns the vector with a maximum length.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cubic_interpolate",
          "description": "Cubicly interpolates between this Vector and \"b\", using \"pre_a\" and \"post_b\" as handles, and returning the result at position \"t\".",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pre_a",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "post_b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_squared_to",
          "description": "Returns the squared distance to vector \"b\". Prefer this function over \"distance_to\" if you need to sort vectors or need the squared distance for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "distance_to",
          "description": "Returns the distance to vector \"b\".",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dot",
          "description": "Returns the dot product with vector \"b\".",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "floor",
          "description": "Remove the fractional part of x and y.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_normalized",
          "description": "Returns whether the vector is normalized or not.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length",
          "description": "Returns the length of the vector.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "length_squared",
          "description": "Returns the squared length of the vector. Prefer this function over \"length\" if you need to sort vectors or need the squared length for some formula.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "linear_interpolate",
          "description": "Returns the result of the linear interpolation between this vector and \"b\", by amount \"t\".",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "t",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "normalized",
          "description": "Returns a normalized vector to unit length.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reflect",
          "description": "Reflects the vector along the given plane, specified by its normal vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rotated",
          "description": "Rotates the vector by \"phi\" radians.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "slide",
          "description": "Slide returns the component of the vector along the given plane, specified by its normal vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "n",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "snapped",
          "description": "Snaps the vector to a grid with the given size.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tangent",
          "description": "Returns a perpendicular vector.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "x",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "X component of the vector."
        },
        {
          "name": "y",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": "Y component of the vector."
        }
      ],
      "theme_properties": []
    },
    "PanoramaSky": {
      "name": "PanoramaSky",
      "inherits": "Sky",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_panorama",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "set_panorama",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "panorama",
          "type": "Texture",
          "setter": "set_panorama",
          "getter": "get_panorama",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "HScrollBar": {
      "name": "HScrollBar",
      "inherits": "ScrollBar",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Horizontal scroll bar.",
      "description": "Horizontal scroll bar. See [ScrollBar]. This one goes from left (min) to right (max).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "scroll",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "scroll_focus",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "StyleBox": {
      "name": "StyleBox",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for drawing stylized boxes for the UI.",
      "description": "StyleBox is [Resource] that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.",
      "methods": [
        {
          "name": "draw",
          "qualifiers": "const",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "canvas_item",
              "type": "RID",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_center_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_default_margin",
          "qualifiers": "const",
          "description": "Return the default offset of the margin \"margin\" (see MARGIN_* enum) of a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "Return the offset of margin \"margin\" (see MARGIN_* enum).",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_minimum_size",
          "qualifiers": "const",
          "description": "Return the minimum size that this stylebox can be shrunk to.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the \"offset\" of a stylebox, this is a helper function, like writing [code]Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))[/code].",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_default_margin",
          "description": "Set the default offset \"offset\" of the margin \"margin\" (see MARGIN_* enum) for a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "test_mask",
          "qualifiers": "const",
          "description": "Test a position in a rectangle, return whether it passes the mask test.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "content_margin_bottom",
          "type": "float",
          "setter": "set_default_margin",
          "getter": "get_default_margin",
          "description": ""
        },
        {
          "name": "content_margin_left",
          "type": "float",
          "setter": "set_default_margin",
          "getter": "get_default_margin",
          "description": ""
        },
        {
          "name": "content_margin_right",
          "type": "float",
          "setter": "set_default_margin",
          "getter": "get_default_margin",
          "description": ""
        },
        {
          "name": "content_margin_top",
          "type": "float",
          "setter": "set_default_margin",
          "getter": "get_default_margin",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Dictionary": {
      "name": "Dictionary",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Dictionary type.",
      "description": "Dictionary type. Associative container which contains values referenced by unique keys. Dictionaries are always passed by reference.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear the dictionary, removing all key/value pairs.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "empty",
          "description": "Return true if the dictionary is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "erase",
          "description": "Erase a dictionary key/value pair by key.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has",
          "description": "Return true if the dictionary has a given key.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "key",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_all",
          "description": "Return true if the dictionary has all of the keys in the given array.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "keys",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hash",
          "description": "Return a hashed integer value representing the dictionary contents.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "keys",
          "description": "Return the list of keys in the [Dictionary].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "size",
          "description": "Return the size of the dictionary (in pairs).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "values",
          "description": "Return the list of values in the [Dictionary].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ProjectSettings": {
      "name": "ProjectSettings",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Contains global variables accessible from everywhere.",
      "description": "Contains global variables accessible from everywhere. Use the normal [Object] API, such as \"ProjectSettings.get(variable)\", \"ProjectSettings.set(variable,value)\" or \"ProjectSettings.has(variable)\" to access them. Variables stored in project.godot are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.",
      "methods": [
        {
          "name": "add_property_info",
          "description": "Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@Global Scope]), and optionally hint:[int](see PROPERTY_HINT_* in [@Global Scope]), hint_string:[String].\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tProjectSettings.set(\"category/property_name\", 0)\n\n\t\t\t\tvar property_info = {\n\t\t\t\t    \"name\": \"category/property_name\",\n\t\t\t\t    \"type\": TYPE_INT,\n\t\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t\t}\n\n\t\t\t\tProjectSettings.add_property_info(property_info)\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hint",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the whole configuration (not recommended, may break things).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_order",
          "qualifiers": "const",
          "description": "Return the order of a configuration value (influences when saved to the config file).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_setting",
          "qualifiers": "const",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_singleton",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "globalize_path",
          "qualifiers": "const",
          "description": "Convert a localized path (res://) to a full native OS path.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_setting",
          "qualifiers": "const",
          "description": "Return true if a configuration value is present.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_singleton",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load_resource_pack",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pack",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "localize_path",
          "qualifiers": "const",
          "description": "Convert a path to a localized path (res:// path).",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "property_can_revert",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "property_get_revert",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "save_custom",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_initial_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_order",
          "description": "Set the order of a configuration value (influences when saved to the config file).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_setting",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventScreenTouch": {
      "name": "InputEventScreenTouch",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Input event type for screen touch events.",
      "description": "",
      "methods": [
        {
          "name": "get_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_index",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "index",
          "type": "int",
          "setter": "set_index",
          "getter": "get_index",
          "description": "Touch event index in the case of a multi-touch event."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "Position of the touch event."
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": "Pressed state of the touch event."
        }
      ],
      "theme_properties": []
    },
    "IP": {
      "name": "IP",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "IP Protocol support functions.",
      "description": "IP contains support functions for the IPv4 protocol. TCP/IP support is in different classes (see [StreamPeerTCP] and [TCP_Server]). IP provides hostname resolution support, both blocking and threaded.",
      "methods": [
        {
          "name": "clear_cache",
          "description": "Removes all of a \"hostname\"'s cached references. If no \"hostname\" is given then all cached IP addresses are removed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hostname",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "erase_resolve_item",
          "description": "Removes a given item \"id\" from the queue. This should be used to free a queue after it has completed to enable more queries to happen.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_local_addresses",
          "qualifiers": "const",
          "description": "Returns all of the user's current IPv4 and IPv6 addresses as an array.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_resolve_item_address",
          "qualifiers": "const",
          "description": "Returns a queued hostname's IP address, given its queue \"id\". Returns an empty string on error or if resolution hasn't happened yet (see [method get_resolve_item_status]).",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_resolve_item_status",
          "qualifiers": "const",
          "description": "Returns a queued hostname's status as a RESOLVER_STATUS_* constant, given its queue \"id\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resolve_hostname",
          "description": "Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the TYPE_* constant given as \"ip_type\".",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ip_type",
              "type": "int",
              "enum": "IP.Type",
              "default_value": "3"
            }
          ]
        },
        {
          "name": "resolve_hostname_queue_item",
          "description": "Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the TYPE_* constant given as \"ip_type\". Returns the queue ID if successful, or RESOLVER_INVALID_ID on error.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ip_type",
              "type": "int",
              "enum": "IP.Type",
              "default_value": "3"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "RESOLVER_STATUS_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "RESOLVER_STATUS_WAITING",
          "value": "1",
          "description": ""
        },
        {
          "name": "RESOLVER_STATUS_DONE",
          "value": "2",
          "description": ""
        },
        {
          "name": "RESOLVER_STATUS_ERROR",
          "value": "3",
          "description": ""
        },
        {
          "name": "RESOLVER_MAX_QUERIES",
          "value": "32",
          "enum": "",
          "description": ""
        },
        {
          "name": "RESOLVER_INVALID_ID",
          "value": "-1",
          "enum": "",
          "description": ""
        },
        {
          "name": "TYPE_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "TYPE_IPV4",
          "value": "1",
          "description": ""
        },
        {
          "name": "TYPE_IPV6",
          "value": "2",
          "description": ""
        },
        {
          "name": "TYPE_ANY",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Rect3": {
      "name": "Rect3",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Axis-Aligned Bounding Box.",
      "description": "Rect3 provides an 3D Axis-Aligned Bounding Box. It consists of a position, a size, and several utility functions. It is typically used for simple (fast) overlap tests.",
      "methods": [
        {
          "name": "Rect3",
          "description": "Optional constructor, accepts position and size.",
          "return_type": "Rect3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "encloses",
          "description": "Return true if this [Rect3] completely encloses another one.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "expand",
          "description": "Return this [Rect3] expanded to include a given point.",
          "return_type": "Rect3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to_point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_area",
          "description": "Get the area of the [Rect3].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_endpoint",
          "description": "Get the position of the 8 endpoints of the [Rect3] in space.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_longest_axis",
          "description": "Return the normalized longest axis of the [Rect3].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_longest_axis_index",
          "description": "Return the index of the longest axis of the [Rect3] (according to [Vector3]::AXIS* enum).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_longest_axis_size",
          "description": "Return the scalar length of the longest axis of the [Rect3].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_shortest_axis",
          "description": "Return the normalized shortest axis of the [Rect3].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_shortest_axis_index",
          "description": "Return the index of the shortest axis of the [Rect3] (according to [Vector3]::AXIS* enum).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_shortest_axis_size",
          "description": "Return the scalar length of the shortest axis of the [Rect3].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_support",
          "description": "Return the support point in a given direction. This is useful for collision detection algorithms.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dir",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "grow",
          "description": "Return a copy of the [Rect3] grown a given amount of units towards all the sides.",
          "return_type": "Rect3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_no_area",
          "description": "Return true if the [Rect3] is flat or empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_no_surface",
          "description": "Return true if the [Rect3] is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "description": "Return true if the [Rect3] contains a point.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersection",
          "description": "Return the intersection between two [Rect3]. An empty Rect3 (size 0,0,0) is returned on failure.",
          "return_type": "Rect3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects",
          "description": "Return true if the [Rect3] overlaps with another.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_plane",
          "description": "Return true if the [Rect3] is at both sides of a plane.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "plane",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_segment",
          "description": "Return true if the [Rect3] intersects the line segment between from and to",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "merge",
          "description": "Combine this [Rect3] with another, a larger one is returned that contains both.",
          "return_type": "Rect3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "end",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "Ending corner."
        },
        {
          "name": "position",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "size",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": "Size from position to end."
        }
      ],
      "theme_properties": []
    },
    "Listener": {
      "name": "Listener",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear_current",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_listener_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "is_current",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_current",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorSelection": {
      "name": "EditorSelection",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Manages the SceneTree selection in the editor.",
      "description": "This object manages the SceneTree selection in the editor.",
      "methods": [
        {
          "name": "add_node",
          "description": "Add a node to the selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_selected_nodes",
          "description": "Get the list of selected nodes.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_transformable_selected_nodes",
          "description": "Get the list of selected nodes, optimized for transform operations (ie, moving them, rotating, etc). This list avoids situations where a node is selected and also chid/grandchild.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_node",
          "description": "Remove a node from the selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "selection_changed",
          "description": "Emitted when the selection changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "InputEventAction": {
      "name": "InputEventAction",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Input event type for actions.",
      "description": "",
      "methods": [
        {
          "name": "get_action",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_action",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pressed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pressed",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "action",
          "type": "String",
          "setter": "set_action",
          "getter": "get_action",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "bool",
          "setter": "set_pressed",
          "getter": "is_pressed",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Plane": {
      "name": "Plane",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Plane in hessian form.",
      "description": "Plane represents a normalized plane equation. Basically, \"normal\" is the normal of the plane (a,b,c normalized), and \"d\" is the distance from the origin to the plane (in the direction of \"normal\"). \"Over\" or \"Above\" the plane is considered the side of the plane towards where the normal is pointing.",
      "methods": [
        {
          "name": "Plane",
          "description": "Creates a plane from the three parameters \"a\", \"b\", \"c\" and \"d\".",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "b",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "c",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "d",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Plane",
          "description": "Creates a plane from three points.",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v1",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "v2",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "v3",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Plane",
          "description": "Creates a plane from the normal and the plane's distance to the origin.",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "normal",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "d",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "center",
          "description": "Returns the center of the plane.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "distance_to",
          "description": "Returns the shortest distance from the plane to the position \"point\".",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_any_point",
          "description": "Returns a point on the plane.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "description": "Returns true if \"point\" is inside the plane (by a very minimum threshold).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "epsilon",
              "type": "float",
              "default_value": "0.00001"
            }
          ]
        },
        {
          "name": "intersect_3",
          "description": "Returns the intersection point of the three planes \"b\", \"c\" and this plane. If no intersection is found null is returned.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Plane",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "c",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_ray",
          "description": "Returns the intersection point of a ray consisting of the position \"from\" and the direction normal \"dir\" with this plane. If no intersection is found null is returned.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "dir",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects_segment",
          "description": "Returns the intersection point of a segment from position \"begin\" to position \"end\" with this plane. If no intersection is found null is returned.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "begin",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "end",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_point_over",
          "description": "Returns true if \"point\" is located above the plane.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "normalized",
          "description": "Returns a copy of the plane, normalized.",
          "return_type": "Plane",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "project",
          "description": "Returns the orthogonal projection of point \"p\" into a point in the plane.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "d",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "normal",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "x",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "z",
          "type": "float",
          "setter": "",
          "getter": "",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Physics2DShapeQueryResult": {
      "name": "Physics2DShapeQueryResult",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_result_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_result_object",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_object_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_result_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ButtonGroup": {
      "name": "ButtonGroup",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Group of Buttons.",
      "description": "Group of [Button]. All direct and indirect children buttons become radios. Only one allows being pressed.",
      "methods": [
        {
          "name": "get_pressed_button",
          "description": "Return the pressed button.",
          "return_type": "BaseButton",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "PoolByteArray": {
      "name": "PoolByteArray",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Raw byte array.",
      "description": "Raw byte array. Contains bytes. Optimized for memory usage, can't fragment the memory.",
      "methods": [
        {
          "name": "PoolByteArray",
          "description": "Create from a generic array.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_array",
          "description": "Append a [PoolByteArray] at the end of this array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "array",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "compress",
          "description": "Returns a new [PoolByteArray] with the data compressed. Set the compression mode using one of [File]'s COMPRESS_* constants.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "compression_mode",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "decompress",
          "description": "Returns a new [PoolByteArray] with the data decompressed. Set buffer_size to the size of the uncompressed data. Set the compression mode using one of [File]'s COMPRESS_* constants.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer_size",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "compression_mode",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_string_from_ascii",
          "description": "Returns a copy of the array's contents as [String]. Fast alternative to [method PoolByteArray.get_string_from_utf8] if the content is ASCII-only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use [method PoolByteArray.get_string_from_utf8].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_string_from_utf8",
          "description": "Returns a copy of the array's contents as [String]. Slower than [method PoolByteArray.get_string_from_ascii] but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append an element at the end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set",
          "description": "Change the byte at the given index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "byte",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the size of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "subarray",
          "description": "Returns the slice of the [PoolByteArray] between indices (inclusive) as a new [PoolByteArray].  Any negative index is considered to be from the end of the array.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HBoxContainer": {
      "name": "HBoxContainer",
      "inherits": "BoxContainer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Horizontal box container.",
      "description": "Horizontal box container. See [BoxContainer].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "CanvasModulate": {
      "name": "CanvasModulate",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Tint the entire canvas.",
      "description": "[code]CanvasModulate[/code] tints the canvas elements using its assigned [code]color[/code].",
      "methods": [
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Gets the canvas tint color",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "Sets the canvas tint color",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": "The tint color to apply."
        }
      ],
      "theme_properties": []
    },
    "GraphEdit": {
      "name": "GraphEdit",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "GraphEdit is an area capable of showing various GraphNodes. It manages connection events between them.",
      "description": "GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default.\n\t\tIt is greatly advised to enable low processor usage mode (see [method OS.set_low_processor_usage_mode]) when using GraphEdits.",
      "methods": [
        {
          "name": "connect_node",
          "description": "Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect_node",
          "description": "Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_connection_list",
          "qualifiers": "const",
          "description": "Return an Array containing the list of connections. A connection consists in a structure of the form {from_slot: 0, from: \"GraphNode name 0\", to_slot: 1, to: \"GraphNode name 1\" }",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_scroll_ofs",
          "qualifiers": "const",
          "description": "Return the scroll offset.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_snap",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_zoom",
          "qualifiers": "const",
          "description": "Return the current zoom value.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_node_connected",
          "description": "Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_right_disconnects_enabled",
          "qualifiers": "const",
          "description": "Return true is the disconnection of connections is enable in the visual GraphEdit. False otherwise.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_snap",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_right_disconnects",
          "description": "Enable the disconnection of existing connections in the visual GraphEdit by left-clicking a connection and releasing into the void.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_ofs",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_selected",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_snap",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pixels",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_snap",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_zoom",
          "description": "Set the zoom value of the GraphEdit. Zoom value is between [0.01; 1.728].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_zoom",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "_begin_node_move",
          "description": "Signal sent at the beginning of a GraphNode movement.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "_end_node_move",
          "description": "Signal sent at the end of a GraphNode movement.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connection_request",
          "description": "Signal sent to the GraphEdit when the connection between 'from_slot' slot of 'from' GraphNode and 'to_slot' slot of 'to' GraphNode is attempted to be created.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_slot",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "connection_to_empty",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "release_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "delete_nodes_request",
          "description": "Signal sent when a GraphNode is attempted to be removed from the GraphEdit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "disconnection_request",
          "description": "Signal sent to the GraphEdit when the connection between 'from_slot' slot of 'from' GraphNode and 'to_slot' slot of 'to' GraphNode is attempted to be removed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_slot",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_slot",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "duplicate_nodes_request",
          "description": "Signal sent when a GraphNode is attempted to be duplicated in the GraphEdit.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "node_selected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "popup_request",
          "description": "Signal sent when a popup is requested. Happens on right-clicking in the GraphEdit. 'p_position' is the position of the mouse pointer when the signal is sent.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scroll_offset_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "SnapGrid",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "bezier_len_neg",
          "type": "int",
          "description": ""
        },
        {
          "name": "bezier_len_pos",
          "type": "int",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grid_major",
          "type": "Color",
          "description": ""
        },
        {
          "name": "grid_minor",
          "type": "Color",
          "description": ""
        },
        {
          "name": "minus",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "more",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "reset",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "PhysicsDirectSpaceState": {
      "name": "PhysicsDirectSpaceState",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "cast_motion",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "motion",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "collide_shape",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        },
        {
          "name": "get_rest_info",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersect_ray",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "exclude",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "3",
              "name": "collision_layer",
              "type": "int",
              "default_value": "2147483647"
            },
            {
              "index": "4",
              "name": "type_mask",
              "type": "int",
              "default_value": "15"
            }
          ]
        },
        {
          "name": "intersect_shape",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "max_results",
              "type": "int",
              "default_value": "32"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "TYPE_MASK_STATIC_BODY",
          "value": "1",
          "description": ""
        },
        {
          "name": "TYPE_MASK_KINEMATIC_BODY",
          "value": "2",
          "description": ""
        },
        {
          "name": "TYPE_MASK_RIGID_BODY",
          "value": "4",
          "description": ""
        },
        {
          "name": "TYPE_MASK_CHARACTER_BODY",
          "value": "8",
          "description": ""
        },
        {
          "name": "TYPE_MASK_AREA",
          "value": "16",
          "description": ""
        },
        {
          "name": "TYPE_MASK_COLLISION",
          "value": "15",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "MenuButton": {
      "name": "MenuButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Special button that brings up a [PopupMenu] when clicked.",
      "description": "Special button that brings up a [PopupMenu] when clicked. That's pretty much all it does, as it's just a helper class when building GUIs.",
      "methods": [
        {
          "name": "get_popup",
          "description": "Return the [PopupMenu] contained in this button.",
          "return_type": "PopupMenu",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "about_to_show",
          "description": "Emitted when [PopupMenu] of this MenuButton is about to show.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "items",
          "type": "Array",
          "setter": "_set_items",
          "getter": "_get_items",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "ResourceImporter": {
      "name": "ResourceImporter",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CenterContainer": {
      "name": "CenterContainer",
      "inherits": "Container",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Keeps children controls centered.",
      "description": "CenterContainer Keeps children controls centered. This container keeps all children to their minimum size, in the center.",
      "methods": [
        {
          "name": "is_using_top_left",
          "qualifiers": "const",
          "description": "Should put children to the top left corner instead of center of the container.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_use_top_left",
          "description": "This function will anchor the container children to the top left corner of the the container boundaries, moving all its children to that position, (the children new center will be the top left corner of the container).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "use_top_left",
          "type": "bool",
          "setter": "set_use_top_left",
          "getter": "is_using_top_left",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Separator": {
      "name": "Separator",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for separators.",
      "description": "Separator is a [Control] used for separating other controls. It's purely a visual decoration. Horizontal ([HSeparator]) and Vertical ([VSeparator]) versions are available.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "MobileVRInterface": {
      "name": "MobileVRInterface",
      "inherits": "ARVRInterface",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Generic mobile VR implementation",
      "description": "This is a generic mobile VR implementation where you need to provide details about the phone and HMD used. It does not rely on any existing framework. This is the most basic interface we have. For the best effect you do need a mobile phone with a gyroscope and accelerometer.\n\t\tNote that even though there is no positional tracking the camera will assume the headset is at a height of 1.85 meters.",
      "methods": [
        {
          "name": "get_display_to_lens",
          "qualifiers": "const",
          "description": "Returns the distance between the display and the lens.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_display_width",
          "qualifiers": "const",
          "description": "Return the width of the LCD screen of the device.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_iod",
          "qualifiers": "const",
          "description": "Returns the interocular distance.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_k1",
          "qualifiers": "const",
          "description": "Returns the k1 lens constant.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_k2",
          "qualifiers": "const",
          "description": "Retuns the k2 lens constant",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_oversample",
          "qualifiers": "const",
          "description": "Returns the oversampling setting.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_display_to_lens",
          "description": "Sets the distance between display and the lens.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "display_to_lens",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_display_width",
          "description": "Sets the width of the LCD screen of the device.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "display_width",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_iod",
          "description": "Sets the interocular distance.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "iod",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_k1",
          "description": "Sets the k1 lens constant.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "k",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_k2",
          "description": "Sets the k2 lens constant.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "k",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_oversample",
          "description": "Sets the oversampling setting.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "oversample",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "display_to_lens",
          "type": "float",
          "setter": "set_display_to_lens",
          "getter": "get_display_to_lens",
          "description": "The distance between the display and the lenses inside of the device in centimeters."
        },
        {
          "name": "display_width",
          "type": "float",
          "setter": "set_display_width",
          "getter": "get_display_width",
          "description": "The width of the display in centimeters."
        },
        {
          "name": "iod",
          "type": "float",
          "setter": "set_iod",
          "getter": "get_iod",
          "description": "The interocular distance, also known as the interpupillary distance. The distance between the pupils of the left and right eye."
        },
        {
          "name": "k1",
          "type": "float",
          "setter": "set_k1",
          "getter": "get_k1",
          "description": "The k1 lens factor is one of the two constants that define the strength of the lens used and directly influences the lens distortion effect."
        },
        {
          "name": "k2",
          "type": "float",
          "setter": "set_k2",
          "getter": "get_k2",
          "description": "The k2 lens factor, see k1."
        },
        {
          "name": "oversample",
          "type": "float",
          "setter": "set_oversample",
          "getter": "get_oversample",
          "description": "The oversample setting. Because of the lens distortion we have to render our buffers at a higher resolution then the screen can natively handle. A value between 1.5 and 2.0 often provides good results but at the cost of performance."
        }
      ],
      "theme_properties": []
    },
    "Tree": {
      "name": "Tree",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Control to show a tree of items.",
      "description": "This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structured displays and interactions.\n\t\tTrees are built via code, using [TreeItem] objects to create the structure. They have a single root but multiple roots can be simulated if a dummy hidden root is added.\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t    var tree = Tree.new()\n\t\t    var root = tree.create_item()\n\t\t    tree.set_hide_root(true)\n\t\t    var child1 = tree.create_item(root)\n\t\t    var child2 = tree.create_item(root)\n\t\t    var subchild1 = tree.create_item(child1)\n\t\t    subchild1.set_text(0, \"Subchild1\")\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "are_column_titles_visible",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the column titles are being shown.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "clear",
          "description": "Clears the tree. This removes all items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_item",
          "description": "Create an item in the tree and add it as the last child of [code]parent[/code]. If parent is not given, it will be added as the root's last child, or it'll the be the root itself if the tree is empty.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "parent",
              "type": "Object",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "ensure_cursor_is_visible",
          "description": "Makes the currently selected item visible. This will scroll the tree to make sure the selected item is visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_allow_reselect",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if a cell that is currently already selected may be selected again.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_allow_rmb_select",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if a right click can select items.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_column_at_position",
          "qualifiers": "const",
          "description": "Returns the column index under the given point.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_column_title",
          "qualifiers": "const",
          "description": "Returns the column's title.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_column_width",
          "qualifiers": "const",
          "description": "Returns the column's width in pixels.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_columns",
          "qualifiers": "const",
          "description": "Returns the amount of columns.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_custom_popup_rect",
          "qualifiers": "const",
          "description": "Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See [method TreeItem.set_cell_mode].",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_drop_mode_flags",
          "qualifiers": "const",
          "description": "Returns the current drop mode's flags.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_drop_section_at_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_edited",
          "qualifiers": "const",
          "description": "Returns the currently edited item. This is only available for custom cell mode.",
          "return_type": "TreeItem",
          "arguments": []
        },
        {
          "name": "get_edited_column",
          "qualifiers": "const",
          "description": "Returns the column for the currently edited item. This is only available for custom cell mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_area_rect",
          "qualifiers": "const",
          "description": "Returns the rectangle area for the specified item. If column is specified, only get the position and size of that column, otherwise get the rectangle containing all columns.",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "column",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "get_item_at_position",
          "qualifiers": "const",
          "description": "Returns the tree item at the specified position (relative to the tree origin position).",
          "return_type": "TreeItem",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_next_selected",
          "description": "Returns the next selected item after the given one.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pressed_button",
          "qualifiers": "const",
          "description": "Returns the last pressed button's index.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_root",
          "description": "Returns the tree's root item.",
          "return_type": "TreeItem",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scroll",
          "qualifiers": "const",
          "description": "Returns the current scrolling position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_selected",
          "qualifiers": "const",
          "description": "Returns the currently selected item.",
          "return_type": "TreeItem",
          "arguments": []
        },
        {
          "name": "get_selected_column",
          "qualifiers": "const",
          "description": "Returns the current selection's column.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_folding_hidden",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the folding arrow is hidden.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_allow_reselect",
          "description": "If [code]true[/code] the currently selected cell may be selected again.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "allow",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_allow_rmb_select",
          "description": "If [code]true[/code] a right mouse button click can select items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "allow",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_expand",
          "description": "If [code]true[/code] the column will have the \"Expand\" flag of [Control].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "expand",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_min_width",
          "description": "Set the minimum width of a column.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min_width",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_title",
          "description": "Set the title of a column.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_column_titles_visible",
          "description": "If [code]true[/code] column titles are visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_columns",
          "description": "Set the amount of columns.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_drop_mode_flags",
          "description": "Set the drop mode as an OR combination of flags. See [code]DROP_MODE_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hide_folding",
          "description": "If [code]true[/code] the folding arrow is hidden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hide",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hide_root",
          "description": "If [code]true[/code] the tree's root is hidden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_select_mode",
          "description": "Allow single or multiple selection. See the [code]SELECT_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Tree.SelectMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "button_pressed",
          "description": "Emitted when a button on the tree was pressed (see [method TreeItem.add_button]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cell_selected",
          "description": "Emitted when a cell is selected.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "column_title_pressed",
          "description": "Emitted when a column's title is pressed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_popup_edited",
          "description": "Emitted when a cell with the [code]CELL_MODE_CUSTOM[/code] is clicked to be edited.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arrow_clicked",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "empty_tree_rmb_selected",
          "description": "Emitted when the right mouse button is pressed if RMB selection is active and the tree is empty.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_activated",
          "description": "Emitted when an item is activated (double-clicked).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_collapsed",
          "description": "Emitted when an item is collapsed by a click on the folding arrow.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_custom_button_pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_double_clicked",
          "description": "Emitted when an item is double clicked.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_edited",
          "description": "Emitted when an item is edited.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_rmb_edited",
          "description": "Emitted when an item is edited using the right mouse button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_rmb_selected",
          "description": "Emitted when an item is selected with right mouse button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "item_selected",
          "description": "Emitted when an item is selected with right mouse button.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "multi_selected",
          "description": "Emitted instead of [code]item_selected[/code] when [code]select_mode[/code] is [code]SELECT_MULTI[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "selected",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "SELECT_SINGLE",
          "value": "0",
          "description": "Allow selection of a single item at a time."
        },
        {
          "name": "SELECT_ROW",
          "value": "1",
          "description": ""
        },
        {
          "name": "SELECT_MULTI",
          "value": "2",
          "description": "Allow selection of multiple items at the same time."
        },
        {
          "name": "DROP_MODE_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "DROP_MODE_ON_ITEM",
          "value": "1",
          "description": ""
        },
        {
          "name": "DROP_MODE_INBETWEEN",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": [
        {
          "name": "arrow",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "arrow_collapsed",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "bg_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "button_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "cursor",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "cursor_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "cursor_unfocused",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "custom_button",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "custom_button_font_highlight",
          "type": "Color",
          "description": ""
        },
        {
          "name": "custom_button_hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "custom_button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "draw_relationship_lines",
          "type": "int",
          "description": ""
        },
        {
          "name": "drop_position_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "guide_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "guide_width",
          "type": "int",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "item_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "relationship_line_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "scroll_border",
          "type": "int",
          "description": ""
        },
        {
          "name": "scroll_speed",
          "type": "int",
          "description": ""
        },
        {
          "name": "select_arrow",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "selected",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selected_focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_button_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "title_button_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "title_button_hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "title_button_normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "title_button_pressed",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "unchecked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "updown",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "NodePath": {
      "name": "NodePath",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Pre-parsed scene tree path.",
      "description": "A pre-parsed relative or absolute path in a scene tree, for use with [method Node.get_node] and similar functions. It can reference a node, a resource within a node, or a property of a node or resource. For instance, [code]\"Path2D/PathFollow2D/Sprite:texture:size\"[/code] would refer to the size property of the texture resource on the node named \"Sprite\" which is a child of the other named nodes in the path. Note that if you want to get a resource, you must end the path with a colon, otherwise the last element will be used as a property name.\n\t\tYou will usually just pass a string to [method Node.get_node] and it will be automatically converted, but you may occasionally want to parse a path ahead of time with [NodePath] or the literal syntax [code]@\"path\"[/code]. Exporting a [NodePath] variable will give you a node selection widget in the properties panel of the editor, which can often be useful.\n\t\tA [NodePath] is made up of a list of node names, a list of \"subnode\" (resource) names, and the name of a property in the final node or resource.",
      "methods": [
        {
          "name": "NodePath",
          "description": "Create a NodePath from a string, e.g. \"Path2D/PathFollow2D/Sprite:texture:size\". A path is absolute if it starts with a slash. Absolute paths are only valid in the global scene tree, not within individual scenes. In a relative path, [code]\".\"[/code] and [code]\"..\"[/code] indicate the current node and its parent.",
          "return_type": "NodePath",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_name",
          "description": "Get the node name indicated by [code]idx[/code] (0 to [method get_name_count])",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_name_count",
          "description": "Get the number of node names which make up the path.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_property",
          "description": "Get the path's property name, or an empty string if the path doesn't have a property.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_subname",
          "description": "Get the resource name indicated by [code]idx[/code] (0 to [method get_subname_count])",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_subname_count",
          "description": "Get the number of resource names in the path.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_absolute",
          "description": "Return true if the node path is absolute (not relative).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_empty",
          "description": "Return true if the node path is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "KinematicBody": {
      "name": "KinematicBody",
      "inherits": "PhysicsBody",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Kinematic body 3D node.",
      "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:\n\t\tSimulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\tKinematic Characters: KinematicBody also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.",
      "methods": [
        {
          "name": "get_floor_velocity",
          "qualifiers": "const",
          "description": "Returns the velocity of the floor. Only updates when calling [method move_and_slide].",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_safe_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_slide_collision",
          "description": "Returns a [KinematicCollision], which contains information about a collision that occured during the last [method move_and_slide] call. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count]()-1).",
          "return_type": "KinematicCollision",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "slide_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_slide_count",
          "qualifiers": "const",
          "description": "Returns the number of times the body collided and changed direction during the last call to [method move_and_slide].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_on_ceiling",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on the ceiling. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_on_floor",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on the floor. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_on_wall",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the body is on a wall. Only updates when calling [method move_and_slide].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "move_and_collide",
          "description": "Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision], which contains information about the collision.",
          "return_type": "KinematicCollision",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rel_vec",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "move_and_slide",
          "description": "Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [KinematicBody] or [RigidBody], it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.\n\t\t\t\t[code]linear_velocity[/code] is a value in pixels per second. Unlike in for example [method move_and_collide], you should [i]not[/i] multiply it with [code]delta[/code] — this is done by the method.\n\t\t\t\t[code]floor_normal[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector2(0, 0)[/code], everything is considered a wall. This is useful for topdown games.\n\t\t\t\tIf the body is standing on a slope and the horizontal speed (relative to the floor's speed) goes below [code]slope_stop_min_velocity[/code], the body will stop completely. This prevents the body from sliding down slopes when you include gravity in [code]linear_velocity[/code]. When set to lower values, the body will not be able to stand still on steep slopes.\n\t\t\t\tIf the body collides, it will change direction a maximum of [code]max_bounces[/code] times before it stops.\n\t\t\t\t[code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.\n\t\t\t\tReturns the movement that remained when the body stopped. To get more detailed information about collisions that occured, use [method get_slide_collision].",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_velocity",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "floor_normal",
              "type": "Vector3",
              "default_value": "Vector3( 0, 0, 0 )"
            },
            {
              "index": "2",
              "name": "slope_stop_min_velocity",
              "type": "float",
              "default_value": "0.05"
            },
            {
              "index": "3",
              "name": "max_slides",
              "type": "int",
              "default_value": "4"
            },
            {
              "index": "4",
              "name": "floor_max_angle",
              "type": "float",
              "default_value": "0.785398"
            }
          ]
        },
        {
          "name": "set_safe_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "pixels",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "test_move",
          "description": "Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rel_vec",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "collision/safe_margin",
          "type": "float",
          "setter": "set_safe_margin",
          "getter": "get_safe_margin",
          "description": "If the body is at least this close to another body, this body will consider them to be colliding."
        }
      ],
      "theme_properties": []
    },
    "ARVRServer": {
      "name": "ARVRServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "This is our AR/VR Server.",
      "description": "The AR/VR Server is the heart of our AR/VR solution and handles all the processing.",
      "methods": [
        {
          "name": "add_interface",
          "description": "Mostly exposed for GDNative based interfaces, this is called to register an available interface with the AR/VR server.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "interface",
              "type": "ARVRInterface",
              "default_value": ""
            }
          ]
        },
        {
          "name": "center_on_hmd",
          "description": "This is a really important function to understand correctly. AR and VR platforms all handle positioning slightly differently.\n\t\t\t\tFor platforms that do not offer spatial tracking our origin point (0,0,0) is the location of our HMD but you have little control over the direction the player is facing in the real world.\n\t\t\t\tFor platforms that do offer spatial tracking our origin point depends very much on the system. For OpenVR our origin point is usually the center of the tracking space, on the ground. For other platforms its often the location of the tracking camera.\n\t\t\t\tThis method allows you to center our tracker on the location of the HMD, it will take the current location of the HMD and use that to adjust all our tracking data in essence realigning the real world to your players current position in your game world.\n\t\t\t\tFor this method to produce usable results tracking information should be available and this often takes a few frames after starting your game.\n\t\t\t\tYou should call this method after a few seconds have passed, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, and when implementing a teleport mechanism.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ignore_tilt",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "keep_height",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_interface",
          "qualifiers": "const",
          "description": "Find an interface by its name. Say that you're making a game that uses specific capabilities of an AR/VR platform you can find the interface for that platform by name and initialize it.",
          "return_type": "ARVRInterface",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_interface",
          "qualifiers": "const",
          "description": "Get the interface registered at a given index in our list of interfaces.",
          "return_type": "ARVRInterface",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_interface_count",
          "qualifiers": "const",
          "description": "Get the number of interfaces currently registered with the AR/VR server. If you're game supports multiple AR/VR platforms you can look throught the available interface and either present the user with a selection or simply try an initialize each interface and use the first one that returns true.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_reference_frame",
          "qualifiers": "const",
          "description": "Gets our reference frame transform, mostly used internally and exposed for GDNative build interfaces.",
          "return_type": "Transform",
          "arguments": []
        },
        {
          "name": "get_tracker",
          "qualifiers": "const",
          "description": "Get the positional tracker at the given ID.",
          "return_type": "ARVRPositionalTracker",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tracker_count",
          "qualifiers": "const",
          "description": "Get the number of trackers currently registered.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_world_scale",
          "qualifiers": "const",
          "description": "Returns our world scale (see ARVROrigin for more information).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "remove_interface",
          "description": "Removes a registered interface, again exposed mostly for GDNative based interfaces.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "interface",
              "type": "ARVRInterface",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_primary_interface",
          "description": "Changes the primary interface to the specified interface. Again mostly exposed for GDNative interfaces.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "interface",
              "type": "ARVRInterface",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_world_scale",
          "description": "Changing the world scale, see the ARVROrigin documentation for more information.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "arg0",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "interface_added",
          "description": "Signal send when a new interface has been added.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "interface_removed",
          "description": "Signal send when an interface is removed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tracker_added",
          "description": "Signal send when a new tracker has been added. If you don't use a fixed number of controllers or if you're using ARVRAnchors for an AR solution it is important to react to this signal and add the appropriate ARVRController or ARVRAnchor node related to this new tracker.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tracker_removed",
          "description": "Signal send when a tracker is removed, you should remove any ARVRController or ARVRAnchor points if applicable. This is not mandatory, the nodes simply become inactive and will be made active again when a new tracker becomes available (i.e. a new controller is switched on that takes the place of the previous one).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "TRACKER_CONTROLLER",
          "value": "1",
          "description": "Our tracker tracks the location of a controller."
        },
        {
          "name": "TRACKER_BASESTATION",
          "value": "2",
          "description": "Our tracker tracks the location of a base station."
        },
        {
          "name": "TRACKER_ANCHOR",
          "value": "4",
          "description": "Our tracker tracks the location and size of an AR anchor."
        },
        {
          "name": "TRACKER_UNKNOWN",
          "value": "128",
          "description": "Used internally if we haven't set the tracker type yet."
        },
        {
          "name": "TRACKER_ANY_KNOWN",
          "value": "127",
          "description": "Used internally to filter trackers of any known type."
        },
        {
          "name": "TRACKER_ANY",
          "value": "255",
          "description": "Used internally to select all trackers."
        }
      ],
      "properties": [
        {
          "name": "world_scale",
          "type": "float",
          "setter": "set_world_scale",
          "getter": "get_world_scale",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PacketPeer": {
      "name": "PacketPeer",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Abstraction and base class for packet-based protocols.",
      "description": "PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low level bytes or having to worry about network ordering.",
      "methods": [
        {
          "name": "get_available_packet_count",
          "qualifiers": "const",
          "description": "Return the number of packets currently available in the ring-buffer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_packet",
          "qualifiers": "const",
          "description": "Get a raw packet.",
          "return_type": "PoolByteArray",
          "arguments": []
        },
        {
          "name": "get_packet_error",
          "qualifiers": "const",
          "description": "Return the error state of the last packet received (via [method get_packet] and [method get_var]).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_var",
          "qualifiers": "const",
          "description": "Get a Variant.",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "is_object_decoding_allowed",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "put_packet",
          "description": "Send a raw packet.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "buffer",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "put_var",
          "description": "Send a Variant as a packet.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_allow_object_decoding",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Light2D": {
      "name": "Light2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Casts light in a 2D environment.",
      "description": "Casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related). Note that Light2D can be used as a mask.",
      "methods": [
        {
          "name": "get_color",
          "qualifiers": "const",
          "description": "Return the color of the Light2D.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_energy",
          "qualifiers": "const",
          "description": "Return the energy value of the Light2D.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_height",
          "qualifiers": "const",
          "description": "Return the height of the Light2D. Used with 2D normalmapping.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_item_cull_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_shadow_cull_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_layer_range_max",
          "qualifiers": "const",
          "description": "Set the maximum layer value of objects of the scene that are affected by the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_layer_range_min",
          "qualifiers": "const",
          "description": "Get the minimum layer value of objects of the scene that are affected by the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mode",
          "qualifiers": "const",
          "description": "Return the current mode set to the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shadow_buffer_size",
          "qualifiers": "const",
          "description": "Return the shadow buffer size.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shadow_color",
          "qualifiers": "const",
          "description": "Return the color of casted shadows for this Light2D.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_shadow_filter",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shadow_gradient_length",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_shadow_smooth",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Return the texture of the Light2D.",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_texture_offset",
          "qualifiers": "const",
          "description": "Return the offset of the light texture.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_texture_scale",
          "qualifiers": "const",
          "description": "Return the scale value of the light texture.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_z_range_max",
          "qualifiers": "const",
          "description": "Get the maximum Z value that objects of the scene can be in order to be affected by the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_z_range_min",
          "qualifiers": "const",
          "description": "Get the minimum Z value that objects of the scene have to be in order to be affected by the Light2D.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_editor_only",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_enabled",
          "qualifiers": "const",
          "description": "Return true if the Light2D is enabled, false if it is not.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shadow_enabled",
          "qualifiers": "const",
          "description": "Return true if shadow casting is enabled for this Light2D, else return false.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_color",
          "description": "Set the color of the Light2D.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_editor_only",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "editor_only",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_enabled",
          "description": "Switches the Light2D on or off, depending on the 'enabled' parameter.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_energy",
          "description": "Set the energy value of the Light2D. The bigger the value, the stronger the light.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "energy",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_height",
          "description": "Set the height of the Light2D. Used with 2D normalmapping.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_cull_mask",
          "description": "Set the item mask of the Light2D to 'item_mask' value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item_cull_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_shadow_cull_mask",
          "description": "Set the item shadow mask to 'item_shadow_mask' value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "item_shadow_cull_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_range_max",
          "description": "Set the maximum layer value of objects of the scene that are affected by the Light2D.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer_range_min",
          "description": "Set the minimum layer value of objects of the scene that are affected by the Light2D.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mode",
          "description": "Set the behaviour mode of the Light2D. Use constants defined in the constants section.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Light2D.Mode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_buffer_size",
          "description": "Set the shadow buffer size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_color",
          "description": "Set the color of casted shadows for this Light2D.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shadow_color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_enabled",
          "description": "Enable or disable shadows casting from this Light2D according to the 'enabled' parameter.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_filter",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filter",
              "type": "int",
              "enum": "Light2D.ShadowFilter",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_gradient_length",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "multiplier",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_smooth",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "smooth",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "Set the texture of the Light2D.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_offset",
          "description": "Set the offset of the light texture.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_scale",
          "description": "Set the scale value of the light texture.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_z_range_max",
          "description": "Set the maximum Z value that objects of the scene can be in order to be affected by the Light2D.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_z_range_min",
          "description": "Set the minimum Z value that objects of the scene have to be in order to be affected by the Light2D.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MODE_ADD",
          "value": "0",
          "description": "Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behaviour of a light."
        },
        {
          "name": "MODE_SUB",
          "value": "1",
          "description": "Subtracts the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect."
        },
        {
          "name": "MODE_MIX",
          "value": "2",
          "description": "Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation."
        },
        {
          "name": "MODE_MASK",
          "value": "3",
          "description": "The light texture of the Light2D is used as a mask, hiding or revealing parts of the screen underneath depending on the value of each pixel of the light (mask) texture."
        },
        {
          "name": "SHADOW_FILTER_NONE",
          "value": "0",
          "description": "No filter applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF3",
          "value": "1",
          "description": "Percentage closer filtering (3 samples) applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF5",
          "value": "2",
          "description": "Percentage closer filtering (5 samples) applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF7",
          "value": "3",
          "description": "Percentage closer filtering (7 samples) applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF9",
          "value": "4",
          "description": "Percentage closer filtering (9 samples) applies to the shadow map. See [method shadow_filter]."
        },
        {
          "name": "SHADOW_FILTER_PCF13",
          "value": "5",
          "description": "Percentage closer filtering (13 samples) applies to the shadow map. See [method shadow_filter]."
        }
      ],
      "properties": [
        {
          "name": "color",
          "type": "Color",
          "setter": "set_color",
          "getter": "get_color",
          "description": "The Light2D's [Color]."
        },
        {
          "name": "editor_only",
          "type": "bool",
          "setter": "set_editor_only",
          "getter": "is_editor_only",
          "description": "If [code]true[/code] Light2D will only appear when editing the scene. Default value: [code]false[/code]."
        },
        {
          "name": "enabled",
          "type": "bool",
          "setter": "set_enabled",
          "getter": "is_enabled",
          "description": "If [code]true[/code] Light2D will emit light. Default value: [code]true[/code]."
        },
        {
          "name": "energy",
          "type": "float",
          "setter": "set_energy",
          "getter": "get_energy",
          "description": "The Light2D's energy value. The larger the value, the stronger the light."
        },
        {
          "name": "mode",
          "type": "int",
          "setter": "set_mode",
          "getter": "get_mode",
          "enum": "Light2D.Mode",
          "description": "The Light2D's mode. See MODE_* constants for values."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_texture_offset",
          "getter": "get_texture_offset",
          "description": "The offset of the Light2D's [code]texture[/code]."
        },
        {
          "name": "range_height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "The height of the Light2D. Used with 2D normal mapping."
        },
        {
          "name": "range_item_cull_mask",
          "type": "int",
          "setter": "set_item_cull_mask",
          "getter": "get_item_cull_mask",
          "description": "The layer mask. Only objects with a matching mask will be affected by the Light2D."
        },
        {
          "name": "range_layer_max",
          "type": "int",
          "setter": "set_layer_range_max",
          "getter": "get_layer_range_max",
          "description": "Maximum layer value of objects that are affected by the Light2D. Default value: [code]0[/code]."
        },
        {
          "name": "range_layer_min",
          "type": "int",
          "setter": "set_layer_range_min",
          "getter": "get_layer_range_min",
          "description": "Minimum layer value of objects that are affected by the Light2D. Default value: [code]0[/code]."
        },
        {
          "name": "range_z_max",
          "type": "int",
          "setter": "set_z_range_max",
          "getter": "get_z_range_max",
          "description": "Maximum [code]Z[/code] value of objects that are affected by the Light2D. Default value: [code]1024[/code]."
        },
        {
          "name": "range_z_min",
          "type": "int",
          "setter": "set_z_range_min",
          "getter": "get_z_range_min",
          "description": "Minimum [code]z[/code] value of objects that are affected by the Light2D. Default value: [code]-1024[/code]."
        },
        {
          "name": "shadow_buffer_size",
          "type": "int",
          "setter": "set_shadow_buffer_size",
          "getter": "get_shadow_buffer_size",
          "description": "Shadow buffer size. Default value: [code]2048[/code]."
        },
        {
          "name": "shadow_color",
          "type": "Color",
          "setter": "set_shadow_color",
          "getter": "get_shadow_color",
          "description": "[Color] of shadows cast by the Light2D."
        },
        {
          "name": "shadow_enabled",
          "type": "bool",
          "setter": "set_shadow_enabled",
          "getter": "is_shadow_enabled",
          "description": "If [code]true[/code] the Light2D will cast shadows. Default value: [code]false[/code]."
        },
        {
          "name": "shadow_filter",
          "type": "int",
          "setter": "set_shadow_filter",
          "getter": "get_shadow_filter",
          "enum": "Light2D.ShadowFilter",
          "description": "Shadow filter type. Use SHADOW_FILTER_* constants to set [code]shadow_filter[/code]. Default value: [code]None[/code]."
        },
        {
          "name": "shadow_filter_smooth",
          "type": "float",
          "setter": "set_shadow_smooth",
          "getter": "get_shadow_smooth",
          "description": "Smoothing value for shadows."
        },
        {
          "name": "shadow_gradient_length",
          "type": "float",
          "setter": "set_shadow_gradient_length",
          "getter": "get_shadow_gradient_length",
          "description": "Smooth shadow gradient length."
        },
        {
          "name": "shadow_item_cull_mask",
          "type": "int",
          "setter": "set_item_shadow_cull_mask",
          "getter": "get_item_shadow_cull_mask",
          "description": "The shadow mask. Used with [LightOccluder2D] to cast shadows. Only occluders with a matching shadow mask will cast shadows."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "[Texture] used for the Light2D's appearance."
        },
        {
          "name": "texture_scale",
          "type": "float",
          "setter": "set_texture_scale",
          "getter": "get_texture_scale",
          "description": "The [code]texture[/code]'s scale factor."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptSubCall": {
      "name": "VisualScriptSubCall",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "_subcall",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "arguments",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "GeometryInstance": {
      "name": "GeometryInstance",
      "inherits": "VisualInstance",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base node for geometry based visual instances.",
      "description": "Base node for geometry based visual instances. Shares some common functionality like visibility and custom materials.",
      "methods": [
        {
          "name": "get_cast_shadows_setting",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_extra_cull_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_flag",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "GeometryInstance.Flags",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_lod_max_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_lod_max_hysteresis",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_lod_min_distance",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_lod_min_hysteresis",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_material_override",
          "qualifiers": "const",
          "description": "Return the material override for the whole geometry.",
          "return_type": "Material",
          "arguments": []
        },
        {
          "name": "set_cast_shadows_setting",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shadow_casting_setting",
              "type": "int",
              "enum": "GeometryInstance.ShadowCastingSetting",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_extra_cull_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "GeometryInstance.Flags",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lod_max_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lod_max_hysteresis",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lod_min_distance",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lod_min_hysteresis",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_material_override",
          "description": "Set the material override for the whole geometry.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SHADOW_CASTING_SETTING_OFF",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADOW_CASTING_SETTING_ON",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHADOW_CASTING_SETTING_DOUBLE_SIDED",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHADOW_CASTING_SETTING_SHADOWS_ONLY",
          "value": "3",
          "description": ""
        },
        {
          "name": "FLAG_USE_BAKED_LIGHT",
          "value": "0",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "1",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "cast_shadow",
          "type": "int",
          "setter": "set_cast_shadows_setting",
          "getter": "get_cast_shadows_setting",
          "enum": "GeometryInstance.ShadowCastingSetting",
          "description": ""
        },
        {
          "name": "extra_cull_margin",
          "type": "float",
          "setter": "set_extra_cull_margin",
          "getter": "get_extra_cull_margin",
          "description": ""
        },
        {
          "name": "lod_max_distance",
          "type": "float",
          "setter": "set_lod_max_distance",
          "getter": "get_lod_max_distance",
          "description": ""
        },
        {
          "name": "lod_max_hysteresis",
          "type": "float",
          "setter": "set_lod_max_hysteresis",
          "getter": "get_lod_max_hysteresis",
          "description": ""
        },
        {
          "name": "lod_min_distance",
          "type": "float",
          "setter": "set_lod_min_distance",
          "getter": "get_lod_min_distance",
          "description": ""
        },
        {
          "name": "lod_min_hysteresis",
          "type": "float",
          "setter": "set_lod_min_hysteresis",
          "getter": "get_lod_min_hysteresis",
          "description": ""
        },
        {
          "name": "material_override",
          "type": "Material",
          "setter": "set_material_override",
          "getter": "get_material_override",
          "description": ""
        },
        {
          "name": "use_in_baked_light",
          "type": "bool",
          "setter": "set_flag",
          "getter": "get_flag",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Area2D": {
      "name": "Area2D",
      "inherits": "CollisionObject2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "2D area for detection and 2D physics influence.",
      "description": "2D area that detects [CollisionObject2D] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).",
      "methods": [
        {
          "name": "get_angular_damp",
          "qualifiers": "const",
          "description": "Return the angular damp rate.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_audio_bus_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "Return the physics layer this area is in.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the layer mask. Describes whether other areas will collide with this one on the given layer.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "Return the physics layers this area will scan to determine collisions.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask. Describes whether this area will collide with others on the given layer.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_gravity",
          "qualifiers": "const",
          "description": "Return the gravity intensity.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_distance_scale",
          "qualifiers": "const",
          "description": "Return the falloff factor for point gravity.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_vector",
          "qualifiers": "const",
          "description": "Return the gravity vector. If gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_linear_damp",
          "qualifiers": "const",
          "description": "Return the linear damp rate.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_overlapping_areas",
          "qualifiers": "const",
          "description": "Returns a list of intersecting [Area2D]\\ s.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_overlapping_bodies",
          "qualifiers": "const",
          "description": "Returns a list of intersecting [PhysicsBody2D]\\ s.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_priority",
          "qualifiers": "const",
          "description": "Return the processing order of this area.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_space_override_mode",
          "qualifiers": "const",
          "description": "Return the space override mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_gravity_a_point",
          "qualifiers": "const",
          "description": "Return whether gravity is a point. A point gravity will attract objects towards it, as opposed to a gravity vector, which moves them in a given direction.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_monitorable",
          "qualifiers": "const",
          "description": "Return whether this area can be detected by other, monitoring, areas.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_monitoring",
          "qualifiers": "const",
          "description": "Return whether this area detects bodies/areas entering/exiting it.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_overriding_audio_bus",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "overlaps_area",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given area overlaps the Area2D.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "overlaps_body",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given body overlaps the Area2D.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_angular_damp",
          "description": "Set the rate at which objects stop spinning in this area, if there are not any other forces making it spin. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.\n\t\t\t\tIn practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_audio_bus_name",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_audio_bus_override",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer",
          "description": "Set the physics layers this area is in.\n\t\t\t\tCollidable objects can exist in any of 32 different layers. These layers are not visual, but more of a tagging system instead. A collidable can use these layers/tags to select with which objects it can collide, using [method set_collision_mask].\n\t\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collision_layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "Set the physics layers this area can scan for collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collision_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity",
          "description": "Set the gravity intensity. This is useful to alter the force of gravity without altering its direction.\n\t\t\t\tThis value multiplies the gravity vector, whether it is the given vector ([method set_gravity_vector]), or a calculated one (when using a center of gravity).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gravity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_distance_scale",
          "description": "Set the falloff factor for point gravity. The greater this value is, the faster the strength of gravity decreases with the square of distance.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_is_point",
          "description": "When overriding space parameters, this method sets whether this area has a center of gravity. To set/get the location of the center of gravity, use [method set_gravity_vector]/[method get_gravity_vector].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_vector",
          "description": "Set the gravity vector. This vector does not have to be normalized.\n\t\t\t\tIf gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_damp",
          "description": "Set the rate at which objects stop moving in this area, if there are not any other forces moving it. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.\n\t\t\t\tIn practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_monitorable",
          "description": "Set whether this area can be detected by other, monitoring, areas. Only areas need to be marked as monitorable. Bodies are always so.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_monitoring",
          "description": "Set whether this area can detect bodies/areas entering/exiting it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_priority",
          "description": "Set the order in which the area is processed. Greater values mean the area gets processed first. This is useful for areas which have a space override different from AREA_SPACE_OVERRIDE_DISABLED or AREA_SPACE_OVERRIDE_COMBINE, as they replace values, and are thus order-dependent.\n\t\t\t\tAreas with the same priority value get evaluated in an unpredictable order, and should be differentiated if evaluation order is to be important.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "priority",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_space_override_mode",
          "description": "Set the space override mode. This mode controls how an area affects gravity and damp.\n\t\t\t\tAREA_SPACE_OVERRIDE_DISABLED: This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.\n\t\t\t\tAREA_SPACE_OVERRIDE_COMBINE: This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.\n\t\t\t\tAREA_SPACE_OVERRIDE_COMBINE_REPLACE: This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.\n\t\t\t\tAREA_SPACE_OVERRIDE_REPLACE: This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.\n\t\t\t\tAREA_SPACE_OVERRIDE_REPLACE_COMBINE: This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "space_override_mode",
              "type": "int",
              "enum": "Area2D.SpaceOverride",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "area_entered",
          "description": "Emitted when another area enters.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_exited",
          "description": "Emitted when another area exits.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_shape_entered",
          "description": "Emitted when another area enters, reporting which shapes overlapped.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_shape_exited",
          "description": "Emitted when another area exits, reporting which shapes were overlapping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_entered",
          "description": "Emitted when a [PhysicsBody2D] object enters.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exited",
          "description": "Emitted when a [PhysicsBody2D] object exits.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_entered",
          "description": "Emitted when a [PhysicsBody2D] object enters, reporting which shapes overlapped.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_exited",
          "description": "Emitted when a [PhysicsBody2D] object exits, reporting which shapes were overlapping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "description": "This area does not affect gravity/damping."
        },
        {
          "name": "SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order)."
        },
        {
          "name": "SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order), ignoring any lower priority areas."
        },
        {
          "name": "SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "description": "This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas."
        },
        {
          "name": "SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "description": "This area replaces any gravity/damping calculated so far (in [code]priority[/code] order), but keeps calculating the rest of the areas."
        }
      ],
      "properties": [
        {
          "name": "angular_damp",
          "type": "float",
          "setter": "set_angular_damp",
          "getter": "get_angular_damp",
          "description": "The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping)."
        },
        {
          "name": "audio_bus_name",
          "type": "String",
          "setter": "set_audio_bus_name",
          "getter": "get_audio_bus_name",
          "description": "The name of the area's audio bus."
        },
        {
          "name": "audio_bus_override",
          "type": "bool",
          "setter": "set_audio_bus_override",
          "getter": "is_overriding_audio_bus",
          "description": "If [code]true[/code] the area's audio bus overrides the default audio bus. Default value: [code]false[/code]."
        },
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [code]collision_mask[/code]."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The physics layers this area scans to determine collision detection."
        },
        {
          "name": "gravity",
          "type": "float",
          "setter": "set_gravity",
          "getter": "get_gravity",
          "description": "The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction."
        },
        {
          "name": "gravity_distance_scale",
          "type": "float",
          "setter": "set_gravity_distance_scale",
          "getter": "get_gravity_distance_scale",
          "description": "The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance."
        },
        {
          "name": "gravity_point",
          "type": "bool",
          "setter": "set_gravity_is_point",
          "getter": "is_gravity_a_point",
          "description": "If [code]true[/code] gravity is calculated from a point (set via [code]gravity_vec[/code]). Also see [code]space_override[/code]. Default value: [code]false[/code]."
        },
        {
          "name": "gravity_vec",
          "type": "Vector2",
          "setter": "set_gravity_vector",
          "getter": "get_gravity_vector",
          "description": "The area's gravity vector (not normalized). If gravity is a point (see [method is_gravity_a_point]), this will be the point of attraction."
        },
        {
          "name": "linear_damp",
          "type": "float",
          "setter": "set_linear_damp",
          "getter": "get_linear_damp",
          "description": "The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping)."
        },
        {
          "name": "monitorable",
          "type": "bool",
          "setter": "set_monitorable",
          "getter": "is_monitorable",
          "description": "If [code]true[/code] other monitoring areas can detect this area. Default value: [code]true[/code]."
        },
        {
          "name": "monitoring",
          "type": "bool",
          "setter": "set_monitoring",
          "getter": "is_monitoring",
          "description": "If [code]true[/code] the area detects bodies or areas entering and exiting it. Default value: [code]true[/code]."
        },
        {
          "name": "priority",
          "type": "float",
          "setter": "set_priority",
          "getter": "get_priority",
          "description": "The area's priority. Higher priority areas are processed first. Default value: 0."
        },
        {
          "name": "space_override",
          "type": "int",
          "setter": "set_space_override_mode",
          "getter": "get_space_override_mode",
          "enum": "Area2D.SpaceOverride",
          "description": "Override mode for gravity and damping calculations within this area. See the SPACE_OVERRIDE_* constants for values."
        }
      ],
      "theme_properties": []
    },
    "CanvasItem": {
      "name": "CanvasItem",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class of anything 2D.",
      "description": "Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by [Control], for anything GUI related, and by [Node2D] for anything 2D engine related.\n\t\tAny CanvasItem can draw. For this, the \"update\" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though.\n\t\tCanvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though).\n\t\tCanvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode.\n\t\tUltimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.",
      "methods": [
        {
          "name": "_draw",
          "qualifiers": "virtual",
          "description": "Called (if exists) to draw the canvas item.",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "draw_char",
          "description": "Draw a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "char",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "next",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            }
          ]
        },
        {
          "name": "draw_circle",
          "description": "Draw a colored circle.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "radius",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_colored_polygon",
          "description": "Draw a colored polygon of any amount of points, convex or concave.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "3",
              "name": "texture",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "5",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_line",
          "description": "Draw a line from a 2D point to another, with a given color and width. It can be optionally antialiased.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "4",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_polygon",
          "description": "Draw a polygon of any amount of points, convex or concave.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": "PoolVector2Array(  )"
            },
            {
              "index": "3",
              "name": "texture",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "5",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_polyline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "3",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_polyline_colors",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "3",
              "name": "antialiased",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "draw_primitive",
          "description": "Draw a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "points",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "colors",
              "type": "PoolColorArray",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "uvs",
              "type": "PoolVector2Array",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "texture",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "4",
              "name": "width",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_rect",
          "description": "Draw a colored rectangle.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "color",
              "type": "Color",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "filled",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "draw_set_transform",
          "description": "Set a custom transform for drawing. Anything drawn afterwards will be transformed by this.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rotation",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_set_transform_matrix",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "xform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_string",
          "description": "Draw a string using a custom font.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "clip_w",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "draw_style_box",
          "description": "Draw a styled rectangle.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "style_box",
              "type": "StyleBox",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "draw_texture",
          "description": "Draw a texture at a given position.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "3",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_texture_rect",
          "description": "Draw a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "tile",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "draw_texture_rect_region",
          "description": "Draw a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "src_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "modulate",
              "type": "Color",
              "default_value": "Color( 1, 1, 1, 1 )"
            },
            {
              "index": "4",
              "name": "transpose",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "5",
              "name": "normal_map",
              "type": "Texture",
              "default_value": "null"
            },
            {
              "index": "6",
              "name": "clip_uv",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "edit_get_state",
          "qualifiers": "const",
          "description": "Used for editing, returns an opaque value representing the transform state.",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "edit_rotate",
          "description": "Used for editing, handle rotation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "edit_set_rect",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "edit_set_state",
          "description": "Set the transform state of this CanvasItem. For [Node2D], this is an [Array] with (in order) a [Vector2] for position, a float for rotation (radians) and another [Vector2] for scale. For [Control] this is a [Rect2] with the position and size.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "state",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_canvas",
          "qualifiers": "const",
          "description": "Return the [RID] of the [World2D] canvas where this item is in.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_canvas_item",
          "qualifiers": "const",
          "description": "Return the canvas item RID used by [VisualServer] for this item.",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_canvas_transform",
          "qualifiers": "const",
          "description": "Get the transform matrix of this item's canvas.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_global_mouse_position",
          "qualifiers": "const",
          "description": "Get the global position of the mouse.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_global_transform",
          "qualifiers": "const",
          "description": "Get the global transform matrix of this item.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_global_transform_with_canvas",
          "qualifiers": "const",
          "description": "Get the global transform matrix of this item in relation to the canvas.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_item_and_children_rect",
          "qualifiers": "const",
          "description": "Get a [Rect2] with the boundaries of this item and its children.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_item_rect",
          "qualifiers": "const",
          "description": "Return a rect containing the editable boundaries of the item.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_light_mask",
          "qualifiers": "const",
          "description": "Get this item's light mask number.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_local_mouse_position",
          "qualifiers": "const",
          "description": "Get the mouse position relative to this item's position.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_material",
          "qualifiers": "const",
          "description": "Get the material of this item.",
          "return_type": "Material",
          "arguments": []
        },
        {
          "name": "get_modulate",
          "qualifiers": "const",
          "description": "Get the modulate of the CanvasItem, which affects children items too.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_self_modulate",
          "qualifiers": "const",
          "description": "Get the self-modulate of the CanvasItem.",
          "return_type": "Color",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Get the transform matrix of this item.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_use_parent_material",
          "qualifiers": "const",
          "description": "Get whether this item uses its parent's material.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_viewport_rect",
          "qualifiers": "const",
          "description": "Get the viewport's boundaries as a [Rect2].",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_viewport_transform",
          "qualifiers": "const",
          "description": "Get this item's transform in relation to the viewport.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_world_2d",
          "qualifiers": "const",
          "description": "Get the [World2D] where this item is in.",
          "return_type": "World2D",
          "arguments": []
        },
        {
          "name": "hide",
          "description": "Hide the CanvasItem currently visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_draw_behind_parent_enabled",
          "qualifiers": "const",
          "description": "Return whether the item is drawn behind its parent.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_local_transform_notification_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_set_as_toplevel",
          "qualifiers": "const",
          "description": "Return if set as toplevel. See [method set_as_toplevel].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_transform_notification_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_visible",
          "qualifiers": "const",
          "description": "Return true if this CanvasItem is visible. It may be invisible because itself or a parent canvas item is hidden.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_visible_in_tree",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "make_canvas_position_local",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "screen_point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_input_local",
          "qualifiers": "const",
          "description": "",
          "return_type": "InputEvent",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_as_toplevel",
          "description": "Set as top level. This means that it will not inherit transform from parent canvas items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_behind_parent",
          "description": "Set whether the canvas item is drawn behind its parent.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_light_mask",
          "description": "Set the ligtht mask number of this item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_material",
          "description": "Set the material of this item.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_modulate",
          "description": "Set the modulate of the CanvasItem. This [i]affects[/i] the modulation of children items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "modulate",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_notify_local_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_notify_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_self_modulate",
          "description": "Set the self-modulate of the CanvasItem. This does not affect the modulation of children items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "self_modulate",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_parent_material",
          "description": "Set whether or not this item should use its parent's material.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visible",
          "description": "Set whether this item should be visible or not.\n\t\t\t\tNote that a hidden CanvasItem will make all children hidden too, so no matter what is set here this item won't be shown if its parent or grandparents nodes are hidden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "show",
          "description": "Show the CanvasItem currently hidden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "update",
          "description": "Queue the CanvasItem for update. [code]NOTIFICATION_DRAW[/code] will be called on idle time to request redraw.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "draw",
          "description": "Emitted when the CanvasItem must redraw. This can only be connected realtime, as deferred will not allow drawing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "hide",
          "description": "Emitted when becoming hidden.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "item_rect_changed",
          "description": "Emitted when the item rect has changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "visibility_changed",
          "description": "Emitted when the visibility (hidden/visible) changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "BLEND_MODE_MIX",
          "value": "0",
          "description": "Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value."
        },
        {
          "name": "BLEND_MODE_ADD",
          "value": "1",
          "description": "Additive blending mode."
        },
        {
          "name": "BLEND_MODE_SUB",
          "value": "2",
          "description": "Subtractive blending mode."
        },
        {
          "name": "BLEND_MODE_MUL",
          "value": "3",
          "description": "Multiplicative blending mode."
        },
        {
          "name": "BLEND_MODE_PREMULT_ALPHA",
          "value": "4",
          "description": "Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value."
        },
        {
          "name": "NOTIFICATION_DRAW",
          "value": "30",
          "enum": "",
          "description": "CanvasItem is requested to draw."
        },
        {
          "name": "NOTIFICATION_VISIBILITY_CHANGED",
          "value": "31",
          "enum": "",
          "description": "Canvas item visibility has changed."
        },
        {
          "name": "NOTIFICATION_ENTER_CANVAS",
          "value": "32",
          "enum": "",
          "description": "Canvas item has entered the canvas."
        },
        {
          "name": "NOTIFICATION_EXIT_CANVAS",
          "value": "33",
          "enum": "",
          "description": "Canvas item has exited the canvas."
        },
        {
          "name": "NOTIFICATION_TRANSFORM_CHANGED",
          "value": "29",
          "enum": "",
          "description": "Canvas item transform has changed. Only received if requested."
        }
      ],
      "properties": [
        {
          "name": "light_mask",
          "type": "int",
          "setter": "set_light_mask",
          "getter": "get_light_mask",
          "description": ""
        },
        {
          "name": "material",
          "type": "Material",
          "setter": "set_material",
          "getter": "get_material",
          "description": ""
        },
        {
          "name": "modulate",
          "type": "Color",
          "setter": "set_modulate",
          "getter": "get_modulate",
          "description": ""
        },
        {
          "name": "self_modulate",
          "type": "Color",
          "setter": "set_self_modulate",
          "getter": "get_self_modulate",
          "description": ""
        },
        {
          "name": "show_behind_parent",
          "type": "bool",
          "setter": "set_draw_behind_parent",
          "getter": "is_draw_behind_parent_enabled",
          "description": ""
        },
        {
          "name": "show_on_top",
          "type": "bool",
          "setter": "_set_on_top",
          "getter": "_is_on_top",
          "description": ""
        },
        {
          "name": "use_parent_material",
          "type": "bool",
          "setter": "set_use_parent_material",
          "getter": "get_use_parent_material",
          "description": ""
        },
        {
          "name": "visible",
          "type": "bool",
          "setter": "set_visible",
          "getter": "is_visible",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectStereoEnhance": {
      "name": "AudioEffectStereoEnhance",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_pan_pullout",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_surround",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_time_pullout",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_pan_pullout",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_surround",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_time_pullout",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "pan_pullout",
          "type": "float",
          "setter": "set_pan_pullout",
          "getter": "get_pan_pullout",
          "description": ""
        },
        {
          "name": "surround",
          "type": "float",
          "setter": "set_surround",
          "getter": "get_surround",
          "description": ""
        },
        {
          "name": "time_pullout_ms",
          "type": "float",
          "setter": "set_time_pullout",
          "getter": "get_time_pullout",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectDelay": {
      "name": "AudioEffectDelay",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a Delay audio effect to an Audio bus. Plays input signal back after a period of time.\n\t\tTwo tap delay and feedback options.",
      "description": "Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.",
      "methods": [
        {
          "name": "get_dry",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_feedback_delay_ms",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_feedback_level_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_feedback_lowpass",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tap1_delay_ms",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tap1_level_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tap1_pan",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tap2_delay_ms",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tap2_level_db",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tap2_pan",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "is_feedback_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_tap1_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_tap2_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_dry",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_feedback_active",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_feedback_delay_ms",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_feedback_level_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_feedback_lowpass",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tap1_active",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tap1_delay_ms",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tap1_level_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tap1_pan",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tap2_active",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tap2_delay_ms",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tap2_level_db",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tap2_pan",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "dry",
          "type": "float",
          "setter": "set_dry",
          "getter": "get_dry",
          "description": "Output percent of original sound. At 0, only delayed sounds are output. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "feedback/active",
          "type": "bool",
          "setter": "set_feedback_active",
          "getter": "is_feedback_active",
          "description": "If [code]true[/code] feedback is enabled. Default value: [code]false[/code]."
        },
        {
          "name": "feedback/delay_ms",
          "type": "float",
          "setter": "set_feedback_delay_ms",
          "getter": "get_feedback_delay_ms",
          "description": "Feedback delay time in milliseconds. Default value: [code]340[/code]."
        },
        {
          "name": "feedback/level_db",
          "type": "float",
          "setter": "set_feedback_level_db",
          "getter": "get_feedback_level_db",
          "description": "Sound level for [code]tap1[/code]. Default value: [code]-6 dB[/code]."
        },
        {
          "name": "feedback/lowpass",
          "type": "float",
          "setter": "set_feedback_lowpass",
          "getter": "get_feedback_lowpass",
          "description": "Low-pass filter for feedback. Frequencies below the Low Cut value are filtered out of the source signal. Default value: [code]16000[/code]."
        },
        {
          "name": "tap1/active",
          "type": "bool",
          "setter": "set_tap1_active",
          "getter": "is_tap1_active",
          "description": "If [code]true[/code], [code]tap1[/code] will be enabled. Default value: [code]true[/code]."
        },
        {
          "name": "tap1/delay_ms",
          "type": "float",
          "setter": "set_tap1_delay_ms",
          "getter": "get_tap1_delay_ms",
          "description": "[b]Tap1[/b] delay time in milliseconds. Default value: [code]250ms[/code]."
        },
        {
          "name": "tap1/level_db",
          "type": "float",
          "setter": "set_tap1_level_db",
          "getter": "get_tap1_level_db",
          "description": "Sound level for [code]tap1[/code]. Default value: [code]-6 dB[/code]."
        },
        {
          "name": "tap1/pan",
          "type": "float",
          "setter": "set_tap1_pan",
          "getter": "get_tap1_pan",
          "description": "Pan position for [code]tap1[/code]. Value can range from -1 (fully left) to 1 (fully right). Default value: [code]0.2[/code]."
        },
        {
          "name": "tap2/active",
          "type": "bool",
          "setter": "set_tap2_active",
          "getter": "is_tap2_active",
          "description": "If [code]true[/code], [code]tap2[/code] will be enabled. Default value: [code]true[/code]."
        },
        {
          "name": "tap2/delay_ms",
          "type": "float",
          "setter": "set_tap2_delay_ms",
          "getter": "get_tap2_delay_ms",
          "description": "[b]Tap2[/b] delay time in milliseconds. Default value: [code]500ms[/code]."
        },
        {
          "name": "tap2/level_db",
          "type": "float",
          "setter": "set_tap2_level_db",
          "getter": "get_tap2_level_db",
          "description": "Sound level for [code]tap2[/code]. Default value: [code]-12 dB[/code]."
        },
        {
          "name": "tap2/pan",
          "type": "float",
          "setter": "set_tap2_pan",
          "getter": "get_tap2_pan",
          "description": "Pan position for [code]tap2[/code]. Value can range from -1 (fully left) to 1 (fully right). Default value: [code]-0.4[/code]."
        }
      ],
      "theme_properties": []
    },
    "Directory": {
      "name": "Directory",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Type used to handle the filesystem.",
      "description": "Directory type. It is used to manage directories and their content (not restricted to the project folder).\n\t\tHere is an example on how to iterate through the files of a directory:\n\t\t[codeblock]\n\t\tfunc dir_contents(path):\n\t\t    var dir = Directory.new()\n\t\t    if dir.open(path) == OK:\n\t\t        dir.list_dir_begin()\n\t\t        var file_name = dir.get_next()\n\t\t        while (file_name != \"\"):\n\t\t            if dir.current_is_dir():\n\t\t                print(\"Found directory: \" + file_name)\n\t\t            else:\n\t\t                print(\"Found file: \" + file_name)\n\t\t            file_name = dir.get_next()\n\t\t    else:\n\t\t        print(\"An error occurred when trying to access the path.\")\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "change_dir",
          "description": "Change the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. [code]newdir[/code] or [code]../newdir[/code]), or an absolute path (e.g. [code]/tmp/newdir[/code] or [code]res://somedir/newdir[/code]).\n\t\t\t\tThe method returns one of the error code constants defined in [@Global Scope] (OK or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "todir",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "copy",
          "description": "Copy the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturns one of the error code constants defined in [@Global Scope] (OK, FAILED or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "current_is_dir",
          "qualifiers": "const",
          "description": "Return whether the current item processed with the last [method get_next] call is a directory ([code].[/code] and [code]..[/code] are considered directories).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "dir_exists",
          "description": "Return whether the target directory exists. The argument can be relative to the current directory, or an absolute path.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "file_exists",
          "description": "Return whether the target file exists. The argument can be relative to the current directory, or an absolute path.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_dir",
          "description": "Return the absolute path to the currently opened directory (e.g. [code]res://folder[/code] or [code]C:\\tmp\\folder[/code]).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_current_drive",
          "description": "Returns the currently opened directory's drive index. See [method get_drive] to convert returned index to the name of the drive.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_drive",
          "description": "On Windows, return the name of the drive (partition) passed as an argument (e.g. [code]C:[/code]). On other platforms, or if the requested drive does not existed, the method returns an empty String.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_drive_count",
          "description": "On Windows, return the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_next",
          "description": "Return the next element (file or directory) in the current directory (including [code].[/code] and [code]..[/code], unless [code]skip_navigational[/code] was given to [method list_dir_begin]).\n\t\t\t\tThe name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. [method list_dir_end] would not be mandatory in such a case).",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_space_left",
          "description": "On Unix desktop systems, return the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "list_dir_begin",
          "description": "Initialise the stream used to list all files and directories using the [method get_next] function, closing the current opened stream if needed. Once the stream has been processed, it should typically be closed with [method list_dir_end].\n\t\t\t\tIf you pass [code]skip_navigational[/code], then [code].[/code] and [code]..[/code] would be filtered out.\n\t\t\t\tIf you pass [code]skip_hidden[/code], then hidden files would be filtered out.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "skip_navigational",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "1",
              "name": "skip_hidden",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "list_dir_end",
          "description": "Close the current stream opened with [method list_dir_begin] (whether it has been fully processed with [method get_next] or not does not matter).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "make_dir",
          "description": "Create a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see [method make_dir_recursive]).\n\t\t\t\tThe method returns one of the error code constants defined in [@Global Scope] (OK, FAILED or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "make_dir_recursive",
          "description": "Create a target directory and all necessary intermediate directories in its path, by calling [method make_dir] recursively. The argument can be relative to the current directory, or an absolute path.\n\t\t\t\tReturn one of the error code constants defined in [@Global Scope] (OK, FAILED or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "open",
          "description": "Open an existing directory of the filesystem. The [i]path[/i] argument can be within the project tree ([code]res://folder[/code]), the user directory ([code]user://folder[/code]) or an absolute path of the user filesystem (e.g. [code]/tmp/folder[/code] or [code]C:\\tmp\\folder[/code]).\n\t\t\t\tThe method returns one of the error code constants defined in [@Global Scope] (OK or ERR_*).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Delete the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.\n\t\t\t\tReturn one of the error code constants defined in [@Global Scope] (OK or FAILED).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename",
          "description": "Rename (move) the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturn one of the error code constants defined in [@Global Scope] (OK or FAILED).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Path": {
      "name": "Path",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Container for a [Curve3D].",
      "description": "This class is a container/Node-ification of a [Curve3D], so it can have [Spatial] properties and [Node] info.",
      "methods": [
        {
          "name": "get_curve",
          "qualifiers": "const",
          "description": "Returns the [Curve3D] contained.",
          "return_type": "Curve3D",
          "arguments": []
        },
        {
          "name": "set_curve",
          "description": "Sets the [Curve3D].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "curve",
              "type": "Curve3D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "curve",
          "type": "Curve3D",
          "setter": "set_curve",
          "getter": "get_curve",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "World": {
      "name": "World",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class that has everything pertaining to a world.",
      "description": "Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world.",
      "methods": [
        {
          "name": "get_direct_space_state",
          "description": "",
          "return_type": "PhysicsDirectSpaceState",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_environment",
          "qualifiers": "const",
          "description": "",
          "return_type": "Environment",
          "arguments": []
        },
        {
          "name": "get_fallback_environment",
          "qualifiers": "const",
          "description": "",
          "return_type": "Environment",
          "arguments": []
        },
        {
          "name": "get_scenario",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_space",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "set_environment",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "env",
              "type": "Environment",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fallback_environment",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "env",
              "type": "Environment",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "environment",
          "type": "Environment",
          "setter": "set_environment",
          "getter": "get_environment",
          "description": ""
        },
        {
          "name": "fallback_environment",
          "type": "Environment",
          "setter": "set_fallback_environment",
          "getter": "get_fallback_environment",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "CapsuleMesh": {
      "name": "CapsuleMesh",
      "inherits": "PrimitiveMesh",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Class representing a capsule-shaped [PrimitiveMesh].",
      "description": "Class representing a capsule-shaped [PrimitiveMesh].",
      "methods": [
        {
          "name": "get_mid_height",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_radial_segments",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_radius",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rings",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_mid_height",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mid_height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radial_segments",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "segments",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radius",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radius",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rings",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rings",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "mid_height",
          "type": "float",
          "setter": "set_mid_height",
          "getter": "get_mid_height",
          "description": "Height of the capsule mesh from the center point. Defaults to 1.0."
        },
        {
          "name": "radial_segments",
          "type": "int",
          "setter": "set_radial_segments",
          "getter": "get_radial_segments",
          "description": "Number of radial segments on the capsule mesh. Defaults to 64."
        },
        {
          "name": "radius",
          "type": "float",
          "setter": "set_radius",
          "getter": "get_radius",
          "description": "Radius of the capsule mesh. Defaults to 1.0."
        },
        {
          "name": "rings",
          "type": "int",
          "setter": "set_rings",
          "getter": "get_rings",
          "description": "Number of rings along the height of the capsule. Defaults to 8."
        }
      ],
      "theme_properties": []
    },
    "TCP_Server": {
      "name": "TCP_Server",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "TCP Server.",
      "description": "TCP Server class. Listens to connections on a port and returns a [StreamPeerTCP] when got a connection.",
      "methods": [
        {
          "name": "is_connection_available",
          "qualifiers": "const",
          "description": "Return true if a connection is available for taking.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "listen",
          "description": "Listen on the \"port\" binding to \"bind_address\".\n\t\t\t\tIf \"bind_address\" is set as \"*\" (default), the server will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf \"bind_address\" is set as \"0.0.0.0\" (for IPv4) or \"::\" (for IPv6), the server will listen on all available addresses matching that IP type.\n\t\t\t\tIf \"bind_address\" is set to any valid address (e.g. \"192.168.1.101\", \"::1\", etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bind_address",
              "type": "String",
              "default_value": "\"*\""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop listening.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "take_connection",
          "description": "If a connection is available, return a StreamPeerTCP with the connection/",
          "return_type": "StreamPeerTCP",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ConfigFile": {
      "name": "ConfigFile",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Helper class to handle INI-style files.",
      "description": "This helper class can be used to store [Variant] values on the filesystem using INI-style formatting. The stored values are indentified by a section and a key:\n\t\t[codeblock]\n\t\t[section]\n\t\tsome_key=42\n\t\tstring_example=\"Hello World!\"\n\t\ta_vector=Vector3( 1, 0, 2 )\n\t\t[/codeblock]\n\t\tThe stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.\n\t\tThe following example shows how to parse an INI-style file from the system, read its contents and store new values in it:\n\t\t[codeblock]\n\t\tvar config = ConfigFile.new()\n\t\tvar err = config.load(\"user://settings.cfg\")\n\t\tif err == OK: # if not, something went wrong with the file loading\n\t\t    # Look for the display/width pair, and default to 1024 if missing\n\t\t    var screen_width = get_value(\"display\", \"width\", 1024)\n\t\t    # Store a variable if and only if it hasn't been defined yet\n\t\t    if not config.has_section_key(\"audio\", \"mute\"):\n\t\t        config.set_value(\"audio\", \"mute\", false)\n\t\t    # Save the changes by overwriting the previous file\n\t\t    config.save(\"user://settings.cfg\")\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "erase_section",
          "description": "Deletes the specified section along with all the key-value pairs inside.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_section_keys",
          "qualifiers": "const",
          "description": "Returns an array of all defined key identifiers in the specified section.",
          "return_type": "PoolStringArray",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_sections",
          "qualifiers": "const",
          "description": "Returns an array of all defined section identifiers.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_value",
          "qualifiers": "const",
          "description": "Returns the current value for the specified section and key. If the section and/or the key do not exist, the method returns the value of the optional [code]default[/code] argument, or [code]null[/code] if it is omitted.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "default",
              "type": "Variant",
              "default_value": "null"
            }
          ]
        },
        {
          "name": "has_section",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the specified section exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_section_key",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the specified section-key pair exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load",
          "description": "Loads the config file specified as a parameter. The file's contents are parsed and loaded in the ConfigFile object which the method was called on. Returns one of the [code]OK[/code], [code]FAILED[/code] or [code]ERR_*[/code] constants listed in [@Global Scope]. If the load was successful, the return value is [code]OK[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save",
          "description": "Saves the contents of the ConfigFile object to the file specified as a parameter. The output file uses an INI-style structure. Returns one of the [code]OK[/code], [code]FAILED[/code] or [code]ERR_*[/code] constants listed in [@Global Scope]. If the load was successful, the return value is [code]OK[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_value",
          "description": "Assigns a value to the specified key of the the specified section. If the section and/or the key do not exist, they are created. Passing a [code]null[/code] value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "section",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "key",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PopupMenu": {
      "name": "PopupMenu",
      "inherits": "Popup",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "PopupMenu displays a list of options.",
      "description": "PopupMenu is the typical Control that displays a list of options. They are popular in toolbars or context menus.",
      "methods": [
        {
          "name": "add_check_item",
          "description": "Add a new checkable item with text \"label\". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_check_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_icon_check_item",
          "description": "Add a new checkable item with text \"label\" and icon \"texture\". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be\n\t\t\t\tcreated from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_icon_check_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_icon_item",
          "description": "Add a new item with text \"label\" and icon \"texture\". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_icon_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "3",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_item",
          "description": "Add a new item with text \"label\". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "accel",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "add_separator",
          "description": "Add a separator between items. Separators also occupy an index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "add_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_submenu_item",
          "description": "Adds an item with a submenu. The submenu is the name of a child PopupMenu node that would be shown when the item is clicked. An id can optionally be provided, but if is isn't provided, one will be created from the index.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "label",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "submenu",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "id",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clear the popup menu, in effect removing all items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_item_accelerator",
          "qualifiers": "const",
          "description": "Return the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_count",
          "qualifiers": "const",
          "description": "Return the amount of items.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_item_icon",
          "qualifiers": "const",
          "description": "Return the icon of the item at index \"idx\".",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_id",
          "qualifiers": "const",
          "description": "Return the id of the item at index \"idx\".",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_index",
          "qualifiers": "const",
          "description": "Find and return the index of the item containing a given id.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_metadata",
          "qualifiers": "const",
          "description": "Return the metadata of an item, which might be of any type. You can set it with [method set_item_metadata], which provides a simple way of assigning context data to items.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_shortcut",
          "qualifiers": "const",
          "description": "",
          "return_type": "ShortCut",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_submenu",
          "qualifiers": "const",
          "description": "Return the submenu name of the item at index \"idx\".",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_text",
          "qualifiers": "const",
          "description": "Return the text of the item at index \"idx\".",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_item_tooltip",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_hide_on_checkable_item_selection",
          "description": "Returns a boolean that indicates whether or not the PopupMenu will hide on checkable item selection.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_hide_on_item_selection",
          "description": "Returns a boolean that indicates whether or not the PopupMenu will hide on item selection.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_item_checkable",
          "qualifiers": "const",
          "description": "Return whether the item at index \"idx\" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_checked",
          "qualifiers": "const",
          "description": "Return the checkstate status of the item at index \"idx\".",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_disabled",
          "qualifiers": "const",
          "description": "Return whether the item at index \"idx\" is disabled. When it is disabled it can't be selected, or its action invoked.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_item_separator",
          "qualifiers": "const",
          "description": "Return whether the item is a seperator. If it is, it would be displayed as a line.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_item",
          "description": "Removes the item at index \"idx\" from the menu. Note that the indexes of items after the removed item are going to be shifted by one.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hide_on_checkable_item_selection",
          "description": "Sets whether or not the PopupMenu will hide on checkable item selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hide_on_item_selection",
          "description": "Sets whether or not the PopupMenu will hide on item selection.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_accelerator",
          "description": "Set the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "accel",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_as_checkable",
          "description": "Set whether the item at index \"idx\" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_as_separator",
          "description": "Mark the item at index \"idx\" as a seperator, which means that it would be displayed as a mere line.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_checked",
          "description": "Set the checkstate status of the item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "checked",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_disabled",
          "description": "Sets whether the item at index \"idx\" is disabled or not. When it is disabled it can't be selected, or its action invoked.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_icon",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_id",
          "description": "Set the id of the item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_metadata",
          "description": "Sets the metadata of an item, which might be of any type. You can later get it with [method get_item_metadata], which provides a simple way of assigning context data to items.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "metadata",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_shortcut",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shortcut",
              "type": "ShortCut",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "global",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_item_submenu",
          "description": "Sets the submenu of the item at index \"idx\". The submenu is the name of a child PopupMenu node that would be shown when the item is clicked.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "submenu",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_text",
          "description": "Set the text of the item at index \"idx\".",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_item_tooltip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "tooltip",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "toggle_item_checked",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "id_pressed",
          "description": "This event is emitted when an item of some id is pressed or its accelerator is activated.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ID",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "index_pressed",
          "description": "This event is emitted when an item of some index is pressed or its accelerator is activated.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "hide_on_checkable_item_selection",
          "type": "bool",
          "setter": "set_hide_on_checkable_item_selection",
          "getter": "is_hide_on_checkable_item_selection",
          "description": ""
        },
        {
          "name": "hide_on_item_selection",
          "type": "bool",
          "setter": "set_hide_on_item_selection",
          "getter": "is_hide_on_item_selection",
          "description": ""
        },
        {
          "name": "items",
          "type": "Array",
          "setter": "_set_items",
          "getter": "_get_items",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "checked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_accel",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "panel_disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "separator",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "submenu",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "unchecked",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "CanvasItemMaterial": {
      "name": "CanvasItemMaterial",
      "inherits": "Material",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_blend_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_light_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_blend_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "blend_mode",
              "type": "int",
              "enum": "CanvasItemMaterial.BlendMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_light_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "light_mode",
              "type": "int",
              "enum": "CanvasItemMaterial.LightMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "BLEND_MODE_MIX",
          "value": "0",
          "description": ""
        },
        {
          "name": "BLEND_MODE_ADD",
          "value": "1",
          "description": ""
        },
        {
          "name": "BLEND_MODE_SUB",
          "value": "2",
          "description": ""
        },
        {
          "name": "BLEND_MODE_MUL",
          "value": "3",
          "description": ""
        },
        {
          "name": "BLEND_MODE_PREMULT_ALPHA",
          "value": "4",
          "description": ""
        },
        {
          "name": "LIGHT_MODE_NORMAL",
          "value": "0",
          "description": ""
        },
        {
          "name": "LIGHT_MODE_UNSHADED",
          "value": "1",
          "description": ""
        },
        {
          "name": "LIGHT_MODE_LIGHT_ONLY",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "blend_mode",
          "type": "int",
          "setter": "set_blend_mode",
          "getter": "get_blend_mode",
          "enum": "CanvasItemMaterial.BlendMode",
          "description": ""
        },
        {
          "name": "light_mode",
          "type": "int",
          "setter": "set_light_mode",
          "getter": "get_light_mode",
          "enum": "CanvasItemMaterial.LightMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Nil": {
      "name": "Nil",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Basis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Nil",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptEmitSignal": {
      "name": "VisualScriptEmitSignal",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node which emits a specified signal.",
      "description": "A Visual Script node which emits a specified signal when it is executed.",
      "methods": [
        {
          "name": "get_signal",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_signal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "signal",
          "type": "String",
          "setter": "set_signal",
          "getter": "get_signal",
          "description": "The signal to emit."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptWhile": {
      "name": "VisualScriptWhile",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CollisionObject2D": {
      "name": "CollisionObject2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base node for 2D collision objects.",
      "description": "CollisionObject2D is the base class for 2D physics objects. It can hold any number of 2D collision [Shape2D]\\ s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject2D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.",
      "methods": [
        {
          "name": "_input_event",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_shape_owner",
          "description": "Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_rid",
          "qualifiers": "const",
          "description": "Returns the object's [RID].",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_shape_owners",
          "description": "Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_pickable",
          "qualifiers": "const",
          "description": "Return whether this object is pickable.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shape_owner_disabled",
          "qualifiers": "const",
          "description": "If [code]true[/code] the shape owner and its shapes are disabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_shape_owner_one_way_collision_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_shape_owner",
          "description": "Removes the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pickable",
          "description": "Set whether this object is pickable. A pickable object can detect the mouse pointer enter/leave it and, if the mouse is inside it, report input events.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_find_owner",
          "qualifiers": "const",
          "description": "Returns the [code]owner_id[/code] of the given shape.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "shape_index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_add_shape",
          "description": "Adds a [Shape2D] to the shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_clear_shapes",
          "description": "Removes all shapes from the shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_owner",
          "qualifiers": "const",
          "description": "Returns the parent object of the given shape owner.",
          "return_type": "Object",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape",
          "qualifiers": "const",
          "description": "Returns the [Shape2D] with the given id from the given shape owner.",
          "return_type": "Shape2D",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape_count",
          "qualifiers": "const",
          "description": "Returns the number of shapes the given shape owner contains.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_shape_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_get_transform",
          "qualifiers": "const",
          "description": "Returns the shape owner's [Transform2D].",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_remove_shape",
          "description": "Removes a shape from the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_disabled",
          "description": "If [code]true[/code] disables the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_one_way_collision",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shape_owner_set_transform",
          "description": "Sets the [Transform2D] of the given shape owner.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "input_event",
          "description": "Emitted when an input event occurs and [code]input_pickable[/code] is [code]true[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "event",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "mouse_entered",
          "description": "Emitted when the mouse pointer enters any of this object's shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "mouse_exited",
          "description": "Emitted when the mouse pointer exits all this object's shapes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "input_pickable",
          "type": "bool",
          "setter": "set_pickable",
          "getter": "is_pickable",
          "description": "If [code]true[/code] this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events."
        }
      ],
      "theme_properties": []
    },
    "VSlider": {
      "name": "VSlider",
      "inherits": "Slider",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Vertical slider.",
      "description": "Vertical slider. See [Slider]. This one goes from left (min) to right (max).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_area",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_disabled",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "grabber_highlight",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "slider",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tick",
          "type": "Texture",
          "description": ""
        }
      ]
    },
    "ARVRAnchor": {
      "name": "ARVRAnchor",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Anchor point in AR Space",
      "description": "The ARVR Anchor point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them.\n\t\tThis node is mapped to one of the anchors through its unique id. When you receive a signal that a new anchor is available you should add this node to your scene for that anchor. You can predefine nodes and set the id and the nodes will simply remain on 0,0,0 until a plane is recognised.\n\t\tKeep in mind that as long as plane detection is enable the size, placing and orientation of an anchor will be updates as the detection logic learns more about the real world out there especially if only part of the surface is in view.",
      "methods": [
        {
          "name": "get_anchor_id",
          "qualifiers": "const",
          "description": "Returns the anchor id for this anchor.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_anchor_name",
          "qualifiers": "const",
          "description": "Returns the name given to this anchor.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_is_active",
          "qualifiers": "const",
          "description": "Returns true if the anchor is being tracked and false if no anchor with this id is currently known.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_plane",
          "qualifiers": "const",
          "description": "Returns a plane aligned with our anchor, handy for intersection testing",
          "return_type": "Plane",
          "arguments": []
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "set_anchor_id",
          "description": "Binds this anchor node to an anchor with this id. You can set this before the anchor itself exists. The first anchor that is identified gets id 1, the second id 2, etc. When anchors get removed that slot remains free and can be assigned to the next anchor that is identified. The most common situation where anchors 'disappear' is when the AR server identifies that two anchors represent different parts of the same plane and merge them.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anchor_id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "anchor_id",
          "type": "int",
          "setter": "set_anchor_id",
          "getter": "get_anchor_id",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PathFollow2D": {
      "name": "PathFollow2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Point sampler for a [Path2D].",
      "description": "This node takes its parent [Path2D], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.",
      "methods": [
        {
          "name": "get_cubic_interpolation",
          "qualifiers": "const",
          "description": "This method returns whether the position between two cached points (see [method set_cubic_interpolation]) is interpolated linearly, or cubicly.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_h_offset",
          "qualifiers": "const",
          "description": "Returns the horizontal displacement this node has from its parent [Path2D].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Returns the distance along the path in pixels.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_unit_offset",
          "qualifiers": "const",
          "description": "Returns the distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_v_offset",
          "qualifiers": "const",
          "description": "Returns the vertical displacement this node has from its parent [Path2D].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_loop",
          "qualifiers": "const",
          "description": "Returns whether this node wraps its offsets around, or truncates them to the path ends.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_rotating",
          "qualifiers": "const",
          "description": "Returns whether this node rotates to follow the path.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_cubic_interpolation",
          "description": "The points along the [Curve2D] of the [Path2D] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\t\tThere are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.\n\t\t\t\tThis method controls whether the position between two cached points is interpolated linearly, or cubicly.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_offset",
          "description": "Moves this node horizontally. As this node's position will be set every time its offset is set, this allows many PathFollow2D to share the same curve (and thus the same movement pattern), yet not return the same position for a given path offset.\n\t\t\t\tA similar effect may be achieved moving this node's descendants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "h_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop",
          "description": "If set, any offset outside the path's length (whether set by [method set_offset] or [method set_unit_offset] will wrap around, instead of stopping at the ends. Set it for cyclic paths.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "loop",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Sets the distance from the first vertex, measured in pixels along the path. This sets this node's position to a point within the path.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotate",
          "description": "If set, this node rotates to follow the path, making its descendants rotate.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_unit_offset",
          "description": "Sets the distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "unit_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_offset",
          "description": "Moves the PathFollow2D vertically, for the same reasons of [method set_h_offset].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v_offset",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisibilityNotifier": {
      "name": "VisibilityNotifier",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Detects when the node is visible on screen.",
      "description": "The VisibilityNotifier detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a [Camera]'s view.",
      "methods": [
        {
          "name": "get_aabb",
          "qualifiers": "const",
          "description": "Returns the bounding box of the VisibilityNotifier.",
          "return_type": "Rect3",
          "arguments": []
        },
        {
          "name": "is_on_screen",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bounding box is on the screen.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_aabb",
          "description": "Set the visibility bounding box of the VisibilityNotifier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "camera_entered",
          "description": "Emitted when the VisibilityNotifier enters a [Camera]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "camera_exited",
          "description": "Emitted when the VisibilityNotifier exits a [Camera]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "camera",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "screen_entered",
          "description": "Emitted when the VisibilityNotifier enters the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "screen_exited",
          "description": "Emitted when the VisibilityNotifier exits the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "aabb",
          "type": "Rect3",
          "setter": "set_aabb",
          "getter": "get_aabb",
          "description": "The VisibilityNotifier's bounding box."
        }
      ],
      "theme_properties": []
    },
    "ResourceSaver": {
      "name": "ResourceSaver",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Resource Saving Interface.",
      "description": "Resource Saving Interface. This interface is used for saving resources to disk.",
      "methods": [
        {
          "name": "get_recognized_extensions",
          "description": "Return the list of extensions available for saving a resource of a given type.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "save",
          "description": "Save a resource to disk, to a given path.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "flags",
              "type": "int",
              "default_value": "0"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FLAG_RELATIVE_PATHS",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_BUNDLE_RESOURCES",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_CHANGE_PATH",
          "value": "4",
          "description": ""
        },
        {
          "name": "FLAG_OMIT_EDITOR_PROPERTIES",
          "value": "8",
          "description": ""
        },
        {
          "name": "FLAG_SAVE_BIG_ENDIAN",
          "value": "16",
          "description": ""
        },
        {
          "name": "FLAG_COMPRESS",
          "value": "32",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptPreload": {
      "name": "VisualScriptPreload",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_preload",
          "qualifiers": "const",
          "description": "",
          "return_type": "Resource",
          "arguments": []
        },
        {
          "name": "set_preload",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "resource",
          "type": "Resource",
          "setter": "set_preload",
          "getter": "get_preload",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "InputEventScreenDrag": {
      "name": "InputEventScreenDrag",
      "inherits": "InputEvent",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Input event type for screen drag events.",
      "description": "",
      "methods": [
        {
          "name": "get_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_relative",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_speed",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_index",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_relative",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "relative",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "index",
          "type": "int",
          "setter": "set_index",
          "getter": "get_index",
          "description": "Drag event index in the case of a multi-drag event."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "Position of the drag event."
        },
        {
          "name": "relative",
          "type": "Vector2",
          "setter": "set_relative",
          "getter": "get_relative",
          "description": "Position of the drag event relative to its start position."
        },
        {
          "name": "speed",
          "type": "Vector2",
          "setter": "set_speed",
          "getter": "get_speed",
          "description": "Speed of the drag event."
        }
      ],
      "theme_properties": []
    },
    "AtlasTexture": {
      "name": "AtlasTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Packs multiple small textures in a single, bigger one. Helps to optimize video memory costs and render calls.",
      "description": "[Texture] resource aimed at managing big textures files that pack multiple smaller textures. Consists of a [Texture], a margin that defines the border width,\n\t\tand a region that defines the actual area of the AtlasTexture.",
      "methods": [
        {
          "name": "get_atlas",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_margin",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_region",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "set_atlas",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "atlas",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_margin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_region",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "atlas",
          "type": "Texture",
          "setter": "set_atlas",
          "getter": "get_atlas",
          "description": "The texture that contains the atlas. Can be any [Texture] subtype."
        },
        {
          "name": "margin",
          "type": "Rect2",
          "setter": "set_margin",
          "getter": "get_margin",
          "description": "The margin around the region. The [Rect2]'s 'size' parameter ('w' and 'h' in the editor) resizes the texture so it fits within the margin."
        },
        {
          "name": "region",
          "type": "Rect2",
          "setter": "set_region",
          "getter": "get_region",
          "description": "The AtlasTexture's used region."
        }
      ],
      "theme_properties": []
    },
    "BitmapFont": {
      "name": "BitmapFont",
      "inherits": "Font",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Renders text using [code]*.fnt[/code] fonts.",
      "description": "Renders text using [code]*.fnt[/code] fonts containing texture atlases. Supports distance fields. For using vector font files like TTF directly, see [DynamicFont].",
      "methods": [
        {
          "name": "add_char",
          "description": "Adds a character to the font, where [code]character[/code] is the unicode value, [code]texture[/code] is the texture index, [code]rect[/code] is the region in the texture (in pixels!), [code]align[/code] is the (optional) alignment for the character and [code]advance[/code] is the (optional) advance.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "character",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "align",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            },
            {
              "index": "4",
              "name": "advance",
              "type": "float",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "add_kerning_pair",
          "description": "Adds a kerning pair to the [BitmapFont] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "char_a",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "char_b",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "kerning",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_texture",
          "description": "Adds a texture to the [BitmapFont].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "Clears all the font data and settings.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_from_fnt",
          "description": "Creates a BitmapFont from the [code]*.fnt[/code] file at [code]path[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_char_size",
          "qualifiers": "const",
          "description": "Returns the size of a character, optionally taking kerning into account if the next character is provided.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "char",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "next",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_fallback",
          "qualifiers": "const",
          "description": "Returns the fallback BitmapFont.",
          "return_type": "BitmapFont",
          "arguments": []
        },
        {
          "name": "get_kerning_pair",
          "qualifiers": "const",
          "description": "Returns a kerning pair as a difference.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "char_a",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "char_b",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Returns the font atlas texture at index [code]idx[/code].",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_texture_count",
          "qualifiers": "const",
          "description": "Returns the number of textures in the BitmapFont atlas.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_ascent",
          "description": "Sets the font ascent (number of pixels above the baseline).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "px",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_distance_field_hint",
          "description": "If [code]true[/code] distance field hint is enabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fallback",
          "description": "Sets the fallback BitmapFont.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fallback",
              "type": "BitmapFont",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_height",
          "description": "Sets the total font height (ascent plus descent) in pixels.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "px",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "ascent",
          "type": "float",
          "setter": "set_ascent",
          "getter": "get_ascent",
          "description": "Ascent (number of pixels above the baseline)."
        },
        {
          "name": "chars",
          "type": "PoolIntArray",
          "setter": "_set_chars",
          "getter": "_get_chars",
          "description": "The characters in the BitmapFont."
        },
        {
          "name": "distance_field",
          "type": "bool",
          "setter": "set_distance_field_hint",
          "getter": "is_distance_field_hint",
          "description": "If [code]true[/code] distance field hint is enabled."
        },
        {
          "name": "fallback",
          "type": "BitmapFont",
          "setter": "set_fallback",
          "getter": "get_fallback",
          "description": "The fallback font."
        },
        {
          "name": "height",
          "type": "float",
          "setter": "set_height",
          "getter": "get_height",
          "description": "Total font height (ascent plus descent) in pixels."
        },
        {
          "name": "kernings",
          "type": "PoolIntArray",
          "setter": "_set_kernings",
          "getter": "_get_kernings",
          "description": "The font's kernings as [PoolIntArray]."
        },
        {
          "name": "textures",
          "type": "Array",
          "setter": "_set_textures",
          "getter": "_get_textures",
          "description": "The font's [Texture]\\ s."
        }
      ],
      "theme_properties": []
    },
    "EditorImportPlugin": {
      "name": "EditorImportPlugin",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Registers a custom resource importer in the editor. Use the class to parse any file and import it as a new resource type.",
      "description": "EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your [EditorPlugin] with [method EditorPlugin.add_import_plugin].\n\n\t\tEditorImportPlugins work by associating with specific file extensions and a resource type. See [method get_recognized_extension] and [method get_resource_type]). They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the [code].import[/code] directory.\n\n\n\t\tBelow is an example EditorImportPlugin that imports a [Mesh] from a file with the extension \".special\" or \".spec\":\n\t\t[codeblock]\n\t\ttool\n\t\textends EditorImportPlugin\n\n\t\tfunc get_importer_name():\n\t\t    return \"my.special.plugin\"\n\n\t\tfunc get_visible_name():\n\t\t    return \"Special Mesh Importer\"\n\n\t\tfunc get_recognized_extensions():\n\t\t    return [\"special\", \"spec\"]\n\n\t\tfunc get_save_extension():\n\t\t    return \"mesh\"\n\n\t\tfunc get_resource_type():\n\t\t    return \"Mesh\"\n\n\t\tfunc get_preset_count():\n\t\t    return 1\n\n\t\tfunc get_preset_name(i):\n\t\t    return \"Default\"\n\n\t\tfunc get_import_options(i):\n\t\t    return [{\"name\": \"my_option\", \"default_value\": false}]\n\n\t\tfunc load(src, dst, opts, r_platform_variants, r_gen_files):\n\t\t    var f = File.new()\n\t\t    if f.open(src, File.READ) != OK:\n\t\t        return FAILED\n\n\t\t    var mesh = Mesh.new()\n\n\t\t    var save = dst + \".\" + get_save_extension()\n\t\t    ResourceSaver.save(file, mesh)\n\t\t    return OK\n\t\t[/codeblock]",
      "methods": [
        {
          "name": "get_import_options",
          "qualifiers": "virtual",
          "description": "Get the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: \"name\", \"default_value\", \"property_hint\" (optional), \"hint_string\" (optional), \"usage\" (optional).",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_importer_name",
          "qualifiers": "virtual",
          "description": "Get the unique name of the importer.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_option_visibility",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "option",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "options",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_preset_count",
          "qualifiers": "virtual",
          "description": "Get the number of initial presets defined by the plugin. Use [method get_import_options] to get the default options for the preset and [method get_preset_name] to get the name of the preset.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_preset_name",
          "qualifiers": "virtual",
          "description": "Get the name of the options preset at this index.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "preset",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_recognized_extensions",
          "qualifiers": "virtual",
          "description": "Get the list of file extensions to associate with this loader (case insensitive). e.g. [\"obj\"].",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_resource_type",
          "qualifiers": "virtual",
          "description": "Get the godot resource type associated with this loader. e.g. \"Mesh\" or \"Animation\".",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_save_extension",
          "qualifiers": "virtual",
          "description": "Get the extension used to save this resource in the [code].import[/code] directory.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_visible_name",
          "qualifiers": "virtual",
          "description": "Get the name to display in the import window.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "import",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "source_file",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "save_path",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "options",
              "type": "Dictionary",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "r_platform_variants",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "r_gen_files",
              "type": "Array",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpriteFrames": {
      "name": "SpriteFrames",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Sprite frame library for AnimatedSprite.",
      "description": "Sprite frame library for [AnimatedSprite]. Contains frames and animation data for playback.",
      "methods": [
        {
          "name": "add_animation",
          "description": "Adds a new animation to the the library.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_frame",
          "description": "Adds a frame to the given animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "frame",
              "type": "Texture",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "at_position",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "clear",
          "description": "Removes all frames from the given animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_all",
          "description": "Removes all animations. A \"default\" animation will be created.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_animation_loop",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given animation will loop.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation_speed",
          "qualifiers": "const",
          "description": "The animation's speed in frames per second.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "Returns the animation's selected frame.",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_frame_count",
          "qualifiers": "const",
          "description": "Returns the number of frames in the animation.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_animation",
          "qualifiers": "const",
          "description": "If [code]true[/code] the named animation exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_animation",
          "description": "Removes the given animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_frame",
          "description": "Removes the animation's selected frame.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_animation",
          "description": "Changes the animation's name to [code]newname[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "newname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_loop",
          "description": "If [code]true[/code] the animation will loop.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "loop",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_speed",
          "description": "The animation's speed in frames per second.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_frame",
          "description": "Sets the texture of the given frame.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "txt",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "animations",
          "type": "Array",
          "setter": "_set_animations",
          "getter": "_get_animations",
          "description": "An [Array] containing the [code]name[/code], [code]speed[/code], [code]loop[/code], and [code]frames[/code] of each animation."
        },
        {
          "name": "frames",
          "type": "Array",
          "setter": "_set_frames",
          "getter": "_get_frames",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AnimationPlayer": {
      "name": "AnimationPlayer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Container and player of [Animation] resources.",
      "description": "An animation player is used for general purpose playback of [Animation] resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.",
      "methods": [
        {
          "name": "add_animation",
          "description": "Add an animation resource to the player, which will be later referenced by the \"name\" argument.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "advance",
          "description": "Used to skip ahead or skip back in an animation. Delta is the time in seconds to skip.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_get_next",
          "qualifiers": "const",
          "description": "Return the name of the next animation in the queue.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_set_next",
          "description": "Set the name of an animation that will be played after.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anim_to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear_caches",
          "description": "The animation player creates caches for faster access to the nodes it will animate. However, if a specific node is removed, it may not notice it, so clear_caches will force the player to search for the nodes again.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_queue",
          "description": "If animations are queued to play, clear them.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "find_animation",
          "qualifiers": "const",
          "description": "Find an animation name by resource.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "animation",
              "type": "Animation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation",
          "qualifiers": "const",
          "description": "Get an [Animation] resource by requesting a name.",
          "return_type": "Animation",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_animation_list",
          "qualifiers": "const",
          "description": "Get the list of names of the animations stored in the player.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_animation_process_mode",
          "qualifiers": "const",
          "description": "Return the mode in which the animation player processes. See [method set_animation_process_mode].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_autoplay",
          "qualifiers": "const",
          "description": "Return the name of the animation that will be automatically played when the scene is loaded.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_blend_time",
          "qualifiers": "const",
          "description": "Get the blend time between two animations, referenced by their names.",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anim_to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_current_animation",
          "qualifiers": "const",
          "description": "Return the name of the animation being played.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_current_animation_length",
          "qualifiers": "const",
          "description": "Get the length (in seconds) of the currently being played animation.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_current_animation_position",
          "qualifiers": "const",
          "description": "Get the position (in seconds) of the currently being played animation.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_default_blend_time",
          "qualifiers": "const",
          "description": "Return the default blend time between animations.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "Return the playback position (in seconds) in an animation channel (or channel 0 if none is provided).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_root",
          "qualifiers": "const",
          "description": "Return path to root node (see [method set_root]).",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_speed_scale",
          "qualifiers": "const",
          "description": "Get the speed scaling ratio in a given animation channel (or channel 0 if none is provided). Default ratio is [i]1[/i] (no scaling).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "has_animation",
          "qualifiers": "const",
          "description": "Request whether an [Animation] name exist within the player.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_active",
          "qualifiers": "const",
          "description": "Return true if the player is active.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return whether an animation is playing.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play a given animation by the animation name. Custom speed and blend times can be set. If custom speed is negative (-1), 'from_end' being true can play the animation backwards.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "1",
              "name": "custom_blend",
              "type": "float",
              "default_value": "-1"
            },
            {
              "index": "2",
              "name": "custom_speed",
              "type": "float",
              "default_value": "1.0"
            },
            {
              "index": "3",
              "name": "from_end",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "play_backwards",
          "description": "Play a given animation by the animation name in reverse.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": "\"\""
            },
            {
              "index": "1",
              "name": "custom_blend",
              "type": "float",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "queue",
          "description": "Queue an animation for playback once the current one is done.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_animation",
          "description": "Remove an animation from the player (by supplying the same name used to add it).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_animation",
          "description": "Rename an existing animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "newname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seek",
          "description": "Seek the animation to a given position in time (in seconds). If 'update' is true, the animation will be updated too, otherwise it will be updated at process time.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "seconds",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "update",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "set_active",
          "description": "Set the player as active (playing). If false, it will do nothing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_animation_process_mode",
          "description": "Set the mode in which the animation player processes. By default, it processes on idle time (framerate dependent), but using fixed time works well for animating static collision bodies in 2D and 3D. See enum ANIMATION_PROCESS_*.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "AnimationPlayer.AnimationProcessMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autoplay",
          "description": "Set the name of the animation that will be automatically played when the scene is loaded.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_blend_time",
          "description": "Specify a blend time (in seconds) between two animations, referenced by their names.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim_from",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "anim_to",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_animation",
          "description": "Set the current animation (even if no playback occurs). Using set_current_animation() and set_active() are similar to calling play().",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_default_blend_time",
          "description": "Set the default blend time between animations.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_root",
          "description": "AnimationPlayer resolves animation track paths from this node (which is relative to itself), by default root is \"..\", but it can be changed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed_scale",
          "description": "Set a speed scaling ratio in a given animation channel (or channel 0 if none is provided). Default ratio is [i]1[/i] (no scaling).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "speed",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the currently playing animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "reset",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "stop_all",
          "description": "Stop playback of animations (deprecated).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "animation_changed",
          "description": "If the currently being played animation changes, this signal will notify of such change.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "old_name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_finished",
          "description": "Notifies when an animation finished playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "animation_started",
          "description": "Notifies when an animation starts playing.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ANIMATION_PROCESS_PHYSICS",
          "value": "0",
          "description": "Process animation during the physics process. This is specially useful when animating physics bodies."
        },
        {
          "name": "ANIMATION_PROCESS_IDLE",
          "value": "1",
          "description": "Process animation during the idle process."
        }
      ],
      "properties": [
        {
          "name": "playback_default_blend_time",
          "type": "float",
          "setter": "set_default_blend_time",
          "getter": "get_default_blend_time",
          "description": ""
        },
        {
          "name": "playback_process_mode",
          "type": "int",
          "setter": "set_animation_process_mode",
          "getter": "get_animation_process_mode",
          "enum": "AnimationPlayer.AnimationProcessMode",
          "description": ""
        },
        {
          "name": "root_node",
          "type": "NodePath",
          "setter": "set_root",
          "getter": "get_root",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "StreamPeerTCP": {
      "name": "StreamPeerTCP",
      "inherits": "StreamPeer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "TCP Stream peer.",
      "description": "TCP Stream peer. This object can be used to connect to TCP servers, or also is returned by a tcp server.",
      "methods": [
        {
          "name": "connect_to_host",
          "description": "Connect to the specified host:port pair. A hostname will be resolved if valid. Returns [OK] on success or [FAILED] on failure.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "disconnect_from_host",
          "description": "Disconnect from host.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_connected_host",
          "qualifiers": "const",
          "description": "Return the IP of this peer.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_connected_port",
          "qualifiers": "const",
          "description": "Return the port of this peer.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_status",
          "qualifiers": "const",
          "description": "Return the status of the connection, one of STATUS_* enum.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_connected_to_host",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "STATUS_NONE",
          "value": "0",
          "description": "The initial status of the [StreamPeerTCP], also the status after a disconnect."
        },
        {
          "name": "STATUS_CONNECTING",
          "value": "1",
          "description": "A status representing a [StreamPeerTCP] that is connecting to a host."
        },
        {
          "name": "STATUS_CONNECTED",
          "value": "2",
          "description": "A status representing a [StreamPeerTCP] that is connected to a host."
        },
        {
          "name": "STATUS_ERROR",
          "value": "3",
          "description": "A staus representing a [StreamPeerTCP] in error state."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "VSeparator": {
      "name": "VSeparator",
      "inherits": "Separator",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Vertical version of [Separator].",
      "description": "Vertical version of [Separator]. It is used to separate objects horizontally, though (but it looks vertical!).",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "separator",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "InputEventMouse": {
      "name": "InputEventMouse",
      "inherits": "InputEventWithModifiers",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base input event type for mouse events.",
      "description": "",
      "methods": [
        {
          "name": "get_button_mask",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_global_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_position",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "set_button_mask",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "button_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_global_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "global_position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_position",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "button_mask",
          "type": "int",
          "setter": "set_button_mask",
          "getter": "get_button_mask",
          "description": "Mouse button mask identifier, one of or a bitwise combination of the BUTTON_MASK_* constants in [@Global Scope]."
        },
        {
          "name": "global_position",
          "type": "Vector2",
          "setter": "set_global_position",
          "getter": "get_global_position",
          "description": "Global position of the mouse click."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "set_position",
          "getter": "get_position",
          "description": "Local position of the mouse click."
        }
      ],
      "theme_properties": []
    },
    "RichTextLabel": {
      "name": "RichTextLabel",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Label that displays rich text.",
      "description": "Label that displays rich text. Rich text can contain custom text, fonts, images and some basic formatting. It also adapts itself to given width/heights.",
      "methods": [
        {
          "name": "add_image",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_text",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append_bbcode",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bbcode",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_bbcode",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_line_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_percent_visible",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_tab_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_text",
          "description": "Returns the raw text, stripping out the formatting information.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_total_character_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_v_scroll",
          "description": "",
          "return_type": "VScrollBar",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_visible_characters",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_visible_line_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_meta_underlined",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_scroll_active",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_scroll_following",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_selection_enabled",
          "qualifiers": "const",
          "description": "Return true if selecting the text inside this richtext is allowed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_bbcode",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "newline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "parse_bbcode",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bbcode",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pop",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_align",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "enum": "RichTextLabel.Align",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_cell",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_color",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "color",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_font",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "font",
              "type": "Font",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_indent",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "level",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_list",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "RichTextLabel.ListType",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_meta",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_table",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "columns",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_underline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_line",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scroll_to_line",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bbcode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_meta_underline",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_percent_visible",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "percent_visible",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_active",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "active",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scroll_follow",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "follow",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_selection_enabled",
          "description": "Set to true if selecting the text inside this richtext is allowed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "spaces",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_table_column_expand",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "column",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "expand",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "ratio",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_bbcode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visible_characters",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "meta_clicked",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "meta",
              "type": "Nil",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": ""
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": ""
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": ""
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "description": ""
        },
        {
          "name": "LIST_NUMBERS",
          "value": "0",
          "description": ""
        },
        {
          "name": "LIST_LETTERS",
          "value": "1",
          "description": ""
        },
        {
          "name": "LIST_DOTS",
          "value": "2",
          "description": ""
        },
        {
          "name": "ITEM_FRAME",
          "value": "0",
          "description": ""
        },
        {
          "name": "ITEM_TEXT",
          "value": "1",
          "description": ""
        },
        {
          "name": "ITEM_IMAGE",
          "value": "2",
          "description": ""
        },
        {
          "name": "ITEM_NEWLINE",
          "value": "3",
          "description": ""
        },
        {
          "name": "ITEM_FONT",
          "value": "4",
          "description": ""
        },
        {
          "name": "ITEM_COLOR",
          "value": "5",
          "description": ""
        },
        {
          "name": "ITEM_UNDERLINE",
          "value": "6",
          "description": ""
        },
        {
          "name": "ITEM_ALIGN",
          "value": "7",
          "description": ""
        },
        {
          "name": "ITEM_INDENT",
          "value": "8",
          "description": ""
        },
        {
          "name": "ITEM_LIST",
          "value": "9",
          "description": ""
        },
        {
          "name": "ITEM_META",
          "value": "11",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "bbcode_enabled",
          "type": "bool",
          "setter": "set_use_bbcode",
          "getter": "is_using_bbcode",
          "description": ""
        },
        {
          "name": "bbcode_text",
          "type": "String",
          "setter": "set_bbcode",
          "getter": "get_bbcode",
          "description": ""
        },
        {
          "name": "percent_visible",
          "type": "float",
          "setter": "set_percent_visible",
          "getter": "get_percent_visible",
          "description": ""
        },
        {
          "name": "visible_characters",
          "type": "int",
          "setter": "set_visible_characters",
          "getter": "get_visible_characters",
          "description": ""
        }
      ],
      "theme_properties": [
        {
          "name": "bold_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "bold_italics_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "default_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font_color_selected",
          "type": "Color",
          "description": ""
        },
        {
          "name": "italics_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "line_separation",
          "type": "int",
          "description": ""
        },
        {
          "name": "mono_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "normal_font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "selection_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "table_hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "table_vseparation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "Label": {
      "name": "Label",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Displays plain text in a line or wrapped inside a rectangle. For formatted text, use [RichTextLabel].",
      "description": "Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment, and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics or other formatting. For that, use [RichTextLabel] instead.",
      "methods": [
        {
          "name": "get_align",
          "qualifiers": "const",
          "description": "Returns the alignment mode (any of the ALIGN_* enumeration values).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_line_count",
          "qualifiers": "const",
          "description": "Returns the amount of lines of text the Label has.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_line_height",
          "qualifiers": "const",
          "description": "Returns the font size in pixels.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_lines_skipped",
          "qualifiers": "const",
          "description": "Returns the the number of lines to skip before displaying.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_max_lines_visible",
          "qualifiers": "const",
          "description": "Returns the maximum number of lines to display. Returns -1 if unrestricted.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_percent_visible",
          "qualifiers": "const",
          "description": "Returns the maximum number of characters to display as a percentage of the total text.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Returns the label text. Text can contain newlines.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_total_character_count",
          "qualifiers": "const",
          "description": "Returns the total length of the text.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_valign",
          "qualifiers": "const",
          "description": "Returns the vertical alignment mode (any of the VALIGN_* enumeration values).",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_visible_characters",
          "qualifiers": "const",
          "description": "Returns the restricted number of characters to display. Returns -1 if unrestricted.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_visible_line_count",
          "qualifiers": "const",
          "description": "Returns the number of lines shown. Useful if the [code]Label[/code] 's height cannot currently display all lines.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_autowrap",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if [i]autowrap[/i] mode (see [method set_autowrap]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_clipping_text",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if text would be cut off if it is too wide.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_uppercase",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if text is displayed in all capitals.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_align",
          "description": "Sets the alignment mode to any of the ALIGN_* enumeration values.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "enum": "Label.Align",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_autowrap",
          "description": "Set [i]autowrap[/i] mode. When enabled, autowrap will fit text to the control width, breaking sentences when they exceed the available horizontal space. When disabled, the label minimum width becomes the width of the longest row, and the minimum height large enough to fit all rows.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clip_text",
          "description": "Cuts off the rest of the text if it is too wide.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lines_skipped",
          "description": "Sets the number of lines to skip before displaying. Useful for scrolling text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lines_skipped",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_lines_visible",
          "description": "Restricts the number of lines to display. Set to -1 to disable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "lines_visible",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_percent_visible",
          "description": "Restricts the number of characters to display (as a percentage of the total text).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "percent_visible",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "Set the label text. Text can contain newlines.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_uppercase",
          "description": "Display text in all capitals.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_valign",
          "description": "Sets the vertical alignment mode to any of the VALIGN_* enumeration values.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "valign",
              "type": "int",
              "enum": "Label.VAlign",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visible_characters",
          "description": "Restricts the number of characters to display. Set to -1 to disable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": "Align rows to the left (default)."
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": "Align rows centered."
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": "Align rows to the right (default)."
        },
        {
          "name": "ALIGN_FILL",
          "value": "3",
          "description": "Expand row whitespaces to fit the width."
        },
        {
          "name": "VALIGN_TOP",
          "value": "0",
          "description": "Align the whole text to the top."
        },
        {
          "name": "VALIGN_CENTER",
          "value": "1",
          "description": "Align the whole text to the center."
        },
        {
          "name": "VALIGN_BOTTOM",
          "value": "2",
          "description": "Align the whole text to the bottom."
        },
        {
          "name": "VALIGN_FILL",
          "value": "3",
          "description": "Align the whole text by spreading the rows."
        }
      ],
      "properties": [
        {
          "name": "align",
          "type": "int",
          "setter": "set_align",
          "getter": "get_align",
          "enum": "Label.Align",
          "description": "Controls the text's horizontal align. Supports left, center, right, and fill, or justify. Set it to one of the [code]ALIGN_*[/code] constants."
        },
        {
          "name": "autowrap",
          "type": "bool",
          "setter": "set_autowrap",
          "getter": "has_autowrap",
          "description": "If [code]true[/code], wraps the text inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. Default: false."
        },
        {
          "name": "clip_text",
          "type": "bool",
          "setter": "set_clip_text",
          "getter": "is_clipping_text",
          "description": "If [code]true[/code], the Label only shows the text that fits inside its bounding rectangle. It also lets you scale the node down freely."
        },
        {
          "name": "lines_skipped",
          "type": "int",
          "setter": "set_lines_skipped",
          "getter": "get_lines_skipped",
          "description": "The node ignores the first [code]lines_skipped[/code] lines before it starts to display text."
        },
        {
          "name": "max_lines_visible",
          "type": "int",
          "setter": "set_max_lines_visible",
          "getter": "get_max_lines_visible",
          "description": "Limits the lines of text the node shows on screen."
        },
        {
          "name": "percent_visible",
          "type": "float",
          "setter": "set_percent_visible",
          "getter": "get_percent_visible",
          "description": "Limits the count of visible characters. If you set [code]percent_visible[/code] to 50, only up to half of the text's characters will display on screen. Useful to animate the text in a dialog box."
        },
        {
          "name": "text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": "The text to display on screen."
        },
        {
          "name": "uppercase",
          "type": "bool",
          "setter": "set_uppercase",
          "getter": "is_uppercase",
          "description": "If [code]true[/code], all the text displays as UPPERCASE."
        },
        {
          "name": "valign",
          "type": "int",
          "setter": "set_valign",
          "getter": "get_valign",
          "enum": "Label.VAlign",
          "description": "Controls the text's vertical align. Supports top, center, bottom, and fill. Set it to one of the [code]VALIGN_*[/code] constants."
        }
      ],
      "theme_properties": [
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_shadow",
          "type": "Color",
          "description": ""
        },
        {
          "name": "line_spacing",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "shadow_as_outline",
          "type": "int",
          "description": ""
        },
        {
          "name": "shadow_offset_x",
          "type": "int",
          "description": ""
        },
        {
          "name": "shadow_offset_y",
          "type": "int",
          "description": ""
        }
      ]
    },
    "VisibilityNotifier2D": {
      "name": "VisibilityNotifier2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Detects when the node is visible on screen.",
      "description": "The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.",
      "methods": [
        {
          "name": "get_rect",
          "qualifiers": "const",
          "description": "Returns the bounding rectangle of the VisibilityNotifier2D.",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "is_on_screen",
          "qualifiers": "const",
          "description": "If [code]true[/code] the bounding rectangle is on the screen.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_rect",
          "description": "Set the visibility bounding rectangle of the VisibilityNotifier2D.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rect",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "screen_entered",
          "description": "Emitted when the VisibilityNotifier2D enters the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "screen_exited",
          "description": "Emitted when the VisibilityNotifier2D exits the screen.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "viewport_entered",
          "description": "Emitted when the VisibilityNotifier2D enters a [Viewport]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "viewport_exited",
          "description": "Emitted when the VisibilityNotifier2D exits a [Viewport]'s view.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "rect",
          "type": "Rect2",
          "setter": "set_rect",
          "getter": "get_rect",
          "description": "The VisibilityNotifier2D's bounding rectangle."
        }
      ],
      "theme_properties": []
    },
    "GridMap": {
      "name": "GridMap",
      "inherits": "Spatial",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_cell_item",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_item_orientation",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_cell_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_center_x",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_center_y",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_center_z",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_meshes",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_octant_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_theme",
          "qualifiers": "const",
          "description": "",
          "return_type": "MeshLibrary",
          "arguments": []
        },
        {
          "name": "get_used_cells",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "resource_changed",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "resource",
              "type": "Resource",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_cell_item",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "item",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "orientation",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_cell_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_center_x",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_center_y",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_center_z",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_clip",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "clipabove",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "2",
              "name": "floor",
              "type": "int",
              "default_value": "0"
            },
            {
              "index": "3",
              "name": "axis",
              "type": "int",
              "enum": "Vector3.Axis",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "set_octant_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_theme",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "theme",
              "type": "MeshLibrary",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "INVALID_CELL_ITEM",
          "value": "-1",
          "enum": "",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "SceneTree": {
      "name": "SceneTree",
      "inherits": "MainLoop",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "call_group",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "call_group_flags",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "change_scene",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "change_scene_to",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "packed_scene",
              "type": "PackedScene",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_timer",
          "description": "",
          "return_type": "SceneTreeTimer",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "time_sec",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "pause_mode_process",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_current_scene",
          "qualifiers": "const",
          "description": "",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_edited_scene_root",
          "qualifiers": "const",
          "description": "",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_network_connected_peers",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolIntArray",
          "arguments": []
        },
        {
          "name": "get_network_unique_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_nodes_in_group",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_root",
          "qualifiers": "const",
          "description": "",
          "return_type": "Viewport",
          "arguments": []
        },
        {
          "name": "get_rpc_sender_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_group",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_network_peer",
          "qualifiers": "const",
          "description": "Returns true if there is a [NetworkedMultiplayerPeer] set (with [method SceneTree.set_network_peer]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_debugging_collisions_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_debugging_navigation_hint",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_input_handled",
          "description": "",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_network_server",
          "qualifiers": "const",
          "description": "Returns true if this SceneTree's [NetworkedMultiplayerPeer] is in server mode (listening for connections).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_paused",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_refusing_new_network_connections",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "notify_group",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "notification",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "notify_group_flags",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "call_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "notification",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_delete",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "quit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "reload_current_scene",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_auto_accept_quit",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_scene",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child_node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_debug_collisions_hint",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_debug_navigation_hint",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_edited_scene_root",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scene",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_group",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_group_flags",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "call_flags",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_input_as_handled",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_network_peer",
          "description": "Set the peer object to handle the RPC system (effectively enabling networking). Depending on the peer itself, the SceneTree will become a network server (check with [method is_network_server()]) and will set root node's network mode to master (see NETWORK_MODE_* constants in [Node]), or it will become a regular peer with root node set to slave. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to SceneTree's signals.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "peer",
              "type": "NetworkedMultiplayerPeer",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pause",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_refuse_new_network_connections",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "refuse",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_screen_stretch",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "SceneTree.StretchMode",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "aspect",
              "type": "int",
              "enum": "SceneTree.StretchAspect",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "minsize",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "shrink",
              "type": "int",
              "default_value": "1"
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "connected_to_server",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connection_failed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "files_dropped",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "files",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "screen",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "idle_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "network_peer_connected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "network_peer_disconnected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_configuration_warning_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "node_removed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "physics_frame",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "screen_resized",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "server_disconnected",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tree_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "GROUP_CALL_DEFAULT",
          "value": "0",
          "description": ""
        },
        {
          "name": "GROUP_CALL_REVERSE",
          "value": "1",
          "description": ""
        },
        {
          "name": "GROUP_CALL_REALTIME",
          "value": "2",
          "description": ""
        },
        {
          "name": "GROUP_CALL_UNIQUE",
          "value": "4",
          "description": ""
        },
        {
          "name": "STRETCH_MODE_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "STRETCH_MODE_2D",
          "value": "1",
          "description": ""
        },
        {
          "name": "STRETCH_MODE_VIEWPORT",
          "value": "2",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_IGNORE",
          "value": "0",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_KEEP",
          "value": "1",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_KEEP_WIDTH",
          "value": "2",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_KEEP_HEIGHT",
          "value": "3",
          "description": ""
        },
        {
          "name": "STRETCH_ASPECT_EXPAND",
          "value": "4",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "ReferenceRect": {
      "name": "ReferenceRect",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Reference frame for GUI.",
      "description": "Reference frame for GUI. It's just like an empty control, except a red box is displayed while editing around its size at all times.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "border",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "VSplitContainer": {
      "name": "VSplitContainer",
      "inherits": "SplitContainer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Vertical split container.",
      "description": "Vertical split container. See [SplitContainer]. This goes from left to right.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "autohide",
          "type": "int",
          "description": ""
        },
        {
          "name": "bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "grabber",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "separation",
          "type": "int",
          "description": ""
        }
      ]
    },
    "bool": {
      "name": "bool",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Boolean built-in type",
      "description": "Boolean built-in type.",
      "methods": [
        {
          "name": "bool",
          "description": "Cast an [int] value to a boolean value, this method will return true if called with an integer value different to 0 and false in other case.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bool",
          "description": "Cast a [float] value to a boolean value, this method will return true if called with a floating point value different to 0 and false in other case.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bool",
          "description": "Cast a [String] value to a boolean value, this method will return true if called with a non empty string and false in other case. Examples: [code]bool('False')[/code] returns true, [code]bool('')[/code]. returns false",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AnimatedSprite3D": {
      "name": "AnimatedSprite3D",
      "inherits": "SpriteBase3D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "2D sprite node in 3D world, that can use multiple 2D textures for animation.",
      "description": "Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.",
      "methods": [
        {
          "name": "get_animation",
          "qualifiers": "const",
          "description": "Return the name of the current animation set to the node.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_frame",
          "qualifiers": "const",
          "description": "Return the visible frame index.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_sprite_frames",
          "qualifiers": "const",
          "description": "Get the [SpriteFrames] resource, which contains all frames.",
          "return_type": "SpriteFrames",
          "arguments": []
        },
        {
          "name": "is_playing",
          "qualifiers": "const",
          "description": "Return true if an animation if currently being played.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "play",
          "description": "Play the animation set in parameter. If no parameter is provided, the current animation is played.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "anim",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "set_animation",
          "description": "Set the current animation of the node and reinits the frame counter of the animation.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "animation",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_frame",
          "description": "Set the visible sprite frame index (from the list of frames inside the [SpriteFrames] resource).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frame",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_sprite_frames",
          "description": "Set the [SpriteFrames] resource, which contains all frames.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "sprite_frames",
              "type": "SpriteFrames",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stop",
          "description": "Stop the current animation (does not reset the frame counter).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [
        {
          "name": "frame_changed",
          "description": "Emitted when [member frame] changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "animation",
          "type": "String",
          "setter": "set_animation",
          "getter": "get_animation",
          "description": "The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset."
        },
        {
          "name": "frame",
          "type": "int",
          "setter": "set_frame",
          "getter": "get_frame",
          "description": "The displayed animation frame's index."
        },
        {
          "name": "frames",
          "type": "SpriteFrames",
          "setter": "set_sprite_frames",
          "getter": "get_sprite_frames",
          "description": "The [SpriteFrames] resource containing the animation(s)."
        },
        {
          "name": "playing",
          "type": "bool",
          "setter": "_set_playing",
          "getter": "_is_playing",
          "description": "If [code]true[/code] the [member animation] is currently playing."
        }
      ],
      "theme_properties": []
    },
    "GDNativeLibrary": {
      "name": "GDNativeLibrary",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_active_library_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_library_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "platform",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_singleton_gdnative",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_library_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "platform",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_singleton_gdnative",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "singleton",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "singleton_gdnative",
          "type": "bool",
          "setter": "set_singleton_gdnative",
          "getter": "is_singleton_gdnative",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TranslationServer": {
      "name": "TranslationServer",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Server that manages all translations. Translations can be set to it and removed from it.",
      "description": "",
      "methods": [
        {
          "name": "add_translation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "translation",
              "type": "Translation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clear",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_locale",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "remove_translation",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "translation",
              "type": "Translation",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_locale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "locale",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "translate",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "message",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "EditorScript": {
      "name": "EditorScript",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Simple script to perform changes in the currently edited scene.",
      "description": "This script can be run from the Scene -> Run Script menu option.",
      "methods": [
        {
          "name": "_run",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "add_root_node",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_editor_interface",
          "description": "",
          "return_type": "EditorInterface",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scene",
          "description": "",
          "return_type": "Node",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "WeakRef": {
      "name": "WeakRef",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Holds an [Object], but does not contribute to the reference count if the object is a reference.",
      "description": "A weakref can hold a [Reference], without contributing to the reference counter. A weakref can be created from an [Object] using [method @GDScript.weakref]. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.",
      "methods": [
        {
          "name": "get_ref",
          "qualifiers": "const",
          "description": "Returns the [Object] this weakref is referring to.",
          "return_type": "Variant",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "ARVRInterface": {
      "name": "ARVRInterface",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for ARVR interface implementation.",
      "description": "This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass ARVRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.\n\t\tInterfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through ARVRServer.",
      "methods": [
        {
          "name": "get_anchor_detection_is_enabled",
          "qualifiers": "const",
          "description": "Returns true if achor detection is enabled (AR only).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_capabilities",
          "qualifiers": "const",
          "description": "Returns a combination of flags providing information about the capabilities of this interface.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Returns the name of this interface (OpenVR, OpenHMD, ARKit, etc).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_recommended_render_targetsize",
          "description": "Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform.",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_tracking_status",
          "qualifiers": "const",
          "description": "If supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "initialize",
          "description": "Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.\n\t\t\t\tAfter initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence. \n\t\t\t\tNote that you must enable the AR/VR mode on the main viewport for any device that uses the main output of Godot such as for mobile VR. \n\t\t\t\tIf you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively you can add a separate viewport node to your scene and enable AR/VR on that viewport and it will be used to output to the HMD leaving you free to do anything you like in the main window such as using a separate camera as a spectator camera or render out something completely different.\n\t\t\t\tWhile currently not used you can activate additional interfaces, you may wish to do this if you want to track controllers from other platforms. However at this point in time only one interface can render to an HMD.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_initialized",
          "description": "Returns true if this interface is active.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_primary",
          "description": "Returns true if this interface is currently the primary interface (the interface responsible for showing the output).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_stereo",
          "description": "Returns true if the current output of this interface is in stereo.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_anchor_detection_is_enabled",
          "description": "Enables anchor detection, this is used on AR interfaces and enables the extra logic that will detect planes, features, objects, etc. and adds/modifies anchor points.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_is_initialized",
          "description": "Initialize/uninitialize this interface (same effect as calling initialize/uninitialize).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "initialized",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_is_primary",
          "description": "Set this interface to the primary interface (unset the old one).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "uninitialize",
          "description": "Turns the interface off.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "ARVR_NONE",
          "value": "0",
          "description": "No ARVR capabilities."
        },
        {
          "name": "ARVR_MONO",
          "value": "1",
          "description": "This interface can work with normal rendering output (non-HMD based AR)."
        },
        {
          "name": "ARVR_STEREO",
          "value": "2",
          "description": "This interface supports stereoscopic rendering."
        },
        {
          "name": "ARVR_AR",
          "value": "4",
          "description": "This interface support AR (video background and real world tracking)."
        },
        {
          "name": "ARVR_EXTERNAL",
          "value": "8",
          "description": "This interface outputs to an external device, if the main viewport is used the on screen output is an unmodified buffer of either the left or right eye (stretched if the viewport size is not changed to the same aspect ratio of get_recommended_render_targetsize. Using a seperate viewport node frees up the main viewport for other purposes."
        },
        {
          "name": "EYE_MONO",
          "value": "0",
          "description": "Mono output, this is mostly used internally when retrieving positioning information for our camera node or when stereo scopic rendering is not supported."
        },
        {
          "name": "EYE_LEFT",
          "value": "1",
          "description": "Left eye output, this is mostly used internally when rendering the image for the left eye and obtaining positioning and projection information."
        },
        {
          "name": "EYE_RIGHT",
          "value": "2",
          "description": "Right eye output, this is mostly used internally when rendering the image for the right eye and obtaining positioning and projection information."
        },
        {
          "name": "ARVR_NORMAL_TRACKING",
          "value": "0",
          "description": "Tracking is behaving as expected."
        },
        {
          "name": "ARVR_EXCESSIVE_MOTION",
          "value": "1",
          "description": "Tracking is hindered by excessive motion, player is moving faster then tracking can keep up."
        },
        {
          "name": "ARVR_INSUFFICIENT_FEATURES",
          "value": "2",
          "description": "Tracking is hindered by insufficient features, it's too dark (for camera based tracking), player is blocked, etc."
        },
        {
          "name": "ARVR_UNKNOWN_TRACKING",
          "value": "3",
          "description": "We don't know the status of the tracking or this interface does not provide feedback."
        },
        {
          "name": "ARVR_NOT_TRACKING",
          "value": "4",
          "description": "Tracking is not functional (camera not plugged in or obscured, lighthouses turned off, etc.)"
        }
      ],
      "properties": [
        {
          "name": "ar_is_anchor_detection_enabled",
          "type": "bool",
          "setter": "set_anchor_detection_is_enabled",
          "getter": "get_anchor_detection_is_enabled",
          "description": "On an AR interface, is our anchor detection enabled?"
        },
        {
          "name": "interface_is_initialized",
          "type": "bool",
          "setter": "set_is_initialized",
          "getter": "is_initialized",
          "description": "Has this interface been initialized?"
        },
        {
          "name": "interface_is_primary",
          "type": "bool",
          "setter": "set_is_primary",
          "getter": "is_primary",
          "description": "Is this our primary interface?"
        }
      ],
      "theme_properties": []
    },
    "Slider": {
      "name": "Slider",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for GUI Sliders.",
      "description": "Base class for GUI Sliders.",
      "methods": [
        {
          "name": "get_ticks",
          "qualifiers": "const",
          "description": "Return amounts of ticks to display on slider.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_ticks_on_borders",
          "qualifiers": "const",
          "description": "Return true if ticks are visible on borders.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_editable",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_editable",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "editable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ticks",
          "description": "Set amount of ticks to display in slider.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "count",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_ticks_on_borders",
          "description": "Set true if ticks are visible on borders.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ticks_on_border",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "editable",
          "type": "bool",
          "setter": "set_editable",
          "getter": "is_editable",
          "description": ""
        },
        {
          "name": "focus_mode",
          "type": "int",
          "setter": "set_focus_mode",
          "getter": "get_focus_mode",
          "enum": "Control.FocusMode",
          "description": ""
        },
        {
          "name": "tick_count",
          "type": "int",
          "setter": "set_ticks",
          "getter": "get_ticks",
          "description": ""
        },
        {
          "name": "ticks_on_borders",
          "type": "bool",
          "setter": "set_ticks_on_borders",
          "getter": "get_ticks_on_borders",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "PopupDialog": {
      "name": "PopupDialog",
      "inherits": "Popup",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for Popup Dialogs.",
      "description": "PopupDialog is a base class for popup dialogs, along with [WindowDialog].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Object": {
      "name": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for all non built-in types.",
      "description": "Base class for all non built-in types. Everything not a built-in type starts the inheritance chain from this class.\n\t\tObjects do not manage memory, if inheriting from one the object will most likely have to be deleted manually (call the [method free] function from the script or delete from C++).\n\t\tSome derivatives add memory management, such as [Reference] (which keeps a reference count and deletes itself automatically when no longer referenced) and [Node], which deletes the children tree when deleted.\n\t\tObjects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in [method _get_property_list] and handled in [method _get] and [method _set]. However, scripting languages and C++ have simpler means to export them.\n\t\tObjects also receive notifications ([method _notification]). Notifications are a simple way to notify the object about simple events, so they can all be handled together.",
      "methods": [
        {
          "name": "_get",
          "qualifiers": "virtual",
          "description": "Return a property, return null if the property does not exist.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_property_list",
          "qualifiers": "virtual",
          "description": "Return the property list, array of dictionaries, dictionaries must contain: name:String, type:int (see TYPE_* enum in [@Global Scope]) and optionally: hint:int (see PROPERTY_HINT_* in [@Global Scope]), hint_string:String, usage:int (see PROPERTY_USAGE_* in [@Global Scope]).",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "_init",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_notification",
          "qualifiers": "virtual",
          "description": "Notification request, the notification id is received.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_set",
          "qualifiers": "virtual",
          "description": "Set a property. Return true if the property was found.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_user_signal",
          "description": "Add a user signal (can be added anytime). Arguments are optional, but can be added as an array of dictionaries, each containing \"name\" and \"type\" (from [@Global Scope] TYPE_*).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arguments",
              "type": "Array",
              "default_value": "[  ]"
            }
          ]
        },
        {
          "name": "call",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "call_deferred",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "callv",
          "description": "",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arg_array",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "can_translate_messages",
          "qualifiers": "const",
          "description": "Return true if this object can translate strings.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "connect",
          "description": "Connect a signal to a method at a target (member function). Binds are optional and are passed as extra arguments to the call. Flags specify optional deferred or one shot connections, see enum CONNECT_*. A signal can only be connected once to a method, and it will throw an error if already connected. If you want to avoid this, use [method is_connected] to check.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "binds",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "4",
              "name": "flags",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "disconnect",
          "description": "Disconnect a signal from a method.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "emit_signal",
          "qualifiers": "vararg",
          "description": "",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "free",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get",
          "qualifiers": "const",
          "description": "Get a property from the object.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_class",
          "qualifiers": "const",
          "description": "Return the class of the object as a string.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_incoming_connections",
          "qualifiers": "const",
          "description": "Returns an [Array] of dictionaries with information about signals that are connected to this object.\n\t\t\t\tInside each [Dictionary] there are 3 fields:\n\t\t\t\t- \"source\" is a reference to signal emitter.\n\t\t\t\t- \"signal_name\" is name of connected signal.\n\t\t\t\t- \"method_name\" is a name of method to which signal is connected.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_instance_id",
          "qualifiers": "const",
          "description": "Return the instance ID. All objects have a unique instance ID.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_meta",
          "qualifiers": "const",
          "description": "Return a metadata from the object.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_meta_list",
          "qualifiers": "const",
          "description": "Return the list of metadata in the object.",
          "return_type": "PoolStringArray",
          "arguments": []
        },
        {
          "name": "get_method_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_property_list",
          "qualifiers": "const",
          "description": "Return the list of properties as an array of dictionaries, dictionaries contain: name:String, type:int (see TYPE_* enum in [@Global Scope]) and optionally: hint:int (see PROPERTY_HINT_* in [@Global Scope]), hint_string:String, usage:int (see PROPERTY_USAGE_* in [@Global Scope]).",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_script",
          "qualifiers": "const",
          "description": "Return the object script (or null if it doesn't have one).",
          "return_type": "Reference",
          "arguments": []
        },
        {
          "name": "get_signal_connection_list",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_signal_list",
          "qualifiers": "const",
          "description": "Return the list of signals as an array of dictionaries.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "has_meta",
          "qualifiers": "const",
          "description": "Return true if a metadata is found with the requested name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_method",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_user_signal",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_blocking_signals",
          "qualifiers": "const",
          "description": "Return true if signal emission blocking is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_class",
          "qualifiers": "const",
          "description": "Check the class of the object against a string (including inheritance).",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_connected",
          "qualifiers": "const",
          "description": "Return true if a connection exists for a given signal and target/method.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "signal",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "target",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_queued_for_deletion",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "notification",
          "description": "Notify the object of something.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "reversed",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "property_list_changed_notify",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set",
          "description": "Set property into the object.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_block_signals",
          "description": "If set to true, signal emission is blocked.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_message_translation",
          "description": "Define whether this object can translate strings (with calls to [method tr]). Default is true.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_meta",
          "description": "Set a metadata into the object. Metadata is serialized. Metadata can be [i]anything[/i].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_script",
          "description": "Set a script into the object, scripts extend the object functionality.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "script",
              "type": "Reference",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tr",
          "qualifiers": "const",
          "description": "Translate a message. Only works if message translation is enabled (which it is by default). See [method set_message_translation].",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "message",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "script_changed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_POSTINITIALIZE",
          "value": "0",
          "enum": "",
          "description": "Called right when the object is initialized. Not available in script."
        },
        {
          "name": "NOTIFICATION_PREDELETE",
          "value": "1",
          "enum": "",
          "description": "Called before the object is about to be deleted."
        },
        {
          "name": "CONNECT_DEFERRED",
          "value": "1",
          "description": "Connect a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time."
        },
        {
          "name": "CONNECT_PERSIST",
          "value": "2",
          "description": "Persisting connections are saved when the object is serialized to file."
        },
        {
          "name": "CONNECT_ONESHOT",
          "value": "4",
          "description": "One shot connections disconnect themselves after emission."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "PHashTranslation": {
      "name": "PHashTranslation",
      "inherits": "Translation",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Optimized translation.",
      "description": "Optimized translation. Uses real-time compressed translations, which results in very small dictionaries.",
      "methods": [
        {
          "name": "generate",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Translation",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectPhaser": {
      "name": "AudioEffectPhaser",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a Phaser audio effect to an Audio bus.\n\t\tCombines the original signal with a copy that is slightly out of phase with the original.",
      "description": "Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a Low Frequency Oscillator.",
      "methods": [
        {
          "name": "get_depth",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_feedback",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_range_max_hz",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_range_min_hz",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rate_hz",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_depth",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "depth",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_feedback",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fbk",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_range_max_hz",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hz",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_range_min_hz",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hz",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rate_hz",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "hz",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "depth",
          "type": "float",
          "setter": "set_depth",
          "getter": "get_depth",
          "description": "Governs how high the filter frequencies sweep. Low value will primarily affect bass frequencies. High value can sweep high into the treble. Value can range from 0.1 to 4. Default value: [code]1[/code]."
        },
        {
          "name": "feedback",
          "type": "float",
          "setter": "set_feedback",
          "getter": "get_feedback",
          "description": "Output percent of modified sound. Value can range from 0.1 to 0.9. Default value: [code]0.7[/code]."
        },
        {
          "name": "range_max_hz",
          "type": "float",
          "setter": "set_range_max_hz",
          "getter": "get_range_max_hz",
          "description": "Determines the maximum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: [code]1600hz[/code]."
        },
        {
          "name": "range_min_hz",
          "type": "float",
          "setter": "set_range_min_hz",
          "getter": "get_range_min_hz",
          "description": "Determines the minimum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: [code]440hz[/code]."
        },
        {
          "name": "rate_hz",
          "type": "float",
          "setter": "set_rate_hz",
          "getter": "get_rate_hz",
          "description": "Adjusts the rate at which the effect sweeps up and down across the frequency range."
        }
      ],
      "theme_properties": []
    },
    "Rect2": {
      "name": "Rect2",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "2D Axis-aligned bounding box.",
      "description": "Rect2 provides an 2D Axis-Aligned Bounding Box. It consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.",
      "methods": [
        {
          "name": "Rect2",
          "description": "Construct a [Rect2] by position and size.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Rect2",
          "description": "Construct a [Rect2] by x, y, width and height.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "width",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "height",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clip",
          "description": "Returns the intersection of this [Rect2] and b.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "encloses",
          "description": "Returns true if this [Rect2] completely encloses another one.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "expand",
          "description": "Return this [Rect2] expanded to include a given point.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_area",
          "description": "Get the area of the [Rect2].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "grow",
          "description": "Return a copy of the [Rect2] grown a given amount of units towards all the sides.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "grow_individual",
          "description": "",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "top",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "right",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": " bottom",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "grow_margin",
          "description": "",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "by",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_no_area",
          "description": "Return true if the [Rect2] is flat or empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has_point",
          "description": "Return true if the [Rect2] contains a point.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "point",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "intersects",
          "description": "Return true if the [Rect2] overlaps with another.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "merge",
          "description": "Combine this [Rect2] with another, a larger one is returned that contains both.",
          "return_type": "Rect2",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "b",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "end",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "Ending corner."
        },
        {
          "name": "position",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "Position (starting corner)."
        },
        {
          "name": "size",
          "type": "Vector2",
          "setter": "",
          "getter": "",
          "description": "Size from position to end."
        }
      ],
      "theme_properties": []
    },
    "@GDScript": {
      "name": "@GDScript",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Built-in GDScript functions.",
      "description": "This contains the list of built-in gdscript functions. Mostly math functions and other utilities. Everything else is expanded by objects.",
      "methods": [
        {
          "name": "Color8",
          "description": "Returns a 32 bit color with red, green, blue and alpha channels. Each channel has 8 bits of information ranging from 0 to 255.\n\t\t\t\t[code]r8[/code] red channel\n\t\t\t\t[code]g8[/code] green channel\n\t\t\t\t[code]b8[/code] blue channel\n\t\t\t\t[code]a8[/code] alpha channel\n\t\t\t\t[codeblock]\n\t\t\t\tred = Color8(255, 0, 0)\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "r8",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "g8",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "b8",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "a8",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ColorN",
          "description": "Returns color [code]name[/code] with [code]alpha[/code] ranging from 0 to 1. Note: [code]name[/code] is defined in color_names.inc.\n\t\t\t\t[codeblock]\n\t\t\t\tred = ColorN('red')\n\t\t\t\t[/codeblock]",
          "return_type": "Color",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "alpha",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "abs",
          "description": "Returns the absolute value of parameter [code]s[/code]  (i.e. unsigned value, works for integer and float).\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 1\n\t\t\t\ta = abs(-1)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "acos",
          "description": "Returns the arc cosine of [code]s[/code] in radians. Use to get the angle of cosine [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# c is 0.523599 or 30 degrees if converted with rad2deg(s)\n\t\t\t\tc = acos(0.866025)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "asin",
          "description": "Returns the arc sine of [code]s[/code] in radians. Use to get the angle of sine [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# s is 0.523599 or 30 degrees if converted with rad2deg(s)\n\t\t\t\ts = asin(0.5)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert",
          "description": "Assert that the [code]condition[/code] is true. If the [code]condition[/code] is false a fatal error is generated and the program is halted. Useful for debugging to make sure a value is always true.\n\t\t\t\t[codeblock]\n\t\t\t\t# Speed should always be between 0 and 20\n\t\t\t\tspeed = -10\n\t\t\t\tassert(speed < 20) # Is true and program continues\n\t\t\t\tassert(speed >= 0) # Is false and program stops\n\t\t\t\tassert(speed >= 0 && speed < 20) # Or combined\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "condition",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "atan",
          "description": "Returns the arc tangent of [code]s[/code] in radians. Use it to get the angle from an angle's tangent in trigonometry: [code]atan(tan(angle)) == angle[/code].\n\t\t\t\tThe method cannot know in which quadrant the angle should fall. See [method atan2] if you always want an exact angle.\n\t\t\t\t[codeblock]\n\t\t\t\ta = atan(0.5) # a is 0.463648\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "atan2",
          "description": "Returns the arc tangent of [code]y/x[/code] in radians. Use to get the angle of tangent [code]y/x[/code]. To compute the value, the method takes into account the sign of both arguments in order to determine the quadrant.\n\t\t\t\t[codeblock]\n\t\t\t\ta = atan(0,-1) # a is 3.141593\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bytes2var",
          "description": "Decodes a byte array back to a value.",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ceil",
          "description": "Rounds [code]s[/code] upward, returning the smallest integral value that is not less than [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\ti = ceil(1.45)  # i is 2\n\t\t\t\ti = ceil(1.001) # i is 2\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "char",
          "description": "Returns a character as a String of the given ASCII code.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 'A'\n\t\t\t\ta = char(65)\n\t\t\t\t# a is 'a'\n\t\t\t\ta = char(65+32)\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ascii",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "clamp",
          "description": "Clamps [code]val[/code] and returns a value not less than [code]min[/code] and not more than [code]max[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tspeed = 1000\n\t\t\t\t# a is 20\n\t\t\t\ta = clamp(speed, 1, 20)\n\n\t\t\t\tspeed = -10\n\t\t\t\t# a is 1\n\t\t\t\ta = clamp(speed, 1, 20)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "min",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "max",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "convert",
          "description": "Converts from a type to another in the best way possible. The [code]type[/code] parameter uses the enum TYPE_* in [@Global Scope].\n\t\t\t\t[codeblock]\n\t\t\t\ta = Vector2(1, 0)\n\t\t\t\t# prints 1\n\t\t\t\tprint(a.length())\n\t\t\t\ta = convert(a, TYPE_STRING)\n\t\t\t\t# prints 6\n\t\t\t\t# (1, 0) is 6 characters\n\t\t\t\tprint(a.length())\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cos",
          "description": "Returns the cosine of angle [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\t# prints 1 and -1\n\t\t\t\tprint(cos(PI*2))\n\t\t\t\tprint(cos(PI))\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "cosh",
          "description": "Returns the hyperbolic cosine of [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\t# prints 1.543081\n\t\t\t\tprint(cosh(1))\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "db2linear",
          "description": "Converts from decibels to linear energy (audio).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "db",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "decimals",
          "description": "Returns the position of the first non-zero digit, after the decimal point.\n\t\t\t\t[codeblock]\n\t\t\t\t# n is 2\n\t\t\t\tn = decimals(0.035)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dectime",
          "description": "Returns the result of [code]value[/code] decreased by [code]step[/code] * [code]amount[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# a = 59\n\t\t\t\ta = dectime(60, 10, 0.1))\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "amount",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "deg2rad",
          "description": "Returns degrees converted to radians.\n\t\t\t\t[codeblock]\n\t\t\t\t# r is 3.141593\n\t\t\t\tr = deg2rad(180)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "deg",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "dict2inst",
          "description": "Converts a previously converted instance to a dictionary, back into an instance. Useful for deserializing.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "dict",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ease",
          "description": "Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "curve",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "exp",
          "description": "Raises the Euler's constant [b]e[/b] to the power of [code]s[/code] and returns it. [b]e[/b] has an approximate value of 2.71828.\n\t\t\t\t[codeblock]\n\t\t\t\ta = exp(2) # approximately 7.39\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "floor",
          "description": "Rounds [code]s[/code] to the closest smaller integer and returns it.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 2\n\t\t\t\ta = floor(2.99)\n\t\t\t\t# a is -3\n\t\t\t\ta = floor(-2.99)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fmod",
          "description": "Returns the floating-point remainder of [code]x/y[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# remainder is 1.5\n\t\t\t\tvar remainder = fmod(7, 5.5)\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "fposmod",
          "description": "Returns the floating-point remainder of [code]x/y[/code] that wraps equally in positive and negative.\n\t\t\t\t[codeblock]\n\t\t\t\tvar i = -10;\n\t\t\t\twhile i < 0:\n\t\t\t\t    prints(i, fposmod(i, 10))\n\t\t\t\t    i += 1\n\t\t\t\t[/codeblock]\n\t\t\t\tProduces:\n\t\t\t\t[codeblock]\n\t\t\t\t-10 10\n\t\t\t\t-9 1\n\t\t\t\t-8 2\n\t\t\t\t-7 3\n\t\t\t\t-6 4\n\t\t\t\t-5 5\n\t\t\t\t-4 6\n\t\t\t\t-3 7\n\t\t\t\t-2 8\n\t\t\t\t-1 9\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "funcref",
          "description": "Returns a reference to the specified function [code]funcname[/code] in the [code]instance[/code] node. As functions aren't first-class objects in GDscript, use [code]funcref[/code] to store a [FuncRef] in a variable and call it later.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc foo():\n\t\t\t\t    return(\"bar\")\n\n\t\t\t\ta = funcref(self, \"foo\")\n\t\t\t\tprint(a.call_func()) # prints bar\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "funcname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hash",
          "description": "Returns the integer hash of the variable passed.\n\t\t\t\t[codeblock]\n\t\t\t\tprint(hash(\"a\")) # prints 177670\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inst2dict",
          "description": "Returns the passed instance converted to a dictionary (useful for serializing).\n\t\t\t\t[codeblock]\n\t\t\t\tvar foo = \"bar\"\n\t\t\t\tfunc _ready():\n\t\t\t\t    var d = inst2dict(self)\n\t\t\t\t    print(d.keys())\n\t\t\t\t    print(d.values())\n\t\t\t\t[/codeblock]\n\t\t\t\tPrints out:\n\t\t\t\t[codeblock]\n\t\t\t\t[@subpath, @path, foo]\n\t\t\t\t[, res://test.gd, bar]\n\t\t\t\t[/codeblock]",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "inst",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "instance_from_id",
          "description": "Returns the Object that corresponds to [code]instance_id[/code]. All Objects have a unique instance ID.\n\t\t\t\t[codeblock]\n\t\t\t\tvar foo = \"bar\"\n\t\t\t\tfunc _ready():\n\t\t\t\t    var id = get_instance_id()\n\t\t\t\t    var inst = instance_from_id(id)\n\t\t\t\t    print(inst.foo) # prints bar\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "inverse_lerp",
          "description": "Returns a normalized value considering the given range.\n\t\t\t\t[codeblock]\n\t\t\t\tinverse_lerp(3, 5, 4) # returns 0.5\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_inf",
          "description": "Returns True/False whether [code]s[/code] is an infinity value (either positive infinity or negative infinity).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_nan",
          "description": "Returns True/False whether [code]s[/code] is a NaN (Not-A-Number) value.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "len",
          "description": "Returns length of Variant [code]var[/code]. Length is the character count of String, element count of Array, size of Dictionary, etc. Note: Generates a fatal error if Variant can not provide a length.\n\t\t\t\t[codeblock]\n\t\t\t\ta = [1, 2, 3, 4]\n\t\t\t\tlen(a) # returns 4\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "lerp",
          "description": "Linearly interpolates between two values by a normalized value.\n\t\t\t\t[codeblock]\n\t\t\t\tlerp(1, 3, 0.5) # returns 2\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "weight",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "linear2db",
          "description": "Converts from linear energy to decibels (audio).",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "nrg",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "load",
          "description": "Loads a resource from the filesystem located at 'path'. Note: resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing \"Copy Path\".\n\t\t\t\t[codeblock]\n\t\t\t\t# load a scene called main located in the root of the project directory\n\t\t\t\tvar main = load(\"res://main.tscn\")\n\t\t\t\t[/codeblock]",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "log",
          "description": "Natural logarithm. The amount of time needed to reach a certain level of continuous growth. Note: This is not the same as the log function on your calculator which is a base 10 logarithm.\n\t\t\t\t[codeblock]\n\t\t\t\tlog(10) # returns 2.302585\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "max",
          "description": "Returns the maximum of two values.\n\t\t\t\t[codeblock]\n\t\t\t\tmax(1,2) # returns 2\n\t\t\t\tmax(-3.99, -4) # returns -3.99\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "b",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "min",
          "description": "Returns the minimum of two values.\n\t\t\t\t[codeblock]\n\t\t\t\tmin(1,2) # returns 1\n\t\t\t\tmin(-3.99, -4) # returns -4\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "a",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "b",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "nearest_po2",
          "description": "Returns the nearest larger power of 2 for integer [code]val[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tnearest_po2(3) # returns 4\n\t\t\t\tnearest_po2(4) # returns 4\n\t\t\t\tnearest_po2(5) # returns 8\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "val",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "parse_json",
          "description": "Parse JSON text to a Variant (use [method typeof] to check if it is what you expect).\n\t\t\t\tBe aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to [float] types.\n\t\t\t\t[codeblock]\n\t\t\t\tp = parse_json('[\"a\", \"b\", \"c\"]')\n\t\t\t\tif typeof(p) == TYPE_ARRAY:\n\t\t\t\t    print(p[0]) # prints a\n\t\t\t\telse:\n\t\t\t\t    print(\"unexpected results\")\n\t\t\t\t[/codeblock]",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "json",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pow",
          "description": "Returns the result of [code]x[/code] raised to the power of [code]y[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tpow(2,5) # returns 32\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "preload",
          "description": "Returns a resource from the filesystem that is loaded during script parsing. Note: resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing \"Copy Path\".\n\t\t\t\t[codeblock]\n\t\t\t\t# load a scene called main located in the root of the project directory\n\t\t\t\tvar main = preload(\"res://main.tscn\")\n\t\t\t\t[/codeblock]",
          "return_type": "Resource",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print",
          "qualifiers": "vararg",
          "description": "Converts one or more arguments to strings in the best way possible and prints them to the console.\n\t\t\t\t[codeblock]\n\t\t\t\ta = [1,2,3]\n\t\t\t\tprint(\"a\",\"b\",a) # prints ab[1, 2, 3]\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "print_stack",
          "description": "Prints a stack track at code location, only works when running with debugger turned on.\n\t\t\t\tOutput in the console would look something like this:\n\t\t\t\t[codeblock]\n\t\t\t\tFrame 0 - res://test.gd:16 in function '_process'\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "printerr",
          "qualifiers": "vararg",
          "description": "Prints one or more arguments to strings in the best way possible to standard error line.\n\t\t\t\t[codeblock]\n\t\t\t\tprinterr(\"prints to stderr\")\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "printraw",
          "qualifiers": "vararg",
          "description": "Prints one or more arguments to strings in the best way possible to console. No newline is added at the end.\n\t\t\t\t[codeblock]\n\t\t\t\tprintraw(\"A\")\n\t\t\t\tprintraw(\"B\")\n\t\t\t\t# prints AB\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "prints",
          "qualifiers": "vararg",
          "description": "Prints one or more arguments to the console with a space between each argument.\n\t\t\t\t[codeblock]\n\t\t\t\tprints(\"A\", \"B\", \"C\") # prints A B C\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "printt",
          "qualifiers": "vararg",
          "description": "Prints one or more arguments to the console with a tab between each argument.\n\t\t\t\t[codeblock]\n\t\t\t\tprintt(\"A\", \"B\", \"C\") # prints A       B       C\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "rad2deg",
          "description": "Converts from radians to degrees.\n\t\t\t\t[codeblock]\n\t\t\t\trad2deg(0.523599) # returns 30\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rad",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rand_range",
          "description": "Random range, any floating point value between [code]from[/code] and [code]to[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tprints(rand_range(0, 1), rand_range(0, 1)) # prints 0.135591 0.405263\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rand_seed",
          "description": "Random from seed: pass a [code]seed[/code], and an array with both number and new seed is returned. \"Seed\" here refers to the internal state of the pseudo random number generator. The internal state of the current implementation is 64 bits.",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "seed",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "randf",
          "description": "Returns a random floating point value between 0 and 1.\n\t\t\t\t[codeblock]\n\t\t\t\trandf() # returns 0.375671\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "randi",
          "description": "Returns a random 32 bit integer. Use remainder to obtain a random value between 0 and N (where N is smaller than 2^32 -1).\n\t\t\t\t[codeblock]\n\t\t\t\trandi() % 20      # returns random number between 0 and 19\n\t\t\t\trandi() % 100     # returns random number between 0 and 99\n\t\t\t\trandi() % 100 + 1 # returns random number between 1 and 100\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "randomize",
          "description": "Randomizes the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _ready():\n\t\t\t\t    randomize()\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "range",
          "qualifiers": "vararg",
          "description": "Returns an array with the given range. Range can be 1 argument N (0 to N-1), two arguments (initial, final-1) or three arguments (initial, final-1, increment).\n\t\t\t\t[codeblock]\n\t\t\t\tfor i in range(4):\n\t\t\t\t    print(i)\n\t\t\t\tfor i in range(2, 5):\n\t\t\t\t    print(i)\n\t\t\t\tfor i in range(0, 6, 2):\n\t\t\t\t    print(i)\n\t\t\t\t[/codeblock]\n\t\t\t\tOutput:\n\t\t\t\t[codeblock]\n\t\t\t\t0\n\t\t\t\t1\n\t\t\t\t2\n\t\t\t\t3\n\n\t\t\t\t2\n\t\t\t\t3\n\t\t\t\t4\n\n\t\t\t\t0\n\t\t\t\t2\n\t\t\t\t4\n\t\t\t\t[/codeblock]",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "range_lerp",
          "description": "Maps a [code]value[/code] from range [code][istart, istop][/code] to [code][ostart, ostop][/code].\n\t\t\t\t[codeblock]\n\t\t\t\trange_lerp(75, 0, 100, -1, 1) # returns 0.5\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "istart",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "istop",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "ostart",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "ostop",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "round",
          "description": "Returns the integral value that is nearest to [code]s[/code], with halfway cases rounded away from zero.\n\t\t\t\t[codeblock]\n\t\t\t\tround(2.6) # returns 3\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "seed",
          "description": "Sets seed for the random number generator.\n\t\t\t\t[codeblock]\n\t\t\t\tmy_seed = \"Godot Rocks\"\n\t\t\t\tseed(my_seed.hash())\n\t\t\t\t[/codeblock]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "seed",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sign",
          "description": "Returns sign of [code]s[/code] -1 or 1.\n\t\t\t\t[codeblock]\n\t\t\t\tsign(-6) # returns -1\n\t\t\t\tsign(6)  # returns 1\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sin",
          "description": "Returns the sine of angle [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\tsin(0.523599) # returns 0.5\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sinh",
          "description": "Returns the hyperbolic sine of [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\ta = log(2.0) # returns 0.693147\n\t\t\t\tsinh(a) # returns 0.75\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sqrt",
          "description": "Returns the square root of [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tsqrt(9) # returns 3\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "stepify",
          "description": "Snaps float value [code]s[/code] to a given [code]step[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "step",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "str",
          "qualifiers": "vararg",
          "description": "Converts one or more arguments to string in the best way possible.\n\t\t\t\t[codeblock]\n\t\t\t\tvar a = [10, 20, 30]\n\t\t\t\tvar b = str(a);\n\t\t\t\tlen(a) # returns 3\n\t\t\t\tlen(b) # returns 12\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "str2var",
          "description": "Converts a formatted string that was returned by [method var2str] to the original value.\n\t\t\t\t[codeblock]\n\t\t\t\ta = '{ \"a\": 1, \"b\": 2 }'\n\t\t\t\tb = str2var(a)\n\t\t\t\tprint(b['a']) # prints 1\n\t\t\t\t[/codeblock]",
          "return_type": "Variant",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "string",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tan",
          "description": "Returns the tangent of angle [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\ttan( deg2rad(45) ) # returns 1\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tanh",
          "description": "Returns the hyperbolic tangent of [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\ta = log(2.0) # returns 0.693147\n\t\t\t\ttanh(a)      # returns 0.6\n\t\t\t\t[/codeblock]",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "s",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_json",
          "description": "Converts a Variant [code]var[/code] to JSON text and return the result. Useful for serializing data to store or send over the network.\n\t\t\t\t[codeblock]\n\t\t\t\ta = { 'a': 1, 'b': 2 }\n\t\t\t\tb = to_json(a)\n\t\t\t\tprint(b) # {\"a\":1, \"b\":2}\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "type_exists",
          "description": "Returns whether the given class exists in [ClassDB].\n\t\t\t\t[codeblock]\n\t\t\t\ttype_exists(\"Sprite\") # returns true\n\t\t\t\ttype_exists(\"Variant\") # returns false\n\t\t\t\t[/codeblock]",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "typeof",
          "description": "Returns the internal type of the given Variant object, using the TYPE_* enum in [@Global Scope].\n\t\t\t\t[codeblock]\n\t\t\t\tp = parse_json('[\"a\", \"b\", \"c\"]')\n\t\t\t\tif typeof(p) == TYPE_ARRAY:\n\t\t\t\t    print(p[0]) # prints a\n\t\t\t\telse:\n\t\t\t\t    print(\"unexpected results\")\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "validate_json",
          "description": "Checks that [code]json[/code] is valid JSON data. Returns empty string if valid. Returns error message if not valid.\n\t\t\t\t[codeblock]\n\t\t\t\tj = to_json([1, 2, 3])\n\t\t\t\tv = validate_json(j)\n\t\t\t\tif not v:\n\t\t\t\t    print(\"valid\")\n\t\t\t\telse:\n\t\t\t\t    prints(\"invalid\", v)\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "json",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "var2bytes",
          "description": "Encodes a variable value to a byte array.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "var2str",
          "description": "Converts a Variant [code]var[/code] to a formatted string that can later be parsed using [method str2var].\n\t\t\t\t[codeblock]\n\t\t\t\ta = { 'a': 1, 'b': 2 }\n\t\t\t\tprint(var2str(a))\n\t\t\t\t[/codeblock]\n\t\t\t\tprints\n\t\t\t\t[codeblock]\n\t\t\t\t{\n\t\t\t\t\"a\": 1,\n\t\t\t\t\"b\": 2\n\t\t\t\t}\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "var",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "weakref",
          "description": "Returns a weak reference to an object.\n\t\t\t\tA weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.",
          "return_type": "Object",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "yield",
          "description": "Stops the function execution and returns the current state. Call [method GDFunctionState.resume] on the state to resume execution. This invalidates the state.\n\t\t\t\tReturns anything that was passed to the resume function call. If passed an object and a signal, the execution is resumed when the object's signal is emitted.",
          "return_type": "GDFunctionState",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "object",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "signal",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PI",
          "value": "3.141593",
          "enum": "",
          "description": "Constant that represents how many times the diameter of a circumference fits around its perimeter."
        },
        {
          "name": "INF",
          "value": "inf",
          "enum": "",
          "description": "A positive infinity. (For negative infinity, use -INF)."
        },
        {
          "name": "NAN",
          "value": "nan",
          "enum": "",
          "description": "Macro constant that expands to an expression of type float that represents a NaN.\n\t\t\tThe NaN values are used to identify undefined or non-representable values for floating-point elements, such as the square root of negative numbers or the result of 0/0."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "CanvasLayer": {
      "name": "CanvasLayer",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Canvas drawing layer.",
      "description": "Canvas drawing layer. [CanvasItem] nodes that are direct or indirect children of a [CanvasLayer] will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a [CanvasLayer] with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below).",
      "methods": [
        {
          "name": "get_custom_viewport",
          "qualifiers": "const",
          "description": "",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_layer",
          "qualifiers": "const",
          "description": "Return the layer index, determines the draw order, a lower value will be below a higher one.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_offset",
          "qualifiers": "const",
          "description": "Return the base offset for this layer (helper).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_rotation",
          "qualifiers": "const",
          "description": "Return the base rotation for this layer in radians (helper).",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_rotationd",
          "qualifiers": "const",
          "description": "Return the base rotation for this layer in degrees.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_scale",
          "qualifiers": "const",
          "description": "Return the base scale for this layer (helper).",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_transform",
          "qualifiers": "const",
          "description": "Return the base transform for this layer.",
          "return_type": "Transform2D",
          "arguments": []
        },
        {
          "name": "get_world_2d",
          "qualifiers": "const",
          "description": "Return the [World2D] used by this layer.",
          "return_type": "World2D",
          "arguments": []
        },
        {
          "name": "set_custom_viewport",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "viewport",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_layer",
          "description": "Set the layer index, determines the draw order, a lower value will be below a higher one.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_offset",
          "description": "Set the base offset for this layer (helper).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotation",
          "description": "Set the base rotation for this layer in radians (helper).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "radians",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_rotationd",
          "description": "Set the base rotation for this layer in degrees (helper).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "degrees",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scale",
          "description": "Set the base scale for this layer (helper).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_transform",
          "description": "Set the base transform for this layer.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "layer",
          "type": "int",
          "setter": "set_layer",
          "getter": "get_layer",
          "description": "Layer index for draw order. Lower values are drawn first. Default value: [code]1[/code]."
        },
        {
          "name": "offset",
          "type": "Vector2",
          "setter": "set_offset",
          "getter": "get_offset",
          "description": "The layer's base offset."
        },
        {
          "name": "rotation",
          "type": "float",
          "setter": "set_rotationd",
          "getter": "get_rotationd",
          "description": "The layer's rotation in degrees."
        },
        {
          "name": "scale",
          "type": "Vector2",
          "setter": "set_scale",
          "getter": "get_scale",
          "description": "The layer's scale."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectPitchShift": {
      "name": "AudioEffectPitchShift",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a Pitch shift audio effect to an Audio bus.\n\t\tRaises or lowers the pitch of original sound.",
      "description": "Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.",
      "methods": [
        {
          "name": "get_pitch_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_pitch_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "rate",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "pitch_scale",
          "type": "float",
          "setter": "set_pitch_scale",
          "getter": "get_pitch_scale",
          "description": "Pitch value. Can range from 0 (-1 octave) to 16 (+16 octaves)."
        }
      ],
      "theme_properties": []
    },
    "SpatialGizmo": {
      "name": "SpatialGizmo",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectReverb": {
      "name": "AudioEffectReverb",
      "inherits": "AudioEffect",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a Reverb audio effect to an Audio bus.\n\t\tSimulates the sound of acoustic environments such as rooms, concert halls, caverns, or an open spaces.",
      "description": "Simulates rooms of different sizes. Its parameters can be adjusted to simulate the sound of a specific room.",
      "methods": [
        {
          "name": "get_damping",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_dry",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_hpf",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_predelay_feedback",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_predelay_msec",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_room_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_spread",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_wet",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_damping",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_dry",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hpf",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_predelay_feedback",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "feedback",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_predelay_msec",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "msec",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_room_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_spread",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_wet",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "damping",
          "type": "float",
          "setter": "set_damping",
          "getter": "get_damping",
          "description": "Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "dry",
          "type": "float",
          "setter": "set_dry",
          "getter": "get_dry",
          "description": "Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "hipass",
          "type": "float",
          "setter": "set_hpf",
          "getter": "get_hpf",
          "description": "High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1. Default value: [code]0[/code]."
        },
        {
          "name": "predelay_feedback",
          "type": "float",
          "setter": "set_predelay_msec",
          "getter": "get_predelay_msec",
          "description": "Output percent of predelay. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "predelay_msec",
          "type": "float",
          "setter": "set_predelay_msec",
          "getter": "get_predelay_msec",
          "description": "Time between the original signal and the early reflections of the reverb signal. Default value: [code]150ms[/code]."
        },
        {
          "name": "room_size",
          "type": "float",
          "setter": "set_room_size",
          "getter": "get_room_size",
          "description": "Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1. Default value: [code]0.8[/code]."
        },
        {
          "name": "spread",
          "type": "float",
          "setter": "set_spread",
          "getter": "get_spread",
          "description": "Defines how reflective the imaginary room's walls are. Value can range from 0 to 1. Default value: [code]1[/code]."
        },
        {
          "name": "wet",
          "type": "float",
          "setter": "set_wet",
          "getter": "get_wet",
          "description": "Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1. Default value: [code]0.5[/code]."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptReturn": {
      "name": "VisualScriptReturn",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_return_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_return_value_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_enable_return_value",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_return_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "return_enabled",
          "type": "bool",
          "setter": "set_enable_return_value",
          "getter": "is_return_value_enabled",
          "description": ""
        },
        {
          "name": "return_type",
          "type": "int",
          "setter": "set_return_type",
          "getter": "get_return_type",
          "enum": "Variant.Type",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TileSet": {
      "name": "TileSet",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Tile library for tilemaps.",
      "description": "A TileSet is a library of tiles for a [TileMap]. It contains a list of tiles, each consisting of a sprite and optional collision shapes.\n\t\tTiles are referenced by a unique integer ID.",
      "methods": [
        {
          "name": "clear",
          "description": "Clear all tiles.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "create_tile",
          "description": "Create a new tile which will be referenced by the given ID.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find_tile_by_name",
          "qualifiers": "const",
          "description": "Find the first tile matching the given name.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_last_unused_tile_id",
          "qualifiers": "const",
          "description": "Return the ID following the last currently used ID, useful when creating a new tile.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tiles_ids",
          "qualifiers": "const",
          "description": "Return an array of all currently used tile IDs.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "remove_tile",
          "description": "Remove the tile referenced by the given ID.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_add_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_transform",
              "type": "Transform2D",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "one_way",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "tile_get_light_occluder",
          "qualifiers": "const",
          "description": "Return the light occluder of the tile.",
          "return_type": "OccluderPolygon2D",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_material",
          "qualifiers": "const",
          "description": "Return the material of the tile.",
          "return_type": "ShaderMaterial",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_name",
          "qualifiers": "const",
          "description": "Return the name of the tile.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_navigation_polygon",
          "qualifiers": "const",
          "description": "Return the navigation polygon of the tile.",
          "return_type": "NavigationPolygon",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_navigation_polygon_offset",
          "qualifiers": "const",
          "description": "Return the offset of the tile's navigation polygon.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_normal_map",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_occluder_offset",
          "qualifiers": "const",
          "description": "Return the offset of the tile's light occluder.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_region",
          "qualifiers": "const",
          "description": "Return the tile sub-region in the texture.",
          "return_type": "Rect2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "Shape2D",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape_one_way",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shape_transform",
          "qualifiers": "const",
          "description": "",
          "return_type": "Transform2D",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_shapes",
          "qualifiers": "const",
          "description": "Return the array of shapes of the tile.",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_texture",
          "qualifiers": "const",
          "description": "Return the texture of the tile.",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_get_texture_offset",
          "qualifiers": "const",
          "description": "Return the texture offset of the tile.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_light_occluder",
          "description": "Set a light occluder for the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "light_occluder",
              "type": "OccluderPolygon2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_material",
          "description": "Set the material of the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "ShaderMaterial",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_name",
          "description": "Set the name of the tile, for descriptive purposes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_navigation_polygon",
          "description": "Set a navigation polygon for the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "navigation_polygon",
              "type": "NavigationPolygon",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_navigation_polygon_offset",
          "description": "Set an offset for the tile's navigation polygon.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "navigation_polygon_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_normal_map",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "normal_map",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_occluder_offset",
          "description": "Set an offset for the tile's light occluder.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "occluder_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_region",
          "description": "Set the tile sub-region in the texture. This is common in texture atlases.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "region",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shape_one_way",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "one_way",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shape_transform",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shape_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "shape_transform",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_shapes",
          "description": "Set an array of shapes for the tile, enabling physics to collide with it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "shapes",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_texture",
          "description": "Set the texture of the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tile_set_texture_offset",
          "description": "Set the texture offset of the tile.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "texture_offset",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Node": {
      "name": "Node",
      "inherits": "Object",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base class for all the [i]scene[/i] elements.",
      "description": "Nodes are the base bricks with which Godot games are developed. They can be set as children of other nodes, resulting in a tree arrangement. A given node can contain any number of nodes as children (but there is only one scene tree root node) with the requirement that all siblings (direct children of a node) should have unique names.\n\t\tAny tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of the projects. Nodes can optionally be added to groups. This makes it easy to reach a number of nodes from the code (for example an \"enemies\" group) to perform grouped actions.\n\t\t[b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Children nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's.\n\t\tOnce all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, from the children up to the parent nodes.\n\t\tIt means that when adding a scene to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (and that recursively for the whole scene).\n\t\t[b]Processing:[/b] Nodes can be set to the \"process\" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is variable. Physics processing (callback [method _physics_process], toggled with [method set_physics_process]) happens a fixed amount of times per second (by default 60) and is useful to link itself to the physics.\n\t\tNodes can also process input events. When set, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it.\n\t\tTo keep track of the scene hierarchy (especially when instancing scenes into other scenes), an \"owner\" can be set for the node with [method set_owner]. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.\n\t\tFinally, when a node is freed with [method free] or [method queue_free], it will also free all its children.\n\t\t[b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]) it is possible to use the built-in RPC (remote procedure call) system to easily communicate over the network. By calling [method rpc] with a method name, it will be called locally, and in all connected peers (peers = clients and the server that accepts connections), with behaviour varying depending on the network mode ([method set_network_mode]) on the receiving peer. To identify which [Node] receives the RPC call Godot will use its [NodePath] (make sure node names are the same on all peers).",
      "methods": [
        {
          "name": "_enter_tree",
          "qualifiers": "virtual",
          "description": "Called when the node enters the [SceneTree] (e.g. upon instancing, scene changing or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children.\n\t\t\t\tCorresponds to the NOTIFICATION_ENTER_TREE notification in [method Object._notification].",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_exit_tree",
          "qualifiers": "virtual",
          "description": "Called when the node leaves the [SceneTree] (e.g. upon freeing, scene changing or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree.\n\t\t\t\tCorresponds to the NOTIFICATION_EXIT_TREE notification in [method Object._notification].",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_input",
          "qualifiers": "virtual",
          "description": "Called when there is a change to input devices. Propagated through the node tree until a Node consumes it.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_physics_process",
          "qualifiers": "virtual",
          "description": "Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the [code]delta[/code] variable should be constant.\n\t\t\t\tIt is only called if physics processing has been enabled with [method set_physics_process].\n\t\t\t\tCorresponds to the NOTIFICATION_PHYSICS_PROCESS notification in [method Object._notification].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_process",
          "qualifiers": "virtual",
          "description": "Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [code]delta[/code] time since the previous frame is not constant.\n\t\t\t\tIt is only called if processing has been enabled with [method set_process].\n\t\t\t\tCorresponds to the NOTIFICATION_PROCESS notification in [method Object._notification].",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "delta",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_ready",
          "qualifiers": "virtual",
          "description": "Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callback gets triggered first, and the node will receive the ready notification only afterwards.\n\t\t\t\tCorresponds to the NOTIFICATION_READY notification in [method Object._notification].",
          "return_type": "void",
          "arguments": []
        },
        {
          "name": "_unhandled_input",
          "qualifiers": "virtual",
          "description": "Propagated to all nodes when the previous InputEvent is not consumed by any nodes.",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEvent",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_unhandled_key_input",
          "qualifiers": "virtual",
          "description": "",
          "return_type": "void",
          "arguments": [
            {
              "index": "0",
              "name": "event",
              "type": "InputEventKey",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_child",
          "description": "Add a child [Node]. Nodes can have as many children as they want, but every child must have a unique name. Children nodes are automatically deleted when the parent node is deleted, so deleting a whole scene is performed by deleting its topmost node.\n\t\t\t\tThe optional boolean argument enforces creating child nodes with human-readable names, based on the name of the node being instanced instead of its type only.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "legible_unique_name",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_child_below_node",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "child_node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "legible_unique_name",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "add_to_group",
          "description": "Add a node to a group. Groups are helpers to name and organize a subset of nodes, like for example \"enemies\" or \"collectables\". A [Node] can be in any number of groups. Nodes can be assigned a group at any time, but will not be added to it until they are inside the scene tree (see [method is_inside_tree]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "persistent",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "can_process",
          "qualifiers": "const",
          "description": "Return true if the node can process, i.e. whether its pause mode allows processing while the scene tree is paused (see [method set_pause_mode]). Always returns true if the scene tree is not paused, and false if the node is not in the tree. FIXME: Why FAIL_COND?",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "duplicate",
          "qualifiers": "const",
          "description": "Duplicate the node, returning a new [Node].\n\t\t\t\tYou can fine-tune the behavior using the [code]flags[/code], which are based on the DUPLICATE_* constants.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "flags",
              "type": "int",
              "default_value": "15"
            }
          ]
        },
        {
          "name": "find_node",
          "qualifiers": "const",
          "description": "Find a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "mask",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "recursive",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "2",
              "name": "owned",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_child",
          "qualifiers": "const",
          "description": "Return a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node.",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_child_count",
          "qualifiers": "const",
          "description": "Return the amount of child nodes.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_children",
          "qualifiers": "const",
          "description": "Return an array of references ([Node]) to the child nodes.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_filename",
          "qualifiers": "const",
          "description": "Return a filename that may be contained by the node. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded (see [method set_filename]).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_groups",
          "qualifiers": "const",
          "description": "Return an array listing the groups that the node is part of.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_index",
          "qualifiers": "const",
          "description": "Get the node index, i.e. its position among the siblings of its parent.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_name",
          "qualifiers": "const",
          "description": "Return the name of the node. This name is unique among the siblings (other child nodes from the same parent).",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_network_master",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_node",
          "qualifiers": "const",
          "description": "Fetch a node. The [NodePath] must be valid (or else an error will be raised) and can be either the path to child node, a relative path (from the current node to another node), or an absolute path to a node.\n\t\t\t\tNote: fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]).\n\t\t\t\t[i]Example:[/i] Assume your current node is Character and the following tree:\n\t\t\t\t[codeblock]\n\t\t\t\t/root\n\t\t\t\t/root/Character\n\t\t\t\t/root/Character/Sword\n\t\t\t\t/root/Character/Backpack/Dagger\n\t\t\t\t/root/MyGame\n\t\t\t\t/root/Swamp/Alligator\n\t\t\t\t/root/Swamp/Mosquito\n\t\t\t\t/root/Swamp/Goblin\n\t\t\t\t[/codeblock]\n\t\t\t\tPossible paths are:\n\t\t\t\t[codeblock]\n\t\t\t\tget_node(\"Sword\")\n\t\t\t\tget_node(\"Backpack/Dagger\")\n\t\t\t\tget_node(\"../Swamp/Alligator\")\n\t\t\t\tget_node(\"/root/MyGame\")\n\t\t\t\t[/codeblock]",
          "return_type": "Node",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_and_resource",
          "description": "",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_owner",
          "qualifiers": "const",
          "description": "Get the node owner (see [method set_owner]).",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_parent",
          "qualifiers": "const",
          "description": "Return the parent node of the current node, or an empty [Node] if the node lacks a parent.",
          "return_type": "Node",
          "arguments": []
        },
        {
          "name": "get_path",
          "qualifiers": "const",
          "description": "Return the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree]).",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_path_to",
          "qualifiers": "const",
          "description": "Return the relative path from the current node to the specified node in \"node\" argument. Both nodes must be in the same scene, or else the function will fail.",
          "return_type": "NodePath",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_pause_mode",
          "qualifiers": "const",
          "description": "Return the pause mode (PAUSE_MODE_*) of this Node.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_physics_process_delta_time",
          "qualifiers": "const",
          "description": "Return the time elapsed since the last physics-bound frame (see [method _physics_process]). This is always a constant value in physics processing unless the frames per second is changed in [OS].",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_position_in_parent",
          "qualifiers": "const",
          "description": "Return the order in the node tree branch, i.e. if called by the first child Node, return 0.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_process_delta_time",
          "qualifiers": "const",
          "description": "Return the time elapsed (in seconds) since the last process callback. This is almost always different each time.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_scene_instance_load_placeholder",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_tree",
          "qualifiers": "const",
          "description": "Return a [SceneTree] that this node is inside.",
          "return_type": "SceneTree",
          "arguments": []
        },
        {
          "name": "get_viewport",
          "qualifiers": "const",
          "description": "",
          "return_type": "Viewport",
          "arguments": []
        },
        {
          "name": "has_node",
          "qualifiers": "const",
          "description": "Return whether the node that a given [NodePath] points too exists.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_node_and_resource",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_a_parent_of",
          "qualifiers": "const",
          "description": "Return [i]true[/i] if the \"node\" argument is a direct or indirect child of the current node, otherwise return [i]false[/i].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_displayed_folded",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_greater_than",
          "qualifiers": "const",
          "description": "Return [i]true[/i] if \"node\" occurs later in the scene hierarchy than the current node, otherwise return [i]false[/i].",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_in_group",
          "qualifiers": "const",
          "description": "Return whether this Node is in the specified group.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_inside_tree",
          "qualifiers": "const",
          "description": "Return whether this Node is inside a [SceneTree].",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_network_master",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_physics_processing",
          "qualifiers": "const",
          "description": "Return true if physics processing is enabled (see [method set_physics_process]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_physics_processing_internal",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing",
          "qualifiers": "const",
          "description": "Return whether processing is enabled in the current node (see [method set_process]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_input",
          "qualifiers": "const",
          "description": "Return true if the node is processing input (see [method set_process_input]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_internal",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_unhandled_input",
          "qualifiers": "const",
          "description": "Return true if the node is processing unhandled input (see [method set_process_unhandled_input]).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_processing_unhandled_key_input",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "move_child",
          "description": "Move a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "child_node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "to_position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "print_stray_nodes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "print_tree",
          "description": "Print the scene to stdout. Used mainly for debugging purposes.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "propagate_call",
          "description": "Calls the method (if present) with the arguments given in \"args\" on this Node and recursively on all children. If the parent_first argument is true then the method will be called on the current [Node] first, then on all children. If it is false then the children will get called first.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "args",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "2",
              "name": "parent_first",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "propagate_notification",
          "description": "Notify the current node and all its children recursively by calling notification() in all of them.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "queue_free",
          "description": "Queues a node for deletion at the end of the current frame. When deleted, all of its children nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to [method Object.free]. Use [method Object.is_queued_for_deletion] to know whether a node will be deleted at the end of the frame.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "raise",
          "description": "Move this node to the top of the array of nodes of the parent node. This is often useful on GUIs ([Control]), because their order of drawing fully depends on their order in the tree.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_and_skip",
          "description": "Remove a node and set all its children as children of the parent node (if exists). All even subscriptions that pass by the removed node will be unsubscribed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "remove_child",
          "description": "Remove a child [Node]. Node is NOT deleted and will have to be deleted manually.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_from_group",
          "description": "Remove a node from a group.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "group",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "replace_by",
          "description": "Replace a node in a scene by a given one. Subscriptions that pass through this node will be lost.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "node",
              "type": "Node",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "keep_data",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "request_ready",
          "description": "Request that [code]_ready[/code] be called again.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rpc",
          "qualifiers": "vararg",
          "description": "Send a remote procedure call request to all peers on the network (and locally), optionally sending additional data as arguments. Call request will be received by nodes with the same [NodePath].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rpc_config",
          "description": "Change the method's RPC mode (one of RPC_MODE_* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Node.RPCMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rpc_id",
          "qualifiers": "vararg",
          "description": "Send a [method rpc] to a specific peer identified by [i]peer_id[/i].",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "peer_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rpc_unreliable",
          "qualifiers": "vararg",
          "description": "Send a [method rpc] using an unreliable protocol.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rpc_unreliable_id",
          "qualifiers": "vararg",
          "description": "Send a [method rpc] to a specific peer identified by [i]peer_id[/i] using an unreliable protocol.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "peer_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "method",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset",
          "description": "Remotely change property's value on other peers (and locally).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset_config",
          "description": "Change the property's RPC mode (one of RPC_MODE_* constants).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "mode",
              "type": "int",
              "enum": "Node.RPCMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset_id",
          "description": "Remotely change property's value on a specific peer identified by [i]peer_id[/i].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "peer_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset_unreliable",
          "description": "Remotely change property's value on other peers (and locally) using an unreliable protocol.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rset_unreliable_id",
          "description": "Remotely change property's value on a specific peer identified by [i]peer_id[/i] using an unreliable protocol.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "peer_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "property",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_display_folded",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fold",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_filename",
          "description": "A node can contain a filename. This filename should not be changed by the user, unless writing editors and tools. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "filename",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_name",
          "description": "Set the name of the [Node]. Name must be unique within parent, and setting an already existing name will cause for the node to be automatically renamed.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_network_master",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "recursive",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "set_owner",
          "description": "Set the node owner. A node can have any other node as owner (as long as a valid parent, grandparent, etc ascending in the tree). When saving a node (using SceneSaver) all the nodes it owns will be saved with it. This allows to create complex SceneTrees, with instancing and subinstancing.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "owner",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pause_mode",
          "description": "Set pause mode (PAUSE_MODE_*) of this Node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Node.PauseMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_physics_process",
          "description": "Enables or disables the node's physics (alias fixed framerate) processing. When a node is being processed, it will receive a NOTIFICATION_PHYSICS_PROCESS at a fixed (usually 60 fps, check [OS] to change that) interval (and the [method _physics_process] callback will be called if exists). It is common to check how much time was elapsed since the previous frame by calling [method get_physics_process_delta_time].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_physics_process_internal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process",
          "description": "Enables or disables node processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). It is common to check how much time was elapsed since the previous frame by calling [method get_process_delta_time].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_input",
          "description": "Enable input processing for node. This is not required for GUI controls! It hooks up the node to receive all input (see [method _input]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_internal",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_unhandled_input",
          "description": "Enable unhandled input processing for node. This is not required for GUI controls! It hooks up the node to receive all input that was not previously handled before (usually by a [Control]). (see [method _unhandled_input]).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_unhandled_key_input",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_scene_instance_load_placeholder",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "load_placeholder",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "renamed",
          "description": "Emitted when the node is renamed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tree_entered",
          "description": "Emitted when Node enters the tree.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tree_exited",
          "description": "Emitted when Node exits the tree.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "NOTIFICATION_ENTER_TREE",
          "value": "10",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_EXIT_TREE",
          "value": "11",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_MOVED_IN_PARENT",
          "value": "12",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_READY",
          "value": "13",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_PHYSICS_PROCESS",
          "value": "16",
          "enum": "",
          "description": "Notification received every frame when the physics process flag is set (see [method set_physics_process])."
        },
        {
          "name": "NOTIFICATION_PROCESS",
          "value": "17",
          "enum": "",
          "description": "Notification received every frame when the process flag is set (see [method set_process])."
        },
        {
          "name": "NOTIFICATION_PARENTED",
          "value": "18",
          "enum": "",
          "description": "Notification received when a node is set as a child of another node. Note that this doesn't mean that a node entered the Scene Tree."
        },
        {
          "name": "NOTIFICATION_UNPARENTED",
          "value": "19",
          "enum": "",
          "description": "Notification received when a node is unparented (parent removed it from the list of children)."
        },
        {
          "name": "NOTIFICATION_PAUSED",
          "value": "14",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_UNPAUSED",
          "value": "15",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_INSTANCED",
          "value": "20",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_DRAG_BEGIN",
          "value": "21",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_DRAG_END",
          "value": "22",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_PATH_CHANGED",
          "value": "23",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_TRANSLATION_CHANGED",
          "value": "24",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_INTERNAL_PROCESS",
          "value": "25",
          "enum": "",
          "description": ""
        },
        {
          "name": "NOTIFICATION_INTERNAL_PHYSICS_PROCESS",
          "value": "26",
          "enum": "",
          "description": ""
        },
        {
          "name": "RPC_MODE_DISABLED",
          "value": "0",
          "description": ""
        },
        {
          "name": "RPC_MODE_REMOTE",
          "value": "1",
          "description": "Call a method remotely."
        },
        {
          "name": "RPC_MODE_SYNC",
          "value": "2",
          "description": "Call a method both remotely and locally."
        },
        {
          "name": "RPC_MODE_MASTER",
          "value": "3",
          "description": "Call a method if the Node is Master."
        },
        {
          "name": "RPC_MODE_SLAVE",
          "value": "4",
          "description": "Call a method if the Node is Slave."
        },
        {
          "name": "PAUSE_MODE_INHERIT",
          "value": "0",
          "description": "Inherits pause mode from parent. For root node, it is equivalent to PAUSE_MODE_STOP."
        },
        {
          "name": "PAUSE_MODE_STOP",
          "value": "1",
          "description": "Stop processing when SceneTree is paused."
        },
        {
          "name": "PAUSE_MODE_PROCESS",
          "value": "2",
          "description": "Continue to process regardless of SceneTree pause state."
        },
        {
          "name": "DUPLICATE_SIGNALS",
          "value": "1",
          "description": ""
        },
        {
          "name": "DUPLICATE_GROUPS",
          "value": "2",
          "description": ""
        },
        {
          "name": "DUPLICATE_SCRIPTS",
          "value": "4",
          "description": ""
        },
        {
          "name": "DUPLICATE_USE_INSTANCING",
          "value": "8",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "_import_path",
          "type": "NodePath",
          "setter": "_set_import_path",
          "getter": "_get_import_path",
          "description": ""
        },
        {
          "name": "editor/display_folded",
          "type": "bool",
          "setter": "set_display_folded",
          "getter": "is_displayed_folded",
          "description": ""
        },
        {
          "name": "pause_mode",
          "type": "int",
          "setter": "set_pause_mode",
          "getter": "get_pause_mode",
          "enum": "Node.PauseMode",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScript": {
      "name": "VisualScript",
      "inherits": "Script",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A script implemented in the Visual Script programming environment.",
      "description": "A script implemented in the  Visual Script programming environment. The script extends the functionality of all objects that instance it.\n\t\t[method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.\n\t\tYou are most likely to use this class via the Visual Script editor or when writing plugins for it.",
      "methods": [
        {
          "name": "add_custom_signal",
          "description": "Add a custom signal with the specified name to the VisualScript.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_function",
          "description": "Add a function with the specified name to the VisualScript.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_node",
          "description": "Add a node to a function of the VisualScript.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "node",
              "type": "VisualScriptNode",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "position",
              "type": "Vector2",
              "default_value": "Vector2( 0, 0 )"
            }
          ]
        },
        {
          "name": "add_variable",
          "description": "Add a variable to the VisualScript, optionally giving it a default value or marking it as exported.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "default_value",
              "type": "Variant",
              "default_value": "null"
            },
            {
              "index": "2",
              "name": "export",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "custom_signal_add_argument",
          "description": "Add an argument to a custom signal added with [method add_custom_signal].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "argname",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "index",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "custom_signal_get_argument_count",
          "qualifiers": "const",
          "description": "Get the count of a custom signal's arguments.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_get_argument_name",
          "qualifiers": "const",
          "description": "Get the name of a custom signal's argument.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_get_argument_type",
          "qualifiers": "const",
          "description": "Get the type of a custom signal's argument.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_remove_argument",
          "description": "Remove a specific custom signal's argument.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_set_argument_name",
          "description": "Rename a custom signal's argument.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "argname",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_set_argument_type",
          "description": "Change the type of a custom signal's argument.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        },
        {
          "name": "custom_signal_swap_argument",
          "description": "Swap two of the arguments of a custom signal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "argidx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "withidx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "data_connect",
          "description": "Connect two data ports. The value of [code]from_node[/code]'s [code]from_port[/code] would be fed into [code]to_node[/code]'s [code]to_port[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "data_disconnect",
          "description": "Disconnect two data ports previously connected with [method data_connect].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_function_node_id",
          "qualifiers": "const",
          "description": "Returns the id of a function's entry point node.",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_function_scroll",
          "qualifiers": "const",
          "description": "Returns the position of the center of the screen for a given function.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node",
          "qualifiers": "const",
          "description": "Returns a node given its id and its function.",
          "return_type": "VisualScriptNode",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_node_position",
          "qualifiers": "const",
          "description": "Returns a node's position in pixels.",
          "return_type": "Vector2",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_variable_default_value",
          "qualifiers": "const",
          "description": "Returns the default (initial) value of a variable.",
          "return_type": "Variant",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_variable_export",
          "qualifiers": "const",
          "description": "Returns whether a variable is exported.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_variable_info",
          "qualifiers": "const",
          "description": "Returns the info for a given variable as a dictionary. The information includes its name, type, hint and usage.",
          "return_type": "Dictionary",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_custom_signal",
          "qualifiers": "const",
          "description": "Returns whether a signal exists with the specified name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_data_connection",
          "qualifiers": "const",
          "description": "Returns whether the specified data ports are connected.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "4",
              "name": "to_port",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_function",
          "qualifiers": "const",
          "description": "Returns whether a function exists with the specified name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_node",
          "qualifiers": "const",
          "description": "Returns whether a node exists with the given id.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_sequence_connection",
          "qualifiers": "const",
          "description": "Returns whether the specified sequence ports are connected.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_output",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "has_variable",
          "qualifiers": "const",
          "description": "Returns whether a variable exists with the specified name.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_custom_signal",
          "description": "Remove a custom signal with the given name.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_function",
          "description": "Remove a specific function and its nodes from the script.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_node",
          "description": "Remove a specific node.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove_variable",
          "description": "Remove a variable with the given name.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_custom_signal",
          "description": "Change the name of a custom signal.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_function",
          "description": "Change the name of a function.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rename_variable",
          "description": "Change the name of a variable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "new_name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sequence_connect",
          "description": "Connect two sequence ports. The execution will flow from of [code]from_node[/code]'s [code]from_output[/code] into [code]to_node[/code].\n\t\t\t\tUnlike [method data_connect], there isn't a [code]to_port[/code], since the target node can have only one sequence port.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_output",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sequence_disconnect",
          "description": "Disconnect two sequence ports previously connected with [method sequence_connect].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from_node",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "from_output",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "to_node",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_function_scroll",
          "description": "Position the center of the screen for a function.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "ofs",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance_base_type",
          "description": "Set the base type of the script.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_node_position",
          "description": "Position a node on the screen.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "func",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_variable_default_value",
          "description": "Change the default (initial) value of a variable.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Variant",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_variable_export",
          "description": "Change whether a variable is exported.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_variable_info",
          "description": "Set a variable's info, using the same format as [method get_variable_info].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "node_ports_changed",
          "description": "Emitted when the ports of a node are changed.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "function",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "id",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "data",
          "type": "Dictionary",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "HTTPClient": {
      "name": "HTTPClient",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Hyper-text transfer protocol client.",
      "description": "Hyper-text transfer protocol client. Supports SSL and SSL server certificate verification.\n\t\tCan be reused to connect to different hosts and make many requests.",
      "methods": [
        {
          "name": "close",
          "description": "Cloces the current connection, allows for reusal of [HTTPClient].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "connect_to_host",
          "description": "Connect to a host. This needs to be done before any requests are sent.\n\t\t\t\tThe host should not have http:// prepended but will strip the protocol identifier if provided.\n\t\t\t\tverify_host will check the SSL identity of the host if set to true.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "host",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "port",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "use_ssl",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "3",
              "name": "verify_host",
              "type": "bool",
              "default_value": "true"
            }
          ]
        },
        {
          "name": "get_connection",
          "qualifiers": "const",
          "description": "Return current connection.",
          "return_type": "StreamPeer",
          "arguments": []
        },
        {
          "name": "get_response_body_length",
          "qualifiers": "const",
          "description": "Return the response's body length.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_response_code",
          "qualifiers": "const",
          "description": "Return the HTTP status code of the response.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_response_headers",
          "description": "Return the response headers.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_response_headers_as_dictionary",
          "description": "Returns all response headers as dictionary where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where \"; \" is used as separator.\n\t\t\t\tStructure: (\"key\":\"value1; value2\")\n\t\t\t\tExample: (content-length:12), (Content-Type:application/json; charset=UTF-8)",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_status",
          "qualifiers": "const",
          "description": "Returns a STATUS_* enum constant. Need to call [method poll] in order to get status updates.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "has_response",
          "qualifiers": "const",
          "description": "Return whether this [HTTPClient] has a response available.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_blocking_mode_enabled",
          "qualifiers": "const",
          "description": "Return whether blocking mode is enabled.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_response_chunked",
          "qualifiers": "const",
          "description": "Return whether this [HTTPClient] has a response that is chunked.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "poll",
          "description": "This needs to be called in order to have any request processed. Check results with [method get_status]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "query_string_from_dict",
          "description": "Generates a GET/POST application/x-www-form-urlencoded style query string from a provided dictionary, e.g.:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\": \"user\", \"password\": \"pass\"}\n\t\t\t\tString queryString = httpClient.query_string_from_dict(fields)\n\t\t\t\treturns:= \"username=user&password=pass\"\n\t\t\t\t[/codeblock]",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fields",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "read_response_body_chunk",
          "description": "Reads one chunk from the response.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "request",
          "description": "Sends a request to the connected host. The url is what is normally behind the hostname, i.e. in [code]http://somehost.com/index.php[/code], url would be \"index.php\".\n\t\t\t\tHeaders are HTTP request headers.\n\t\t\t\tTo create a POST request with query strings to push to the server, do:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\" : \"user\", \"password\" : \"pass\"}\n\t\t\t\tvar queryString = httpClient.query_string_from_dict(fields)\n\t\t\t\tvar headers = [\"Content-Type: application/x-www-form-urlencoded\", \"Content-Length: \" + str(queryString.length())]\n\t\t\t\tvar result = httpClient.request(httpClient.METHOD_POST, \"index.php\", headers, queryString)\n\t\t\t\t[/codeblock]",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "int",
              "enum": "HTTPClient.Method",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "url",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "headers",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "request_raw",
          "description": "Sends a raw request to the connected host. The url is what is normally behind the hostname, i.e. in [code]http://somehost.com/index.php[/code], url would be \"index.php\".\n\t\t\t\tHeaders are HTTP request headers.\n\t\t\t\tSends body raw, as a byte array, does not encode it in any way.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "method",
              "type": "int",
              "enum": "HTTPClient.Method",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "url",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "headers",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "send_body_data",
          "description": "Stub function",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "send_body_text",
          "description": "Stub function",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_blocking_mode",
          "description": "If set to true, execution will block until all data is read from the response.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_connection",
          "description": "Set connection to use, for this client.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "connection",
              "type": "StreamPeer",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_read_chunk_size",
          "description": "Sets the size of the buffer used and maximum bytes to read per iteration. see [method read_response_body_chunk]",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "METHOD_GET",
          "value": "0",
          "description": ""
        },
        {
          "name": "METHOD_HEAD",
          "value": "1",
          "description": ""
        },
        {
          "name": "METHOD_POST",
          "value": "2",
          "description": ""
        },
        {
          "name": "METHOD_PUT",
          "value": "3",
          "description": ""
        },
        {
          "name": "METHOD_DELETE",
          "value": "4",
          "description": ""
        },
        {
          "name": "METHOD_OPTIONS",
          "value": "5",
          "description": ""
        },
        {
          "name": "METHOD_TRACE",
          "value": "6",
          "description": ""
        },
        {
          "name": "METHOD_CONNECT",
          "value": "7",
          "description": ""
        },
        {
          "name": "METHOD_MAX",
          "value": "8",
          "description": ""
        },
        {
          "name": "STATUS_DISCONNECTED",
          "value": "0",
          "description": ""
        },
        {
          "name": "STATUS_RESOLVING",
          "value": "1",
          "description": ""
        },
        {
          "name": "STATUS_CANT_RESOLVE",
          "value": "2",
          "description": ""
        },
        {
          "name": "STATUS_CONNECTING",
          "value": "3",
          "description": ""
        },
        {
          "name": "STATUS_CANT_CONNECT",
          "value": "4",
          "description": ""
        },
        {
          "name": "STATUS_CONNECTED",
          "value": "5",
          "description": ""
        },
        {
          "name": "STATUS_REQUESTING",
          "value": "6",
          "description": ""
        },
        {
          "name": "STATUS_BODY",
          "value": "7",
          "description": ""
        },
        {
          "name": "STATUS_CONNECTION_ERROR",
          "value": "8",
          "description": ""
        },
        {
          "name": "STATUS_SSL_HANDSHAKE_ERROR",
          "value": "9",
          "description": ""
        },
        {
          "name": "RESPONSE_CONTINUE",
          "value": "100",
          "description": ""
        },
        {
          "name": "RESPONSE_SWITCHING_PROTOCOLS",
          "value": "101",
          "description": ""
        },
        {
          "name": "RESPONSE_PROCESSING",
          "value": "102",
          "description": ""
        },
        {
          "name": "RESPONSE_OK",
          "value": "200",
          "description": ""
        },
        {
          "name": "RESPONSE_CREATED",
          "value": "201",
          "description": ""
        },
        {
          "name": "RESPONSE_ACCEPTED",
          "value": "202",
          "description": ""
        },
        {
          "name": "RESPONSE_NON_AUTHORITATIVE_INFORMATION",
          "value": "203",
          "description": ""
        },
        {
          "name": "RESPONSE_NO_CONTENT",
          "value": "204",
          "description": ""
        },
        {
          "name": "RESPONSE_RESET_CONTENT",
          "value": "205",
          "description": ""
        },
        {
          "name": "RESPONSE_PARTIAL_CONTENT",
          "value": "206",
          "description": ""
        },
        {
          "name": "RESPONSE_MULTI_STATUS",
          "value": "207",
          "description": ""
        },
        {
          "name": "RESPONSE_IM_USED",
          "value": "226",
          "description": ""
        },
        {
          "name": "RESPONSE_MULTIPLE_CHOICES",
          "value": "300",
          "description": ""
        },
        {
          "name": "RESPONSE_MOVED_PERMANENTLY",
          "value": "301",
          "description": ""
        },
        {
          "name": "RESPONSE_FOUND",
          "value": "302",
          "description": ""
        },
        {
          "name": "RESPONSE_SEE_OTHER",
          "value": "303",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_MODIFIED",
          "value": "304",
          "description": ""
        },
        {
          "name": "RESPONSE_USE_PROXY",
          "value": "305",
          "description": ""
        },
        {
          "name": "RESPONSE_TEMPORARY_REDIRECT",
          "value": "307",
          "description": ""
        },
        {
          "name": "RESPONSE_BAD_REQUEST",
          "value": "400",
          "description": ""
        },
        {
          "name": "RESPONSE_UNAUTHORIZED",
          "value": "401",
          "description": ""
        },
        {
          "name": "RESPONSE_PAYMENT_REQUIRED",
          "value": "402",
          "description": ""
        },
        {
          "name": "RESPONSE_FORBIDDEN",
          "value": "403",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_FOUND",
          "value": "404",
          "description": ""
        },
        {
          "name": "RESPONSE_METHOD_NOT_ALLOWED",
          "value": "405",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_ACCEPTABLE",
          "value": "406",
          "description": ""
        },
        {
          "name": "RESPONSE_PROXY_AUTHENTICATION_REQUIRED",
          "value": "407",
          "description": ""
        },
        {
          "name": "RESPONSE_REQUEST_TIMEOUT",
          "value": "408",
          "description": ""
        },
        {
          "name": "RESPONSE_CONFLICT",
          "value": "409",
          "description": ""
        },
        {
          "name": "RESPONSE_GONE",
          "value": "410",
          "description": ""
        },
        {
          "name": "RESPONSE_LENGTH_REQUIRED",
          "value": "411",
          "description": ""
        },
        {
          "name": "RESPONSE_PRECONDITION_FAILED",
          "value": "412",
          "description": ""
        },
        {
          "name": "RESPONSE_REQUEST_ENTITY_TOO_LARGE",
          "value": "413",
          "description": ""
        },
        {
          "name": "RESPONSE_REQUEST_URI_TOO_LONG",
          "value": "414",
          "description": ""
        },
        {
          "name": "RESPONSE_UNSUPPORTED_MEDIA_TYPE",
          "value": "415",
          "description": ""
        },
        {
          "name": "RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE",
          "value": "416",
          "description": ""
        },
        {
          "name": "RESPONSE_EXPECTATION_FAILED",
          "value": "417",
          "description": ""
        },
        {
          "name": "RESPONSE_UNPROCESSABLE_ENTITY",
          "value": "422",
          "description": ""
        },
        {
          "name": "RESPONSE_LOCKED",
          "value": "423",
          "description": ""
        },
        {
          "name": "RESPONSE_FAILED_DEPENDENCY",
          "value": "424",
          "description": ""
        },
        {
          "name": "RESPONSE_UPGRADE_REQUIRED",
          "value": "426",
          "description": ""
        },
        {
          "name": "RESPONSE_INTERNAL_SERVER_ERROR",
          "value": "500",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_IMPLEMENTED",
          "value": "501",
          "description": ""
        },
        {
          "name": "RESPONSE_BAD_GATEWAY",
          "value": "502",
          "description": ""
        },
        {
          "name": "RESPONSE_SERVICE_UNAVAILABLE",
          "value": "503",
          "description": ""
        },
        {
          "name": "RESPONSE_GATEWAY_TIMEOUT",
          "value": "504",
          "description": ""
        },
        {
          "name": "RESPONSE_HTTP_VERSION_NOT_SUPPORTED",
          "value": "505",
          "description": ""
        },
        {
          "name": "RESPONSE_INSUFFICIENT_STORAGE",
          "value": "507",
          "description": ""
        },
        {
          "name": "RESPONSE_NOT_EXTENDED",
          "value": "510",
          "description": ""
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "TouchScreenButton": {
      "name": "TouchScreenButton",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Button for touch screen devices.",
      "description": "Button for touch screen devices. You can set it to be visible on all screens, or only on touch devices.",
      "methods": [
        {
          "name": "get_action",
          "qualifiers": "const",
          "description": "Returns the button's action.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_bitmask",
          "qualifiers": "const",
          "description": "Returns the button's bitmask.",
          "return_type": "BitMap",
          "arguments": []
        },
        {
          "name": "get_shape",
          "qualifiers": "const",
          "description": "Returns the button's shape.",
          "return_type": "Shape2D",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Returns the button's texture for the normal state.",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_texture_pressed",
          "qualifiers": "const",
          "description": "Returns the button's texture for the pressed state.",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_visibility_mode",
          "qualifiers": "const",
          "description": "Sets the button's visibility mode. See [code]VISIBILITY_*[/code] constants.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_passby_press_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_pressed",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if this button is currently pressed.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shape_centered",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_shape_visible",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_action",
          "description": "Sets the button's action.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bitmask",
          "description": "Sets the button's [BitMap] bitmask.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bitmask",
              "type": "BitMap",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_passby_press",
          "description": "If [code]true[/code] passby presses are enabled for this button.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape",
          "description": "Sets the button's shape.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "shape",
              "type": "Shape2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_centered",
          "description": "If [code]true[/code] the button's shape is centered.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bool",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shape_visible",
          "description": "If [code]true[/code] the button's shape is visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bool",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "Sets the button's [Texture] for the normal state.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture_pressed",
          "description": "Sets the button's [Texture] for the pressed state.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture_pressed",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visibility_mode",
          "description": "Sets the button's visibility mode. See the [code]VISIBILITY_*[/code] constants.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "TouchScreenButton.VisibilityMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "pressed",
          "description": "Emitted when the button is pressed (down).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "released",
          "description": "Emitted when the button is released (up).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "constants": [
        {
          "name": "VISIBILITY_ALWAYS",
          "value": "0",
          "description": "Always visible."
        },
        {
          "name": "VISIBILITY_TOUCHSCREEN_ONLY",
          "value": "1",
          "description": "Visible on touch screens only."
        }
      ],
      "properties": [
        {
          "name": "action",
          "type": "String",
          "setter": "set_action",
          "getter": "get_action",
          "description": "The button's action. Actions can be handled with [InputEventAction]."
        },
        {
          "name": "bitmask",
          "type": "BitMap",
          "setter": "set_bitmask",
          "getter": "get_bitmask",
          "description": "The button's bitmask."
        },
        {
          "name": "normal",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "The button's texture for the normal state."
        },
        {
          "name": "passby_press",
          "type": "bool",
          "setter": "set_passby_press",
          "getter": "is_passby_press_enabled",
          "description": "If [code]true[/code] passby presses are enabled."
        },
        {
          "name": "pressed",
          "type": "Texture",
          "setter": "set_texture_pressed",
          "getter": "get_texture_pressed",
          "description": "The button's texture for the pressed state."
        },
        {
          "name": "shape",
          "type": "Shape2D",
          "setter": "set_shape",
          "getter": "get_shape",
          "description": "The button's shape."
        },
        {
          "name": "shape_centered",
          "type": "bool",
          "setter": "set_shape_centered",
          "getter": "is_shape_centered",
          "description": "If [code]true[/code] the button's shape is centered."
        },
        {
          "name": "shape_visible",
          "type": "bool",
          "setter": "set_shape_visible",
          "getter": "is_shape_visible",
          "description": "If [code]true[/code] the button's shape is visible."
        },
        {
          "name": "visibility_mode",
          "type": "int",
          "setter": "set_visibility_mode",
          "getter": "get_visibility_mode",
          "enum": "TouchScreenButton.VisibilityMode",
          "description": "The button's visibility mode. See [code]VISIBILITY_*[/code] constants."
        }
      ],
      "theme_properties": []
    },
    "GrooveJoint2D": {
      "name": "GrooveJoint2D",
      "inherits": "Joint2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Groove constraint for 2D physics.",
      "description": "Groove constraint for 2D physics. This is useful for making a body \"slide\" through a segment placed in another.",
      "methods": [
        {
          "name": "get_initial_offset",
          "qualifiers": "const",
          "description": "Set the final offset of the groove on body A.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_length",
          "qualifiers": "const",
          "description": "Return the length of the groove.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "set_initial_offset",
          "description": "Set the initial offset of the groove on body A.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "offset",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_length",
          "description": "Set the length of the groove.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "length",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "initial_offset",
          "type": "float",
          "setter": "set_initial_offset",
          "getter": "get_initial_offset",
          "description": ""
        },
        {
          "name": "length",
          "type": "float",
          "setter": "set_length",
          "getter": "get_length",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "@VisualScript": {
      "name": "@VisualScript",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Built-in visual script functions.",
      "description": "A list of built-in visual script functions, see [VisualScriptBuiltinFunc] and [VisualScript].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "Generic6DOFJoint": {
      "name": "Generic6DOFJoint",
      "inherits": "Joint",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_flag_x",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "Generic6DOFJoint.Flag",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_flag_y",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "Generic6DOFJoint.Flag",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_flag_z",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "Generic6DOFJoint.Flag",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param_x",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "Generic6DOFJoint.Param",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param_y",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "Generic6DOFJoint.Param",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_param_z",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "Generic6DOFJoint.Param",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag_x",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "Generic6DOFJoint.Flag",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag_y",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "Generic6DOFJoint.Flag",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_flag_z",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "flag",
              "type": "int",
              "enum": "Generic6DOFJoint.Flag",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param_x",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "Generic6DOFJoint.Param",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param_y",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "Generic6DOFJoint.Param",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_param_z",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "param",
              "type": "int",
              "enum": "Generic6DOFJoint.Param",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "float",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "PARAM_LINEAR_LOWER_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_UPPER_LIMIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_LIMIT_SOFTNESS",
          "value": "2",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_RESTITUTION",
          "value": "3",
          "description": ""
        },
        {
          "name": "PARAM_LINEAR_DAMPING",
          "value": "4",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LOWER_LIMIT",
          "value": "5",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_UPPER_LIMIT",
          "value": "6",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_LIMIT_SOFTNESS",
          "value": "7",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_DAMPING",
          "value": "8",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_RESTITUTION",
          "value": "9",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_FORCE_LIMIT",
          "value": "10",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_ERP",
          "value": "11",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTOR_TARGET_VELOCITY",
          "value": "12",
          "description": ""
        },
        {
          "name": "PARAM_ANGULAR_MOTOR_FORCE_LIMIT",
          "value": "13",
          "description": ""
        },
        {
          "name": "PARAM_MAX",
          "value": "14",
          "description": ""
        },
        {
          "name": "FLAG_ENABLE_LINEAR_LIMIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "FLAG_ENABLE_ANGULAR_LIMIT",
          "value": "1",
          "description": ""
        },
        {
          "name": "FLAG_ENABLE_MOTOR",
          "value": "2",
          "description": ""
        },
        {
          "name": "FLAG_MAX",
          "value": "3",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "angular_limit_x/damping",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "angular_limit_x/enabled",
          "type": "bool",
          "setter": "set_flag_x",
          "getter": "get_flag_x",
          "description": ""
        },
        {
          "name": "angular_limit_x/erp",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "angular_limit_x/force_limit",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "angular_limit_x/lower_angle",
          "type": "float",
          "setter": "_set_angular_lo_limit_x",
          "getter": "_get_angular_lo_limit_x",
          "description": ""
        },
        {
          "name": "angular_limit_x/restitution",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "angular_limit_x/softness",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "angular_limit_x/upper_angle",
          "type": "float",
          "setter": "_set_angular_hi_limit_x",
          "getter": "_get_angular_hi_limit_x",
          "description": ""
        },
        {
          "name": "angular_limit_y/damping",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "angular_limit_y/enabled",
          "type": "bool",
          "setter": "set_flag_y",
          "getter": "get_flag_y",
          "description": ""
        },
        {
          "name": "angular_limit_y/erp",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "angular_limit_y/force_limit",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "angular_limit_y/lower_angle",
          "type": "float",
          "setter": "_set_angular_lo_limit_y",
          "getter": "_get_angular_lo_limit_y",
          "description": ""
        },
        {
          "name": "angular_limit_y/restitution",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "angular_limit_y/softness",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "angular_limit_y/upper_angle",
          "type": "float",
          "setter": "_set_angular_hi_limit_y",
          "getter": "_get_angular_hi_limit_y",
          "description": ""
        },
        {
          "name": "angular_limit_z/damping",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "angular_limit_z/enabled",
          "type": "bool",
          "setter": "set_flag_z",
          "getter": "get_flag_z",
          "description": ""
        },
        {
          "name": "angular_limit_z/erp",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "angular_limit_z/force_limit",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "angular_limit_z/lower_angle",
          "type": "float",
          "setter": "_set_angular_lo_limit_z",
          "getter": "_get_angular_lo_limit_z",
          "description": ""
        },
        {
          "name": "angular_limit_z/restitution",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "angular_limit_z/softness",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "angular_limit_z/upper_angle",
          "type": "float",
          "setter": "_set_angular_hi_limit_z",
          "getter": "_get_angular_hi_limit_z",
          "description": ""
        },
        {
          "name": "angular_motor_x/enabled",
          "type": "bool",
          "setter": "set_flag_x",
          "getter": "get_flag_x",
          "description": ""
        },
        {
          "name": "angular_motor_x/force_limit",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "angular_motor_x/target_velocity",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "angular_motor_y/enabled",
          "type": "bool",
          "setter": "set_flag_y",
          "getter": "get_flag_y",
          "description": ""
        },
        {
          "name": "angular_motor_y/force_limit",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "angular_motor_y/target_velocity",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "angular_motor_z/enabled",
          "type": "bool",
          "setter": "set_flag_z",
          "getter": "get_flag_z",
          "description": ""
        },
        {
          "name": "angular_motor_z/force_limit",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "angular_motor_z/target_velocity",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "linear_limit_x/damping",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "linear_limit_x/enabled",
          "type": "bool",
          "setter": "set_flag_x",
          "getter": "get_flag_x",
          "description": ""
        },
        {
          "name": "linear_limit_x/lower_distance",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "linear_limit_x/restitution",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "linear_limit_x/softness",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "linear_limit_x/upper_distance",
          "type": "float",
          "setter": "set_param_x",
          "getter": "get_param_x",
          "description": ""
        },
        {
          "name": "linear_limit_y/damping",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "linear_limit_y/enabled",
          "type": "bool",
          "setter": "set_flag_y",
          "getter": "get_flag_y",
          "description": ""
        },
        {
          "name": "linear_limit_y/lower_distance",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "linear_limit_y/restitution",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "linear_limit_y/softness",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "linear_limit_y/upper_distance",
          "type": "float",
          "setter": "set_param_y",
          "getter": "get_param_y",
          "description": ""
        },
        {
          "name": "linear_limit_z/damping",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "linear_limit_z/enabled",
          "type": "bool",
          "setter": "set_flag_z",
          "getter": "get_flag_z",
          "description": ""
        },
        {
          "name": "linear_limit_z/lower_distance",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "linear_limit_z/restitution",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "linear_limit_z/softness",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        },
        {
          "name": "linear_limit_z/upper_distance",
          "type": "float",
          "setter": "set_param_z",
          "getter": "get_param_z",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AudioEffectEQ6": {
      "name": "AudioEffectEQ6",
      "inherits": "AudioEffectEQ",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Adds a 6-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 32 Hz to 10000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.",
      "description": "Frequency bands :\n\t\tBand 1 : 32 Hz\n\t\tBand 2 : 100 Hz\n\t\tBand 3 : 320 Hz\n\t\tBand 4 : 1000 Hz\n\t\tBand 5 : 3200 Hz\n\t\tBand 6 : 10000 Hz\n\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ10], [AudioEffectEQ21].",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptSceneNode": {
      "name": "VisualScriptSceneNode",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Node reference.",
      "description": "A direct reference to a node.\n\t\t[b]Input Ports:[/b]\n\t\tnone\n\t\t[b]Output Ports:[/b]\n\t\t- Data: [code]node[/code] (obj)",
      "methods": [
        {
          "name": "get_node_path",
          "description": "",
          "return_type": "NodePath",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_node_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_node_path",
          "getter": "get_node_path",
          "description": "The node's path in the scene tree."
        }
      ],
      "theme_properties": []
    },
    "GradientTexture": {
      "name": "GradientTexture",
      "inherits": "Texture",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Gradient filled texture.",
      "description": "Uses a [Gradient] to fill the texture data, the gradient will be filled from left to right using colors obtained from the gradient, this means that the texture does not necessarily represent an exact copy of the gradient, but instead an interpolation of samples obtained from the gradient at fixed steps (see [method set_width]).",
      "methods": [
        {
          "name": "get_gradient",
          "qualifiers": "const",
          "description": "",
          "return_type": "Gradient",
          "arguments": []
        },
        {
          "name": "set_gradient",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gradient",
              "type": "Gradient",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_width",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "width",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "gradient",
          "type": "Gradient",
          "setter": "set_gradient",
          "getter": "get_gradient",
          "description": "The [Gradient] that will be used to fill the texture."
        },
        {
          "name": "width",
          "type": "int",
          "setter": "set_width",
          "getter": "get_width",
          "description": "The number of color samples that will be obtained from the [Gradient]."
        }
      ],
      "theme_properties": []
    },
    "InstancePlaceholder": {
      "name": "InstancePlaceholder",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Placeholder for the root [Node] of a [PackedScene].",
      "description": "Turning on the option [b]Load As Placeholder[/b] for an instanced scene in the editor causes it to be replaced by an InstacePlaceholder when running the game. This makes it possible to delay actually loading the scene until calling [method replace_by_instance]. This is useful to avoid loading large scenes all at once by loading parts of it selectively.\n\t\tThe InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again.",
      "methods": [
        {
          "name": "get_instance_path",
          "qualifiers": "const",
          "description": "Retrieve the path to the [PackedScene] resource file that is loaded by default when calling [method replace_by_instance].",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_stored_values",
          "description": "",
          "return_type": "Dictionary",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with_order",
              "type": "bool",
              "default_value": "false"
            }
          ]
        },
        {
          "name": "replace_by_instance",
          "description": "Replace this placeholder by the scene handed as an argument, or the original scene if no argument is given. As for all resources, the scene is loaded only if it's not loaded already. By manually loading the scene beforehand, delays caused by this function can be avoided.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "custom_scene",
              "type": "PackedScene",
              "default_value": "null"
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "VisualScriptBuiltinFunc": {
      "name": "VisualScriptBuiltinFunc",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node used to call built-in functions.",
      "description": "A built-in function used inside a [VisualScript]. It is usually a math function or an utility function.\n\t\tSee also [@GDScript], for the same functions in the GDScript language.",
      "methods": [
        {
          "name": "get_func",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_func",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "which",
              "type": "int",
              "enum": "VisualScriptBuiltinFunc.BuiltinFunc",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MATH_SIN",
          "value": "0",
          "description": "Return the sine of the input."
        },
        {
          "name": "MATH_COS",
          "value": "1",
          "description": "Return the cosine of the input."
        },
        {
          "name": "MATH_TAN",
          "value": "2",
          "description": "Return the tangent of the input."
        },
        {
          "name": "MATH_SINH",
          "value": "3",
          "description": "Return the hyperbolic sine of the input."
        },
        {
          "name": "MATH_COSH",
          "value": "4",
          "description": "Return the hyperbolic cosine of the input."
        },
        {
          "name": "MATH_TANH",
          "value": "5",
          "description": "Return the hyperbolic tangent of the input."
        },
        {
          "name": "MATH_ASIN",
          "value": "6",
          "description": "Return the arc sine of the input."
        },
        {
          "name": "MATH_ACOS",
          "value": "7",
          "description": "Return the arc cosine of the input."
        },
        {
          "name": "MATH_ATAN",
          "value": "8",
          "description": "Return the arc tangent of the input."
        },
        {
          "name": "MATH_ATAN2",
          "value": "9",
          "description": "Return the arc tangent of the input, using the signs of both parameters to determine the exact angle."
        },
        {
          "name": "MATH_SQRT",
          "value": "10",
          "description": "Return the square root of the input."
        },
        {
          "name": "MATH_FMOD",
          "value": "11",
          "description": "Return the remainder of one input divided by the other, using floating-point numbers."
        },
        {
          "name": "MATH_FPOSMOD",
          "value": "12",
          "description": "Return the positive remainder of one input divided by the other, using floating-point numbers."
        },
        {
          "name": "MATH_FLOOR",
          "value": "13",
          "description": "Return the input rounded down."
        },
        {
          "name": "MATH_CEIL",
          "value": "14",
          "description": "Return the input rounded up."
        },
        {
          "name": "MATH_ROUND",
          "value": "15",
          "description": "Return the input rounded to the nearest integer."
        },
        {
          "name": "MATH_ABS",
          "value": "16",
          "description": "Return the absolute value of the input."
        },
        {
          "name": "MATH_SIGN",
          "value": "17",
          "description": "Return the sign of the input, turning it into 1, -1, or 0. Useful to determine if the input is positive or negative."
        },
        {
          "name": "MATH_POW",
          "value": "18",
          "description": "Return the input raised to a given power."
        },
        {
          "name": "MATH_LOG",
          "value": "19",
          "description": "Return the natural logarithm of the input. Note that this is not the typical base-10 logarithm function calculators use."
        },
        {
          "name": "MATH_EXP",
          "value": "20",
          "description": "Return [b]e[/b] raised to the power of the input. [b]e[/b] sometimes called \"Euler's number\" is a mathematical constant whose value is approximately 2.71828."
        },
        {
          "name": "MATH_ISNAN",
          "value": "21",
          "description": "Return whether the input is NaN (Not a Number) or not. NaN is usually produced by dividing 0 by 0, though other ways exist."
        },
        {
          "name": "MATH_ISINF",
          "value": "22",
          "description": "Return whether the input is an infinite floating-point number or not. Infinity is usually produced by dividing a number by 0, though other ways exist."
        },
        {
          "name": "MATH_EASE",
          "value": "23",
          "description": "Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in."
        },
        {
          "name": "MATH_DECIMALS",
          "value": "24",
          "description": "Return the number of digit places after the decimal that the first non-zero digit occurs."
        },
        {
          "name": "MATH_STEPIFY",
          "value": "25",
          "description": "Return the input snapped to a given step."
        },
        {
          "name": "MATH_LERP",
          "value": "26",
          "description": "Return a number linearly interpolated between the first two inputs, based on the third input. Uses the formula [code]a + (a - b) * t[/code]."
        },
        {
          "name": "MATH_DECTIME",
          "value": "27",
          "description": "Return the result of 'value' decreased by 'step' * 'amount'."
        },
        {
          "name": "MATH_RANDOMIZE",
          "value": "28",
          "description": "Randomize the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time."
        },
        {
          "name": "MATH_RAND",
          "value": "29",
          "description": "Return a random 32 bits integer value. To obtain a random value between 0 to N (where N is smaller than 2^32 - 1), you can use it with the remainder function."
        },
        {
          "name": "MATH_RANDF",
          "value": "30",
          "description": "Return a random floating-point value between 0 and 1. To obtain a random value between 0 to N, you can use it with multiplication."
        },
        {
          "name": "MATH_RANDOM",
          "value": "31",
          "description": "Return a random floating-point value between the two inputs."
        },
        {
          "name": "MATH_SEED",
          "value": "32",
          "description": "Set the seed for the random number generator."
        },
        {
          "name": "MATH_RANDSEED",
          "value": "33",
          "description": "Return a random value from the given seed, along with the new seed."
        },
        {
          "name": "MATH_DEG2RAD",
          "value": "34",
          "description": "Convert the input from degrees to radians."
        },
        {
          "name": "MATH_RAD2DEG",
          "value": "35",
          "description": "Convert the input from radians to degrees."
        },
        {
          "name": "MATH_LINEAR2DB",
          "value": "36",
          "description": "Convert the input from linear volume to decibel volume."
        },
        {
          "name": "MATH_DB2LINEAR",
          "value": "37",
          "description": "Convert the input from decibel volume to linear volume."
        },
        {
          "name": "LOGIC_MAX",
          "value": "38",
          "description": "Return the greater of the two numbers, also known as their maximum."
        },
        {
          "name": "LOGIC_MIN",
          "value": "39",
          "description": "Return the lesser of the two numbers, also known as their minimum."
        },
        {
          "name": "LOGIC_CLAMP",
          "value": "40",
          "description": "Return the input clamped inside the given range, ensuring the result is never outside it. Equivalent to `min(max(input, range_low), range_high)`"
        },
        {
          "name": "LOGIC_NEAREST_PO2",
          "value": "41",
          "description": "Return the nearest power of 2 to the input."
        },
        {
          "name": "OBJ_WEAKREF",
          "value": "42",
          "description": "Create a [WeakRef] from the input."
        },
        {
          "name": "FUNC_FUNCREF",
          "value": "43",
          "description": "Create a [FuncRef] from the input."
        },
        {
          "name": "TYPE_CONVERT",
          "value": "44",
          "description": "Convert between types."
        },
        {
          "name": "TYPE_OF",
          "value": "45",
          "description": "Return the type of the input as an integer. Check [enum Variant.Type] for the integers that might be returned."
        },
        {
          "name": "TYPE_EXISTS",
          "value": "46",
          "description": "Checks if a type is registered in the [ClassDB]."
        },
        {
          "name": "TEXT_CHAR",
          "value": "47",
          "description": "Return a character with the given ascii value."
        },
        {
          "name": "TEXT_STR",
          "value": "48",
          "description": "Convert the input to a string."
        },
        {
          "name": "TEXT_PRINT",
          "value": "49",
          "description": "Print the given string to the output window."
        },
        {
          "name": "TEXT_PRINTERR",
          "value": "50",
          "description": "Print the given string to the standard error output."
        },
        {
          "name": "TEXT_PRINTRAW",
          "value": "51",
          "description": "Print the given string to the standard output, without adding a newline."
        },
        {
          "name": "VAR_TO_STR",
          "value": "52",
          "description": "Serialize a [Variant] to a string."
        },
        {
          "name": "STR_TO_VAR",
          "value": "53",
          "description": "Deserialize a [Variant] from a string serialized using [VAR_TO_STR]."
        },
        {
          "name": "VAR_TO_BYTES",
          "value": "54",
          "description": "Serialize a [Variant] to a [PoolByteArray]."
        },
        {
          "name": "BYTES_TO_VAR",
          "value": "55",
          "description": "Deserialize a [Variant] from a [PoolByteArray] serialized using [VAR_TO_BYTES]."
        },
        {
          "name": "COLORN",
          "value": "56",
          "description": "Return the [Color] with the given name and alpha ranging from 0 to 1. Note: names are defined in color_names.inc."
        },
        {
          "name": "FUNC_MAX",
          "value": "57",
          "description": "The maximum value the [member function] property can have."
        }
      ],
      "properties": [
        {
          "name": "function",
          "type": "int",
          "setter": "set_func",
          "getter": "get_func",
          "enum": "VisualScriptBuiltinFunc.BuiltinFunc",
          "description": "The function to be executed."
        }
      ],
      "theme_properties": []
    },
    "Particles2D": {
      "name": "Particles2D",
      "inherits": "Node2D",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "2D particle emitter.",
      "description": "2D particle node used to create a variety of particle systems and effects. [code]Particles2D[/code] features an emitter that generates some number of particles at a given rate.\n\t\tUse the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.",
      "methods": [
        {
          "name": "capture_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "get_amount",
          "qualifiers": "const",
          "description": "Returns the amount of particles spawned at each emission",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_draw_order",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_explosiveness_ratio",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_fixed_fps",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_fractional_delta",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_h_frames",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_lifetime",
          "qualifiers": "const",
          "description": "Gets the amount of seconds that each particle will be visible.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_normal_map",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_one_shot",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_pre_process_time",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_process_material",
          "qualifiers": "const",
          "description": "",
          "return_type": "Material",
          "arguments": []
        },
        {
          "name": "get_randomness_ratio",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_speed_scale",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_texture",
          "qualifiers": "const",
          "description": "Returns the texture for emitted particles",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_use_local_coordinates",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_v_frames",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_visibility_rect",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect2",
          "arguments": []
        },
        {
          "name": "is_emitting",
          "qualifiers": "const",
          "description": "Returns whether this emitter is currently emitting or not",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "restart",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_amount",
          "description": "Sets the amount of particles spawned at each emission",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_draw_order",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "order",
              "type": "int",
              "enum": "Particles2D.DrawOrder",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_emitting",
          "description": "If this is set to true then the particle emitter will emit particles, if its false it will not.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "emitting",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_explosiveness_ratio",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fixed_fps",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "fps",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fractional_delta",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_h_frames",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frames",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_lifetime",
          "description": "Sets the amount of seconds that each particle will be visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "secs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_normal_map",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_one_shot",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "secs",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_pre_process_time",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "secs",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_process_material",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_randomness_ratio",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "ratio",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_speed_scale",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "texture",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_local_coordinates",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_v_frames",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "frames",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_visibility_rect",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "aabb",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "DRAW_ORDER_INDEX",
          "value": "0",
          "description": "Particles are drawn in the order emitted."
        },
        {
          "name": "DRAW_ORDER_LIFETIME",
          "value": "1",
          "description": "Particles are drawn in order of remaining lifetime."
        }
      ],
      "properties": [
        {
          "name": "amount",
          "type": "int",
          "setter": "set_amount",
          "getter": "get_amount",
          "description": "Number of particles to emit."
        },
        {
          "name": "draw_order",
          "type": "int",
          "setter": "set_draw_order",
          "getter": "get_draw_order",
          "enum": "Particles2D.DrawOrder",
          "description": "Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code]."
        },
        {
          "name": "emitting",
          "type": "bool",
          "setter": "set_emitting",
          "getter": "is_emitting",
          "description": "If [code]true[/code] particles are being emitted. Default value: [code]true[/code]."
        },
        {
          "name": "explosiveness",
          "type": "float",
          "setter": "set_explosiveness_ratio",
          "getter": "get_explosiveness_ratio",
          "description": "Time ratio between each emission. If [code]0[/code] particles are emitted continuously. If [code]1[/code] all particles are emitted simultaneously. Default value: [code]0[/code]."
        },
        {
          "name": "fixed_fps",
          "type": "int",
          "setter": "set_fixed_fps",
          "getter": "get_fixed_fps",
          "description": ""
        },
        {
          "name": "fract_delta",
          "type": "bool",
          "setter": "set_fractional_delta",
          "getter": "get_fractional_delta",
          "description": ""
        },
        {
          "name": "h_frames",
          "type": "int",
          "setter": "set_h_frames",
          "getter": "get_h_frames",
          "description": "Number of horizontal frames in [code]texture[/code]."
        },
        {
          "name": "lifetime",
          "type": "float",
          "setter": "set_lifetime",
          "getter": "get_lifetime",
          "description": "Amount of time each particle will exist. Default value: [code]1[/code]."
        },
        {
          "name": "local_coords",
          "type": "bool",
          "setter": "set_use_local_coordinates",
          "getter": "get_use_local_coordinates",
          "description": "If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code]."
        },
        {
          "name": "normal_map",
          "type": "Texture",
          "setter": "set_normal_map",
          "getter": "get_normal_map",
          "description": ""
        },
        {
          "name": "one_shot",
          "type": "bool",
          "setter": "set_one_shot",
          "getter": "get_one_shot",
          "description": "If [code]true[/code] only [code]amount[/code] particles will be emitted. Default value: [code]false[/code]."
        },
        {
          "name": "preprocess",
          "type": "float",
          "setter": "set_pre_process_time",
          "getter": "get_pre_process_time",
          "description": ""
        },
        {
          "name": "process_material",
          "type": "Material",
          "setter": "set_process_material",
          "getter": "get_process_material",
          "description": "[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial]."
        },
        {
          "name": "randomness",
          "type": "float",
          "setter": "set_randomness_ratio",
          "getter": "get_randomness_ratio",
          "description": "Emission randomness ratio. Default value: [code]0[/code]."
        },
        {
          "name": "speed_scale",
          "type": "float",
          "setter": "set_speed_scale",
          "getter": "get_speed_scale",
          "description": "Speed scaling ratio. Default value: [code]1[/code]."
        },
        {
          "name": "texture",
          "type": "Texture",
          "setter": "set_texture",
          "getter": "get_texture",
          "description": "Particle texture. If [code]null[/code] particles will be squares."
        },
        {
          "name": "v_frames",
          "type": "int",
          "setter": "set_v_frames",
          "getter": "get_v_frames",
          "description": "Number of vertical frames in [code]texture[/code]."
        },
        {
          "name": "visibility_rect",
          "type": "Rect2",
          "setter": "set_visibility_rect",
          "getter": "get_visibility_rect",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "ToolButton": {
      "name": "ToolButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Flat button helper class.",
      "description": "This is a helper class to generate a flat [Button] (see [method Button.set_flat]), creating a ToolButton is equivalent to:\n\n\t\t[codeblock]\n\t\tvar btn = Button.new()\n\t\tbtn.set_flat(true)\n\t\t[/codeblock]",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "Physics2DTestMotionResult": {
      "name": "Physics2DTestMotionResult",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_collider",
          "qualifiers": "const",
          "description": "",
          "return_type": "Object",
          "arguments": []
        },
        {
          "name": "get_collider_id",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_rid",
          "qualifiers": "const",
          "description": "",
          "return_type": "RID",
          "arguments": []
        },
        {
          "name": "get_collider_shape",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collider_velocity",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collision_normal",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_collision_point",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_motion",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_motion_remainder",
          "qualifiers": "const",
          "description": "",
          "return_type": "Vector2",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "CheckButton": {
      "name": "CheckButton",
      "inherits": "Button",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Checkable button.",
      "description": "CheckButton is a toggle button displayed as a check field.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": [
        {
          "name": "check_vadjust",
          "type": "int",
          "description": ""
        },
        {
          "name": "disabled",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "focus",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_hover",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_pressed",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hover",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "normal",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "off",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "on",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "pressed",
          "type": "StyleBox",
          "description": ""
        }
      ]
    },
    "AudioStreamSample": {
      "name": "AudioStreamSample",
      "inherits": "AudioStream",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Plays audio.",
      "description": "Plays audio, can loop.",
      "methods": [
        {
          "name": "get_data",
          "qualifiers": "const",
          "description": "",
          "return_type": "PoolByteArray",
          "arguments": []
        },
        {
          "name": "get_format",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_loop_begin",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_loop_end",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_loop_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_mix_rate",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_stereo",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_data",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "data",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_format",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "format",
              "type": "int",
              "enum": "AudioStreamSample.Format",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop_begin",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "loop_begin",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop_end",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "loop_end",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_loop_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "loop_mode",
              "type": "int",
              "enum": "AudioStreamSample.LoopMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_mix_rate",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mix_rate",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stereo",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stereo",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FORMAT_8_BITS",
          "value": "0",
          "description": "Audio codec 8 bit."
        },
        {
          "name": "FORMAT_16_BITS",
          "value": "1",
          "description": "Audio codec 16 bit."
        },
        {
          "name": "FORMAT_IMA_ADPCM",
          "value": "2",
          "description": "Audio codec IMA ADPCM."
        },
        {
          "name": "LOOP_DISABLED",
          "value": "0",
          "description": "Audio does not loop."
        },
        {
          "name": "LOOP_FORWARD",
          "value": "1",
          "description": "Audio loops the data between loop_begin and loop_end playing forward only."
        },
        {
          "name": "LOOP_PING_PONG",
          "value": "2",
          "description": "Audio loops the data between loop_begin and loop_end playing back and forth."
        }
      ],
      "properties": [
        {
          "name": "data",
          "type": "PoolByteArray",
          "setter": "set_data",
          "getter": "get_data",
          "description": "Raw audio data."
        },
        {
          "name": "format",
          "type": "int",
          "setter": "set_format",
          "getter": "get_format",
          "enum": "AudioStreamSample.Format",
          "description": "Audio format. See FORMAT_* constants for values."
        },
        {
          "name": "loop_begin",
          "type": "int",
          "setter": "set_loop_begin",
          "getter": "get_loop_begin",
          "description": "Loop start in bytes."
        },
        {
          "name": "loop_end",
          "type": "int",
          "setter": "set_loop_end",
          "getter": "get_loop_end",
          "description": "Loop end in bytes."
        },
        {
          "name": "loop_mode",
          "type": "int",
          "setter": "set_loop_mode",
          "getter": "get_loop_mode",
          "enum": "AudioStreamSample.LoopMode",
          "description": "Loop mode. See LOOP_* constants for values."
        },
        {
          "name": "mix_rate",
          "type": "int",
          "setter": "set_mix_rate",
          "getter": "get_mix_rate",
          "description": "The sample rate for mixing this audio."
        },
        {
          "name": "stereo",
          "type": "bool",
          "setter": "set_stereo",
          "getter": "is_stereo",
          "description": "If [code]true[/code], audio is stereo. Default value: [code]false[/code]."
        }
      ],
      "theme_properties": []
    },
    "ArrayMesh": {
      "name": "ArrayMesh",
      "inherits": "Mesh",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "add_blend_shape",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_surface_from_arrays",
          "description": "Create a new surface ([method get_surface_count] that will become surf_idx for this.\n\t\t\t\tSurfaces are created to be rendered using a \"primitive\", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. (As a note, when using indices, it is recommended to only use just points, lines or triangles).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "primitive",
              "type": "int",
              "enum": "Mesh.PrimitiveType",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "arrays",
              "type": "Array",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "blend_shapes",
              "type": "Array",
              "default_value": "[  ]"
            },
            {
              "index": "3",
              "name": "compress_flags",
              "type": "int",
              "default_value": "97792"
            }
          ]
        },
        {
          "name": "center_geometry",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear_blend_shapes",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_blend_shape_count",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_blend_shape_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_blend_shape_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_custom_aabb",
          "qualifiers": "const",
          "description": "",
          "return_type": "Rect3",
          "arguments": []
        },
        {
          "name": "get_surface_count",
          "qualifiers": "const",
          "description": "Return the amount of surfaces that the [ArrayMesh] holds.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "regen_normalmaps",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_blend_shape_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "Mesh.BlendShapeMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_custom_aabb",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "aabb",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_array_index_len",
          "qualifiers": "const",
          "description": "Return the length in indices of the index array in the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_array_len",
          "qualifiers": "const",
          "description": "Return the length in vertices of the vertex array in the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_arrays",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_blend_shape_arrays",
          "qualifiers": "const",
          "description": "",
          "return_type": "Array",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_format",
          "qualifiers": "const",
          "description": "Return the format mask of the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_material",
          "qualifiers": "const",
          "description": "Return a [Material] in a given surface. Surface is rendered using this material.",
          "return_type": "Material",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_name",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_get_primitive_type",
          "qualifiers": "const",
          "description": "Return the primitive type of the requested surface (see [method add_surface]).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_remove",
          "description": "Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_set_material",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "material",
              "type": "Material",
              "default_value": ""
            }
          ]
        },
        {
          "name": "surface_set_name",
          "description": "Set a [Material] for a given surface. Surface will be rendered using this material.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "surf_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "NO_INDEX_ARRAY",
          "value": "-1",
          "enum": "",
          "description": "Default value used for index_array_len when no indices are present."
        },
        {
          "name": "ARRAY_WEIGHTS_SIZE",
          "value": "4",
          "enum": "",
          "description": "Amount of weights/bone indices per vertex (always 4)."
        },
        {
          "name": "ARRAY_VERTEX",
          "value": "0",
          "description": "Vertex array (array of [Vector3] vertices)."
        },
        {
          "name": "ARRAY_NORMAL",
          "value": "1",
          "description": "Normal array (array of [Vector3] normals)."
        },
        {
          "name": "ARRAY_TANGENT",
          "value": "2",
          "description": "Tangent array, array of groups of 4 floats. first 3 floats determine the tangent, and the last the binormal direction as -1 or 1."
        },
        {
          "name": "ARRAY_COLOR",
          "value": "3",
          "description": "Vertex array (array of [Color] colors)."
        },
        {
          "name": "ARRAY_TEX_UV",
          "value": "4",
          "description": "UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v))."
        },
        {
          "name": "ARRAY_TEX_UV2",
          "value": "5",
          "description": "Second UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v))."
        },
        {
          "name": "ARRAY_BONES",
          "value": "6",
          "description": "Array of bone indices, as a float array. Each element in groups of 4 floats."
        },
        {
          "name": "ARRAY_WEIGHTS",
          "value": "7",
          "description": "Array of bone weights, as a float array. Each element in groups of 4 floats."
        },
        {
          "name": "ARRAY_INDEX",
          "value": "8",
          "description": "Array of integers, used as indices referencing vertices. No index can be beyond the vertex array size."
        },
        {
          "name": "ARRAY_MAX",
          "value": "9",
          "description": ""
        },
        {
          "name": "ARRAY_FORMAT_VERTEX",
          "value": "1",
          "description": "Array format will include vertices (mandatory)."
        },
        {
          "name": "ARRAY_FORMAT_NORMAL",
          "value": "2",
          "description": "Array format will include normals"
        },
        {
          "name": "ARRAY_FORMAT_TANGENT",
          "value": "4",
          "description": "Array format will include tangents"
        },
        {
          "name": "ARRAY_FORMAT_COLOR",
          "value": "8",
          "description": "Array format will include a color array."
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV",
          "value": "16",
          "description": "Array format will include UVs."
        },
        {
          "name": "ARRAY_FORMAT_TEX_UV2",
          "value": "32",
          "description": "Array format will include another set of UVs."
        },
        {
          "name": "ARRAY_FORMAT_BONES",
          "value": "64",
          "description": "Array format will include bone indices."
        },
        {
          "name": "ARRAY_FORMAT_WEIGHTS",
          "value": "128",
          "description": "Array format will include bone weights."
        },
        {
          "name": "ARRAY_FORMAT_INDEX",
          "value": "256",
          "description": "Index array will be used."
        }
      ],
      "properties": [],
      "theme_properties": []
    },
    "Array": {
      "name": "Array",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Generic array datatype.",
      "description": "Generic array, contains several elements of any type, accessible by numerical index starting at 0. Negative indices can be used to count from the right, like in Python. Arrays are always passed by reference.",
      "methods": [
        {
          "name": "Array",
          "description": "Construct an array from a [PoolColorArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolVector3Array].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolVector2Array].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolStringArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolRealArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolIntArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Array",
          "description": "Construct an array from a [PoolByteArray].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "append",
          "description": "Append an element at the end of the array (alias of [method push_back]).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "back",
          "description": "Returns the last element of the array if the array is not empty (size>0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "clear",
          "description": "Clear the array (resize to 0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "count",
          "description": "Return the amount of times an element is in the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "duplicate",
          "description": "Returns a copy of this [code]Array[/code].",
          "return_type": "Array",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "empty",
          "description": "Return true if the array is empty (size==0).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "erase",
          "description": "Remove the first occurrence of a value from the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find",
          "description": "Searches the array for a value and returns its index or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "find_last",
          "description": "Searches the array in reverse order for a value and returns its index or -1 if not found.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "front",
          "description": "Returns the first element of the array if the array is not empty (size>0).",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "has",
          "description": "Return true if the array contains given value.\n\t\t\t\t[codeblock]\n\t\t\t\t[ \"inside\", 7 ].has(\"inside\") == true\n\t\t\t\t[ \"inside\", 7 ].has(\"outside\") == false\n\t\t\t\t[ \"inside\", 7 ].has(7) == true\n\t\t\t\t[ \"inside\", 7 ].has(\"7\") == false\n\t\t\t\t[/codeblock]",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "hash",
          "description": "Return a hashed integer value representing the array contents.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "insert",
          "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "invert",
          "description": "Reverse the order of the elements in the array (so first element will now be the last) and return reference to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pop_back",
          "description": "Remove the last element of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "pop_front",
          "description": "Remove the first element of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "push_back",
          "description": "Append an element at the end of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "push_front",
          "description": "Add an element at the beginning of the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "value",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "remove",
          "description": "Remove an element from the array by index.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "resize",
          "description": "Resize the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are Null.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rfind",
          "description": "Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "size",
          "description": "Return the amount of elements in the array.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sort",
          "description": "Sort the array using natural order and return reference to the array.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sort_custom",
          "description": "Sort the array using a custom method and return reference to the array. The arguments are an object that holds the method and the name of such method. The custom method receives two arguments (a pair of elements from the array) and must return true if the first argument is less than the second, and return false otherwise. Note: you cannot randomize the return value as the heapsort algorithm expects a deterministic result. Doing so will result in unexpected behavior.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "obj",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "func",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "AudioEffectLowShelfFilter": {
      "name": "AudioEffectLowShelfFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "HTTPRequest": {
      "name": "HTTPRequest",
      "inherits": "Node",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Node with the ability to send HTTP requests.",
      "description": "A Node with the ability to send HTTP requests. Uses a [HTTPClient] internally, supports HTTPS.\n\t\tCan be used to make HTTP requests or download files via HTTP.",
      "methods": [
        {
          "name": "cancel_request",
          "description": "Cancel the current request.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_body_size",
          "qualifiers": "const",
          "description": "Return the response body length.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_body_size_limit",
          "qualifiers": "const",
          "description": "Return current body size limit.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_download_file",
          "qualifiers": "const",
          "description": "Return the file this request will download into.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_downloaded_bytes",
          "qualifiers": "const",
          "description": "Return the amount of bytes this HTTPRequest downloaded.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_http_client_status",
          "qualifiers": "const",
          "description": "Return the current status of the underlying [HTTPClient].",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_max_redirects",
          "qualifiers": "const",
          "description": "Return the maximum amount of redirects that will be followed.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_using_threads",
          "qualifiers": "const",
          "description": "Whether this request is using threads.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "request",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "url",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "custom_headers",
              "type": "PoolStringArray",
              "default_value": "PoolStringArray(  )"
            },
            {
              "index": "2",
              "name": "ssl_validate_domain",
              "type": "bool",
              "default_value": "true"
            },
            {
              "index": "3",
              "name": "method",
              "type": "int",
              "enum": "HTTPClient.Method",
              "default_value": "0"
            },
            {
              "index": "4",
              "name": "request_data",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "set_body_size_limit",
          "description": "Set the response body size limit.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_download_file",
          "description": "Set the file to download into. Outputs the response body into the file.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_max_redirects",
          "description": "Set the maximum amount of redirects the request will follow.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_threads",
          "description": "Make this HTTPRequest use threads.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "request_completed",
          "description": "This signal is emitted upon request completion.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "result",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "response_code",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "headers",
              "type": "PoolStringArray",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "body",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "RESULT_SUCCESS",
          "value": "0",
          "description": "Request successful."
        },
        {
          "name": "RESULT_CHUNKED_BODY_SIZE_MISMATCH",
          "value": "1",
          "description": ""
        },
        {
          "name": "RESULT_CANT_CONNECT",
          "value": "2",
          "description": "Request failed while connecting."
        },
        {
          "name": "RESULT_CANT_RESOLVE",
          "value": "3",
          "description": "Request failed while resolving."
        },
        {
          "name": "RESULT_CONNECTION_ERROR",
          "value": "4",
          "description": "Request failed due to connection(read/write) error."
        },
        {
          "name": "RESULT_SSL_HANDSHAKE_ERROR",
          "value": "5",
          "description": "Request failed on SSL handshake."
        },
        {
          "name": "RESULT_NO_RESPONSE",
          "value": "6",
          "description": "Request does not have a response(yet)."
        },
        {
          "name": "RESULT_BODY_SIZE_LIMIT_EXCEEDED",
          "value": "7",
          "description": "Request exceeded its maximum size limit, see [method set_body_size_limit]."
        },
        {
          "name": "RESULT_REQUEST_FAILED",
          "value": "8",
          "description": "Request failed. (unused)"
        },
        {
          "name": "RESULT_DOWNLOAD_FILE_CANT_OPEN",
          "value": "9",
          "description": "HTTPRequest couldn't open the download file."
        },
        {
          "name": "RESULT_DOWNLOAD_FILE_WRITE_ERROR",
          "value": "10",
          "description": "HTTPRequest couldn't write to the download file."
        },
        {
          "name": "RESULT_REDIRECT_LIMIT_REACHED",
          "value": "11",
          "description": "Request reached its maximum redirect limit, see [method set_max_redirects]."
        }
      ],
      "properties": [
        {
          "name": "body_size_limit",
          "type": "int",
          "setter": "set_body_size_limit",
          "getter": "get_body_size_limit",
          "description": ""
        },
        {
          "name": "max_redirects",
          "type": "int",
          "setter": "set_max_redirects",
          "getter": "get_max_redirects",
          "description": ""
        },
        {
          "name": "use_threads",
          "type": "bool",
          "setter": "set_use_threads",
          "getter": "is_using_threads",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptMathConstant": {
      "name": "VisualScriptMathConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_math_constant",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "set_math_constant",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "which",
              "type": "int",
              "enum": "VisualScriptMathConstant.MathConstant",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "MATH_CONSTANT_ONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "MATH_CONSTANT_PI",
          "value": "1",
          "description": ""
        },
        {
          "name": "MATH_CONSTANT_2PI",
          "value": "2",
          "description": ""
        },
        {
          "name": "MATH_CONSTANT_HALF_PI",
          "value": "3",
          "description": ""
        },
        {
          "name": "MATH_CONSTANT_E",
          "value": "4",
          "description": ""
        },
        {
          "name": "MATH_CONSTANT_SQRT2",
          "value": "5",
          "description": ""
        },
        {
          "name": "MATH_CONSTANT_INF",
          "value": "6",
          "description": ""
        },
        {
          "name": "MATH_CONSTANT_NAN",
          "value": "7",
          "description": ""
        },
        {
          "name": "MATH_CONSTANT_MAX",
          "value": "8",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "constant",
          "type": "int",
          "setter": "set_math_constant",
          "getter": "get_math_constant",
          "enum": "VisualScriptMathConstant.MathConstant",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "TabContainer": {
      "name": "TabContainer",
      "inherits": "Control",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Tabbed Container.",
      "description": "Tabbed Container. Contains several children controls, but shows only one at the same time. Clicking on the top tabs allows to change the currently visible one.\n\t\tChildren controls of this one automatically.",
      "methods": [
        {
          "name": "are_tabs_visible",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the tabs are visible.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_current_tab",
          "qualifiers": "const",
          "description": "Returns the current tab index that is being shown.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_current_tab_control",
          "qualifiers": "const",
          "description": "",
          "return_type": "Control",
          "arguments": []
        },
        {
          "name": "get_popup",
          "qualifiers": "const",
          "description": "",
          "return_type": "Popup",
          "arguments": []
        },
        {
          "name": "get_previous_tab",
          "qualifiers": "const",
          "description": "Returns the previous tab index that was being shown.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_align",
          "qualifiers": "const",
          "description": "Returns the tab alignment.See the ALIGN_* constants.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_control",
          "qualifiers": "const",
          "description": "Returns the current tab control that is being shown.",
          "return_type": "Control",
          "arguments": [
            {
              "index": "0",
              "name": "idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_count",
          "qualifiers": "const",
          "description": "Returns the amount of tabs.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_tab_disabled",
          "qualifiers": "const",
          "description": "Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_icon",
          "qualifiers": "const",
          "description": "Returns the [Texture] for the tab at index [code]tab_idx[/code] or null if the tab has no [Texture].",
          "return_type": "Texture",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_tab_title",
          "qualifiers": "const",
          "description": "Returns the title for the tab at index [code]tab_idx[/code]. Tab titles are by default the children node name, but this can be overridden.",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_current_tab",
          "description": "Bring a tab (and the Control it represents) to the front, and hide the rest.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_popup",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "popup",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_align",
          "description": "Set tab alignment, from the ALIGN_* enum. Moves tabs to the left, right or center.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "align",
              "type": "int",
              "enum": "TabContainer.TabAlign",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_disabled",
          "description": "Set tab at index [code]tab_idx[/code] disabled.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "disabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_icon",
          "description": "Set an icon for a tab at index [code]tab_idx[/code].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "icon",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tab_title",
          "description": "Set a title for the tab at index [code]tab_idx[/code]. Tab titles are by default the children node name, but this can be overridden.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab_idx",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "title",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_tabs_visible",
          "description": "If [code]true[/code] all the tabs will be visible.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "visible",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "pre_popup_pressed",
          "description": "",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "tab_changed",
          "description": "Emitted only when the current tab changes.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tab_selected",
          "description": "Emitted when a tab is being selected, even if it is the same tab.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tab",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "ALIGN_LEFT",
          "value": "0",
          "description": ""
        },
        {
          "name": "ALIGN_CENTER",
          "value": "1",
          "description": ""
        },
        {
          "name": "ALIGN_RIGHT",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "current_tab",
          "type": "int",
          "setter": "set_current_tab",
          "getter": "get_current_tab",
          "description": "The current tab."
        },
        {
          "name": "tab_align",
          "type": "int",
          "setter": "set_tab_align",
          "getter": "get_tab_align",
          "enum": "TabContainer.TabAlign",
          "description": "The alignment of all the tabs of the tab container. See the [code]ALIGN_*[/code] constants."
        },
        {
          "name": "tabs_visible",
          "type": "bool",
          "setter": "set_tabs_visible",
          "getter": "are_tabs_visible",
          "description": "If [code]true[/code] all tabs that are children of the TabContainer will be visible."
        }
      ],
      "theme_properties": [
        {
          "name": "decrement",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "decrement_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "font",
          "type": "Font",
          "description": ""
        },
        {
          "name": "font_color_bg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_disabled",
          "type": "Color",
          "description": ""
        },
        {
          "name": "font_color_fg",
          "type": "Color",
          "description": ""
        },
        {
          "name": "hseparation",
          "type": "int",
          "description": ""
        },
        {
          "name": "increment",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "increment_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "label_valign_bg",
          "type": "int",
          "description": ""
        },
        {
          "name": "label_valign_fg",
          "type": "int",
          "description": ""
        },
        {
          "name": "menu",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "menu_highlight",
          "type": "Texture",
          "description": ""
        },
        {
          "name": "panel",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "side_margin",
          "type": "int",
          "description": ""
        },
        {
          "name": "tab_bg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "tab_fg",
          "type": "StyleBox",
          "description": ""
        },
        {
          "name": "top_margin",
          "type": "int",
          "description": ""
        }
      ]
    },
    "BitMap": {
      "name": "BitMap",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Boolean matrix.",
      "description": "A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.",
      "methods": [
        {
          "name": "create",
          "description": "Creates a bitmap with the specified size, filled with false.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "size",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "create_from_image_alpha",
          "description": "Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to false if the alpha value of the image at that position is 0, and true in other case.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "image",
              "type": "Image",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_bit",
          "qualifiers": "const",
          "description": "Returns bitmap's value at the specified position.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_size",
          "qualifiers": "const",
          "description": "Returns bitmap's dimensions.",
          "return_type": "Vector2",
          "arguments": []
        },
        {
          "name": "get_true_bit_count",
          "qualifiers": "const",
          "description": "Returns the amount of bitmap elements that are set to true.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_bit",
          "description": "Sets the bitmap's element at the specified position, to the specified value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "Vector2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bit",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_bit_rect",
          "description": "Sets a rectangular portion of the bitmap to the specified value.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "p_rect",
              "type": "Rect2",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "bit",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "data",
          "type": "Dictionary",
          "setter": "_set_data",
          "getter": "_get_data",
          "description": "Returns a [Dictionary] with two keys :\n\t\t\t[code]data[/code] : [PoolByteArray] with [code]true[/code]/[code]false[/code] [code]BitMap[/code] data.\n\t\t\t[code]size[/code] : The [code]Bitmap[/code]'s size."
        }
      ],
      "theme_properties": []
    },
    "DirectionalLight": {
      "name": "DirectionalLight",
      "inherits": "Light",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Directional Light, such as the Sun or the Moon.",
      "description": "A DirectionalLight is a type of [Light] node that emits light constantly in one direction (the negative z axis of the node). It is used lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored, only the basis is used do determine light direction.",
      "methods": [
        {
          "name": "get_shadow_depth_range",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_shadow_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_blend_splits_enabled",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "set_blend_splits",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_depth_range",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "DirectionalLight.ShadowDepthRange",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_shadow_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "DirectionalLight.ShadowMode",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "SHADOW_ORTHOGONAL",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADOW_PARALLEL_2_SPLITS",
          "value": "1",
          "description": ""
        },
        {
          "name": "SHADOW_PARALLEL_4_SPLITS",
          "value": "2",
          "description": ""
        },
        {
          "name": "SHADOW_DEPTH_RANGE_STABLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SHADOW_DEPTH_RANGE_OPTIMIZED",
          "value": "1",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "directional_shadow_bias_split_scale",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_blend_splits",
          "type": "bool",
          "setter": "set_blend_splits",
          "getter": "is_blend_splits_enabled",
          "description": ""
        },
        {
          "name": "directional_shadow_depth_range",
          "type": "int",
          "setter": "set_shadow_depth_range",
          "getter": "get_shadow_depth_range",
          "enum": "DirectionalLight.ShadowDepthRange",
          "description": ""
        },
        {
          "name": "directional_shadow_max_distance",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_mode",
          "type": "int",
          "setter": "set_shadow_mode",
          "getter": "get_shadow_mode",
          "enum": "DirectionalLight.ShadowMode",
          "description": ""
        },
        {
          "name": "directional_shadow_normal_bias",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_split_1",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_split_2",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "directional_shadow_split_3",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "AcceptDialog": {
      "name": "AcceptDialog",
      "inherits": "WindowDialog",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Base dialog for user notification.",
      "description": "This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result.",
      "methods": [
        {
          "name": "add_button",
          "description": "Adds a button with label [i]text[/i] and a custom [i]action[/i] to the dialog and returns the created button. [i]action[/i] will be passed to the [custom_action] signal when pressed.\n\t\t\t\tIf [code]true[/code], [i]right[/i] will place the button to the right of any sibling buttons. Default value: [code]false[/code].",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "right",
              "type": "bool",
              "default_value": "false"
            },
            {
              "index": "2",
              "name": "action",
              "type": "String",
              "default_value": "\"\""
            }
          ]
        },
        {
          "name": "add_cancel",
          "description": "Adds a button with label [i]name[/i] and a cancel action to the dialog and returns the created button.",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_hide_on_ok",
          "qualifiers": "const",
          "description": "Return true if the dialog will be hidden when accepted (default true).",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_label",
          "description": "Return the label used for built-in text.",
          "return_type": "Label",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_ok",
          "description": "Return the OK Button.",
          "return_type": "Button",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_text",
          "qualifiers": "const",
          "description": "Return the built-in label text.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "register_text_enter",
          "description": "Registers a [LineEdit] in the dialog. When the enter key is pressed, the dialog will be accepted.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "line_edit",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_hide_on_ok",
          "description": "Set whether the dialog is hidden when accepted (default true).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enabled",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_text",
          "description": "Set the built-in label text.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "confirmed",
          "description": "Emitted when the dialog is accepted.",
          "return_type": "",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "custom_action",
          "description": "Emitted when a custom button is pressed. See [method add_button].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "action",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [],
      "properties": [
        {
          "name": "dialog_hide_on_ok",
          "type": "bool",
          "setter": "set_hide_on_ok",
          "getter": "get_hide_on_ok",
          "description": "If [code]true[/code] the dialog is hidden when accepted. Default value: [code]true[/code]."
        },
        {
          "name": "dialog_text",
          "type": "String",
          "setter": "set_text",
          "getter": "get_text",
          "description": "The text displayed by this dialog."
        }
      ],
      "theme_properties": []
    },
    "Basis": {
      "name": "Basis",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "3x3 matrix datatype.",
      "description": "3x3 matrix used for 3D rotation and scale. Contains 3 vector fields x,y and z as its columns, which can be interpreted as the local basis vectors of a transformation. Can also be accessed as array of 3D vectors. These vectors are orthogonal to each other, but are not necessarily normalized. Almost always used as orthogonal basis for a [Transform].\n\t\tFor such use, it is composed of a scaling and a rotation matrix, in that order (M = R.S).",
      "methods": [
        {
          "name": "Basis",
          "description": "Create a rotation matrix from the given quaternion.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Basis",
          "description": "Create a rotation matrix (in the YXZ convention: first Z, then X, and Y last) from the specified Euler angles, given in the vector format as (X-angle, Y-angle, Z-angle).",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "euler",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Basis",
          "description": "Create a rotation matrix which rotates around the given axis by the specified angle. The axis must be a normalized vector.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "Basis",
          "description": "Create a matrix from 3 axis vectors.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "x_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "y_axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "z_axis",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "determinant",
          "description": "Return the determinant of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_euler",
          "description": "Assuming that the matrix is a proper rotation matrix (orthonormal matrix with determinant +1), return Euler angles (in the YXZ convention: first Z, then X, and Y last). Returned vector contains the rotation angles in the format (X-angle, Y-angle, Z-angle).",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_orthogonal_index",
          "description": "This function considers a discretization of rotations into 24 points on unit sphere, lying along the vectors (x,y,z) with each component being either -1,0 or 1, and returns the index of the point best representing the orientation of the object. It is mainly used by the grid map editor. For further details, refer to Godot source code.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_scale",
          "description": "Assuming that the matrix is the combination of a rotation and scaling, return the absolute value of scaling factors along each axis.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "inverse",
          "description": "Return the inverse of the matrix.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "orthonormalized",
          "description": "Return the orthonormalized version of the matrix (useful to call from time to time to avoid rounding error for orthogonal matrices). This performs a Gram-Schmidt orthonormalization on the basis of the matrix.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "rotated",
          "description": "Introduce an additional rotation around the given axis by phi (radians). Only relevant when the matrix is being used as a part of [Transform]. The axis must be a normalized vector.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "axis",
              "type": "Vector3",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "phi",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "scaled",
          "description": "Introduce an additional scaling specified by the given 3D scaling factor. Only relevant when the matrix is being used as a part of [Transform].",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "scale",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tdotx",
          "description": "Transposed dot product with the x axis of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tdoty",
          "description": "Transposed dot product with the y axis of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "tdotz",
          "description": "Transposed dot product with the z axis of the matrix.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "with",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "transposed",
          "description": "Return the transposed version of the matrix.",
          "return_type": "Basis",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "xform",
          "description": "Return a vector transformed (multiplied) by the matrix.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "xform_inv",
          "description": "Return a vector transformed (multiplied) by the transposed matrix. Note that this results in a multiplication by the inverse of the matrix only if it represents a rotation-reflection.",
          "return_type": "Vector3",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "v",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "x",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "y",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": ""
        },
        {
          "name": "z",
          "type": "Vector3",
          "setter": "",
          "getter": "",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "Area": {
      "name": "Area",
      "inherits": "CollisionObject",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "General purpose area node for detection and 3D physics influence.",
      "description": "3D area that detects [CollisionObject] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).",
      "methods": [
        {
          "name": "get_angular_damp",
          "qualifiers": "const",
          "description": "Return the angular damp rate.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_audio_bus",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_collision_layer",
          "qualifiers": "const",
          "description": "Return the physics layer this area is in.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_layer_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the layer mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_collision_mask",
          "qualifiers": "const",
          "description": "Return the physics layers this area can scan for collisions.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_collision_mask_bit",
          "qualifiers": "const",
          "description": "Return an individual bit on the collision mask.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_gravity",
          "qualifiers": "const",
          "description": "Return the gravity intensity.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_distance_scale",
          "qualifiers": "const",
          "description": "Return the falloff factor for point gravity.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_gravity_vector",
          "qualifiers": "const",
          "description": "Return the gravity vector. If gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.",
          "return_type": "Vector3",
          "arguments": []
        },
        {
          "name": "get_linear_damp",
          "qualifiers": "const",
          "description": "Return the linear damp rate.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_overlapping_areas",
          "qualifiers": "const",
          "description": "Returns a list of intersecting [Area]\\ s.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_overlapping_bodies",
          "qualifiers": "const",
          "description": "Returns a list of intersecting [PhysicsBody]\\ s.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_priority",
          "qualifiers": "const",
          "description": "Return the processing order of this area.",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_reverb_amount",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_reverb_bus",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_reverb_uniformity",
          "qualifiers": "const",
          "description": "",
          "return_type": "float",
          "arguments": []
        },
        {
          "name": "get_space_override_mode",
          "qualifiers": "const",
          "description": "Return the space override mode.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "is_gravity_a_point",
          "qualifiers": "const",
          "description": "Return whether gravity is a point. A point gravity will attract objects towards it, as opposed to a gravity vector, which moves them in a given direction.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_monitorable",
          "qualifiers": "const",
          "description": "Return whether this area can be detected by other, monitoring, areas.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_monitoring",
          "qualifiers": "const",
          "description": "Return whether this area detects bodies/areas entering/exiting it.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_overriding_audio_bus",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "is_using_reverb_bus",
          "qualifiers": "const",
          "description": "",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "overlaps_area",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given area overlaps the Area.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "overlaps_body",
          "qualifiers": "const",
          "description": "If [code]true[/code] the given body overlaps the Area.",
          "return_type": "bool",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Node",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_angular_damp",
          "description": "Set the rate at which objects stop spinning in this area, if there are not any other forces making it spin. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.\n\t\t\t\tIn practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "angular_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_audio_bus",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_audio_bus_override",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer",
          "description": "Set the physics layers this area is in.\n\t\t\t\tCollidable objects can exist in any of 32 different layers. These layers are not visual, but more of a tagging system instead. A collidable can use these layers/tags to select with which objects it can collide, using [method set_collision_mask].\n\t\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collision_layer",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_layer_bit",
          "description": "Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask",
          "description": "Set the physics layers this area can scan for collisions.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "collision_mask",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_collision_mask_bit",
          "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "bit",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity",
          "description": "Set the gravity intensity. This is useful to alter the force of gravity without altering its direction.\n\t\t\t\tThis value multiplies the gravity vector, whether it is the given vector ([method set_gravity_vector]), or a calculated one (when using a center of gravity).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "gravity",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_distance_scale",
          "description": "Set the falloff factor for point gravity. The greater this value is, the faster the strength of gravity decreases with the square of distance.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "distance_scale",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_is_point",
          "description": "When overriding space parameters, this method sets whether this area has a center of gravity. To set/get the location of the center of gravity, use [method set_gravity_vector]/[method get_gravity_vector].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_gravity_vector",
          "description": "Set the gravity vector. This vector does not have to be normalized.\n\t\t\t\tIf gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "vector",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_linear_damp",
          "description": "Set the rate at which objects stop moving in this area, if there are not any other forces moving it. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.\n\t\t\t\tIn practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "linear_damp",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_monitorable",
          "description": "Set whether this area can be detected by other, monitoring, areas. Only areas need to be marked as monitorable. Bodies are always so.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_monitoring",
          "description": "Set whether this area can detect bodies/areas entering/exiting it.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_priority",
          "description": "Set the order in which the area is processed. Greater values mean the area gets processed first. This is useful for areas which have a space override different from AREA_SPACE_OVERRIDE_DISABLED or AREA_SPACE_OVERRIDE_COMBINE, as they replace values, and are thus order-dependent.\n\t\t\t\tAreas with the same priority value get evaluated in an unpredictable order, and should be differentiated if evaluation order is to be important.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "priority",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_reverb_amount",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_reverb_bus",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_reverb_uniformity",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "amount",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_space_override_mode",
          "description": "Set the space override mode. This mode controls how an area affects gravity and damp.\n\t\t\t\tAREA_SPACE_OVERRIDE_DISABLED: This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.\n\t\t\t\tAREA_SPACE_OVERRIDE_COMBINE: This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.\n\t\t\t\tAREA_SPACE_OVERRIDE_COMBINE_REPLACE: This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.\n\t\t\t\tAREA_SPACE_OVERRIDE_REPLACE: This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.\n\t\t\t\tAREA_SPACE_OVERRIDE_REPLACE_COMBINE: This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "int",
              "enum": "Area.SpaceOverride",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_use_reverb_bus",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "enable",
              "type": "bool",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [
        {
          "name": "area_entered",
          "description": "Emitted when another area enters.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_exited",
          "description": "Emitted when another area exits.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_shape_entered",
          "description": "Emitted when another area enters, reporting which areas overlapped.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "area_shape_exited",
          "description": "Emitted when another area exits, reporting which areas were overlapping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "area_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "area",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "self_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_entered",
          "description": "Emitted when a [PhysicsBody] object enters.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_exited",
          "description": "Emitted when a [PhysicsBody2D] object exits.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body",
              "type": "Object",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_entered",
          "description": "Emitted when a [PhysicsBody2D] object enters, reporting which shapes overlapped.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "body_shape_exited",
          "description": "Emitted when a [PhysicsBody2D] object exits, reporting which shapes were overlapping.",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "body_id",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "body",
              "type": "Object",
              "default_value": ""
            },
            {
              "index": "2",
              "name": "body_shape",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "3",
              "name": "area_shape",
              "type": "int",
              "default_value": ""
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "SPACE_OVERRIDE_DISABLED",
          "value": "0",
          "description": "This area does not affect gravity/damping."
        },
        {
          "name": "SPACE_OVERRIDE_COMBINE",
          "value": "1",
          "description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order)."
        },
        {
          "name": "SPACE_OVERRIDE_COMBINE_REPLACE",
          "value": "2",
          "description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order), ignoring any lower priority areas."
        },
        {
          "name": "SPACE_OVERRIDE_REPLACE",
          "value": "3",
          "description": "This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas."
        },
        {
          "name": "SPACE_OVERRIDE_REPLACE_COMBINE",
          "value": "4",
          "description": "This area replaces any gravity/damping calculated so far (in [code]priority[/code] order), but keeps calculating the rest of the areas."
        }
      ],
      "properties": [
        {
          "name": "angular_damp",
          "type": "float",
          "setter": "set_angular_damp",
          "getter": "get_angular_damp",
          "description": "The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping)."
        },
        {
          "name": "audio_bus_name",
          "type": "String",
          "setter": "set_audio_bus",
          "getter": "get_audio_bus",
          "description": "The name of the area's audio bus."
        },
        {
          "name": "audio_bus_override",
          "type": "bool",
          "setter": "set_audio_bus_override",
          "getter": "is_overriding_audio_bus",
          "description": "If [code]true[/code] the area's audio bus overrides the default audio bus. Default value: [code]false[/code]."
        },
        {
          "name": "collision_layer",
          "type": "int",
          "setter": "set_collision_layer",
          "getter": "get_collision_layer",
          "description": "The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [code]collision_mask[/code]."
        },
        {
          "name": "collision_mask",
          "type": "int",
          "setter": "set_collision_mask",
          "getter": "get_collision_mask",
          "description": "The physics layers this area scans to determine collision detection."
        },
        {
          "name": "gravity",
          "type": "float",
          "setter": "set_gravity",
          "getter": "get_gravity",
          "description": "The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction."
        },
        {
          "name": "gravity_distance_scale",
          "type": "float",
          "setter": "set_gravity_distance_scale",
          "getter": "get_gravity_distance_scale",
          "description": "The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance."
        },
        {
          "name": "gravity_point",
          "type": "bool",
          "setter": "set_gravity_is_point",
          "getter": "is_gravity_a_point",
          "description": "If [code]true[/code] gravity is calculated from a point (set via [code]gravity_vec[/code]). Also see [code]space_override[/code]. Default value: [code]false[/code]."
        },
        {
          "name": "gravity_vec",
          "type": "Vector3",
          "setter": "set_gravity_vector",
          "getter": "get_gravity_vector",
          "description": "The area's gravity vector (not normalized). If gravity is a point (see [method is_gravity_a_point]), this will be the point of attraction."
        },
        {
          "name": "linear_damp",
          "type": "float",
          "setter": "set_linear_damp",
          "getter": "get_linear_damp",
          "description": "The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping)."
        },
        {
          "name": "monitorable",
          "type": "bool",
          "setter": "set_monitorable",
          "getter": "is_monitorable",
          "description": "If [code]true[/code] other monitoring areas can detect this area. Default value: [code]true[/code]."
        },
        {
          "name": "monitoring",
          "type": "bool",
          "setter": "set_monitoring",
          "getter": "is_monitoring",
          "description": "If [code]true[/code] the area detects bodies or areas entering and exiting it. Default value: [code]true[/code]."
        },
        {
          "name": "priority",
          "type": "float",
          "setter": "set_priority",
          "getter": "get_priority",
          "description": "The area's priority. Higher priority areas are processed first. Default value: 0."
        },
        {
          "name": "reverb_bus_amount",
          "type": "float",
          "setter": "set_reverb_amount",
          "getter": "get_reverb_amount",
          "description": ""
        },
        {
          "name": "reverb_bus_enable",
          "type": "bool",
          "setter": "set_use_reverb_bus",
          "getter": "is_using_reverb_bus",
          "description": ""
        },
        {
          "name": "reverb_bus_name",
          "type": "String",
          "setter": "set_reverb_bus",
          "getter": "get_reverb_bus",
          "description": ""
        },
        {
          "name": "reverb_bus_uniformity",
          "type": "float",
          "setter": "set_reverb_uniformity",
          "getter": "get_reverb_uniformity",
          "description": ""
        },
        {
          "name": "space_override",
          "type": "int",
          "setter": "set_space_override_mode",
          "getter": "get_space_override_mode",
          "enum": "Area.SpaceOverride",
          "description": "Override mode for gravity and damping calculations within this area. See the SPACE_OVERRIDE_* constants for values."
        }
      ],
      "theme_properties": []
    },
    "AudioEffectBandPassFilter": {
      "name": "AudioEffectBandPassFilter",
      "inherits": "AudioEffectFilter",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "String": {
      "name": "String",
      "category": "Built-In Types",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Built-in string class.",
      "description": "This is the built-in string class (and the one used by GDScript). It supports Unicode and provides all necessary means for string handling. Strings are reference counted and use a copy-on-write approach, so passing them around is cheap in resources.",
      "methods": [
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Rect2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Vector3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform2D",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Plane",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Quat",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Rect3",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Basis",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Transform",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Color",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "RID",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Dictionary",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolByteArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolIntArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolRealArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolStringArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector2Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolVector3Array",
              "default_value": ""
            }
          ]
        },
        {
          "name": "String",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "PoolColorArray",
              "default_value": ""
            }
          ]
        },
        {
          "name": "begins_with",
          "description": "Return true if the strings begins with the given string.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "bigrams",
          "description": "Return the bigrams (pairs of consecutive letters) of this string.",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "c_escape",
          "description": "Return a copy of the string with special characters escaped using the C language standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "c_unescape",
          "description": "Return a copy of the string with escaped characters replaced by their meanings according to the C language standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "capitalize",
          "description": "Change the case of some letters. Replace underscores with spaces, convert all letters to lowercase then capitalize first and every letter following the space character. For [code]capitalize camelCase mixed_with_underscores[/code] it will return [code]Capitalize Camelcase Mixed With Underscores[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "casecmp_to",
          "description": "Perform a case-sensitive comparison to another string, return -1 if less, 0 if equal and +1 if greater.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "empty",
          "description": "Return true if the string is empty.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "ends_with",
          "description": "Return true if the strings ends with the given string.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "erase",
          "description": "Erase [code]chars[/code] characters from the string starting from [code]position[/code].",
          "return_type": "",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "chars",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "find",
          "description": "Find the first occurrence of a substring, return the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "find_last",
          "description": "Find the last occurrence of a substring, return the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "findn",
          "description": "Find the first occurrence of a substring but search as case-insensitive, return the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "format",
          "description": "",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "values",
              "type": "var",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "placeholder",
              "type": "String",
              "default_value": "{_}"
            }
          ]
        },
        {
          "name": "get_base_dir",
          "description": "If the string is a path to a file, return the base directory.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_basename",
          "description": "If the string is a path to a file, return the path to the file without the extension.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_extension",
          "description": "If the string is a path to a file, return the extension.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_file",
          "description": "If the string is a path to a file, return the file and ignore the base directory.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "hash",
          "description": "Hash the string and return a 32 bits integer.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "hex_to_int",
          "description": "Convert a string containing a hexadecimal number into an int.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "insert",
          "description": "Insert a substring at a given position.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "what",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_abs_path",
          "description": "If the string is a path to a file or directory, return true if the path is absolute.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_rel_path",
          "description": "If the string is a path to a file or directory, return true if the path is relative.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_subsequence_of",
          "description": "Check whether this string is a subsequence of the given string.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_subsequence_ofi",
          "description": "Check whether this string is a subsequence of the given string, without considering case.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "is_valid_float",
          "description": "Check whether the string contains a valid float.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_html_color",
          "description": "Check whether the string contains a valid color in HTML notation.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_identifier",
          "description": "Check whether the string is a valid identifier. As is common in programming languages, a valid identifier may contain only letters, digits and underscores (_) and the first character may not be a digit.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_integer",
          "description": "Check whether the string contains a valid integer.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "is_valid_ip_address",
          "description": "Check whether the string contains a valid IP address.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "json_escape",
          "description": "Return a copy of the string with special characters escaped using the JSON standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "left",
          "description": "Return an amount of characters from the left of the string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "length",
          "description": "Return the length of the string in characters.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "match",
          "description": "Do a simple expression match, where '*' matches zero or more arbitrary characters and '?' matches any single character except '.'.",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "expr",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "matchn",
          "description": "Do a simple case insensitive expression match, using ? and * wildcards (see [method match]).",
          "return_type": "bool",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "expr",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "md5_buffer",
          "description": "Return the MD5 hash of the string as an array of bytes.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "md5_text",
          "description": "Return the MD5 hash of the string as a string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "nocasecmp_to",
          "description": "Perform a case-insensitive comparison to another string, return -1 if less, 0 if equal and +1 if greater.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "to",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "ord_at",
          "description": "Return the character code at position [code]at[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "at",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pad_decimals",
          "description": "Format a number to have an exact number of [code]digits[/code] after the decimal point.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "digits",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "pad_zeros",
          "description": "Format a number to have an exact number of [code]digits[/code] before the decimal point.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "digits",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "percent_decode",
          "description": "Decode a percent-encoded string. See [method percent_encode].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "percent_encode",
          "description": "Percent-encode a string. This is meant to encode parameters in a URL when sending a HTTP GET request and bodies of form-urlencoded POST request.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "plus_file",
          "description": "If the string is a path, this concatenates [code]file[/code] at the end of the string as a subpath. E.g. [code]\"this/is\".plus_file(\"path\") == \"this/is/path\"[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "file",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "replace",
          "description": "Replace occurrences of a substring for different ones inside the string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "forwhat",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "replacen",
          "description": "Replace occurrences of a substring for different ones inside the string, but search case-insensitive.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "forwhat",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "rfind",
          "description": "Perform a search for a substring, but start from the end of the string instead of the beginning.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "rfindn",
          "description": "Perform a search for a substring, but start from the end of the string instead of the beginning. Also search case-insensitive.",
          "return_type": "int",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "what",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "from",
              "type": "int",
              "default_value": "-1"
            }
          ]
        },
        {
          "name": "right",
          "description": "Return the right side of the string from a given position.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "position",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "sha256_buffer",
          "description": "",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "sha256_text",
          "description": "Return the SHA-256 hash of the string as a string.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "similarity",
          "description": "Return the similarity index of the text compared to this string. 1 means totally similar and 0 means totally dissimilar.",
          "return_type": "float",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "text",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "split",
          "description": "Split the string by a divisor string, return an array of the substrings. Example \"One,Two,Three\" will return [\"One\",\"Two\",\"Three\"] if split by \",\".",
          "return_type": "PoolStringArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "divisor",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "allow_empty",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "split_floats",
          "description": "Split the string in floats by using a divisor string, return an array of the substrings. Example \"1,2.5,3\" will return [1,2.5,3] if split by \",\".",
          "return_type": "PoolRealArray",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "divisor",
              "type": "String",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "allow_empty",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "strip_edges",
          "description": "Return a copy of the string stripped of any non-printable character at the beginning and the end. The optional arguments are used to toggle stripping on the left and right edges respectively.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "left",
              "type": "bool",
              "default_value": "True"
            },
            {
              "index": "1",
              "name": "right",
              "type": "bool",
              "default_value": "True"
            }
          ]
        },
        {
          "name": "substr",
          "description": "Return part of the string from the position [code]from[/code], with length [code]len[/code].",
          "return_type": "String",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "from",
              "type": "int",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "len",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "to_ascii",
          "description": "Convert the String (which is a character array) to PoolByteArray (which is an array of bytes). The conversion is speeded up in comparison to to_utf8() with the assumption that all the characters the String contains are only ASCII characters.",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_float",
          "description": "Convert a string, containing a decimal number, into a [code]float[/code].",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_int",
          "description": "Convert a string, containing an integer number, into an [code]int[/code].",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_lower",
          "description": "Return the string converted to lowercase.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_upper",
          "description": "Return the string converted to uppercase.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "to_utf8",
          "description": "Convert the String (which is an array of characters) to PoolByteArray (which is an array of bytes). The conversion is a bit slower than to_ascii(), but supports all UTF-8 characters. Therefore, you should prefer this function over to_ascii().",
          "return_type": "PoolByteArray",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "xml_escape",
          "description": "Return a copy of the string with special characters escaped using the XML standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "xml_unescape",
          "description": "Return a copy of the string with escaped characters replaced by their meanings according to the XML standard.",
          "return_type": "String",
          "qualifiers": "",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "TextureProgress": {
      "name": "TextureProgress",
      "inherits": "Range",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Texture-based progress bar. Useful for loading screens and life or stamina bars.",
      "description": "TextureProgress works like [ProgressBar] but it uses up to 3 textures instead of Godot's [Theme] resource. Works horizontally, vertically, and radially.",
      "methods": [
        {
          "name": "get_fill_degrees",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_fill_mode",
          "description": "",
          "return_type": "int",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_nine_patch_stretch",
          "qualifiers": "const",
          "description": "Returns true if textures are stretched as nine-patches or false otherwise.",
          "return_type": "bool",
          "arguments": []
        },
        {
          "name": "get_over_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_progress_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "get_radial_center_offset",
          "description": "",
          "return_type": "Vector2",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_radial_initial_angle",
          "description": "",
          "return_type": "float",
          "qualifiers": "",
          "arguments": []
        },
        {
          "name": "get_stretch_margin",
          "qualifiers": "const",
          "description": "Return nine-patch texture offset for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_under_texture",
          "qualifiers": "const",
          "description": "",
          "return_type": "Texture",
          "arguments": []
        },
        {
          "name": "set_fill_degrees",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_fill_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_nine_patch_stretch",
          "description": "Set if textures should be stretched as nine-patches.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "stretch",
              "type": "bool",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_over_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tex",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_progress_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tex",
              "type": "Texture",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radial_center_offset",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "Vector2",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_radial_initial_angle",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "float",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stretch_margin",
          "description": "Set nine-patch texture offset for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM).",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "default_value": ""
            },
            {
              "index": "1",
              "name": "value",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_under_texture",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "tex",
              "type": "Texture",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "FILL_LEFT_TO_RIGHT",
          "value": "0",
          "description": "The [member texture_progress] fills from left to right."
        },
        {
          "name": "FILL_RIGHT_TO_LEFT",
          "value": "1",
          "description": "The [member texture_progress] fills from right to left."
        },
        {
          "name": "FILL_TOP_TO_BOTTOM",
          "value": "2",
          "description": "The [member texture_progress] fills from top to bototm."
        },
        {
          "name": "FILL_BOTTOM_TO_TOP",
          "value": "3",
          "description": "The [member texture_progress] fills from bottom to top."
        },
        {
          "name": "FILL_CLOCKWISE",
          "value": "4",
          "description": "Turns the node into a radial bar. The [member texture_progress] fills clockwise. See [member radial_center_offset], [member radial_initial_angle] and [member radial_fill_degrees] to refine its behavior."
        },
        {
          "name": "FILL_COUNTER_CLOCKWISE",
          "value": "5",
          "description": "Turns the node into a radial bar. The [member texture_progress] fills counter-clockwise. See [member radial_center_offset], [member radial_initial_angle] and [member radial_fill_degrees] to refine its behavior."
        }
      ],
      "properties": [
        {
          "name": "fill_mode",
          "type": "int",
          "setter": "set_fill_mode",
          "getter": "get_fill_mode",
          "description": "The fill direction. Uses FILL_* constants."
        },
        {
          "name": "nine_patch_stretch",
          "type": "bool",
          "setter": "set_nine_patch_stretch",
          "getter": "get_nine_patch_stretch",
          "description": "If [code]true[/code] Godot treats the bar's textures like [NinePatchRect]. Use [code]stretch_margin_*[/code], like [member stretch_margin_bottom], to set up the nine patch's 3x3 grid. Default value: [code]false[/code]."
        },
        {
          "name": "radial_center_offset",
          "type": "Vector2",
          "setter": "set_radial_center_offset",
          "getter": "get_radial_center_offset",
          "description": "Offsets [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]."
        },
        {
          "name": "radial_fill_degrees",
          "type": "float",
          "setter": "set_fill_degrees",
          "getter": "get_fill_degrees",
          "description": "Upper limit for the fill of [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]. When the node's [code]value[/code] is equal to its [code]max_value[/code], the texture fills up to this angle.\n\t\t\tSee [member Range.value], [member Range.max_value]."
        },
        {
          "name": "radial_initial_angle",
          "type": "float",
          "setter": "set_radial_initial_angle",
          "getter": "get_radial_initial_angle",
          "description": "Starting angle for the fill of [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]. When the node's [code]value[/code] is equal to its [code]min_value[/code], the texture doesn't show up at all. When the [code]value[/code] increases, the texture fills and tends towards [member radial_fill_degrees]."
        },
        {
          "name": "stretch_margin_bottom",
          "type": "int",
          "setter": "set_stretch_margin",
          "getter": "get_stretch_margin",
          "description": "The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders."
        },
        {
          "name": "stretch_margin_left",
          "type": "int",
          "setter": "set_stretch_margin",
          "getter": "get_stretch_margin",
          "description": "The width of the 9-patch's left column."
        },
        {
          "name": "stretch_margin_right",
          "type": "int",
          "setter": "set_stretch_margin",
          "getter": "get_stretch_margin",
          "description": "The width of the 9-patch's right column."
        },
        {
          "name": "stretch_margin_top",
          "type": "int",
          "setter": "set_stretch_margin",
          "getter": "get_stretch_margin",
          "description": "The height of the 9-patch's top row."
        },
        {
          "name": "texture_over",
          "type": "Texture",
          "setter": "set_over_texture",
          "getter": "get_over_texture",
          "description": "[Texture] that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of [member texture_progress]."
        },
        {
          "name": "texture_progress",
          "type": "Texture",
          "setter": "set_progress_texture",
          "getter": "get_progress_texture",
          "description": "[Texture] that clips based on the node's [code]value[/code] and [member fill_mode]. As [code]value[/code] increased, the texture fills up. It shows entirely when [code]value[/code] reaches [code]max_value[/code]. It doesn't show at all if [code]value[/code] is equal to [code]min_value[/code].\n\t\t\tThe [code]value[/code] property comes from [Range]. See [member Range.value], [member Range.min_value], [member Range.max_value]."
        },
        {
          "name": "texture_under",
          "type": "Texture",
          "setter": "set_under_texture",
          "getter": "get_under_texture",
          "description": "[Texture] that draws under the progress bar. The bar's background."
        }
      ],
      "theme_properties": []
    },
    "FuncRef": {
      "name": "FuncRef",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Reference to a function in an object.",
      "description": "In GDScript, functions are not [i]first-class objects[/i]. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments.\n\t\tHowever, by creating a [FuncRef] using the [method @GDScript.funcref] function, a reference to a function in a given object can be created, passed around and called.",
      "methods": [
        {
          "name": "call_func",
          "qualifiers": "vararg",
          "description": "Calls the referenced function previously set by [method set_function] or [method @GDScript.funcref].",
          "return_type": "Variant",
          "arguments": []
        },
        {
          "name": "set_function",
          "description": "The name of the referenced function to call on the object, without parentheses or any parameters.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_instance",
          "description": "The object containing the referenced function. This object must be of a type actually inheriting from [Object], not a built-in type such as [int], [Vector2] or [Dictionary].",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "instance",
              "type": "Object",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "PacketPeerStream": {
      "name": "PacketPeerStream",
      "inherits": "PacketPeer",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Wrapper to use a PacketPeer over a StreamPeer.",
      "description": "PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.",
      "methods": [
        {
          "name": "get_input_buffer_max_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_output_buffer_max_size",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "set_input_buffer_max_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max_size_bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_output_buffer_max_size",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "max_size_bytes",
              "type": "int",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_stream_peer",
          "description": "Set the [StreamPeer] object to be wrapped.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "peer",
              "type": "Reference",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "DynamicFontData": {
      "name": "DynamicFontData",
      "inherits": "Resource",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Used with [DynamicFont] to describe the location of a font file.",
      "description": "Used with [DynamicFont] to describe the location of a vector font file for dynamic rendering at runtime.",
      "methods": [
        {
          "name": "get_font_path",
          "qualifiers": "const",
          "description": "Returns the font path.",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_font_path",
          "description": "Sets the font path.",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "font_path",
          "type": "String",
          "setter": "set_font_path",
          "getter": "get_font_path",
          "description": "The path to the vector font file."
        }
      ],
      "theme_properties": []
    },
    "RegExMatch": {
      "name": "RegExMatch",
      "inherits": "Reference",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Contains the results of a regex search.",
      "description": "Contains the results of a regex search. [method RegEx.search] returns an instance of [code]RegExMatch[/code] if it finds the search pattern in the [source] string.",
      "methods": [
        {
          "name": "get_end",
          "qualifiers": "const",
          "description": "Returns the end position of the match in the [source] string. An integer can be specified for numeric groups or a string for named groups. Returns -1 if that group wasn't found or doesn't exist. Defaults to 0 (whole pattern).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "Variant",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_group_count",
          "qualifiers": "const",
          "description": "Returns the number of numeric capturing groups.",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_names",
          "qualifiers": "const",
          "description": "Returns an array of names of named capturing groups.",
          "return_type": "Dictionary",
          "arguments": []
        },
        {
          "name": "get_start",
          "qualifiers": "const",
          "description": "Returns the starting position of the match in the [source] string. An integer can be specified for numeric groups or a string for named groups. Returns -1 if that group wasn't found or doesn't exist. Defaults to 0 (whole pattern).",
          "return_type": "int",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "Variant",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_string",
          "qualifiers": "const",
          "description": "Returns the result of the match in the [source] string. An integer can be specified for numeric groups or a string for named groups. Returns -1 if that group wasn't found or doesn't exist. Defaults to 0 (whole pattern).",
          "return_type": "String",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "Variant",
              "default_value": "0"
            }
          ]
        },
        {
          "name": "get_strings",
          "qualifiers": "const",
          "description": "Returns an [Array] of the matches in the [source] string.",
          "return_type": "Array",
          "arguments": []
        },
        {
          "name": "get_subject",
          "qualifiers": "const",
          "description": "Returns the [source] string used with the search pattern to find this matching result.",
          "return_type": "String",
          "arguments": []
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [],
      "theme_properties": []
    },
    "SpotLight": {
      "name": "SpotLight",
      "inherits": "Light",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "Spotlight [Light], such as a reflector spotlight or a lantern.",
      "description": "A SpotLight light is a type of [Light] node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light]. TODO: Image of a spotlight.",
      "methods": [],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "spot_angle",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "spot_angle_attenuation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "spot_attenuation",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        },
        {
          "name": "spot_range",
          "type": "float",
          "setter": "set_param",
          "getter": "get_param",
          "description": ""
        }
      ],
      "theme_properties": []
    },
    "VisualScriptBasicTypeConstant": {
      "name": "VisualScriptBasicTypeConstant",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "A Visual Script node representing a constant from the base types.",
      "description": "A Visual Script node representing a constant from base types, such as [Vector3.AXIS_X].",
      "methods": [
        {
          "name": "get_basic_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_basic_type_constant",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_basic_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_basic_type_constant",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "name",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [],
      "properties": [
        {
          "name": "basic_type",
          "type": "int",
          "setter": "set_basic_type",
          "getter": "get_basic_type",
          "enum": "Variant.Type",
          "description": "The type to get the constant from."
        },
        {
          "name": "constant",
          "type": "String",
          "setter": "set_basic_type_constant",
          "getter": "get_basic_type_constant",
          "description": "The name of the constant to return."
        }
      ],
      "theme_properties": []
    },
    "VisualScriptPropertyGet": {
      "name": "VisualScriptPropertyGet",
      "inherits": "VisualScriptNode",
      "category": "Core",
      "version": "3.0.alpha.custom_build",
      "brief_description": "",
      "description": "",
      "methods": [
        {
          "name": "get_base_path",
          "qualifiers": "const",
          "description": "",
          "return_type": "NodePath",
          "arguments": []
        },
        {
          "name": "get_base_script",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_base_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_basic_type",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_call_mode",
          "qualifiers": "const",
          "description": "",
          "return_type": "int",
          "arguments": []
        },
        {
          "name": "get_index",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "get_property",
          "qualifiers": "const",
          "description": "",
          "return_type": "String",
          "arguments": []
        },
        {
          "name": "set_base_path",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_path",
              "type": "NodePath",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_script",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_script",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_base_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "base_type",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_basic_type",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "basic_type",
              "type": "int",
              "enum": "Variant.Type",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_call_mode",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "mode",
              "type": "int",
              "enum": "VisualScriptPropertyGet.CallMode",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_index",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "index",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_property",
          "description": "",
          "return_type": "void",
          "qualifiers": "",
          "arguments": [
            {
              "index": "0",
              "name": "property",
              "type": "String",
              "default_value": ""
            }
          ]
        }
      ],
      "signals": [],
      "constants": [
        {
          "name": "CALL_MODE_SELF",
          "value": "0",
          "description": ""
        },
        {
          "name": "CALL_MODE_NODE_PATH",
          "value": "1",
          "description": ""
        },
        {
          "name": "CALL_MODE_INSTANCE",
          "value": "2",
          "description": ""
        }
      ],
      "properties": [
        {
          "name": "base_script",
          "type": "String",
          "setter": "set_base_script",
          "getter": "get_base_script",
          "description": ""
        },
        {
          "name": "base_type",
          "type": "String",
          "setter": "set_base_type",
          "getter": "get_base_type",
          "description": ""
        },
        {
          "name": "basic_type",
          "type": "int",
          "setter": "set_basic_type",
          "getter": "get_basic_type",
          "enum": "Variant.Type",
          "description": ""
        },
        {
          "name": "index",
          "type": "String",
          "setter": "set_index",
          "getter": "get_index",
          "description": ""
        },
        {
          "name": "node_path",
          "type": "NodePath",
          "setter": "set_base_path",
          "getter": "get_base_path",
          "description": ""
        },
        {
          "name": "property",
          "type": "String",
          "setter": "set_property",
          "getter": "get_property",
          "description": ""
        },
        {
          "name": "set_mode",
          "type": "int",
          "setter": "set_call_mode",
          "getter": "get_call_mode",
          "enum": "VisualScriptPropertyGet.CallMode",
          "description": ""
        },
        {
          "name": "type_cache",
          "type": "int",
          "setter": "_set_type_cache",
          "getter": "_get_type_cache",
          "enum": "Variant.Type",
          "description": ""
        }
      ],
      "theme_properties": []
    }
  },
  "version": "3.0.alpha"
}
